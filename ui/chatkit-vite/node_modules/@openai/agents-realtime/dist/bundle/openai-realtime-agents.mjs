var ri = Object.defineProperty;
var ss = (n) => {
  throw TypeError(n);
};
var si = (n, e, t) => e in n ? ri(n, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : n[e] = t;
var _ = (n, e, t) => si(n, typeof e != "symbol" ? e + "" : e, t), tr = (n, e, t) => e.has(n) || ss("Cannot " + t);
var o = (n, e, t) => (tr(n, e, "read from private field"), t ? t.call(n) : e.get(n)), I = (n, e, t) => e.has(n) ? ss("Cannot add the same private member more than once") : e instanceof WeakSet ? e.add(n) : e.set(n, t), v = (n, e, t, r) => (tr(n, e, "write to private field"), r ? r.call(n, t) : e.set(n, t), t), $ = (n, e, t) => (tr(n, e, "access private method"), t);
const pr = {
  version: "0.1.10"
};
async function jr(n) {
  try {
    return [null, await n()];
  } catch (e) {
    return [e, null];
  }
}
function ai(n, e) {
  const t = { ...n };
  return Object.defineProperties(t, {
    $brand: {
      value: "auto-parseable-response-format",
      enumerable: !1
    },
    $parseRaw: {
      value: e,
      enumerable: !1
    }
  }), t;
}
const ii = Symbol("Let zodToJsonSchema decide on which parser to use"), as = {
  name: void 0,
  $refStrategy: "root",
  effectStrategy: "input",
  pipeStrategy: "all",
  dateStrategy: "format:date-time",
  mapStrategy: "entries",
  nullableStrategy: "from-target",
  removeAdditionalStrategy: "passthrough",
  definitionPath: "definitions",
  target: "jsonSchema7",
  strictUnions: !1,
  errorMessages: !1,
  markdownDescription: !1,
  patternStrategy: "escape",
  applyRegexFlags: !1,
  emailStrategy: "format:email",
  base64Strategy: "contentEncoding:base64",
  nameStrategy: "ref"
}, oi = (n) => typeof n == "string" ? {
  ...as,
  basePath: ["#"],
  definitions: {},
  name: n
} : {
  ...as,
  basePath: ["#"],
  definitions: {},
  ...n
}, fr = (n) => "_def" in n ? n._def : n;
function ui(n) {
  if (!n)
    return !0;
  for (const e in n)
    return !1;
  return !0;
}
const ci = (n) => {
  const e = oi(n), t = e.name !== void 0 ? [...e.basePath, e.definitionPath, e.name] : e.basePath;
  return {
    ...e,
    currentPath: t,
    propertyPath: void 0,
    seenRefs: /* @__PURE__ */ new Set(),
    seen: new Map(Object.entries(e.definitions).map(([r, s]) => [
      fr(s),
      {
        def: fr(s),
        path: [...e.basePath, e.definitionPath, r],
        // Resolution of references will be forced even though seen, so it's ok that the schema is undefined here for now.
        jsonSchema: void 0
      }
    ]))
  };
};
function ta(n, e, t, r) {
  r != null && r.errorMessages && t && (n.errorMessage = {
    ...n.errorMessage,
    [e]: t
  });
}
function z(n, e, t, r, s) {
  n[e] = t, ta(n, e, r, s);
}
var q;
(function(n) {
  n.assertEqual = (s) => {
  };
  function e(s) {
  }
  n.assertIs = e;
  function t(s) {
    throw new Error();
  }
  n.assertNever = t, n.arrayToEnum = (s) => {
    const a = {};
    for (const i of s)
      a[i] = i;
    return a;
  }, n.getValidEnumValues = (s) => {
    const a = n.objectKeys(s).filter((u) => typeof s[s[u]] != "number"), i = {};
    for (const u of a)
      i[u] = s[u];
    return n.objectValues(i);
  }, n.objectValues = (s) => n.objectKeys(s).map(function(a) {
    return s[a];
  }), n.objectKeys = typeof Object.keys == "function" ? (s) => Object.keys(s) : (s) => {
    const a = [];
    for (const i in s)
      Object.prototype.hasOwnProperty.call(s, i) && a.push(i);
    return a;
  }, n.find = (s, a) => {
    for (const i of s)
      if (a(i))
        return i;
  }, n.isInteger = typeof Number.isInteger == "function" ? (s) => Number.isInteger(s) : (s) => typeof s == "number" && Number.isFinite(s) && Math.floor(s) === s;
  function r(s, a = " | ") {
    return s.map((i) => typeof i == "string" ? `'${i}'` : i).join(a);
  }
  n.joinValues = r, n.jsonStringifyReplacer = (s, a) => typeof a == "bigint" ? a.toString() : a;
})(q || (q = {}));
var is;
(function(n) {
  n.mergeShapes = (e, t) => ({
    ...e,
    ...t
    // second overwrites first
  });
})(is || (is = {}));
const k = q.arrayToEnum([
  "string",
  "nan",
  "number",
  "integer",
  "float",
  "boolean",
  "date",
  "bigint",
  "symbol",
  "function",
  "undefined",
  "null",
  "array",
  "object",
  "unknown",
  "promise",
  "void",
  "never",
  "map",
  "set"
]), Ue = (n) => {
  switch (typeof n) {
    case "undefined":
      return k.undefined;
    case "string":
      return k.string;
    case "number":
      return Number.isNaN(n) ? k.nan : k.number;
    case "boolean":
      return k.boolean;
    case "function":
      return k.function;
    case "bigint":
      return k.bigint;
    case "symbol":
      return k.symbol;
    case "object":
      return Array.isArray(n) ? k.array : n === null ? k.null : n.then && typeof n.then == "function" && n.catch && typeof n.catch == "function" ? k.promise : typeof Map < "u" && n instanceof Map ? k.map : typeof Set < "u" && n instanceof Set ? k.set : typeof Date < "u" && n instanceof Date ? k.date : k.object;
    default:
      return k.unknown;
  }
}, x = q.arrayToEnum([
  "invalid_type",
  "invalid_literal",
  "custom",
  "invalid_union",
  "invalid_union_discriminator",
  "invalid_enum_value",
  "unrecognized_keys",
  "invalid_arguments",
  "invalid_return_type",
  "invalid_date",
  "invalid_string",
  "too_small",
  "too_big",
  "invalid_intersection_types",
  "not_multiple_of",
  "not_finite"
]);
class Le extends Error {
  get errors() {
    return this.issues;
  }
  constructor(e) {
    super(), this.issues = [], this.addIssue = (r) => {
      this.issues = [...this.issues, r];
    }, this.addIssues = (r = []) => {
      this.issues = [...this.issues, ...r];
    };
    const t = new.target.prototype;
    Object.setPrototypeOf ? Object.setPrototypeOf(this, t) : this.__proto__ = t, this.name = "ZodError", this.issues = e;
  }
  format(e) {
    const t = e || function(a) {
      return a.message;
    }, r = { _errors: [] }, s = (a) => {
      for (const i of a.issues)
        if (i.code === "invalid_union")
          i.unionErrors.map(s);
        else if (i.code === "invalid_return_type")
          s(i.returnTypeError);
        else if (i.code === "invalid_arguments")
          s(i.argumentsError);
        else if (i.path.length === 0)
          r._errors.push(t(i));
        else {
          let u = r, l = 0;
          for (; l < i.path.length; ) {
            const c = i.path[l];
            l === i.path.length - 1 ? (u[c] = u[c] || { _errors: [] }, u[c]._errors.push(t(i))) : u[c] = u[c] || { _errors: [] }, u = u[c], l++;
          }
        }
    };
    return s(this), r;
  }
  static assert(e) {
    if (!(e instanceof Le))
      throw new Error(`Not a ZodError: ${e}`);
  }
  toString() {
    return this.message;
  }
  get message() {
    return JSON.stringify(this.issues, q.jsonStringifyReplacer, 2);
  }
  get isEmpty() {
    return this.issues.length === 0;
  }
  flatten(e = (t) => t.message) {
    const t = {}, r = [];
    for (const s of this.issues)
      s.path.length > 0 ? (t[s.path[0]] = t[s.path[0]] || [], t[s.path[0]].push(e(s))) : r.push(e(s));
    return { formErrors: r, fieldErrors: t };
  }
  get formErrors() {
    return this.flatten();
  }
}
Le.create = (n) => new Le(n);
const hr = (n, e) => {
  let t;
  switch (n.code) {
    case x.invalid_type:
      n.received === k.undefined ? t = "Required" : t = `Expected ${n.expected}, received ${n.received}`;
      break;
    case x.invalid_literal:
      t = `Invalid literal value, expected ${JSON.stringify(n.expected, q.jsonStringifyReplacer)}`;
      break;
    case x.unrecognized_keys:
      t = `Unrecognized key(s) in object: ${q.joinValues(n.keys, ", ")}`;
      break;
    case x.invalid_union:
      t = "Invalid input";
      break;
    case x.invalid_union_discriminator:
      t = `Invalid discriminator value. Expected ${q.joinValues(n.options)}`;
      break;
    case x.invalid_enum_value:
      t = `Invalid enum value. Expected ${q.joinValues(n.options)}, received '${n.received}'`;
      break;
    case x.invalid_arguments:
      t = "Invalid function arguments";
      break;
    case x.invalid_return_type:
      t = "Invalid function return type";
      break;
    case x.invalid_date:
      t = "Invalid date";
      break;
    case x.invalid_string:
      typeof n.validation == "object" ? "includes" in n.validation ? (t = `Invalid input: must include "${n.validation.includes}"`, typeof n.validation.position == "number" && (t = `${t} at one or more positions greater than or equal to ${n.validation.position}`)) : "startsWith" in n.validation ? t = `Invalid input: must start with "${n.validation.startsWith}"` : "endsWith" in n.validation ? t = `Invalid input: must end with "${n.validation.endsWith}"` : q.assertNever(n.validation) : n.validation !== "regex" ? t = `Invalid ${n.validation}` : t = "Invalid";
      break;
    case x.too_small:
      n.type === "array" ? t = `Array must contain ${n.exact ? "exactly" : n.inclusive ? "at least" : "more than"} ${n.minimum} element(s)` : n.type === "string" ? t = `String must contain ${n.exact ? "exactly" : n.inclusive ? "at least" : "over"} ${n.minimum} character(s)` : n.type === "number" ? t = `Number must be ${n.exact ? "exactly equal to " : n.inclusive ? "greater than or equal to " : "greater than "}${n.minimum}` : n.type === "date" ? t = `Date must be ${n.exact ? "exactly equal to " : n.inclusive ? "greater than or equal to " : "greater than "}${new Date(Number(n.minimum))}` : t = "Invalid input";
      break;
    case x.too_big:
      n.type === "array" ? t = `Array must contain ${n.exact ? "exactly" : n.inclusive ? "at most" : "less than"} ${n.maximum} element(s)` : n.type === "string" ? t = `String must contain ${n.exact ? "exactly" : n.inclusive ? "at most" : "under"} ${n.maximum} character(s)` : n.type === "number" ? t = `Number must be ${n.exact ? "exactly" : n.inclusive ? "less than or equal to" : "less than"} ${n.maximum}` : n.type === "bigint" ? t = `BigInt must be ${n.exact ? "exactly" : n.inclusive ? "less than or equal to" : "less than"} ${n.maximum}` : n.type === "date" ? t = `Date must be ${n.exact ? "exactly" : n.inclusive ? "smaller than or equal to" : "smaller than"} ${new Date(Number(n.maximum))}` : t = "Invalid input";
      break;
    case x.custom:
      t = "Invalid input";
      break;
    case x.invalid_intersection_types:
      t = "Intersection results could not be merged";
      break;
    case x.not_multiple_of:
      t = `Number must be a multiple of ${n.multipleOf}`;
      break;
    case x.not_finite:
      t = "Number must be finite";
      break;
    default:
      t = e.defaultError, q.assertNever(n);
  }
  return { message: t };
};
let di = hr;
function li() {
  return di;
}
const pi = (n) => {
  const { data: e, path: t, errorMaps: r, issueData: s } = n, a = [...t, ...s.path || []], i = {
    ...s,
    path: a
  };
  if (s.message !== void 0)
    return {
      ...s,
      path: a,
      message: s.message
    };
  let u = "";
  const l = r.filter((c) => !!c).slice().reverse();
  for (const c of l)
    u = c(i, { data: e, defaultError: u }).message;
  return {
    ...s,
    path: a,
    message: u
  };
};
function T(n, e) {
  const t = li(), r = pi({
    issueData: e,
    data: n.data,
    path: n.path,
    errorMaps: [
      n.common.contextualErrorMap,
      // contextual error map is first priority
      n.schemaErrorMap,
      // then schema-bound map if available
      t,
      // then global override map
      t === hr ? void 0 : hr
      // then global default map
    ].filter((s) => !!s)
  });
  n.common.issues.push(r);
}
class ue {
  constructor() {
    this.value = "valid";
  }
  dirty() {
    this.value === "valid" && (this.value = "dirty");
  }
  abort() {
    this.value !== "aborted" && (this.value = "aborted");
  }
  static mergeArray(e, t) {
    const r = [];
    for (const s of t) {
      if (s.status === "aborted")
        return P;
      s.status === "dirty" && e.dirty(), r.push(s.value);
    }
    return { status: e.value, value: r };
  }
  static async mergeObjectAsync(e, t) {
    const r = [];
    for (const s of t) {
      const a = await s.key, i = await s.value;
      r.push({
        key: a,
        value: i
      });
    }
    return ue.mergeObjectSync(e, r);
  }
  static mergeObjectSync(e, t) {
    const r = {};
    for (const s of t) {
      const { key: a, value: i } = s;
      if (a.status === "aborted" || i.status === "aborted")
        return P;
      a.status === "dirty" && e.dirty(), i.status === "dirty" && e.dirty(), a.value !== "__proto__" && (typeof i.value < "u" || s.alwaysSet) && (r[a.value] = i.value);
    }
    return { status: e.value, value: r };
  }
}
const P = Object.freeze({
  status: "aborted"
}), Bt = (n) => ({ status: "dirty", value: n }), be = (n) => ({ status: "valid", value: n }), os = (n) => n.status === "aborted", us = (n) => n.status === "dirty", Zt = (n) => n.status === "valid", Nn = (n) => typeof Promise < "u" && n instanceof Promise;
var C;
(function(n) {
  n.errToObj = (e) => typeof e == "string" ? { message: e } : e || {}, n.toString = (e) => typeof e == "string" ? e : e == null ? void 0 : e.message;
})(C || (C = {}));
class Ee {
  constructor(e, t, r, s) {
    this._cachedPath = [], this.parent = e, this.data = t, this._path = r, this._key = s;
  }
  get path() {
    return this._cachedPath.length || (Array.isArray(this._key) ? this._cachedPath.push(...this._path, ...this._key) : this._cachedPath.push(...this._path, this._key)), this._cachedPath;
  }
}
const cs = (n, e) => {
  if (Zt(e))
    return { success: !0, data: e.value };
  if (!n.common.issues.length)
    throw new Error("Validation failed but no issues detected.");
  return {
    success: !1,
    get error() {
      if (this._error)
        return this._error;
      const t = new Le(n.common.issues);
      return this._error = t, this._error;
    }
  };
};
function M(n) {
  if (!n)
    return {};
  const { errorMap: e, invalid_type_error: t, required_error: r, description: s } = n;
  if (e && (t || r))
    throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
  return e ? { errorMap: e, description: s } : { errorMap: (i, u) => {
    const { message: l } = n;
    return i.code === "invalid_enum_value" ? { message: l ?? u.defaultError } : typeof u.data > "u" ? { message: l ?? r ?? u.defaultError } : i.code !== "invalid_type" ? { message: u.defaultError } : { message: l ?? t ?? u.defaultError };
  }, description: s };
}
class Z {
  get description() {
    return this._def.description;
  }
  _getType(e) {
    return Ue(e.data);
  }
  _getOrReturnCtx(e, t) {
    return t || {
      common: e.parent.common,
      data: e.data,
      parsedType: Ue(e.data),
      schemaErrorMap: this._def.errorMap,
      path: e.path,
      parent: e.parent
    };
  }
  _processInputParams(e) {
    return {
      status: new ue(),
      ctx: {
        common: e.parent.common,
        data: e.data,
        parsedType: Ue(e.data),
        schemaErrorMap: this._def.errorMap,
        path: e.path,
        parent: e.parent
      }
    };
  }
  _parseSync(e) {
    const t = this._parse(e);
    if (Nn(t))
      throw new Error("Synchronous parse encountered promise.");
    return t;
  }
  _parseAsync(e) {
    const t = this._parse(e);
    return Promise.resolve(t);
  }
  parse(e, t) {
    const r = this.safeParse(e, t);
    if (r.success)
      return r.data;
    throw r.error;
  }
  safeParse(e, t) {
    const r = {
      common: {
        issues: [],
        async: (t == null ? void 0 : t.async) ?? !1,
        contextualErrorMap: t == null ? void 0 : t.errorMap
      },
      path: (t == null ? void 0 : t.path) || [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data: e,
      parsedType: Ue(e)
    }, s = this._parseSync({ data: e, path: r.path, parent: r });
    return cs(r, s);
  }
  "~validate"(e) {
    var r, s;
    const t = {
      common: {
        issues: [],
        async: !!this["~standard"].async
      },
      path: [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data: e,
      parsedType: Ue(e)
    };
    if (!this["~standard"].async)
      try {
        const a = this._parseSync({ data: e, path: [], parent: t });
        return Zt(a) ? {
          value: a.value
        } : {
          issues: t.common.issues
        };
      } catch (a) {
        (s = (r = a == null ? void 0 : a.message) == null ? void 0 : r.toLowerCase()) != null && s.includes("encountered") && (this["~standard"].async = !0), t.common = {
          issues: [],
          async: !0
        };
      }
    return this._parseAsync({ data: e, path: [], parent: t }).then((a) => Zt(a) ? {
      value: a.value
    } : {
      issues: t.common.issues
    });
  }
  async parseAsync(e, t) {
    const r = await this.safeParseAsync(e, t);
    if (r.success)
      return r.data;
    throw r.error;
  }
  async safeParseAsync(e, t) {
    const r = {
      common: {
        issues: [],
        contextualErrorMap: t == null ? void 0 : t.errorMap,
        async: !0
      },
      path: (t == null ? void 0 : t.path) || [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data: e,
      parsedType: Ue(e)
    }, s = this._parse({ data: e, path: r.path, parent: r }), a = await (Nn(s) ? s : Promise.resolve(s));
    return cs(r, a);
  }
  refine(e, t) {
    const r = (s) => typeof t == "string" || typeof t > "u" ? { message: t } : typeof t == "function" ? t(s) : t;
    return this._refinement((s, a) => {
      const i = e(s), u = () => a.addIssue({
        code: x.custom,
        ...r(s)
      });
      return typeof Promise < "u" && i instanceof Promise ? i.then((l) => l ? !0 : (u(), !1)) : i ? !0 : (u(), !1);
    });
  }
  refinement(e, t) {
    return this._refinement((r, s) => e(r) ? !0 : (s.addIssue(typeof t == "function" ? t(r, s) : t), !1));
  }
  _refinement(e) {
    return new mt({
      schema: this,
      typeName: S.ZodEffects,
      effect: { type: "refinement", refinement: e }
    });
  }
  superRefine(e) {
    return this._refinement(e);
  }
  constructor(e) {
    this.spa = this.safeParseAsync, this._def = e, this.parse = this.parse.bind(this), this.safeParse = this.safeParse.bind(this), this.parseAsync = this.parseAsync.bind(this), this.safeParseAsync = this.safeParseAsync.bind(this), this.spa = this.spa.bind(this), this.refine = this.refine.bind(this), this.refinement = this.refinement.bind(this), this.superRefine = this.superRefine.bind(this), this.optional = this.optional.bind(this), this.nullable = this.nullable.bind(this), this.nullish = this.nullish.bind(this), this.array = this.array.bind(this), this.promise = this.promise.bind(this), this.or = this.or.bind(this), this.and = this.and.bind(this), this.transform = this.transform.bind(this), this.brand = this.brand.bind(this), this.default = this.default.bind(this), this.catch = this.catch.bind(this), this.describe = this.describe.bind(this), this.pipe = this.pipe.bind(this), this.readonly = this.readonly.bind(this), this.isNullable = this.isNullable.bind(this), this.isOptional = this.isOptional.bind(this), this["~standard"] = {
      version: 1,
      vendor: "zod",
      validate: (t) => this["~validate"](t)
    };
  }
  optional() {
    return Fe.create(this, this._def);
  }
  nullable() {
    return gt.create(this, this._def);
  }
  nullish() {
    return this.nullable().optional();
  }
  array() {
    return Ce.create(this);
  }
  promise() {
    return Ln.create(this, this._def);
  }
  or(e) {
    return Pn.create([this, e], this._def);
  }
  and(e) {
    return Mn.create(this, e, this._def);
  }
  transform(e) {
    return new mt({
      ...M(this._def),
      schema: this,
      typeName: S.ZodEffects,
      effect: { type: "transform", transform: e }
    });
  }
  default(e) {
    const t = typeof e == "function" ? e : () => e;
    return new Zn({
      ...M(this._def),
      innerType: this,
      defaultValue: t,
      typeName: S.ZodDefault
    });
  }
  brand() {
    return new aa({
      typeName: S.ZodBranded,
      type: this,
      ...M(this._def)
    });
  }
  catch(e) {
    const t = typeof e == "function" ? e : () => e;
    return new Un({
      ...M(this._def),
      innerType: this,
      catchValue: t,
      typeName: S.ZodCatch
    });
  }
  describe(e) {
    const t = this.constructor;
    return new t({
      ...this._def,
      description: e
    });
  }
  pipe(e) {
    return Fr.create(this, e);
  }
  readonly() {
    return qn.create(this);
  }
  isOptional() {
    return this.safeParse(void 0).success;
  }
  isNullable() {
    return this.safeParse(null).success;
  }
}
const fi = /^c[^\s-]{8,}$/i, hi = /^[0-9a-z]+$/, mi = /^[0-9A-HJKMNP-TV-Z]{26}$/i, gi = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i, _i = /^[a-z0-9_-]{21}$/i, yi = /^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$/, vi = /^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/, wi = /^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i, bi = "^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$";
let nr;
const xi = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/, Si = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/(3[0-2]|[12]?[0-9])$/, Ii = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/, Ti = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/, ki = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/, Ai = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/, na = "((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))", Ci = new RegExp(`^${na}$`);
function ra(n) {
  let e = "[0-5]\\d";
  n.precision ? e = `${e}\\.\\d{${n.precision}}` : n.precision == null && (e = `${e}(\\.\\d+)?`);
  const t = n.precision ? "+" : "?";
  return `([01]\\d|2[0-3]):[0-5]\\d(:${e})${t}`;
}
function Ei(n) {
  return new RegExp(`^${ra(n)}$`);
}
function Oi(n) {
  let e = `${na}T${ra(n)}`;
  const t = [];
  return t.push(n.local ? "Z?" : "Z"), n.offset && t.push("([+-]\\d{2}:?\\d{2})"), e = `${e}(${t.join("|")})`, new RegExp(`^${e}$`);
}
function Ri(n, e) {
  return !!((e === "v4" || !e) && xi.test(n) || (e === "v6" || !e) && Ii.test(n));
}
function Ni(n, e) {
  if (!yi.test(n))
    return !1;
  try {
    const [t] = n.split("."), r = t.replace(/-/g, "+").replace(/_/g, "/").padEnd(t.length + (4 - t.length % 4) % 4, "="), s = JSON.parse(atob(r));
    return !(typeof s != "object" || s === null || "typ" in s && (s == null ? void 0 : s.typ) !== "JWT" || !s.alg || e && s.alg !== e);
  } catch {
    return !1;
  }
}
function Di(n, e) {
  return !!((e === "v4" || !e) && Si.test(n) || (e === "v6" || !e) && Ti.test(n));
}
class $e extends Z {
  _parse(e) {
    if (this._def.coerce && (e.data = String(e.data)), this._getType(e) !== k.string) {
      const a = this._getOrReturnCtx(e);
      return T(a, {
        code: x.invalid_type,
        expected: k.string,
        received: a.parsedType
      }), P;
    }
    const r = new ue();
    let s;
    for (const a of this._def.checks)
      if (a.kind === "min")
        e.data.length < a.value && (s = this._getOrReturnCtx(e, s), T(s, {
          code: x.too_small,
          minimum: a.value,
          type: "string",
          inclusive: !0,
          exact: !1,
          message: a.message
        }), r.dirty());
      else if (a.kind === "max")
        e.data.length > a.value && (s = this._getOrReturnCtx(e, s), T(s, {
          code: x.too_big,
          maximum: a.value,
          type: "string",
          inclusive: !0,
          exact: !1,
          message: a.message
        }), r.dirty());
      else if (a.kind === "length") {
        const i = e.data.length > a.value, u = e.data.length < a.value;
        (i || u) && (s = this._getOrReturnCtx(e, s), i ? T(s, {
          code: x.too_big,
          maximum: a.value,
          type: "string",
          inclusive: !0,
          exact: !0,
          message: a.message
        }) : u && T(s, {
          code: x.too_small,
          minimum: a.value,
          type: "string",
          inclusive: !0,
          exact: !0,
          message: a.message
        }), r.dirty());
      } else if (a.kind === "email")
        wi.test(e.data) || (s = this._getOrReturnCtx(e, s), T(s, {
          validation: "email",
          code: x.invalid_string,
          message: a.message
        }), r.dirty());
      else if (a.kind === "emoji")
        nr || (nr = new RegExp(bi, "u")), nr.test(e.data) || (s = this._getOrReturnCtx(e, s), T(s, {
          validation: "emoji",
          code: x.invalid_string,
          message: a.message
        }), r.dirty());
      else if (a.kind === "uuid")
        gi.test(e.data) || (s = this._getOrReturnCtx(e, s), T(s, {
          validation: "uuid",
          code: x.invalid_string,
          message: a.message
        }), r.dirty());
      else if (a.kind === "nanoid")
        _i.test(e.data) || (s = this._getOrReturnCtx(e, s), T(s, {
          validation: "nanoid",
          code: x.invalid_string,
          message: a.message
        }), r.dirty());
      else if (a.kind === "cuid")
        fi.test(e.data) || (s = this._getOrReturnCtx(e, s), T(s, {
          validation: "cuid",
          code: x.invalid_string,
          message: a.message
        }), r.dirty());
      else if (a.kind === "cuid2")
        hi.test(e.data) || (s = this._getOrReturnCtx(e, s), T(s, {
          validation: "cuid2",
          code: x.invalid_string,
          message: a.message
        }), r.dirty());
      else if (a.kind === "ulid")
        mi.test(e.data) || (s = this._getOrReturnCtx(e, s), T(s, {
          validation: "ulid",
          code: x.invalid_string,
          message: a.message
        }), r.dirty());
      else if (a.kind === "url")
        try {
          new URL(e.data);
        } catch {
          s = this._getOrReturnCtx(e, s), T(s, {
            validation: "url",
            code: x.invalid_string,
            message: a.message
          }), r.dirty();
        }
      else a.kind === "regex" ? (a.regex.lastIndex = 0, a.regex.test(e.data) || (s = this._getOrReturnCtx(e, s), T(s, {
        validation: "regex",
        code: x.invalid_string,
        message: a.message
      }), r.dirty())) : a.kind === "trim" ? e.data = e.data.trim() : a.kind === "includes" ? e.data.includes(a.value, a.position) || (s = this._getOrReturnCtx(e, s), T(s, {
        code: x.invalid_string,
        validation: { includes: a.value, position: a.position },
        message: a.message
      }), r.dirty()) : a.kind === "toLowerCase" ? e.data = e.data.toLowerCase() : a.kind === "toUpperCase" ? e.data = e.data.toUpperCase() : a.kind === "startsWith" ? e.data.startsWith(a.value) || (s = this._getOrReturnCtx(e, s), T(s, {
        code: x.invalid_string,
        validation: { startsWith: a.value },
        message: a.message
      }), r.dirty()) : a.kind === "endsWith" ? e.data.endsWith(a.value) || (s = this._getOrReturnCtx(e, s), T(s, {
        code: x.invalid_string,
        validation: { endsWith: a.value },
        message: a.message
      }), r.dirty()) : a.kind === "datetime" ? Oi(a).test(e.data) || (s = this._getOrReturnCtx(e, s), T(s, {
        code: x.invalid_string,
        validation: "datetime",
        message: a.message
      }), r.dirty()) : a.kind === "date" ? Ci.test(e.data) || (s = this._getOrReturnCtx(e, s), T(s, {
        code: x.invalid_string,
        validation: "date",
        message: a.message
      }), r.dirty()) : a.kind === "time" ? Ei(a).test(e.data) || (s = this._getOrReturnCtx(e, s), T(s, {
        code: x.invalid_string,
        validation: "time",
        message: a.message
      }), r.dirty()) : a.kind === "duration" ? vi.test(e.data) || (s = this._getOrReturnCtx(e, s), T(s, {
        validation: "duration",
        code: x.invalid_string,
        message: a.message
      }), r.dirty()) : a.kind === "ip" ? Ri(e.data, a.version) || (s = this._getOrReturnCtx(e, s), T(s, {
        validation: "ip",
        code: x.invalid_string,
        message: a.message
      }), r.dirty()) : a.kind === "jwt" ? Ni(e.data, a.alg) || (s = this._getOrReturnCtx(e, s), T(s, {
        validation: "jwt",
        code: x.invalid_string,
        message: a.message
      }), r.dirty()) : a.kind === "cidr" ? Di(e.data, a.version) || (s = this._getOrReturnCtx(e, s), T(s, {
        validation: "cidr",
        code: x.invalid_string,
        message: a.message
      }), r.dirty()) : a.kind === "base64" ? ki.test(e.data) || (s = this._getOrReturnCtx(e, s), T(s, {
        validation: "base64",
        code: x.invalid_string,
        message: a.message
      }), r.dirty()) : a.kind === "base64url" ? Ai.test(e.data) || (s = this._getOrReturnCtx(e, s), T(s, {
        validation: "base64url",
        code: x.invalid_string,
        message: a.message
      }), r.dirty()) : q.assertNever(a);
    return { status: r.value, value: e.data };
  }
  _regex(e, t, r) {
    return this.refinement((s) => e.test(s), {
      validation: t,
      code: x.invalid_string,
      ...C.errToObj(r)
    });
  }
  _addCheck(e) {
    return new $e({
      ...this._def,
      checks: [...this._def.checks, e]
    });
  }
  email(e) {
    return this._addCheck({ kind: "email", ...C.errToObj(e) });
  }
  url(e) {
    return this._addCheck({ kind: "url", ...C.errToObj(e) });
  }
  emoji(e) {
    return this._addCheck({ kind: "emoji", ...C.errToObj(e) });
  }
  uuid(e) {
    return this._addCheck({ kind: "uuid", ...C.errToObj(e) });
  }
  nanoid(e) {
    return this._addCheck({ kind: "nanoid", ...C.errToObj(e) });
  }
  cuid(e) {
    return this._addCheck({ kind: "cuid", ...C.errToObj(e) });
  }
  cuid2(e) {
    return this._addCheck({ kind: "cuid2", ...C.errToObj(e) });
  }
  ulid(e) {
    return this._addCheck({ kind: "ulid", ...C.errToObj(e) });
  }
  base64(e) {
    return this._addCheck({ kind: "base64", ...C.errToObj(e) });
  }
  base64url(e) {
    return this._addCheck({
      kind: "base64url",
      ...C.errToObj(e)
    });
  }
  jwt(e) {
    return this._addCheck({ kind: "jwt", ...C.errToObj(e) });
  }
  ip(e) {
    return this._addCheck({ kind: "ip", ...C.errToObj(e) });
  }
  cidr(e) {
    return this._addCheck({ kind: "cidr", ...C.errToObj(e) });
  }
  datetime(e) {
    return typeof e == "string" ? this._addCheck({
      kind: "datetime",
      precision: null,
      offset: !1,
      local: !1,
      message: e
    }) : this._addCheck({
      kind: "datetime",
      precision: typeof (e == null ? void 0 : e.precision) > "u" ? null : e == null ? void 0 : e.precision,
      offset: (e == null ? void 0 : e.offset) ?? !1,
      local: (e == null ? void 0 : e.local) ?? !1,
      ...C.errToObj(e == null ? void 0 : e.message)
    });
  }
  date(e) {
    return this._addCheck({ kind: "date", message: e });
  }
  time(e) {
    return typeof e == "string" ? this._addCheck({
      kind: "time",
      precision: null,
      message: e
    }) : this._addCheck({
      kind: "time",
      precision: typeof (e == null ? void 0 : e.precision) > "u" ? null : e == null ? void 0 : e.precision,
      ...C.errToObj(e == null ? void 0 : e.message)
    });
  }
  duration(e) {
    return this._addCheck({ kind: "duration", ...C.errToObj(e) });
  }
  regex(e, t) {
    return this._addCheck({
      kind: "regex",
      regex: e,
      ...C.errToObj(t)
    });
  }
  includes(e, t) {
    return this._addCheck({
      kind: "includes",
      value: e,
      position: t == null ? void 0 : t.position,
      ...C.errToObj(t == null ? void 0 : t.message)
    });
  }
  startsWith(e, t) {
    return this._addCheck({
      kind: "startsWith",
      value: e,
      ...C.errToObj(t)
    });
  }
  endsWith(e, t) {
    return this._addCheck({
      kind: "endsWith",
      value: e,
      ...C.errToObj(t)
    });
  }
  min(e, t) {
    return this._addCheck({
      kind: "min",
      value: e,
      ...C.errToObj(t)
    });
  }
  max(e, t) {
    return this._addCheck({
      kind: "max",
      value: e,
      ...C.errToObj(t)
    });
  }
  length(e, t) {
    return this._addCheck({
      kind: "length",
      value: e,
      ...C.errToObj(t)
    });
  }
  /**
   * Equivalent to `.min(1)`
   */
  nonempty(e) {
    return this.min(1, C.errToObj(e));
  }
  trim() {
    return new $e({
      ...this._def,
      checks: [...this._def.checks, { kind: "trim" }]
    });
  }
  toLowerCase() {
    return new $e({
      ...this._def,
      checks: [...this._def.checks, { kind: "toLowerCase" }]
    });
  }
  toUpperCase() {
    return new $e({
      ...this._def,
      checks: [...this._def.checks, { kind: "toUpperCase" }]
    });
  }
  get isDatetime() {
    return !!this._def.checks.find((e) => e.kind === "datetime");
  }
  get isDate() {
    return !!this._def.checks.find((e) => e.kind === "date");
  }
  get isTime() {
    return !!this._def.checks.find((e) => e.kind === "time");
  }
  get isDuration() {
    return !!this._def.checks.find((e) => e.kind === "duration");
  }
  get isEmail() {
    return !!this._def.checks.find((e) => e.kind === "email");
  }
  get isURL() {
    return !!this._def.checks.find((e) => e.kind === "url");
  }
  get isEmoji() {
    return !!this._def.checks.find((e) => e.kind === "emoji");
  }
  get isUUID() {
    return !!this._def.checks.find((e) => e.kind === "uuid");
  }
  get isNANOID() {
    return !!this._def.checks.find((e) => e.kind === "nanoid");
  }
  get isCUID() {
    return !!this._def.checks.find((e) => e.kind === "cuid");
  }
  get isCUID2() {
    return !!this._def.checks.find((e) => e.kind === "cuid2");
  }
  get isULID() {
    return !!this._def.checks.find((e) => e.kind === "ulid");
  }
  get isIP() {
    return !!this._def.checks.find((e) => e.kind === "ip");
  }
  get isCIDR() {
    return !!this._def.checks.find((e) => e.kind === "cidr");
  }
  get isBase64() {
    return !!this._def.checks.find((e) => e.kind === "base64");
  }
  get isBase64url() {
    return !!this._def.checks.find((e) => e.kind === "base64url");
  }
  get minLength() {
    let e = null;
    for (const t of this._def.checks)
      t.kind === "min" && (e === null || t.value > e) && (e = t.value);
    return e;
  }
  get maxLength() {
    let e = null;
    for (const t of this._def.checks)
      t.kind === "max" && (e === null || t.value < e) && (e = t.value);
    return e;
  }
}
$e.create = (n) => new $e({
  checks: [],
  typeName: S.ZodString,
  coerce: (n == null ? void 0 : n.coerce) ?? !1,
  ...M(n)
});
function Pi(n, e) {
  const t = (n.toString().split(".")[1] || "").length, r = (e.toString().split(".")[1] || "").length, s = t > r ? t : r, a = Number.parseInt(n.toFixed(s).replace(".", "")), i = Number.parseInt(e.toFixed(s).replace(".", ""));
  return a % i / 10 ** s;
}
class Ut extends Z {
  constructor() {
    super(...arguments), this.min = this.gte, this.max = this.lte, this.step = this.multipleOf;
  }
  _parse(e) {
    if (this._def.coerce && (e.data = Number(e.data)), this._getType(e) !== k.number) {
      const a = this._getOrReturnCtx(e);
      return T(a, {
        code: x.invalid_type,
        expected: k.number,
        received: a.parsedType
      }), P;
    }
    let r;
    const s = new ue();
    for (const a of this._def.checks)
      a.kind === "int" ? q.isInteger(e.data) || (r = this._getOrReturnCtx(e, r), T(r, {
        code: x.invalid_type,
        expected: "integer",
        received: "float",
        message: a.message
      }), s.dirty()) : a.kind === "min" ? (a.inclusive ? e.data < a.value : e.data <= a.value) && (r = this._getOrReturnCtx(e, r), T(r, {
        code: x.too_small,
        minimum: a.value,
        type: "number",
        inclusive: a.inclusive,
        exact: !1,
        message: a.message
      }), s.dirty()) : a.kind === "max" ? (a.inclusive ? e.data > a.value : e.data >= a.value) && (r = this._getOrReturnCtx(e, r), T(r, {
        code: x.too_big,
        maximum: a.value,
        type: "number",
        inclusive: a.inclusive,
        exact: !1,
        message: a.message
      }), s.dirty()) : a.kind === "multipleOf" ? Pi(e.data, a.value) !== 0 && (r = this._getOrReturnCtx(e, r), T(r, {
        code: x.not_multiple_of,
        multipleOf: a.value,
        message: a.message
      }), s.dirty()) : a.kind === "finite" ? Number.isFinite(e.data) || (r = this._getOrReturnCtx(e, r), T(r, {
        code: x.not_finite,
        message: a.message
      }), s.dirty()) : q.assertNever(a);
    return { status: s.value, value: e.data };
  }
  gte(e, t) {
    return this.setLimit("min", e, !0, C.toString(t));
  }
  gt(e, t) {
    return this.setLimit("min", e, !1, C.toString(t));
  }
  lte(e, t) {
    return this.setLimit("max", e, !0, C.toString(t));
  }
  lt(e, t) {
    return this.setLimit("max", e, !1, C.toString(t));
  }
  setLimit(e, t, r, s) {
    return new Ut({
      ...this._def,
      checks: [
        ...this._def.checks,
        {
          kind: e,
          value: t,
          inclusive: r,
          message: C.toString(s)
        }
      ]
    });
  }
  _addCheck(e) {
    return new Ut({
      ...this._def,
      checks: [...this._def.checks, e]
    });
  }
  int(e) {
    return this._addCheck({
      kind: "int",
      message: C.toString(e)
    });
  }
  positive(e) {
    return this._addCheck({
      kind: "min",
      value: 0,
      inclusive: !1,
      message: C.toString(e)
    });
  }
  negative(e) {
    return this._addCheck({
      kind: "max",
      value: 0,
      inclusive: !1,
      message: C.toString(e)
    });
  }
  nonpositive(e) {
    return this._addCheck({
      kind: "max",
      value: 0,
      inclusive: !0,
      message: C.toString(e)
    });
  }
  nonnegative(e) {
    return this._addCheck({
      kind: "min",
      value: 0,
      inclusive: !0,
      message: C.toString(e)
    });
  }
  multipleOf(e, t) {
    return this._addCheck({
      kind: "multipleOf",
      value: e,
      message: C.toString(t)
    });
  }
  finite(e) {
    return this._addCheck({
      kind: "finite",
      message: C.toString(e)
    });
  }
  safe(e) {
    return this._addCheck({
      kind: "min",
      inclusive: !0,
      value: Number.MIN_SAFE_INTEGER,
      message: C.toString(e)
    })._addCheck({
      kind: "max",
      inclusive: !0,
      value: Number.MAX_SAFE_INTEGER,
      message: C.toString(e)
    });
  }
  get minValue() {
    let e = null;
    for (const t of this._def.checks)
      t.kind === "min" && (e === null || t.value > e) && (e = t.value);
    return e;
  }
  get maxValue() {
    let e = null;
    for (const t of this._def.checks)
      t.kind === "max" && (e === null || t.value < e) && (e = t.value);
    return e;
  }
  get isInt() {
    return !!this._def.checks.find((e) => e.kind === "int" || e.kind === "multipleOf" && q.isInteger(e.value));
  }
  get isFinite() {
    let e = null, t = null;
    for (const r of this._def.checks) {
      if (r.kind === "finite" || r.kind === "int" || r.kind === "multipleOf")
        return !0;
      r.kind === "min" ? (t === null || r.value > t) && (t = r.value) : r.kind === "max" && (e === null || r.value < e) && (e = r.value);
    }
    return Number.isFinite(t) && Number.isFinite(e);
  }
}
Ut.create = (n) => new Ut({
  checks: [],
  typeName: S.ZodNumber,
  coerce: (n == null ? void 0 : n.coerce) || !1,
  ...M(n)
});
class zt extends Z {
  constructor() {
    super(...arguments), this.min = this.gte, this.max = this.lte;
  }
  _parse(e) {
    if (this._def.coerce)
      try {
        e.data = BigInt(e.data);
      } catch {
        return this._getInvalidInput(e);
      }
    if (this._getType(e) !== k.bigint)
      return this._getInvalidInput(e);
    let r;
    const s = new ue();
    for (const a of this._def.checks)
      a.kind === "min" ? (a.inclusive ? e.data < a.value : e.data <= a.value) && (r = this._getOrReturnCtx(e, r), T(r, {
        code: x.too_small,
        type: "bigint",
        minimum: a.value,
        inclusive: a.inclusive,
        message: a.message
      }), s.dirty()) : a.kind === "max" ? (a.inclusive ? e.data > a.value : e.data >= a.value) && (r = this._getOrReturnCtx(e, r), T(r, {
        code: x.too_big,
        type: "bigint",
        maximum: a.value,
        inclusive: a.inclusive,
        message: a.message
      }), s.dirty()) : a.kind === "multipleOf" ? e.data % a.value !== BigInt(0) && (r = this._getOrReturnCtx(e, r), T(r, {
        code: x.not_multiple_of,
        multipleOf: a.value,
        message: a.message
      }), s.dirty()) : q.assertNever(a);
    return { status: s.value, value: e.data };
  }
  _getInvalidInput(e) {
    const t = this._getOrReturnCtx(e);
    return T(t, {
      code: x.invalid_type,
      expected: k.bigint,
      received: t.parsedType
    }), P;
  }
  gte(e, t) {
    return this.setLimit("min", e, !0, C.toString(t));
  }
  gt(e, t) {
    return this.setLimit("min", e, !1, C.toString(t));
  }
  lte(e, t) {
    return this.setLimit("max", e, !0, C.toString(t));
  }
  lt(e, t) {
    return this.setLimit("max", e, !1, C.toString(t));
  }
  setLimit(e, t, r, s) {
    return new zt({
      ...this._def,
      checks: [
        ...this._def.checks,
        {
          kind: e,
          value: t,
          inclusive: r,
          message: C.toString(s)
        }
      ]
    });
  }
  _addCheck(e) {
    return new zt({
      ...this._def,
      checks: [...this._def.checks, e]
    });
  }
  positive(e) {
    return this._addCheck({
      kind: "min",
      value: BigInt(0),
      inclusive: !1,
      message: C.toString(e)
    });
  }
  negative(e) {
    return this._addCheck({
      kind: "max",
      value: BigInt(0),
      inclusive: !1,
      message: C.toString(e)
    });
  }
  nonpositive(e) {
    return this._addCheck({
      kind: "max",
      value: BigInt(0),
      inclusive: !0,
      message: C.toString(e)
    });
  }
  nonnegative(e) {
    return this._addCheck({
      kind: "min",
      value: BigInt(0),
      inclusive: !0,
      message: C.toString(e)
    });
  }
  multipleOf(e, t) {
    return this._addCheck({
      kind: "multipleOf",
      value: e,
      message: C.toString(t)
    });
  }
  get minValue() {
    let e = null;
    for (const t of this._def.checks)
      t.kind === "min" && (e === null || t.value > e) && (e = t.value);
    return e;
  }
  get maxValue() {
    let e = null;
    for (const t of this._def.checks)
      t.kind === "max" && (e === null || t.value < e) && (e = t.value);
    return e;
  }
}
zt.create = (n) => new zt({
  checks: [],
  typeName: S.ZodBigInt,
  coerce: (n == null ? void 0 : n.coerce) ?? !1,
  ...M(n)
});
class mr extends Z {
  _parse(e) {
    if (this._def.coerce && (e.data = !!e.data), this._getType(e) !== k.boolean) {
      const r = this._getOrReturnCtx(e);
      return T(r, {
        code: x.invalid_type,
        expected: k.boolean,
        received: r.parsedType
      }), P;
    }
    return be(e.data);
  }
}
mr.create = (n) => new mr({
  typeName: S.ZodBoolean,
  coerce: (n == null ? void 0 : n.coerce) || !1,
  ...M(n)
});
class Dn extends Z {
  _parse(e) {
    if (this._def.coerce && (e.data = new Date(e.data)), this._getType(e) !== k.date) {
      const a = this._getOrReturnCtx(e);
      return T(a, {
        code: x.invalid_type,
        expected: k.date,
        received: a.parsedType
      }), P;
    }
    if (Number.isNaN(e.data.getTime())) {
      const a = this._getOrReturnCtx(e);
      return T(a, {
        code: x.invalid_date
      }), P;
    }
    const r = new ue();
    let s;
    for (const a of this._def.checks)
      a.kind === "min" ? e.data.getTime() < a.value && (s = this._getOrReturnCtx(e, s), T(s, {
        code: x.too_small,
        message: a.message,
        inclusive: !0,
        exact: !1,
        minimum: a.value,
        type: "date"
      }), r.dirty()) : a.kind === "max" ? e.data.getTime() > a.value && (s = this._getOrReturnCtx(e, s), T(s, {
        code: x.too_big,
        message: a.message,
        inclusive: !0,
        exact: !1,
        maximum: a.value,
        type: "date"
      }), r.dirty()) : q.assertNever(a);
    return {
      status: r.value,
      value: new Date(e.data.getTime())
    };
  }
  _addCheck(e) {
    return new Dn({
      ...this._def,
      checks: [...this._def.checks, e]
    });
  }
  min(e, t) {
    return this._addCheck({
      kind: "min",
      value: e.getTime(),
      message: C.toString(t)
    });
  }
  max(e, t) {
    return this._addCheck({
      kind: "max",
      value: e.getTime(),
      message: C.toString(t)
    });
  }
  get minDate() {
    let e = null;
    for (const t of this._def.checks)
      t.kind === "min" && (e === null || t.value > e) && (e = t.value);
    return e != null ? new Date(e) : null;
  }
  get maxDate() {
    let e = null;
    for (const t of this._def.checks)
      t.kind === "max" && (e === null || t.value < e) && (e = t.value);
    return e != null ? new Date(e) : null;
  }
}
Dn.create = (n) => new Dn({
  checks: [],
  coerce: (n == null ? void 0 : n.coerce) || !1,
  typeName: S.ZodDate,
  ...M(n)
});
class ds extends Z {
  _parse(e) {
    if (this._getType(e) !== k.symbol) {
      const r = this._getOrReturnCtx(e);
      return T(r, {
        code: x.invalid_type,
        expected: k.symbol,
        received: r.parsedType
      }), P;
    }
    return be(e.data);
  }
}
ds.create = (n) => new ds({
  typeName: S.ZodSymbol,
  ...M(n)
});
class gr extends Z {
  _parse(e) {
    if (this._getType(e) !== k.undefined) {
      const r = this._getOrReturnCtx(e);
      return T(r, {
        code: x.invalid_type,
        expected: k.undefined,
        received: r.parsedType
      }), P;
    }
    return be(e.data);
  }
}
gr.create = (n) => new gr({
  typeName: S.ZodUndefined,
  ...M(n)
});
class _r extends Z {
  _parse(e) {
    if (this._getType(e) !== k.null) {
      const r = this._getOrReturnCtx(e);
      return T(r, {
        code: x.invalid_type,
        expected: k.null,
        received: r.parsedType
      }), P;
    }
    return be(e.data);
  }
}
_r.create = (n) => new _r({
  typeName: S.ZodNull,
  ...M(n)
});
class yr extends Z {
  constructor() {
    super(...arguments), this._any = !0;
  }
  _parse(e) {
    return be(e.data);
  }
}
yr.create = (n) => new yr({
  typeName: S.ZodAny,
  ...M(n)
});
class ls extends Z {
  constructor() {
    super(...arguments), this._unknown = !0;
  }
  _parse(e) {
    return be(e.data);
  }
}
ls.create = (n) => new ls({
  typeName: S.ZodUnknown,
  ...M(n)
});
class We extends Z {
  _parse(e) {
    const t = this._getOrReturnCtx(e);
    return T(t, {
      code: x.invalid_type,
      expected: k.never,
      received: t.parsedType
    }), P;
  }
}
We.create = (n) => new We({
  typeName: S.ZodNever,
  ...M(n)
});
class ps extends Z {
  _parse(e) {
    if (this._getType(e) !== k.undefined) {
      const r = this._getOrReturnCtx(e);
      return T(r, {
        code: x.invalid_type,
        expected: k.void,
        received: r.parsedType
      }), P;
    }
    return be(e.data);
  }
}
ps.create = (n) => new ps({
  typeName: S.ZodVoid,
  ...M(n)
});
class Ce extends Z {
  _parse(e) {
    const { ctx: t, status: r } = this._processInputParams(e), s = this._def;
    if (t.parsedType !== k.array)
      return T(t, {
        code: x.invalid_type,
        expected: k.array,
        received: t.parsedType
      }), P;
    if (s.exactLength !== null) {
      const i = t.data.length > s.exactLength.value, u = t.data.length < s.exactLength.value;
      (i || u) && (T(t, {
        code: i ? x.too_big : x.too_small,
        minimum: u ? s.exactLength.value : void 0,
        maximum: i ? s.exactLength.value : void 0,
        type: "array",
        inclusive: !0,
        exact: !0,
        message: s.exactLength.message
      }), r.dirty());
    }
    if (s.minLength !== null && t.data.length < s.minLength.value && (T(t, {
      code: x.too_small,
      minimum: s.minLength.value,
      type: "array",
      inclusive: !0,
      exact: !1,
      message: s.minLength.message
    }), r.dirty()), s.maxLength !== null && t.data.length > s.maxLength.value && (T(t, {
      code: x.too_big,
      maximum: s.maxLength.value,
      type: "array",
      inclusive: !0,
      exact: !1,
      message: s.maxLength.message
    }), r.dirty()), t.common.async)
      return Promise.all([...t.data].map((i, u) => s.type._parseAsync(new Ee(t, i, t.path, u)))).then((i) => ue.mergeArray(r, i));
    const a = [...t.data].map((i, u) => s.type._parseSync(new Ee(t, i, t.path, u)));
    return ue.mergeArray(r, a);
  }
  get element() {
    return this._def.type;
  }
  min(e, t) {
    return new Ce({
      ...this._def,
      minLength: { value: e, message: C.toString(t) }
    });
  }
  max(e, t) {
    return new Ce({
      ...this._def,
      maxLength: { value: e, message: C.toString(t) }
    });
  }
  length(e, t) {
    return new Ce({
      ...this._def,
      exactLength: { value: e, message: C.toString(t) }
    });
  }
  nonempty(e) {
    return this.min(1, e);
  }
}
Ce.create = (n, e) => new Ce({
  type: n,
  minLength: null,
  maxLength: null,
  exactLength: null,
  typeName: S.ZodArray,
  ...M(e)
});
function bt(n) {
  if (n instanceof Q) {
    const e = {};
    for (const t in n.shape) {
      const r = n.shape[t];
      e[t] = Fe.create(bt(r));
    }
    return new Q({
      ...n._def,
      shape: () => e
    });
  } else return n instanceof Ce ? new Ce({
    ...n._def,
    type: bt(n.element)
  }) : n instanceof Fe ? Fe.create(bt(n.unwrap())) : n instanceof gt ? gt.create(bt(n.unwrap())) : n instanceof ft ? ft.create(n.items.map((e) => bt(e))) : n;
}
class Q extends Z {
  constructor() {
    super(...arguments), this._cached = null, this.nonstrict = this.passthrough, this.augment = this.extend;
  }
  _getCached() {
    if (this._cached !== null)
      return this._cached;
    const e = this._def.shape(), t = q.objectKeys(e);
    return this._cached = { shape: e, keys: t }, this._cached;
  }
  _parse(e) {
    if (this._getType(e) !== k.object) {
      const c = this._getOrReturnCtx(e);
      return T(c, {
        code: x.invalid_type,
        expected: k.object,
        received: c.parsedType
      }), P;
    }
    const { status: r, ctx: s } = this._processInputParams(e), { shape: a, keys: i } = this._getCached(), u = [];
    if (!(this._def.catchall instanceof We && this._def.unknownKeys === "strip"))
      for (const c in s.data)
        i.includes(c) || u.push(c);
    const l = [];
    for (const c of i) {
      const p = a[c], f = s.data[c];
      l.push({
        key: { status: "valid", value: c },
        value: p._parse(new Ee(s, f, s.path, c)),
        alwaysSet: c in s.data
      });
    }
    if (this._def.catchall instanceof We) {
      const c = this._def.unknownKeys;
      if (c === "passthrough")
        for (const p of u)
          l.push({
            key: { status: "valid", value: p },
            value: { status: "valid", value: s.data[p] }
          });
      else if (c === "strict")
        u.length > 0 && (T(s, {
          code: x.unrecognized_keys,
          keys: u
        }), r.dirty());
      else if (c !== "strip") throw new Error("Internal ZodObject error: invalid unknownKeys value.");
    } else {
      const c = this._def.catchall;
      for (const p of u) {
        const f = s.data[p];
        l.push({
          key: { status: "valid", value: p },
          value: c._parse(
            new Ee(s, f, s.path, p)
            //, ctx.child(key), value, getParsedType(value)
          ),
          alwaysSet: p in s.data
        });
      }
    }
    return s.common.async ? Promise.resolve().then(async () => {
      const c = [];
      for (const p of l) {
        const f = await p.key, h = await p.value;
        c.push({
          key: f,
          value: h,
          alwaysSet: p.alwaysSet
        });
      }
      return c;
    }).then((c) => ue.mergeObjectSync(r, c)) : ue.mergeObjectSync(r, l);
  }
  get shape() {
    return this._def.shape();
  }
  strict(e) {
    return C.errToObj, new Q({
      ...this._def,
      unknownKeys: "strict",
      ...e !== void 0 ? {
        errorMap: (t, r) => {
          var a, i;
          const s = ((i = (a = this._def).errorMap) == null ? void 0 : i.call(a, t, r).message) ?? r.defaultError;
          return t.code === "unrecognized_keys" ? {
            message: C.errToObj(e).message ?? s
          } : {
            message: s
          };
        }
      } : {}
    });
  }
  strip() {
    return new Q({
      ...this._def,
      unknownKeys: "strip"
    });
  }
  passthrough() {
    return new Q({
      ...this._def,
      unknownKeys: "passthrough"
    });
  }
  // const AugmentFactory =
  //   <Def extends ZodObjectDef>(def: Def) =>
  //   <Augmentation extends ZodRawShape>(
  //     augmentation: Augmentation
  //   ): ZodObject<
  //     extendShape<ReturnType<Def["shape"]>, Augmentation>,
  //     Def["unknownKeys"],
  //     Def["catchall"]
  //   > => {
  //     return new ZodObject({
  //       ...def,
  //       shape: () => ({
  //         ...def.shape(),
  //         ...augmentation,
  //       }),
  //     }) as any;
  //   };
  extend(e) {
    return new Q({
      ...this._def,
      shape: () => ({
        ...this._def.shape(),
        ...e
      })
    });
  }
  /**
   * Prior to zod@1.0.12 there was a bug in the
   * inferred type of merged objects. Please
   * upgrade if you are experiencing issues.
   */
  merge(e) {
    return new Q({
      unknownKeys: e._def.unknownKeys,
      catchall: e._def.catchall,
      shape: () => ({
        ...this._def.shape(),
        ...e._def.shape()
      }),
      typeName: S.ZodObject
    });
  }
  // merge<
  //   Incoming extends AnyZodObject,
  //   Augmentation extends Incoming["shape"],
  //   NewOutput extends {
  //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
  //       ? Augmentation[k]["_output"]
  //       : k extends keyof Output
  //       ? Output[k]
  //       : never;
  //   },
  //   NewInput extends {
  //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
  //       ? Augmentation[k]["_input"]
  //       : k extends keyof Input
  //       ? Input[k]
  //       : never;
  //   }
  // >(
  //   merging: Incoming
  // ): ZodObject<
  //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
  //   Incoming["_def"]["unknownKeys"],
  //   Incoming["_def"]["catchall"],
  //   NewOutput,
  //   NewInput
  // > {
  //   const merged: any = new ZodObject({
  //     unknownKeys: merging._def.unknownKeys,
  //     catchall: merging._def.catchall,
  //     shape: () =>
  //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
  //     typeName: ZodFirstPartyTypeKind.ZodObject,
  //   }) as any;
  //   return merged;
  // }
  setKey(e, t) {
    return this.augment({ [e]: t });
  }
  // merge<Incoming extends AnyZodObject>(
  //   merging: Incoming
  // ): //ZodObject<T & Incoming["_shape"], UnknownKeys, Catchall> = (merging) => {
  // ZodObject<
  //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
  //   Incoming["_def"]["unknownKeys"],
  //   Incoming["_def"]["catchall"]
  // > {
  //   // const mergedShape = objectUtil.mergeShapes(
  //   //   this._def.shape(),
  //   //   merging._def.shape()
  //   // );
  //   const merged: any = new ZodObject({
  //     unknownKeys: merging._def.unknownKeys,
  //     catchall: merging._def.catchall,
  //     shape: () =>
  //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
  //     typeName: ZodFirstPartyTypeKind.ZodObject,
  //   }) as any;
  //   return merged;
  // }
  catchall(e) {
    return new Q({
      ...this._def,
      catchall: e
    });
  }
  pick(e) {
    const t = {};
    for (const r of q.objectKeys(e))
      e[r] && this.shape[r] && (t[r] = this.shape[r]);
    return new Q({
      ...this._def,
      shape: () => t
    });
  }
  omit(e) {
    const t = {};
    for (const r of q.objectKeys(this.shape))
      e[r] || (t[r] = this.shape[r]);
    return new Q({
      ...this._def,
      shape: () => t
    });
  }
  /**
   * @deprecated
   */
  deepPartial() {
    return bt(this);
  }
  partial(e) {
    const t = {};
    for (const r of q.objectKeys(this.shape)) {
      const s = this.shape[r];
      e && !e[r] ? t[r] = s : t[r] = s.optional();
    }
    return new Q({
      ...this._def,
      shape: () => t
    });
  }
  required(e) {
    const t = {};
    for (const r of q.objectKeys(this.shape))
      if (e && !e[r])
        t[r] = this.shape[r];
      else {
        let a = this.shape[r];
        for (; a instanceof Fe; )
          a = a._def.innerType;
        t[r] = a;
      }
    return new Q({
      ...this._def,
      shape: () => t
    });
  }
  keyof() {
    return sa(q.objectKeys(this.shape));
  }
}
Q.create = (n, e) => new Q({
  shape: () => n,
  unknownKeys: "strip",
  catchall: We.create(),
  typeName: S.ZodObject,
  ...M(e)
});
Q.strictCreate = (n, e) => new Q({
  shape: () => n,
  unknownKeys: "strict",
  catchall: We.create(),
  typeName: S.ZodObject,
  ...M(e)
});
Q.lazycreate = (n, e) => new Q({
  shape: n,
  unknownKeys: "strip",
  catchall: We.create(),
  typeName: S.ZodObject,
  ...M(e)
});
class Pn extends Z {
  _parse(e) {
    const { ctx: t } = this._processInputParams(e), r = this._def.options;
    function s(a) {
      for (const u of a)
        if (u.result.status === "valid")
          return u.result;
      for (const u of a)
        if (u.result.status === "dirty")
          return t.common.issues.push(...u.ctx.common.issues), u.result;
      const i = a.map((u) => new Le(u.ctx.common.issues));
      return T(t, {
        code: x.invalid_union,
        unionErrors: i
      }), P;
    }
    if (t.common.async)
      return Promise.all(r.map(async (a) => {
        const i = {
          ...t,
          common: {
            ...t.common,
            issues: []
          },
          parent: null
        };
        return {
          result: await a._parseAsync({
            data: t.data,
            path: t.path,
            parent: i
          }),
          ctx: i
        };
      })).then(s);
    {
      let a;
      const i = [];
      for (const l of r) {
        const c = {
          ...t,
          common: {
            ...t.common,
            issues: []
          },
          parent: null
        }, p = l._parseSync({
          data: t.data,
          path: t.path,
          parent: c
        });
        if (p.status === "valid")
          return p;
        p.status === "dirty" && !a && (a = { result: p, ctx: c }), c.common.issues.length && i.push(c.common.issues);
      }
      if (a)
        return t.common.issues.push(...a.ctx.common.issues), a.result;
      const u = i.map((l) => new Le(l));
      return T(t, {
        code: x.invalid_union,
        unionErrors: u
      }), P;
    }
  }
  get options() {
    return this._def.options;
  }
}
Pn.create = (n, e) => new Pn({
  options: n,
  typeName: S.ZodUnion,
  ...M(e)
});
const Ne = (n) => n instanceof $n ? Ne(n.schema) : n instanceof mt ? Ne(n.innerType()) : n instanceof Fn ? [n.value] : n instanceof ht ? n.options : n instanceof wr ? q.objectValues(n.enum) : n instanceof Zn ? Ne(n._def.innerType) : n instanceof gr ? [void 0] : n instanceof _r ? [null] : n instanceof Fe ? [void 0, ...Ne(n.unwrap())] : n instanceof gt ? [null, ...Ne(n.unwrap())] : n instanceof aa || n instanceof qn ? Ne(n.unwrap()) : n instanceof Un ? Ne(n._def.innerType) : [];
class $r extends Z {
  _parse(e) {
    const { ctx: t } = this._processInputParams(e);
    if (t.parsedType !== k.object)
      return T(t, {
        code: x.invalid_type,
        expected: k.object,
        received: t.parsedType
      }), P;
    const r = this.discriminator, s = t.data[r], a = this.optionsMap.get(s);
    return a ? t.common.async ? a._parseAsync({
      data: t.data,
      path: t.path,
      parent: t
    }) : a._parseSync({
      data: t.data,
      path: t.path,
      parent: t
    }) : (T(t, {
      code: x.invalid_union_discriminator,
      options: Array.from(this.optionsMap.keys()),
      path: [r]
    }), P);
  }
  get discriminator() {
    return this._def.discriminator;
  }
  get options() {
    return this._def.options;
  }
  get optionsMap() {
    return this._def.optionsMap;
  }
  /**
   * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.
   * However, it only allows a union of objects, all of which need to share a discriminator property. This property must
   * have a different value for each object in the union.
   * @param discriminator the name of the discriminator property
   * @param types an array of object schemas
   * @param params
   */
  static create(e, t, r) {
    const s = /* @__PURE__ */ new Map();
    for (const a of t) {
      const i = Ne(a.shape[e]);
      if (!i.length)
        throw new Error(`A discriminator value for key \`${e}\` could not be extracted from all schema options`);
      for (const u of i) {
        if (s.has(u))
          throw new Error(`Discriminator property ${String(e)} has duplicate value ${String(u)}`);
        s.set(u, a);
      }
    }
    return new $r({
      typeName: S.ZodDiscriminatedUnion,
      discriminator: e,
      options: t,
      optionsMap: s,
      ...M(r)
    });
  }
}
function vr(n, e) {
  const t = Ue(n), r = Ue(e);
  if (n === e)
    return { valid: !0, data: n };
  if (t === k.object && r === k.object) {
    const s = q.objectKeys(e), a = q.objectKeys(n).filter((u) => s.indexOf(u) !== -1), i = { ...n, ...e };
    for (const u of a) {
      const l = vr(n[u], e[u]);
      if (!l.valid)
        return { valid: !1 };
      i[u] = l.data;
    }
    return { valid: !0, data: i };
  } else if (t === k.array && r === k.array) {
    if (n.length !== e.length)
      return { valid: !1 };
    const s = [];
    for (let a = 0; a < n.length; a++) {
      const i = n[a], u = e[a], l = vr(i, u);
      if (!l.valid)
        return { valid: !1 };
      s.push(l.data);
    }
    return { valid: !0, data: s };
  } else return t === k.date && r === k.date && +n == +e ? { valid: !0, data: n } : { valid: !1 };
}
class Mn extends Z {
  _parse(e) {
    const { status: t, ctx: r } = this._processInputParams(e), s = (a, i) => {
      if (os(a) || os(i))
        return P;
      const u = vr(a.value, i.value);
      return u.valid ? ((us(a) || us(i)) && t.dirty(), { status: t.value, value: u.data }) : (T(r, {
        code: x.invalid_intersection_types
      }), P);
    };
    return r.common.async ? Promise.all([
      this._def.left._parseAsync({
        data: r.data,
        path: r.path,
        parent: r
      }),
      this._def.right._parseAsync({
        data: r.data,
        path: r.path,
        parent: r
      })
    ]).then(([a, i]) => s(a, i)) : s(this._def.left._parseSync({
      data: r.data,
      path: r.path,
      parent: r
    }), this._def.right._parseSync({
      data: r.data,
      path: r.path,
      parent: r
    }));
  }
}
Mn.create = (n, e, t) => new Mn({
  left: n,
  right: e,
  typeName: S.ZodIntersection,
  ...M(t)
});
class ft extends Z {
  _parse(e) {
    const { status: t, ctx: r } = this._processInputParams(e);
    if (r.parsedType !== k.array)
      return T(r, {
        code: x.invalid_type,
        expected: k.array,
        received: r.parsedType
      }), P;
    if (r.data.length < this._def.items.length)
      return T(r, {
        code: x.too_small,
        minimum: this._def.items.length,
        inclusive: !0,
        exact: !1,
        type: "array"
      }), P;
    !this._def.rest && r.data.length > this._def.items.length && (T(r, {
      code: x.too_big,
      maximum: this._def.items.length,
      inclusive: !0,
      exact: !1,
      type: "array"
    }), t.dirty());
    const a = [...r.data].map((i, u) => {
      const l = this._def.items[u] || this._def.rest;
      return l ? l._parse(new Ee(r, i, r.path, u)) : null;
    }).filter((i) => !!i);
    return r.common.async ? Promise.all(a).then((i) => ue.mergeArray(t, i)) : ue.mergeArray(t, a);
  }
  get items() {
    return this._def.items;
  }
  rest(e) {
    return new ft({
      ...this._def,
      rest: e
    });
  }
}
ft.create = (n, e) => {
  if (!Array.isArray(n))
    throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
  return new ft({
    items: n,
    typeName: S.ZodTuple,
    rest: null,
    ...M(e)
  });
};
class jn extends Z {
  get keySchema() {
    return this._def.keyType;
  }
  get valueSchema() {
    return this._def.valueType;
  }
  _parse(e) {
    const { status: t, ctx: r } = this._processInputParams(e);
    if (r.parsedType !== k.object)
      return T(r, {
        code: x.invalid_type,
        expected: k.object,
        received: r.parsedType
      }), P;
    const s = [], a = this._def.keyType, i = this._def.valueType;
    for (const u in r.data)
      s.push({
        key: a._parse(new Ee(r, u, r.path, u)),
        value: i._parse(new Ee(r, r.data[u], r.path, u)),
        alwaysSet: u in r.data
      });
    return r.common.async ? ue.mergeObjectAsync(t, s) : ue.mergeObjectSync(t, s);
  }
  get element() {
    return this._def.valueType;
  }
  static create(e, t, r) {
    return t instanceof Z ? new jn({
      keyType: e,
      valueType: t,
      typeName: S.ZodRecord,
      ...M(r)
    }) : new jn({
      keyType: $e.create(),
      valueType: e,
      typeName: S.ZodRecord,
      ...M(t)
    });
  }
}
class fs extends Z {
  get keySchema() {
    return this._def.keyType;
  }
  get valueSchema() {
    return this._def.valueType;
  }
  _parse(e) {
    const { status: t, ctx: r } = this._processInputParams(e);
    if (r.parsedType !== k.map)
      return T(r, {
        code: x.invalid_type,
        expected: k.map,
        received: r.parsedType
      }), P;
    const s = this._def.keyType, a = this._def.valueType, i = [...r.data.entries()].map(([u, l], c) => ({
      key: s._parse(new Ee(r, u, r.path, [c, "key"])),
      value: a._parse(new Ee(r, l, r.path, [c, "value"]))
    }));
    if (r.common.async) {
      const u = /* @__PURE__ */ new Map();
      return Promise.resolve().then(async () => {
        for (const l of i) {
          const c = await l.key, p = await l.value;
          if (c.status === "aborted" || p.status === "aborted")
            return P;
          (c.status === "dirty" || p.status === "dirty") && t.dirty(), u.set(c.value, p.value);
        }
        return { status: t.value, value: u };
      });
    } else {
      const u = /* @__PURE__ */ new Map();
      for (const l of i) {
        const c = l.key, p = l.value;
        if (c.status === "aborted" || p.status === "aborted")
          return P;
        (c.status === "dirty" || p.status === "dirty") && t.dirty(), u.set(c.value, p.value);
      }
      return { status: t.value, value: u };
    }
  }
}
fs.create = (n, e, t) => new fs({
  valueType: e,
  keyType: n,
  typeName: S.ZodMap,
  ...M(t)
});
class Vt extends Z {
  _parse(e) {
    const { status: t, ctx: r } = this._processInputParams(e);
    if (r.parsedType !== k.set)
      return T(r, {
        code: x.invalid_type,
        expected: k.set,
        received: r.parsedType
      }), P;
    const s = this._def;
    s.minSize !== null && r.data.size < s.minSize.value && (T(r, {
      code: x.too_small,
      minimum: s.minSize.value,
      type: "set",
      inclusive: !0,
      exact: !1,
      message: s.minSize.message
    }), t.dirty()), s.maxSize !== null && r.data.size > s.maxSize.value && (T(r, {
      code: x.too_big,
      maximum: s.maxSize.value,
      type: "set",
      inclusive: !0,
      exact: !1,
      message: s.maxSize.message
    }), t.dirty());
    const a = this._def.valueType;
    function i(l) {
      const c = /* @__PURE__ */ new Set();
      for (const p of l) {
        if (p.status === "aborted")
          return P;
        p.status === "dirty" && t.dirty(), c.add(p.value);
      }
      return { status: t.value, value: c };
    }
    const u = [...r.data.values()].map((l, c) => a._parse(new Ee(r, l, r.path, c)));
    return r.common.async ? Promise.all(u).then((l) => i(l)) : i(u);
  }
  min(e, t) {
    return new Vt({
      ...this._def,
      minSize: { value: e, message: C.toString(t) }
    });
  }
  max(e, t) {
    return new Vt({
      ...this._def,
      maxSize: { value: e, message: C.toString(t) }
    });
  }
  size(e, t) {
    return this.min(e, t).max(e, t);
  }
  nonempty(e) {
    return this.min(1, e);
  }
}
Vt.create = (n, e) => new Vt({
  valueType: n,
  minSize: null,
  maxSize: null,
  typeName: S.ZodSet,
  ...M(e)
});
class $n extends Z {
  get schema() {
    return this._def.getter();
  }
  _parse(e) {
    const { ctx: t } = this._processInputParams(e);
    return this._def.getter()._parse({ data: t.data, path: t.path, parent: t });
  }
}
$n.create = (n, e) => new $n({
  getter: n,
  typeName: S.ZodLazy,
  ...M(e)
});
class Fn extends Z {
  _parse(e) {
    if (e.data !== this._def.value) {
      const t = this._getOrReturnCtx(e);
      return T(t, {
        received: t.data,
        code: x.invalid_literal,
        expected: this._def.value
      }), P;
    }
    return { status: "valid", value: e.data };
  }
  get value() {
    return this._def.value;
  }
}
Fn.create = (n, e) => new Fn({
  value: n,
  typeName: S.ZodLiteral,
  ...M(e)
});
function sa(n, e) {
  return new ht({
    values: n,
    typeName: S.ZodEnum,
    ...M(e)
  });
}
class ht extends Z {
  _parse(e) {
    if (typeof e.data != "string") {
      const t = this._getOrReturnCtx(e), r = this._def.values;
      return T(t, {
        expected: q.joinValues(r),
        received: t.parsedType,
        code: x.invalid_type
      }), P;
    }
    if (this._cache || (this._cache = new Set(this._def.values)), !this._cache.has(e.data)) {
      const t = this._getOrReturnCtx(e), r = this._def.values;
      return T(t, {
        received: t.data,
        code: x.invalid_enum_value,
        options: r
      }), P;
    }
    return be(e.data);
  }
  get options() {
    return this._def.values;
  }
  get enum() {
    const e = {};
    for (const t of this._def.values)
      e[t] = t;
    return e;
  }
  get Values() {
    const e = {};
    for (const t of this._def.values)
      e[t] = t;
    return e;
  }
  get Enum() {
    const e = {};
    for (const t of this._def.values)
      e[t] = t;
    return e;
  }
  extract(e, t = this._def) {
    return ht.create(e, {
      ...this._def,
      ...t
    });
  }
  exclude(e, t = this._def) {
    return ht.create(this.options.filter((r) => !e.includes(r)), {
      ...this._def,
      ...t
    });
  }
}
ht.create = sa;
class wr extends Z {
  _parse(e) {
    const t = q.getValidEnumValues(this._def.values), r = this._getOrReturnCtx(e);
    if (r.parsedType !== k.string && r.parsedType !== k.number) {
      const s = q.objectValues(t);
      return T(r, {
        expected: q.joinValues(s),
        received: r.parsedType,
        code: x.invalid_type
      }), P;
    }
    if (this._cache || (this._cache = new Set(q.getValidEnumValues(this._def.values))), !this._cache.has(e.data)) {
      const s = q.objectValues(t);
      return T(r, {
        received: r.data,
        code: x.invalid_enum_value,
        options: s
      }), P;
    }
    return be(e.data);
  }
  get enum() {
    return this._def.values;
  }
}
wr.create = (n, e) => new wr({
  values: n,
  typeName: S.ZodNativeEnum,
  ...M(e)
});
class Ln extends Z {
  unwrap() {
    return this._def.type;
  }
  _parse(e) {
    const { ctx: t } = this._processInputParams(e);
    if (t.parsedType !== k.promise && t.common.async === !1)
      return T(t, {
        code: x.invalid_type,
        expected: k.promise,
        received: t.parsedType
      }), P;
    const r = t.parsedType === k.promise ? t.data : Promise.resolve(t.data);
    return be(r.then((s) => this._def.type.parseAsync(s, {
      path: t.path,
      errorMap: t.common.contextualErrorMap
    })));
  }
}
Ln.create = (n, e) => new Ln({
  type: n,
  typeName: S.ZodPromise,
  ...M(e)
});
class mt extends Z {
  innerType() {
    return this._def.schema;
  }
  sourceType() {
    return this._def.schema._def.typeName === S.ZodEffects ? this._def.schema.sourceType() : this._def.schema;
  }
  _parse(e) {
    const { status: t, ctx: r } = this._processInputParams(e), s = this._def.effect || null, a = {
      addIssue: (i) => {
        T(r, i), i.fatal ? t.abort() : t.dirty();
      },
      get path() {
        return r.path;
      }
    };
    if (a.addIssue = a.addIssue.bind(a), s.type === "preprocess") {
      const i = s.transform(r.data, a);
      if (r.common.async)
        return Promise.resolve(i).then(async (u) => {
          if (t.value === "aborted")
            return P;
          const l = await this._def.schema._parseAsync({
            data: u,
            path: r.path,
            parent: r
          });
          return l.status === "aborted" ? P : l.status === "dirty" || t.value === "dirty" ? Bt(l.value) : l;
        });
      {
        if (t.value === "aborted")
          return P;
        const u = this._def.schema._parseSync({
          data: i,
          path: r.path,
          parent: r
        });
        return u.status === "aborted" ? P : u.status === "dirty" || t.value === "dirty" ? Bt(u.value) : u;
      }
    }
    if (s.type === "refinement") {
      const i = (u) => {
        const l = s.refinement(u, a);
        if (r.common.async)
          return Promise.resolve(l);
        if (l instanceof Promise)
          throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
        return u;
      };
      if (r.common.async === !1) {
        const u = this._def.schema._parseSync({
          data: r.data,
          path: r.path,
          parent: r
        });
        return u.status === "aborted" ? P : (u.status === "dirty" && t.dirty(), i(u.value), { status: t.value, value: u.value });
      } else
        return this._def.schema._parseAsync({ data: r.data, path: r.path, parent: r }).then((u) => u.status === "aborted" ? P : (u.status === "dirty" && t.dirty(), i(u.value).then(() => ({ status: t.value, value: u.value }))));
    }
    if (s.type === "transform")
      if (r.common.async === !1) {
        const i = this._def.schema._parseSync({
          data: r.data,
          path: r.path,
          parent: r
        });
        if (!Zt(i))
          return P;
        const u = s.transform(i.value, a);
        if (u instanceof Promise)
          throw new Error("Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.");
        return { status: t.value, value: u };
      } else
        return this._def.schema._parseAsync({ data: r.data, path: r.path, parent: r }).then((i) => Zt(i) ? Promise.resolve(s.transform(i.value, a)).then((u) => ({
          status: t.value,
          value: u
        })) : P);
    q.assertNever(s);
  }
}
mt.create = (n, e, t) => new mt({
  schema: n,
  typeName: S.ZodEffects,
  effect: e,
  ...M(t)
});
mt.createWithPreprocess = (n, e, t) => new mt({
  schema: e,
  effect: { type: "preprocess", transform: n },
  typeName: S.ZodEffects,
  ...M(t)
});
class Fe extends Z {
  _parse(e) {
    return this._getType(e) === k.undefined ? be(void 0) : this._def.innerType._parse(e);
  }
  unwrap() {
    return this._def.innerType;
  }
}
Fe.create = (n, e) => new Fe({
  innerType: n,
  typeName: S.ZodOptional,
  ...M(e)
});
class gt extends Z {
  _parse(e) {
    return this._getType(e) === k.null ? be(null) : this._def.innerType._parse(e);
  }
  unwrap() {
    return this._def.innerType;
  }
}
gt.create = (n, e) => new gt({
  innerType: n,
  typeName: S.ZodNullable,
  ...M(e)
});
class Zn extends Z {
  _parse(e) {
    const { ctx: t } = this._processInputParams(e);
    let r = t.data;
    return t.parsedType === k.undefined && (r = this._def.defaultValue()), this._def.innerType._parse({
      data: r,
      path: t.path,
      parent: t
    });
  }
  removeDefault() {
    return this._def.innerType;
  }
}
Zn.create = (n, e) => new Zn({
  innerType: n,
  typeName: S.ZodDefault,
  defaultValue: typeof e.default == "function" ? e.default : () => e.default,
  ...M(e)
});
class Un extends Z {
  _parse(e) {
    const { ctx: t } = this._processInputParams(e), r = {
      ...t,
      common: {
        ...t.common,
        issues: []
      }
    }, s = this._def.innerType._parse({
      data: r.data,
      path: r.path,
      parent: {
        ...r
      }
    });
    return Nn(s) ? s.then((a) => ({
      status: "valid",
      value: a.status === "valid" ? a.value : this._def.catchValue({
        get error() {
          return new Le(r.common.issues);
        },
        input: r.data
      })
    })) : {
      status: "valid",
      value: s.status === "valid" ? s.value : this._def.catchValue({
        get error() {
          return new Le(r.common.issues);
        },
        input: r.data
      })
    };
  }
  removeCatch() {
    return this._def.innerType;
  }
}
Un.create = (n, e) => new Un({
  innerType: n,
  typeName: S.ZodCatch,
  catchValue: typeof e.catch == "function" ? e.catch : () => e.catch,
  ...M(e)
});
class hs extends Z {
  _parse(e) {
    if (this._getType(e) !== k.nan) {
      const r = this._getOrReturnCtx(e);
      return T(r, {
        code: x.invalid_type,
        expected: k.nan,
        received: r.parsedType
      }), P;
    }
    return { status: "valid", value: e.data };
  }
}
hs.create = (n) => new hs({
  typeName: S.ZodNaN,
  ...M(n)
});
class aa extends Z {
  _parse(e) {
    const { ctx: t } = this._processInputParams(e), r = t.data;
    return this._def.type._parse({
      data: r,
      path: t.path,
      parent: t
    });
  }
  unwrap() {
    return this._def.type;
  }
}
class Fr extends Z {
  _parse(e) {
    const { status: t, ctx: r } = this._processInputParams(e);
    if (r.common.async)
      return (async () => {
        const a = await this._def.in._parseAsync({
          data: r.data,
          path: r.path,
          parent: r
        });
        return a.status === "aborted" ? P : a.status === "dirty" ? (t.dirty(), Bt(a.value)) : this._def.out._parseAsync({
          data: a.value,
          path: r.path,
          parent: r
        });
      })();
    {
      const s = this._def.in._parseSync({
        data: r.data,
        path: r.path,
        parent: r
      });
      return s.status === "aborted" ? P : s.status === "dirty" ? (t.dirty(), {
        status: "dirty",
        value: s.value
      }) : this._def.out._parseSync({
        data: s.value,
        path: r.path,
        parent: r
      });
    }
  }
  static create(e, t) {
    return new Fr({
      in: e,
      out: t,
      typeName: S.ZodPipeline
    });
  }
}
class qn extends Z {
  _parse(e) {
    const t = this._def.innerType._parse(e), r = (s) => (Zt(s) && (s.value = Object.freeze(s.value)), s);
    return Nn(t) ? t.then((s) => r(s)) : r(t);
  }
  unwrap() {
    return this._def.innerType;
  }
}
qn.create = (n, e) => new qn({
  innerType: n,
  typeName: S.ZodReadonly,
  ...M(e)
});
var S;
(function(n) {
  n.ZodString = "ZodString", n.ZodNumber = "ZodNumber", n.ZodNaN = "ZodNaN", n.ZodBigInt = "ZodBigInt", n.ZodBoolean = "ZodBoolean", n.ZodDate = "ZodDate", n.ZodSymbol = "ZodSymbol", n.ZodUndefined = "ZodUndefined", n.ZodNull = "ZodNull", n.ZodAny = "ZodAny", n.ZodUnknown = "ZodUnknown", n.ZodNever = "ZodNever", n.ZodVoid = "ZodVoid", n.ZodArray = "ZodArray", n.ZodObject = "ZodObject", n.ZodUnion = "ZodUnion", n.ZodDiscriminatedUnion = "ZodDiscriminatedUnion", n.ZodIntersection = "ZodIntersection", n.ZodTuple = "ZodTuple", n.ZodRecord = "ZodRecord", n.ZodMap = "ZodMap", n.ZodSet = "ZodSet", n.ZodFunction = "ZodFunction", n.ZodLazy = "ZodLazy", n.ZodLiteral = "ZodLiteral", n.ZodEnum = "ZodEnum", n.ZodEffects = "ZodEffects", n.ZodNativeEnum = "ZodNativeEnum", n.ZodOptional = "ZodOptional", n.ZodNullable = "ZodNullable", n.ZodDefault = "ZodDefault", n.ZodCatch = "ZodCatch", n.ZodPromise = "ZodPromise", n.ZodBranded = "ZodBranded", n.ZodPipeline = "ZodPipeline", n.ZodReadonly = "ZodReadonly";
})(S || (S = {}));
const d = $e.create, A = Ut.create, lt = mr.create, L = yr.create;
We.create;
const U = Ce.create, m = Q.create, ia = Pn.create, me = $r.create;
Mn.create;
ft.create;
const ee = jn.create, Mi = $n.create, g = Fn.create, ae = ht.create;
Ln.create;
Fe.create;
gt.create;
function ji() {
  return {};
}
function $i(n, e) {
  var r, s;
  const t = {
    type: "array"
  };
  return ((s = (r = n.type) == null ? void 0 : r._def) == null ? void 0 : s.typeName) !== S.ZodAny && (t.items = B(n.type._def, {
    ...e,
    currentPath: [...e.currentPath, "items"]
  })), n.minLength && z(t, "minItems", n.minLength.value, n.minLength.message, e), n.maxLength && z(t, "maxItems", n.maxLength.value, n.maxLength.message, e), n.exactLength && (z(t, "minItems", n.exactLength.value, n.exactLength.message, e), z(t, "maxItems", n.exactLength.value, n.exactLength.message, e)), t;
}
function Fi(n, e) {
  const t = {
    type: "integer",
    format: "int64"
  };
  if (!n.checks)
    return t;
  for (const r of n.checks)
    switch (r.kind) {
      case "min":
        e.target === "jsonSchema7" ? r.inclusive ? z(t, "minimum", r.value, r.message, e) : z(t, "exclusiveMinimum", r.value, r.message, e) : (r.inclusive || (t.exclusiveMinimum = !0), z(t, "minimum", r.value, r.message, e));
        break;
      case "max":
        e.target === "jsonSchema7" ? r.inclusive ? z(t, "maximum", r.value, r.message, e) : z(t, "exclusiveMaximum", r.value, r.message, e) : (r.inclusive || (t.exclusiveMaximum = !0), z(t, "maximum", r.value, r.message, e));
        break;
      case "multipleOf":
        z(t, "multipleOf", r.value, r.message, e);
        break;
    }
  return t;
}
function Li() {
  return {
    type: "boolean"
  };
}
function Zi(n, e) {
  return B(n.type._def, e);
}
const Ui = (n, e) => B(n.innerType._def, e);
function oa(n, e, t) {
  const r = t ?? e.dateStrategy;
  if (Array.isArray(r))
    return {
      anyOf: r.map((s, a) => oa(n, e, s))
    };
  switch (r) {
    case "string":
    case "format:date-time":
      return {
        type: "string",
        format: "date-time"
      };
    case "format:date":
      return {
        type: "string",
        format: "date"
      };
    case "integer":
      return qi(n, e);
  }
}
const qi = (n, e) => {
  const t = {
    type: "integer",
    format: "unix-time"
  };
  if (e.target === "openApi3")
    return t;
  for (const r of n.checks)
    switch (r.kind) {
      case "min":
        z(
          t,
          "minimum",
          r.value,
          // This is in milliseconds
          r.message,
          e
        );
        break;
      case "max":
        z(
          t,
          "maximum",
          r.value,
          // This is in milliseconds
          r.message,
          e
        );
        break;
    }
  return t;
};
function Ji(n, e) {
  return {
    ...B(n.innerType._def, e),
    default: n.defaultValue()
  };
}
function Bi(n, e, t) {
  return e.effectStrategy === "input" ? B(n.schema._def, e, t) : {};
}
function Gi(n) {
  return {
    type: "string",
    enum: [...n.values]
  };
}
const zi = (n) => "type" in n && n.type === "string" ? !1 : "allOf" in n;
function Vi(n, e) {
  const t = [
    B(n.left._def, {
      ...e,
      currentPath: [...e.currentPath, "allOf", "0"]
    }),
    B(n.right._def, {
      ...e,
      currentPath: [...e.currentPath, "allOf", "1"]
    })
  ].filter((a) => !!a);
  let r = e.target === "jsonSchema2019-09" ? { unevaluatedProperties: !1 } : void 0;
  const s = [];
  return t.forEach((a) => {
    if (zi(a))
      s.push(...a.allOf), a.unevaluatedProperties === void 0 && (r = void 0);
    else {
      let i = a;
      if ("additionalProperties" in a && a.additionalProperties === !1) {
        const { additionalProperties: u, ...l } = a;
        i = l;
      } else
        r = void 0;
      s.push(i);
    }
  }), s.length ? {
    allOf: s,
    ...r
  } : void 0;
}
function Hi(n, e) {
  const t = typeof n.value;
  return t !== "bigint" && t !== "number" && t !== "boolean" && t !== "string" ? {
    type: Array.isArray(n.value) ? "array" : "object"
  } : e.target === "openApi3" ? {
    type: t === "bigint" ? "integer" : t,
    enum: [n.value]
  } : {
    type: t === "bigint" ? "integer" : t,
    const: n.value
  };
}
let rr;
const Xe = {
  /**
   * `c` was changed to `[cC]` to replicate /i flag
   */
  cuid: /^[cC][^\s-]{8,}$/,
  cuid2: /^[0-9a-z]+$/,
  ulid: /^[0-9A-HJKMNP-TV-Z]{26}$/,
  /**
   * `a-z` was added to replicate /i flag
   */
  email: /^(?!\.)(?!.*\.\.)([a-zA-Z0-9_'+\-\.]*)[a-zA-Z0-9_+-]@([a-zA-Z0-9][a-zA-Z0-9\-]*\.)+[a-zA-Z]{2,}$/,
  /**
   * Constructed a valid Unicode RegExp
   *
   * Lazily instantiate since this type of regex isn't supported
   * in all envs (e.g. React Native).
   *
   * See:
   * https://github.com/colinhacks/zod/issues/2433
   * Fix in Zod:
   * https://github.com/colinhacks/zod/commit/9340fd51e48576a75adc919bff65dbc4a5d4c99b
   */
  emoji: () => (rr === void 0 && (rr = RegExp("^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$", "u")), rr),
  base64: /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/,
  nanoid: /^[a-zA-Z0-9_-]{21}$/
};
function ua(n, e) {
  const t = {
    type: "string"
  };
  function r(s) {
    return e.patternStrategy === "escape" ? Wi(s) : s;
  }
  if (n.checks)
    for (const s of n.checks)
      switch (s.kind) {
        case "min":
          z(t, "minLength", typeof t.minLength == "number" ? Math.max(t.minLength, s.value) : s.value, s.message, e);
          break;
        case "max":
          z(t, "maxLength", typeof t.maxLength == "number" ? Math.min(t.maxLength, s.value) : s.value, s.message, e);
          break;
        case "email":
          switch (e.emailStrategy) {
            case "format:email":
              Se(t, "email", s.message, e);
              break;
            case "format:idn-email":
              Se(t, "idn-email", s.message, e);
              break;
            case "pattern:zod":
              Ie(t, Xe.email, s.message, e);
              break;
          }
          break;
        case "url":
          Se(t, "uri", s.message, e);
          break;
        case "uuid":
          Se(t, "uuid", s.message, e);
          break;
        case "regex":
          Ie(t, s.regex, s.message, e);
          break;
        case "cuid":
          Ie(t, Xe.cuid, s.message, e);
          break;
        case "cuid2":
          Ie(t, Xe.cuid2, s.message, e);
          break;
        case "startsWith":
          Ie(t, RegExp(`^${r(s.value)}`), s.message, e);
          break;
        case "endsWith":
          Ie(t, RegExp(`${r(s.value)}$`), s.message, e);
          break;
        case "datetime":
          Se(t, "date-time", s.message, e);
          break;
        case "date":
          Se(t, "date", s.message, e);
          break;
        case "time":
          Se(t, "time", s.message, e);
          break;
        case "duration":
          Se(t, "duration", s.message, e);
          break;
        case "length":
          z(t, "minLength", typeof t.minLength == "number" ? Math.max(t.minLength, s.value) : s.value, s.message, e), z(t, "maxLength", typeof t.maxLength == "number" ? Math.min(t.maxLength, s.value) : s.value, s.message, e);
          break;
        case "includes": {
          Ie(t, RegExp(r(s.value)), s.message, e);
          break;
        }
        case "ip": {
          s.version !== "v6" && Se(t, "ipv4", s.message, e), s.version !== "v4" && Se(t, "ipv6", s.message, e);
          break;
        }
        case "emoji":
          Ie(t, Xe.emoji, s.message, e);
          break;
        case "ulid": {
          Ie(t, Xe.ulid, s.message, e);
          break;
        }
        case "base64": {
          switch (e.base64Strategy) {
            case "format:binary": {
              Se(t, "binary", s.message, e);
              break;
            }
            case "contentEncoding:base64": {
              z(t, "contentEncoding", "base64", s.message, e);
              break;
            }
            case "pattern:zod": {
              Ie(t, Xe.base64, s.message, e);
              break;
            }
          }
          break;
        }
        case "nanoid":
          Ie(t, Xe.nanoid, s.message, e);
      }
  return t;
}
const Wi = (n) => Array.from(n).map((e) => /[a-zA-Z0-9]/.test(e) ? e : `\\${e}`).join(""), Se = (n, e, t, r) => {
  var s;
  n.format || (s = n.anyOf) != null && s.some((a) => a.format) ? (n.anyOf || (n.anyOf = []), n.format && (n.anyOf.push({
    format: n.format,
    ...n.errorMessage && r.errorMessages && {
      errorMessage: { format: n.errorMessage.format }
    }
  }), delete n.format, n.errorMessage && (delete n.errorMessage.format, Object.keys(n.errorMessage).length === 0 && delete n.errorMessage)), n.anyOf.push({
    format: e,
    ...t && r.errorMessages && { errorMessage: { format: t } }
  })) : z(n, "format", e, t, r);
}, Ie = (n, e, t, r) => {
  var s;
  n.pattern || (s = n.allOf) != null && s.some((a) => a.pattern) ? (n.allOf || (n.allOf = []), n.pattern && (n.allOf.push({
    pattern: n.pattern,
    ...n.errorMessage && r.errorMessages && {
      errorMessage: { pattern: n.errorMessage.pattern }
    }
  }), delete n.pattern, n.errorMessage && (delete n.errorMessage.pattern, Object.keys(n.errorMessage).length === 0 && delete n.errorMessage)), n.allOf.push({
    pattern: ms(e, r),
    ...t && r.errorMessages && { errorMessage: { pattern: t } }
  })) : z(n, "pattern", ms(e, r), t, r);
}, ms = (n, e) => {
  var c;
  const t = typeof n == "function" ? n() : n;
  if (!e.applyRegexFlags || !t.flags)
    return t.source;
  const r = {
    i: t.flags.includes("i"),
    // Case-insensitive
    m: t.flags.includes("m"),
    // `^` and `$` matches adjacent to newline characters
    s: t.flags.includes("s")
    // `.` matches newlines
  }, s = r.i ? t.source.toLowerCase() : t.source;
  let a = "", i = !1, u = !1, l = !1;
  for (let p = 0; p < s.length; p++) {
    if (i) {
      a += s[p], i = !1;
      continue;
    }
    if (r.i) {
      if (u) {
        if (s[p].match(/[a-z]/)) {
          l ? (a += s[p], a += `${s[p - 2]}-${s[p]}`.toUpperCase(), l = !1) : s[p + 1] === "-" && ((c = s[p + 2]) != null && c.match(/[a-z]/)) ? (a += s[p], l = !0) : a += `${s[p]}${s[p].toUpperCase()}`;
          continue;
        }
      } else if (s[p].match(/[a-z]/)) {
        a += `[${s[p]}${s[p].toUpperCase()}]`;
        continue;
      }
    }
    if (r.m) {
      if (s[p] === "^") {
        a += `(^|(?<=[\r
]))`;
        continue;
      } else if (s[p] === "$") {
        a += `($|(?=[\r
]))`;
        continue;
      }
    }
    if (r.s && s[p] === ".") {
      a += u ? `${s[p]}\r
` : `[${s[p]}\r
]`;
      continue;
    }
    a += s[p], s[p] === "\\" ? i = !0 : u && s[p] === "]" ? u = !1 : !u && s[p] === "[" && (u = !0);
  }
  try {
    const p = new RegExp(a);
  } catch {
    return console.warn(`Could not convert regex pattern at ${e.currentPath.join("/")} to a flag-independent form! Falling back to the flag-ignorant source`), t.source;
  }
  return a;
};
function ca(n, e) {
  var r, s, a, i;
  if (e.target === "openApi3" && ((r = n.keyType) == null ? void 0 : r._def.typeName) === S.ZodEnum)
    return {
      type: "object",
      required: n.keyType._def.values,
      properties: n.keyType._def.values.reduce((u, l) => ({
        ...u,
        [l]: B(n.valueType._def, {
          ...e,
          currentPath: [...e.currentPath, "properties", l]
        }) ?? {}
      }), {}),
      additionalProperties: !1
    };
  const t = {
    type: "object",
    additionalProperties: B(n.valueType._def, {
      ...e,
      currentPath: [...e.currentPath, "additionalProperties"]
    }) ?? {}
  };
  if (e.target === "openApi3")
    return t;
  if (((s = n.keyType) == null ? void 0 : s._def.typeName) === S.ZodString && ((a = n.keyType._def.checks) != null && a.length)) {
    const u = Object.entries(ua(n.keyType._def, e)).reduce((l, [c, p]) => c === "type" ? l : { ...l, [c]: p }, {});
    return {
      ...t,
      propertyNames: u
    };
  } else if (((i = n.keyType) == null ? void 0 : i._def.typeName) === S.ZodEnum)
    return {
      ...t,
      propertyNames: {
        enum: n.keyType._def.values
      }
    };
  return t;
}
function Ki(n, e) {
  if (e.mapStrategy === "record")
    return ca(n, e);
  const t = B(n.keyType._def, {
    ...e,
    currentPath: [...e.currentPath, "items", "items", "0"]
  }) || {}, r = B(n.valueType._def, {
    ...e,
    currentPath: [...e.currentPath, "items", "items", "1"]
  }) || {};
  return {
    type: "array",
    maxItems: 125,
    items: {
      type: "array",
      items: [t, r],
      minItems: 2,
      maxItems: 2
    }
  };
}
function Yi(n) {
  const e = n.values, r = Object.keys(n.values).filter((a) => typeof e[e[a]] != "number").map((a) => e[a]), s = Array.from(new Set(r.map((a) => typeof a)));
  return {
    type: s.length === 1 ? s[0] === "string" ? "string" : "number" : ["string", "number"],
    enum: r
  };
}
function Xi() {
  return {
    not: {}
  };
}
function Qi(n) {
  return n.target === "openApi3" ? {
    enum: ["null"],
    nullable: !0
  } : {
    type: "null"
  };
}
const Jn = {
  ZodString: "string",
  ZodNumber: "number",
  ZodBigInt: "integer",
  ZodBoolean: "boolean",
  ZodNull: "null"
};
function eo(n, e) {
  if (e.target === "openApi3")
    return gs(n, e);
  const t = n.options instanceof Map ? Array.from(n.options.values()) : n.options;
  if (t.every((r) => r._def.typeName in Jn && (!r._def.checks || !r._def.checks.length))) {
    const r = t.reduce((s, a) => {
      const i = Jn[a._def.typeName];
      return i && !s.includes(i) ? [...s, i] : s;
    }, []);
    return {
      type: r.length > 1 ? r : r[0]
    };
  } else if (t.every((r) => r._def.typeName === "ZodLiteral" && !r.description)) {
    const r = t.reduce((s, a) => {
      const i = typeof a._def.value;
      switch (i) {
        case "string":
        case "number":
        case "boolean":
          return [...s, i];
        case "bigint":
          return [...s, "integer"];
        case "object":
          if (a._def.value === null)
            return [...s, "null"];
        case "symbol":
        case "undefined":
        case "function":
        default:
          return s;
      }
    }, []);
    if (r.length === t.length) {
      const s = r.filter((a, i, u) => u.indexOf(a) === i);
      return {
        type: s.length > 1 ? s : s[0],
        enum: t.reduce((a, i) => a.includes(i._def.value) ? a : [...a, i._def.value], [])
      };
    }
  } else if (t.every((r) => r._def.typeName === "ZodEnum"))
    return {
      type: "string",
      enum: t.reduce((r, s) => [...r, ...s._def.values.filter((a) => !r.includes(a))], [])
    };
  return gs(n, e);
}
const gs = (n, e) => {
  const t = (n.options instanceof Map ? Array.from(n.options.values()) : n.options).map((r, s) => B(r._def, {
    ...e,
    currentPath: [...e.currentPath, "anyOf", `${s}`]
  })).filter((r) => !!r && (!e.strictUnions || typeof r == "object" && Object.keys(r).length > 0));
  return t.length ? { anyOf: t } : void 0;
};
function to(n, e) {
  if (["ZodString", "ZodNumber", "ZodBigInt", "ZodBoolean", "ZodNull"].includes(n.innerType._def.typeName) && (!n.innerType._def.checks || !n.innerType._def.checks.length))
    return e.target === "openApi3" || e.nullableStrategy === "property" ? {
      type: Jn[n.innerType._def.typeName],
      nullable: !0
    } : {
      type: [Jn[n.innerType._def.typeName], "null"]
    };
  if (e.target === "openApi3") {
    const r = B(n.innerType._def, {
      ...e,
      currentPath: [...e.currentPath]
    });
    return r && "$ref" in r ? { allOf: [r], nullable: !0 } : r && { ...r, nullable: !0 };
  }
  const t = B(n.innerType._def, {
    ...e,
    currentPath: [...e.currentPath, "anyOf", "0"]
  });
  return t && { anyOf: [t, { type: "null" }] };
}
function no(n, e) {
  const t = {
    type: "number"
  };
  if (!n.checks)
    return t;
  for (const r of n.checks)
    switch (r.kind) {
      case "int":
        t.type = "integer", ta(t, "type", r.message, e);
        break;
      case "min":
        e.target === "jsonSchema7" ? r.inclusive ? z(t, "minimum", r.value, r.message, e) : z(t, "exclusiveMinimum", r.value, r.message, e) : (r.inclusive || (t.exclusiveMinimum = !0), z(t, "minimum", r.value, r.message, e));
        break;
      case "max":
        e.target === "jsonSchema7" ? r.inclusive ? z(t, "maximum", r.value, r.message, e) : z(t, "exclusiveMaximum", r.value, r.message, e) : (r.inclusive || (t.exclusiveMaximum = !0), z(t, "maximum", r.value, r.message, e));
        break;
      case "multipleOf":
        z(t, "multipleOf", r.value, r.message, e);
        break;
    }
  return t;
}
function ro(n, e) {
  return e.removeAdditionalStrategy === "strict" ? n.catchall._def.typeName === "ZodNever" ? n.unknownKeys !== "strict" : B(n.catchall._def, {
    ...e,
    currentPath: [...e.currentPath, "additionalProperties"]
  }) ?? !0 : n.catchall._def.typeName === "ZodNever" ? n.unknownKeys === "passthrough" : B(n.catchall._def, {
    ...e,
    currentPath: [...e.currentPath, "additionalProperties"]
  }) ?? !0;
}
function so(n, e) {
  const t = {
    type: "object",
    ...Object.entries(n.shape()).reduce((r, [s, a]) => {
      var l;
      if (a === void 0 || a._def === void 0)
        return r;
      const i = [...e.currentPath, "properties", s], u = B(a._def, {
        ...e,
        currentPath: i,
        propertyPath: i
      });
      if (u === void 0)
        return r;
      if (e.openaiStrictMode && a.isOptional() && !a.isNullable() && typeof ((l = a._def) == null ? void 0 : l.defaultValue) > "u")
        throw new Error(`Zod field at \`${i.join("/")}\` uses \`.optional()\` without \`.nullable()\` which is not supported by the API. See: https://platform.openai.com/docs/guides/structured-outputs?api-mode=responses#all-fields-must-be-required`);
      return {
        properties: {
          ...r.properties,
          [s]: u
        },
        required: a.isOptional() && !e.openaiStrictMode ? r.required : [...r.required, s]
      };
    }, { properties: {}, required: [] }),
    additionalProperties: ro(n, e)
  };
  return t.required.length || delete t.required, t;
}
const ao = (n, e) => {
  if (e.propertyPath && e.currentPath.slice(0, e.propertyPath.length).toString() === e.propertyPath.toString())
    return B(n.innerType._def, { ...e, currentPath: e.currentPath });
  const t = B(n.innerType._def, {
    ...e,
    currentPath: [...e.currentPath, "anyOf", "1"]
  });
  return t ? {
    anyOf: [
      {
        not: {}
      },
      t
    ]
  } : {};
}, io = (n, e) => {
  if (e.pipeStrategy === "input")
    return B(n.in._def, e);
  if (e.pipeStrategy === "output")
    return B(n.out._def, e);
  const t = B(n.in._def, {
    ...e,
    currentPath: [...e.currentPath, "allOf", "0"]
  }), r = B(n.out._def, {
    ...e,
    currentPath: [...e.currentPath, "allOf", t ? "1" : "0"]
  });
  return {
    allOf: [t, r].filter((s) => s !== void 0)
  };
};
function oo(n, e) {
  return B(n.type._def, e);
}
function uo(n, e) {
  const r = {
    type: "array",
    uniqueItems: !0,
    items: B(n.valueType._def, {
      ...e,
      currentPath: [...e.currentPath, "items"]
    })
  };
  return n.minSize && z(r, "minItems", n.minSize.value, n.minSize.message, e), n.maxSize && z(r, "maxItems", n.maxSize.value, n.maxSize.message, e), r;
}
function co(n, e) {
  return n.rest ? {
    type: "array",
    minItems: n.items.length,
    items: n.items.map((t, r) => B(t._def, {
      ...e,
      currentPath: [...e.currentPath, "items", `${r}`]
    })).reduce((t, r) => r === void 0 ? t : [...t, r], []),
    additionalItems: B(n.rest._def, {
      ...e,
      currentPath: [...e.currentPath, "additionalItems"]
    })
  } : {
    type: "array",
    minItems: n.items.length,
    maxItems: n.items.length,
    items: n.items.map((t, r) => B(t._def, {
      ...e,
      currentPath: [...e.currentPath, "items", `${r}`]
    })).reduce((t, r) => r === void 0 ? t : [...t, r], [])
  };
}
function lo() {
  return {
    not: {}
  };
}
function po() {
  return {};
}
const fo = (n, e) => B(n.innerType._def, e);
function B(n, e, t = !1) {
  var i;
  const r = e.seen.get(n);
  if (e.override) {
    const u = (i = e.override) == null ? void 0 : i.call(e, n, e, r, t);
    if (u !== ii)
      return u;
  }
  if (r && !t) {
    const u = ho(r, e);
    if (u !== void 0)
      return "$ref" in u && e.seenRefs.add(u.$ref), u;
  }
  const s = { def: n, path: e.currentPath, jsonSchema: void 0 };
  e.seen.set(n, s);
  const a = go(n, n.typeName, e, t);
  return a && _o(n, e, a), s.jsonSchema = a, a;
}
const ho = (n, e) => {
  switch (e.$refStrategy) {
    case "root":
      return { $ref: n.path.join("/") };
    // this case is needed as OpenAI strict mode doesn't support top-level `$ref`s, i.e.
    // the top-level schema *must* be `{"type": "object", "properties": {...}}` but if we ever
    // need to define a `$ref`, relative `$ref`s aren't supported, so we need to extract
    // the schema to `#/definitions/` and reference that.
    //
    // e.g. if we need to reference a schema at
    // `["#","definitions","contactPerson","properties","person1","properties","name"]`
    // then we'll extract it out to `contactPerson_properties_person1_properties_name`
    case "extract-to-root":
      const t = n.path.slice(e.basePath.length + 1).join("_");
      return t !== e.name && e.nameStrategy === "duplicate-ref" && (e.definitions[t] = n.def), { $ref: [...e.basePath, e.definitionPath, t].join("/") };
    case "relative":
      return { $ref: mo(e.currentPath, n.path) };
    case "none":
    case "seen":
      return n.path.length < e.currentPath.length && n.path.every((r, s) => e.currentPath[s] === r) ? (console.warn(`Recursive reference detected at ${e.currentPath.join("/")}! Defaulting to any`), {}) : e.$refStrategy === "seen" ? {} : void 0;
  }
}, mo = (n, e) => {
  let t = 0;
  for (; t < n.length && t < e.length && n[t] === e[t]; t++)
    ;
  return [(n.length - t).toString(), ...e.slice(t)].join("/");
}, go = (n, e, t, r) => {
  switch (e) {
    case S.ZodString:
      return ua(n, t);
    case S.ZodNumber:
      return no(n, t);
    case S.ZodObject:
      return so(n, t);
    case S.ZodBigInt:
      return Fi(n, t);
    case S.ZodBoolean:
      return Li();
    case S.ZodDate:
      return oa(n, t);
    case S.ZodUndefined:
      return lo();
    case S.ZodNull:
      return Qi(t);
    case S.ZodArray:
      return $i(n, t);
    case S.ZodUnion:
    case S.ZodDiscriminatedUnion:
      return eo(n, t);
    case S.ZodIntersection:
      return Vi(n, t);
    case S.ZodTuple:
      return co(n, t);
    case S.ZodRecord:
      return ca(n, t);
    case S.ZodLiteral:
      return Hi(n, t);
    case S.ZodEnum:
      return Gi(n);
    case S.ZodNativeEnum:
      return Yi(n);
    case S.ZodNullable:
      return to(n, t);
    case S.ZodOptional:
      return ao(n, t);
    case S.ZodMap:
      return Ki(n, t);
    case S.ZodSet:
      return uo(n, t);
    case S.ZodLazy:
      return B(n.getter()._def, t);
    case S.ZodPromise:
      return oo(n, t);
    case S.ZodNaN:
    case S.ZodNever:
      return Xi();
    case S.ZodEffects:
      return Bi(n, t, r);
    case S.ZodAny:
      return ji();
    case S.ZodUnknown:
      return po();
    case S.ZodDefault:
      return Ji(n, t);
    case S.ZodBranded:
      return Zi(n, t);
    case S.ZodReadonly:
      return fo(n, t);
    case S.ZodCatch:
      return Ui(n, t);
    case S.ZodPipeline:
      return io(n, t);
    case S.ZodFunction:
    case S.ZodVoid:
    case S.ZodSymbol:
      return;
    default:
      return /* @__PURE__ */ ((s) => {
      })();
  }
}, _o = (n, e, t) => (n.description && (t.description = n.description, e.markdownDescription && (t.markdownDescription = n.description)), t), yo = (n, e) => {
  const t = ci(e), r = typeof e == "string" ? e : (e == null ? void 0 : e.nameStrategy) === "title" || e == null ? void 0 : e.name, s = B(n._def, r === void 0 ? t : {
    ...t,
    currentPath: [...t.basePath, t.definitionPath, r]
  }, !1) ?? {}, a = typeof e == "object" && e.name !== void 0 && e.nameStrategy === "title" ? e.name : void 0;
  a !== void 0 && (s.title = a);
  const i = (() => {
    if (ui(t.definitions))
      return;
    const l = {}, c = /* @__PURE__ */ new Set();
    for (let p = 0; p < 500; p++) {
      const f = Object.entries(t.definitions).filter(([h]) => !c.has(h));
      if (f.length === 0)
        break;
      for (const [h, b] of f)
        l[h] = B(fr(b), { ...t, currentPath: [...t.basePath, t.definitionPath, h] }, !0) ?? {}, c.add(h);
    }
    return l;
  })(), u = r === void 0 ? i ? {
    ...s,
    [t.definitionPath]: i
  } : s : t.nameStrategy === "duplicate-ref" ? {
    ...s,
    ...i || t.seenRefs.size ? {
      [t.definitionPath]: {
        ...i,
        // only actually duplicate the schema definition if it was ever referenced
        // otherwise the duplication is completely pointless
        ...t.seenRefs.size ? { [r]: s } : void 0
      }
    } : void 0
  } : {
    $ref: [...t.$refStrategy === "relative" ? [] : t.basePath, t.definitionPath, r].join("/"),
    [t.definitionPath]: {
      ...i,
      [r]: s
    }
  };
  return t.target === "jsonSchema7" ? u.$schema = "http://json-schema.org/draft-07/schema#" : t.target === "jsonSchema2019-09" && (u.$schema = "https://json-schema.org/draft/2019-09/schema#"), u;
};
function vo(n, { parser: e, callback: t }) {
  const r = { ...n };
  return Object.defineProperties(r, {
    $brand: {
      value: "auto-parseable-tool",
      enumerable: !1
    },
    $parseRaw: {
      value: e,
      enumerable: !1
    },
    $callback: {
      value: t,
      enumerable: !1
    }
  }), r;
}
function da(n, e) {
  return yo(n, {
    openaiStrictMode: !0,
    name: e.name,
    nameStrategy: "duplicate-ref",
    $refStrategy: "extract-to-root",
    nullableStrategy: "property"
  });
}
function wo(n, e, t) {
  return ai({
    type: "json_schema",
    ...t,
    name: e,
    strict: !0,
    schema: da(n, { name: e })
  }, (r) => n.parse(JSON.parse(r)));
}
function bo(n) {
  return vo({
    type: "function",
    name: n.name,
    parameters: da(n.parameters, { name: n.name }),
    strict: !0
  }, {
    callback: n.function,
    parser: (e) => n.parameters.parse(JSON.parse(e))
  });
}
class Ye extends Error {
  constructor(t, r) {
    super(t);
    _(this, "state");
    this.state = r;
  }
}
class xo extends Ye {
}
class _s extends Ye {
}
class ve extends Ye {
}
class te extends Ye {
}
class ys extends Ye {
  constructor(t, r, s) {
    super(t, s);
    _(this, "error");
    this.error = r;
  }
}
class So extends Ye {
  constructor(t, r, s) {
    super(t, s);
    _(this, "error");
    this.error = r;
  }
}
class vs extends Ye {
  constructor(t, r, s) {
    super(t, s);
    _(this, "result");
    this.result = r;
  }
}
class br extends Ye {
  constructor(t, r, s) {
    super(t, s);
    _(this, "result");
    this.result = r;
  }
}
function _t(n) {
  return typeof n == "object" && n !== null && "_def" in n && typeof n._def == "object" && n._def !== null && "typeName" in n._def && n._def.typeName === "ZodObject";
}
function Io(n) {
  return typeof n == "object" && n !== null && "input" in n && typeof n.input == "string";
}
function Bn(n) {
  if (n = n.replace(/\s/g, "_"), n = n.replace(/[^a-zA-Z0-9]/g, "_"), n.length === 0)
    throw new Error("Tool name cannot be empty");
  return n;
}
function Lr(n, e) {
  const t = (r) => JSON.parse(r);
  if (_t(n)) {
    const r = bo({
      name: e,
      parameters: n,
      function: () => {
      }
    });
    return {
      schema: r.parameters,
      parser: r.$parseRaw
    };
  } else if (typeof n == "object" && n !== null)
    return {
      schema: n,
      parser: t
    };
  throw new te("Input type is not a ZodObject or a valid JSON schema");
}
function ws(n) {
  if (n === "text")
    return "text";
  if (_t(n)) {
    const e = wo(n, "output");
    return {
      type: e.type,
      name: e.name,
      strict: e.strict || !1,
      schema: e.schema
    };
  }
  return n;
}
function To(n) {
  return n && n.__esModule && Object.prototype.hasOwnProperty.call(n, "default") ? n.default : n;
}
var In = { exports: {} }, sr, bs;
function ko() {
  if (bs) return sr;
  bs = 1;
  var n = 1e3, e = n * 60, t = e * 60, r = t * 24, s = r * 7, a = r * 365.25;
  sr = function(p, f) {
    f = f || {};
    var h = typeof p;
    if (h === "string" && p.length > 0)
      return i(p);
    if (h === "number" && isFinite(p))
      return f.long ? l(p) : u(p);
    throw new Error(
      "val is not a non-empty string or a valid number. val=" + JSON.stringify(p)
    );
  };
  function i(p) {
    if (p = String(p), !(p.length > 100)) {
      var f = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
        p
      );
      if (f) {
        var h = parseFloat(f[1]), b = (f[2] || "ms").toLowerCase();
        switch (b) {
          case "years":
          case "year":
          case "yrs":
          case "yr":
          case "y":
            return h * a;
          case "weeks":
          case "week":
          case "w":
            return h * s;
          case "days":
          case "day":
          case "d":
            return h * r;
          case "hours":
          case "hour":
          case "hrs":
          case "hr":
          case "h":
            return h * t;
          case "minutes":
          case "minute":
          case "mins":
          case "min":
          case "m":
            return h * e;
          case "seconds":
          case "second":
          case "secs":
          case "sec":
          case "s":
            return h * n;
          case "milliseconds":
          case "millisecond":
          case "msecs":
          case "msec":
          case "ms":
            return h;
          default:
            return;
        }
      }
    }
  }
  function u(p) {
    var f = Math.abs(p);
    return f >= r ? Math.round(p / r) + "d" : f >= t ? Math.round(p / t) + "h" : f >= e ? Math.round(p / e) + "m" : f >= n ? Math.round(p / n) + "s" : p + "ms";
  }
  function l(p) {
    var f = Math.abs(p);
    return f >= r ? c(p, f, r, "day") : f >= t ? c(p, f, t, "hour") : f >= e ? c(p, f, e, "minute") : f >= n ? c(p, f, n, "second") : p + " ms";
  }
  function c(p, f, h, b) {
    var y = f >= h * 1.5;
    return Math.round(p / h) + " " + b + (y ? "s" : "");
  }
  return sr;
}
var ar, xs;
function Ao() {
  if (xs) return ar;
  xs = 1;
  function n(e) {
    r.debug = r, r.default = r, r.coerce = c, r.disable = u, r.enable = a, r.enabled = l, r.humanize = ko(), r.destroy = p, Object.keys(e).forEach((f) => {
      r[f] = e[f];
    }), r.names = [], r.skips = [], r.formatters = {};
    function t(f) {
      let h = 0;
      for (let b = 0; b < f.length; b++)
        h = (h << 5) - h + f.charCodeAt(b), h |= 0;
      return r.colors[Math.abs(h) % r.colors.length];
    }
    r.selectColor = t;
    function r(f) {
      let h, b = null, y, w;
      function E(...R) {
        if (!E.enabled)
          return;
        const F = E, W = Number(/* @__PURE__ */ new Date()), J = W - (h || W);
        F.diff = J, F.prev = h, F.curr = W, h = W, R[0] = r.coerce(R[0]), typeof R[0] != "string" && R.unshift("%O");
        let G = 0;
        R[0] = R[0].replace(/%([a-zA-Z%])/g, (X, le) => {
          if (X === "%%")
            return "%";
          G++;
          const xe = r.formatters[le];
          if (typeof xe == "function") {
            const ge = R[G];
            X = xe.call(F, ge), R.splice(G, 1), G--;
          }
          return X;
        }), r.formatArgs.call(F, R), (F.log || r.log).apply(F, R);
      }
      return E.namespace = f, E.useColors = r.useColors(), E.color = r.selectColor(f), E.extend = s, E.destroy = r.destroy, Object.defineProperty(E, "enabled", {
        enumerable: !0,
        configurable: !1,
        get: () => b !== null ? b : (y !== r.namespaces && (y = r.namespaces, w = r.enabled(f)), w),
        set: (R) => {
          b = R;
        }
      }), typeof r.init == "function" && r.init(E), E;
    }
    function s(f, h) {
      const b = r(this.namespace + (typeof h > "u" ? ":" : h) + f);
      return b.log = this.log, b;
    }
    function a(f) {
      r.save(f), r.namespaces = f, r.names = [], r.skips = [];
      const h = (typeof f == "string" ? f : "").trim().replace(/\s+/g, ",").split(",").filter(Boolean);
      for (const b of h)
        b[0] === "-" ? r.skips.push(b.slice(1)) : r.names.push(b);
    }
    function i(f, h) {
      let b = 0, y = 0, w = -1, E = 0;
      for (; b < f.length; )
        if (y < h.length && (h[y] === f[b] || h[y] === "*"))
          h[y] === "*" ? (w = y, E = b, y++) : (b++, y++);
        else if (w !== -1)
          y = w + 1, E++, b = E;
        else
          return !1;
      for (; y < h.length && h[y] === "*"; )
        y++;
      return y === h.length;
    }
    function u() {
      const f = [
        ...r.names,
        ...r.skips.map((h) => "-" + h)
      ].join(",");
      return r.enable(""), f;
    }
    function l(f) {
      for (const h of r.skips)
        if (i(f, h))
          return !1;
      for (const h of r.names)
        if (i(f, h))
          return !0;
      return !1;
    }
    function c(f) {
      return f instanceof Error ? f.stack || f.message : f;
    }
    function p() {
      console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
    }
    return r.enable(r.load()), r;
  }
  return ar = n, ar;
}
var Ss;
function Co() {
  return Ss || (Ss = 1, (function(n, e) {
    e.formatArgs = r, e.save = s, e.load = a, e.useColors = t, e.storage = i(), e.destroy = /* @__PURE__ */ (() => {
      let l = !1;
      return () => {
        l || (l = !0, console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."));
      };
    })(), e.colors = [
      "#0000CC",
      "#0000FF",
      "#0033CC",
      "#0033FF",
      "#0066CC",
      "#0066FF",
      "#0099CC",
      "#0099FF",
      "#00CC00",
      "#00CC33",
      "#00CC66",
      "#00CC99",
      "#00CCCC",
      "#00CCFF",
      "#3300CC",
      "#3300FF",
      "#3333CC",
      "#3333FF",
      "#3366CC",
      "#3366FF",
      "#3399CC",
      "#3399FF",
      "#33CC00",
      "#33CC33",
      "#33CC66",
      "#33CC99",
      "#33CCCC",
      "#33CCFF",
      "#6600CC",
      "#6600FF",
      "#6633CC",
      "#6633FF",
      "#66CC00",
      "#66CC33",
      "#9900CC",
      "#9900FF",
      "#9933CC",
      "#9933FF",
      "#99CC00",
      "#99CC33",
      "#CC0000",
      "#CC0033",
      "#CC0066",
      "#CC0099",
      "#CC00CC",
      "#CC00FF",
      "#CC3300",
      "#CC3333",
      "#CC3366",
      "#CC3399",
      "#CC33CC",
      "#CC33FF",
      "#CC6600",
      "#CC6633",
      "#CC9900",
      "#CC9933",
      "#CCCC00",
      "#CCCC33",
      "#FF0000",
      "#FF0033",
      "#FF0066",
      "#FF0099",
      "#FF00CC",
      "#FF00FF",
      "#FF3300",
      "#FF3333",
      "#FF3366",
      "#FF3399",
      "#FF33CC",
      "#FF33FF",
      "#FF6600",
      "#FF6633",
      "#FF9900",
      "#FF9933",
      "#FFCC00",
      "#FFCC33"
    ];
    function t() {
      if (typeof window < "u" && window.process && (window.process.type === "renderer" || window.process.__nwjs))
        return !0;
      if (typeof navigator < "u" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))
        return !1;
      let l;
      return typeof document < "u" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
      typeof window < "u" && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
      typeof navigator < "u" && navigator.userAgent && (l = navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)) && parseInt(l[1], 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
      typeof navigator < "u" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }
    function r(l) {
      if (l[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + l[0] + (this.useColors ? "%c " : " ") + "+" + n.exports.humanize(this.diff), !this.useColors)
        return;
      const c = "color: " + this.color;
      l.splice(1, 0, c, "color: inherit");
      let p = 0, f = 0;
      l[0].replace(/%[a-zA-Z%]/g, (h) => {
        h !== "%%" && (p++, h === "%c" && (f = p));
      }), l.splice(f, 0, c);
    }
    e.log = console.debug || console.log || (() => {
    });
    function s(l) {
      try {
        l ? e.storage.setItem("debug", l) : e.storage.removeItem("debug");
      } catch {
      }
    }
    function a() {
      let l;
      try {
        l = e.storage.getItem("debug") || e.storage.getItem("DEBUG");
      } catch {
      }
      return !l && typeof process < "u" && "env" in process && (l = process.env.DEBUG), l;
    }
    function i() {
      try {
        return localStorage;
      } catch {
      }
    }
    n.exports = Ao()(e);
    const { formatters: u } = n.exports;
    u.j = function(l) {
      try {
        return JSON.stringify(l);
      } catch (c) {
        return "[UnexpectedJSONParseError]: " + c.message;
      }
    };
  })(In, In.exports)), In.exports;
}
var Eo = Co();
const Oo = /* @__PURE__ */ To(Eo);
function la() {
  return $o();
}
function Is(n) {
  const e = la();
  return typeof e < "u" && (e[n] === "true" || e[n] === "1");
}
const pa = {
  get disabled() {
    return !0;
  }
}, fa = {
  get dontLogModelData() {
    return Is("OPENAI_AGENTS_DONT_LOG_MODEL_DATA");
  },
  get dontLogToolData() {
    return Is("OPENAI_AGENTS_DONT_LOG_TOOL_DATA");
  }
}, Ro = fa.dontLogModelData, No = fa.dontLogToolData;
function ha(n = "openai-agents") {
  return {
    namespace: n,
    debug: Oo(n),
    error: console.error,
    warn: console.warn,
    dontLogModelData: Ro,
    dontLogToolData: No
  };
}
const O = ha("openai-agents:core");
function Ke(n) {
  if (n == null)
    return String(n);
  if (typeof n == "string")
    return n;
  if (typeof n == "object")
    try {
      return JSON.stringify(n);
    } catch {
      return "[object with circular references]";
    }
  return String(n);
}
function Do(n, e) {
  return `An error occurred while running the tool. Please try again. Error: ${e instanceof Error ? e.toString() : String(e)}`;
}
function xr(n) {
  const e = n.name ? Bn(n.name) : Bn(n.execute.name), t = typeof n.errorFunction > "u" ? Do : n.errorFunction;
  if (!e)
    throw new Error("Tool name cannot be empty. Either name your function or provide a name in the options.");
  const r = n.strict ?? !0;
  if (!r && _t(n.parameters))
    throw new te("Strict mode is required for Zod parameters");
  const { parser: s, schema: a } = Lr(n.parameters, e);
  async function i(p, f, h) {
    const [b, y] = await jr(() => s(f));
    if (b !== null)
      throw O.dontLogToolData ? O.debug(`Invalid JSON input for tool ${e}`) : O.debug(`Invalid JSON input for tool ${e}: ${f}`), new ve("Invalid JSON input for tool");
    O.dontLogToolData ? O.debug(`Invoking tool ${e}`) : O.debug(`Invoking tool ${e} with input ${f}`);
    const w = await n.execute(y, p, h), E = Ke(w);
    return O.dontLogToolData ? O.debug(`Tool ${e} completed`) : O.debug(`Tool ${e} returned: ${E}`), w;
  }
  async function u(p, f, h) {
    return i(p, f, h).catch((b) => {
      if (t) {
        const y = Xt();
        return y == null || y.setError({
          message: "Error running tool (non-fatal)",
          data: {
            tool_name: e,
            error: b.toString()
          }
        }), t(p, b);
      }
      throw b;
    });
  }
  const l = typeof n.needsApproval == "function" ? n.needsApproval : async () => typeof n.needsApproval == "boolean" ? n.needsApproval : !1, c = typeof n.isEnabled == "function" ? async (p, f) => {
    const h = n.isEnabled;
    return !!await h({ runContext: p, agent: f });
  } : async () => typeof n.isEnabled == "boolean" ? n.isEnabled : !0;
  return {
    type: "function",
    name: e,
    description: n.description,
    parameters: a,
    strict: r,
    invoke: u,
    needsApproval: l,
    isEnabled: c
  };
}
m({
  name: d(),
  description: d().optional(),
  inputSchema: m({
    type: g("object"),
    properties: ee(d(), L()),
    required: U(d()),
    additionalProperties: lt()
  })
});
const ir = {};
async function Po({ server: n, convertSchemasToStrict: e, runContext: t, agent: r }) {
  return n.cacheToolsList && ir[n.name] ? ir[n.name].map((s) => Ts(s, n, e)) : Tu(async (s) => {
    const a = await n.listTools();
    let i = a;
    if (t && r) {
      const l = { runContext: t, agent: r, serverName: n.name }, c = [];
      for (const p of a) {
        const f = n.toolFilter;
        if (f)
          if (typeof f == "function") {
            if (!await f(l, p)) {
              O.debug(`MCP Tool (server: ${n.name}, tool: ${p.name}) is blocked by the callable filter.`);
              continue;
            }
          } else {
            const h = f.allowedToolNames ?? [], b = f.blockedToolNames ?? [];
            if (h.length > 0 || b.length > 0) {
              const y = h.length > 0 ? h.includes(p.name) : !0, w = b.length > 0 ? b.includes(p.name) : !1;
              if (!y || w) {
                w ? O.debug(`MCP Tool (server: ${n.name}, tool: ${p.name}) is blocked by the static filter.`) : y || O.debug(`MCP Tool (server: ${n.name}, tool: ${p.name}) is not allowed by the static filter.`);
                continue;
              }
            }
          }
        c.push(p);
      }
      i = c;
    }
    s.spanData.result = i.map((l) => l.name);
    const u = i.map((l) => Ts(l, n, e));
    return n.cacheToolsList && (ir[n.name] = i), u;
  }, { data: { server: n.name } });
}
async function Mo(n, e, t, r = !1) {
  const s = Array.isArray(n) ? {
    mcpServers: n,
    runContext: e,
    agent: t,
    convertSchemasToStrict: r
  } : n, { mcpServers: a, convertSchemasToStrict: i = !1, runContext: u, agent: l } = s, c = [], p = /* @__PURE__ */ new Set();
  for (const f of a) {
    const h = await Po({
      server: f,
      convertSchemasToStrict: i,
      runContext: u,
      agent: l
    }), y = [...new Set(h.map((w) => w.name))].filter((w) => p.has(w));
    if (y.length > 0)
      throw new te(`Duplicate tool names found across MCP servers: ${y.join(", ")}`);
    for (const w of h)
      p.add(w.name), c.push(w);
  }
  return c;
}
function Ts(n, e, t) {
  var i, u, l, c;
  async function r(p, f) {
    let h = {};
    typeof p == "string" && p ? h = JSON.parse(p) : typeof p == "object" && p != null && (h = p);
    const b = Xt();
    b && (b.spanData.mcp_data = { server: e.name });
    const y = await e.callTool(n.name, h);
    return y.length === 1 ? y[0] : y;
  }
  const s = {
    ...n.inputSchema,
    type: ((i = n.inputSchema) == null ? void 0 : i.type) ?? "object",
    properties: ((u = n.inputSchema) == null ? void 0 : u.properties) ?? {},
    required: ((l = n.inputSchema) == null ? void 0 : l.required) ?? [],
    additionalProperties: ((c = n.inputSchema) == null ? void 0 : c.additionalProperties) ?? !1
  };
  if (t || s.additionalProperties === !0)
    try {
      const p = jo(s);
      return xr({
        name: n.name,
        description: n.description || "",
        parameters: p,
        strict: !0,
        execute: r
      });
    } catch (p) {
      O.warn(`Error converting MCP schema to strict mode: ${p}`);
    }
  const a = {
    ...s,
    additionalProperties: !0
  };
  return xr({
    name: n.name,
    description: n.description || "",
    parameters: a,
    strict: !1,
    execute: r
  });
}
function jo(n) {
  const e = {
    ...n,
    additionalProperties: !1
  };
  return e.required || (e.required = []), e;
}
function $o() {
  return {};
}
var kt, tt;
class Wn {
  constructor() {
    I(this, kt, new EventTarget());
    I(this, tt, /* @__PURE__ */ new Map());
  }
  on(e, t) {
    const r = e;
    let s = o(this, tt).get(r);
    s || (s = /* @__PURE__ */ new Map(), o(this, tt).set(r, s));
    let a = s.get(t);
    a || (a = /* @__PURE__ */ new Set(), s.set(t, a));
    const i = ((u) => t(...u.detail ?? []));
    return a.add(i), o(this, kt).addEventListener(r, i), this;
  }
  off(e, t) {
    const r = e, s = o(this, tt).get(r), a = s == null ? void 0 : s.get(t);
    if (a != null && a.size) {
      for (const i of a)
        o(this, kt).removeEventListener(r, i);
      s == null || s.delete(t), (s == null ? void 0 : s.size) === 0 && o(this, tt).delete(r);
    }
    return this;
  }
  emit(e, ...t) {
    const r = new CustomEvent(e, { detail: t });
    return o(this, kt).dispatchEvent(r);
  }
  once(e, t) {
    const r = (...s) => {
      this.off(e, r), t(...s);
    };
    return this.on(e, r), this;
  }
}
kt = new WeakMap(), tt = new WeakMap();
const ma = () => typeof crypto < "u" && crypto.randomUUID ? crypto.randomUUID() : "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(n) {
  const e = Math.random() * 16 | 0;
  return (n === "x" ? e : e & 3 | 8).toString(16);
}), Fo = class {
  constructor() {
  }
  pipeTo(e, t) {
  }
  pipeThrough(e, t) {
  }
}, Lo = globalThis.ReadableStream, Zo = globalThis.TransformStream;
class Uo {
  constructor() {
    _(this, "context", null);
  }
  run(e, t) {
    return this.context = e, t();
  }
  getStore() {
    return this.context;
  }
  enterWith(e) {
    this.context = e;
  }
}
class qo {
  constructor() {
  }
  setTimeout(e, t) {
    const r = setTimeout(e, t);
    return r.ref = typeof r.ref == "function" ? r.ref : () => r, r.unref = typeof r.unref == "function" ? r.unref : () => r, r.hasRef = typeof r.hasRef == "function" ? r.hasRef : () => !0, r.refresh = typeof r.refresh == "function" ? r.refresh : () => r, r;
  }
  clearTimeout(e) {
    window.clearTimeout(e);
  }
}
const Jo = new qo();
class Zr {
  on(e, t) {
    return this.eventEmitter.on(e, t), this.eventEmitter;
  }
  off(e, t) {
    return this.eventEmitter.off(e, t), this.eventEmitter;
  }
  emit(e, ...t) {
    return this.eventEmitter.emit(e, ...t);
  }
  once(e, t) {
    return this.eventEmitter.once(e, t), this.eventEmitter;
  }
}
class Bo extends Zr {
  constructor() {
    super(...arguments);
    _(this, "eventEmitter", new Wn());
  }
}
class Go extends Zr {
  constructor() {
    super(...arguments);
    _(this, "eventEmitter", new Wn());
  }
}
const zo = "OPENAI_DEFAULT_MODEL";
function Kn(n) {
  return n.startsWith("gpt-5-chat") ? !1 : n.startsWith("gpt-5");
}
function ga() {
  return Kn(_a());
}
function _a() {
  var e;
  return ((e = la()[zo]) == null ? void 0 : e.toLowerCase()) ?? "gpt-4.1";
}
function Vo(n) {
  const e = _a();
  return Kn(e) ? {
    // We chose "low" instead of "minimal" because some of the built-in tools
    // (e.g., file search, image generation, etc.) do not support "minimal"
    // If you want to use "minimal" reasoning effort, you can pass your own model settings
    reasoning: { effort: "low" },
    text: { verbosity: "low" }
  } : {};
}
function ya(n) {
  return JSON.stringify({ assistant: n.name });
}
function Ho(n) {
  return `transfer_to_${Bn(n.name)}`;
}
function Wo(n) {
  return `Handoff to the ${n.name} agent to handle the request. ${n.handoffDescription ?? ""}`;
}
class va {
  constructor(e, t) {
    /**
     * The name of the tool that represents the handoff.
     */
    _(this, "toolName");
    /**
     * The description of the tool that represents the handoff.
     */
    _(this, "toolDescription");
    /**
     * The JSON schema for the handoff input. Can be empty if the handoff does not take an input
     */
    _(this, "inputJsonSchema", {
      type: "object",
      properties: {},
      required: [],
      additionalProperties: !1
    });
    /**
     * Whether the input JSON schema is in strict mode. We **strongly** recommend setting this to
     * true, as it increases the likelihood of correct JSON input.
     */
    _(this, "strictJsonSchema", !0);
    /**
     * The function that invokes the handoff. The parameters passed are:
     * 1. The handoff run context
     * 2. The arguments from the LLM, as a JSON string. Empty string if inputJsonSchema is empty.
     *
     * Must return an agent
     */
    _(this, "onInvokeHandoff");
    /**
     * The name of the agent that is being handed off to.
     */
    _(this, "agentName");
    /**
     * A function that filters the inputs that are passed to the next agent. By default, the new agent
     * sees the entire conversation history. In some cases, you may want to filter inputs e.g. to
     * remove older inputs, or remove tools from existing inputs.
     *
     * The function will receive the entire conversation hisstory so far, including the input item
     * that triggered the handoff and a tool call output item representing the handoff tool's output.
     *
     * You are free to modify the input history or new items as you see fit. The next agent that runs
     * will receive `handoffInputData.allItems
     */
    _(this, "inputFilter");
    /**
     * The agent that is being handed off to.
     */
    _(this, "agent");
    _(this, "isEnabled", async () => !0);
    this.agentName = e.name, this.onInvokeHandoff = t, this.toolName = Ho(e), this.toolDescription = Wo(e), this.agent = e;
  }
  /**
   * Returns a function tool definition that can be used to invoke the handoff.
   */
  getHandoffAsFunctionTool() {
    return {
      type: "function",
      name: this.toolName,
      description: this.toolDescription,
      parameters: this.inputJsonSchema,
      strict: this.strictJsonSchema
    };
  }
}
function wa(n, e = {}) {
  let t;
  const r = !!e.onHandoff, s = !!e.inputType;
  if (!(r === s))
    throw new te("You must provide either both `onHandoff` and `inputType` or neither.");
  async function i(l, c) {
    var p;
    if (t) {
      if (!c)
        throw Tt({
          message: `Handoff function expected non empty input but got: ${c}`,
          data: {
            details: "input is empty"
          }
        }), new ve("Handoff function expected non empty input");
      try {
        const f = await t(c);
        e.onHandoff && await e.onHandoff(l, f);
      } catch (f) {
        throw Tt({
          message: "Invalid JSON provided",
          data: {}
        }), O.dontLogToolData || O.error(`Invalid JSON when parsing: ${c}. Error: ${f}`), new ve("Invalid JSON provided");
      }
    } else
      await ((p = e.onHandoff) == null ? void 0 : p.call(e, l));
    return n;
  }
  const u = new va(n, i);
  if (typeof e.isEnabled == "function") {
    const l = e.isEnabled;
    u.isEnabled = async ({ runContext: c, agent: p }) => !!await l({ runContext: c, agent: p });
  } else typeof e.isEnabled == "boolean" && (u.isEnabled = async () => e.isEnabled);
  if (e.inputType) {
    const l = Lr(e.inputType, u.toolName);
    u.inputJsonSchema = l.schema, u.strictJsonSchema = !0, t = l.parser;
  }
  return e.toolNameOverride && (u.toolName = e.toolNameOverride), e.toolDescriptionOverride && (u.toolDescription = e.toolDescriptionOverride), e.inputFilter && (u.inputFilter = e.inputFilter), u;
}
function Ko(n) {
  return n instanceof va ? n : wa(n);
}
function ba(n) {
  if (n.type !== "message" || n.role !== "assistant")
    return;
  const e = n.content[n.content.length - 1];
  if (e.type === "output_text")
    return e.text;
}
function Yo(n) {
  return n.output.length === 0 ? "" : ba(n.output[n.output.length - 1]) || "";
}
const Sr = /* @__PURE__ */ new WeakMap();
function Xo(n, e) {
  n && Sr.set(n, e);
}
function Qo(n) {
  const e = Sr.get(n);
  return e && Sr.delete(n), e;
}
const eu = m({ input: d() }), It = class It extends Bo {
  constructor(t) {
    super();
    _(this, "name");
    _(this, "instructions");
    _(this, "prompt");
    _(this, "handoffDescription");
    _(this, "handoffs");
    _(this, "model");
    _(this, "modelSettings");
    _(this, "tools");
    _(this, "mcpServers");
    _(this, "inputGuardrails");
    _(this, "outputGuardrails");
    _(this, "outputType", "text");
    _(this, "toolUseBehavior");
    _(this, "resetToolChoice");
    if (typeof t.name != "string" || t.name.trim() === "")
      throw new te("Agent must have a name.");
    if (this.name = t.name, this.instructions = t.instructions ?? It.DEFAULT_MODEL_PLACEHOLDER, this.prompt = t.prompt, this.handoffDescription = t.handoffDescription ?? "", this.handoffs = t.handoffs ?? [], this.model = t.model ?? "", this.modelSettings = t.modelSettings ?? Vo(), this.tools = t.tools ?? [], this.mcpServers = t.mcpServers ?? [], this.inputGuardrails = t.inputGuardrails ?? [], this.outputGuardrails = t.outputGuardrails ?? [], t.outputType && (this.outputType = t.outputType), this.toolUseBehavior = t.toolUseBehavior ?? "run_llm_again", this.resetToolChoice = t.resetToolChoice ?? !0, // The user sets a non-default model
    t.model !== void 0 && // The default model is gpt-5
    ga() && // However, the specified model is not a gpt-5 model
    (typeof t.model != "string" || !Kn(t.model)) && // The model settings are not customized for the specified model
    t.modelSettings === void 0 && (this.modelSettings = {}), (t.handoffOutputTypeWarningEnabled === void 0 || t.handoffOutputTypeWarningEnabled) && this.handoffs && this.outputType) {
      const r = /* @__PURE__ */ new Set([JSON.stringify(this.outputType)]);
      for (const s of this.handoffs)
        "outputType" in s && s.outputType ? r.add(JSON.stringify(s.outputType)) : "agent" in s && s.agent.outputType && r.add(JSON.stringify(s.agent.outputType));
      r.size > 1 && O.warn(`[Agent] Warning: Handoff agents have different output types: ${Array.from(r).join(", ")}. You can make it type-safe by using Agent.create({ ... }) method instead.`);
    }
  }
  /**
   * Create an Agent with handoffs and automatically infer the union type for TOutput from the handoff agents' output types.
   */
  static create(t) {
    return new It({
      ...t,
      handoffs: t.handoffs,
      outputType: t.outputType,
      handoffOutputTypeWarningEnabled: !1
    });
  }
  /**
   * Output schema name.
   */
  get outputSchemaName() {
    if (this.outputType === "text")
      return "text";
    if (_t(this.outputType))
      return "ZodOutput";
    if (typeof this.outputType == "object")
      return this.outputType.name;
    throw new Error(`Unknown output type: ${this.outputType}`);
  }
  /**
   * Makes a copy of the agent, with the given arguments changed. For example, you could do:
   *
   * ```
   * const newAgent = agent.clone({ instructions: 'New instructions' })
   * ```
   *
   * @param config - A partial configuration to change.
   * @returns A new agent with the given changes.
   */
  clone(t) {
    return new It({
      ...this,
      ...t
    });
  }
  /**
   * Transform this agent into a tool, callable by other agents.
   *
   * This is different from handoffs in two ways:
   * 1. In handoffs, the new agent receives the conversation history. In this tool, the new agent
   *    receives generated input.
   * 2. In handoffs, the new agent takes over the conversation. In this tool, the new agent is
   *    called as a tool, and the conversation is continued by the original agent.
   *
   * @param options - Options for the tool.
   * @returns A tool that runs the agent and returns the output text.
   */
  asTool(t) {
    const { toolName: r, toolDescription: s, customOutputExtractor: a, needsApproval: i, runConfig: u, runOptions: l, isEnabled: c } = t;
    return xr({
      name: r ?? Bn(this.name),
      description: s ?? "",
      parameters: eu,
      strict: !0,
      needsApproval: i,
      isEnabled: c,
      execute: async (p, f, h) => {
        if (!Io(p))
          throw new ve("Agent tool called with invalid input");
        const y = await new Ju(u ?? {}).run(this, p.input, {
          context: f,
          ...l ?? {}
        }), w = typeof this.toolUseBehavior == "object" && this.toolUseBehavior !== null && "stopAtToolNames" in this.toolUseBehavior;
        typeof a != "function" && w && O.debug(`You're passing the agent (name: ${this.name}) with toolUseBehavior.stopAtToolNames configured as a tool to a different agent; this may not work as you expect. You may want to have a wrapper function tool to consistently return the final output.`);
        const E = typeof a == "function" ? await a(y) : Yo(y.rawResponses[y.rawResponses.length - 1]);
        return h != null && h.toolCall && Xo(h.toolCall, y), E;
      }
    });
  }
  /**
   * Returns the system prompt for the agent.
   *
   * If the agent has a function as its instructions, this function will be called with the
   * runContext and the agent instance.
   */
  async getSystemPrompt(t) {
    return typeof this.instructions == "function" ? await this.instructions(t, this) : this.instructions;
  }
  /**
   * Returns the prompt template for the agent, if defined.
   *
   * If the agent has a function as its prompt, this function will be called with the
   * runContext and the agent instance.
   */
  async getPrompt(t) {
    return typeof this.prompt == "function" ? await this.prompt(t, this) : this.prompt;
  }
  /**
   * Fetches the available tools from the MCP servers.
   * @returns the MCP powered tools
   */
  async getMcpTools(t) {
    return this.mcpServers.length > 0 ? Mo({
      mcpServers: this.mcpServers,
      runContext: t,
      agent: this,
      convertSchemasToStrict: !1
    }) : [];
  }
  /**
   * ALl agent tools, including the MCPl and function tools.
   *
   * @returns all configured tools
   */
  async getAllTools(t) {
    const r = await this.getMcpTools(t), s = [];
    for (const a of this.tools) {
      if (a.type === "function") {
        const i = a.isEnabled;
        if (!(typeof i == "function" ? await i(t, this) : typeof i == "boolean" ? i : !0))
          continue;
      }
      s.push(a);
    }
    return [...r, ...s];
  }
  /**
   * Returns the handoffs that should be exposed to the model for the current run.
   *
   * Handoffs that provide an `isEnabled` function returning `false` are omitted.
   */
  async getEnabledHandoffs(t) {
    var a;
    const r = ((a = this.handoffs) == null ? void 0 : a.map((i) => Ko(i))) ?? [], s = [];
    for (const i of r)
      await i.isEnabled({ runContext: t, agent: this }) && s.push(i);
    return s;
  }
  /**
   * Processes the final output of the agent.
   *
   * @param output - The output of the agent.
   * @returns The parsed out.
   */
  processFinalOutput(t) {
    if (this.outputType === "text")
      return t;
    if (typeof this.outputType == "object") {
      const r = JSON.parse(t);
      return _t(this.outputType) ? this.outputType.parse(r) : r;
    }
    throw new Error(`Unknown output type: ${this.outputType}`);
  }
  /**
   * Returns a JSON representation of the agent, which is serializable.
   *
   * @returns A JSON object containing the agent's name.
   */
  toJSON() {
    return {
      name: this.name
    };
  }
};
_(It, "DEFAULT_MODEL_PLACEHOLDER", "");
let yt = It;
function ks({ name: n, execute: e }) {
  return {
    type: "input",
    name: n,
    guardrailFunction: e,
    async run(t) {
      return {
        guardrail: { type: "input", name: n },
        output: await e(t)
      };
    }
  };
}
function Ir({ name: n, execute: e }) {
  return {
    type: "output",
    name: n,
    guardrailFunction: e,
    async run(t) {
      return {
        guardrail: { type: "output", name: n },
        agent: t.agent,
        agentOutput: t.agentOutput,
        output: await e(t)
      };
    }
  };
}
function tu() {
  throw new Error("No default model provider set. Make sure to set a provider using setDefaultModelProvider before calling getDefaultModelProvider or pass an explicit provider.");
}
const re = m({
  /**
   * Additional optional provider specific data. Used for custom functionality or model provider
   * specific fields.
   */
  providerData: ee(d(), L()).optional()
}), vt = re.extend({
  /**
   * An ID to identify the item. This is optional by default. If a model provider absolutely
   * requires this field, it will be validated on the model level.
   */
  id: d().optional()
}), nu = re.extend({
  type: g("refusal"),
  /**
   * The refusal explanation from the model.
   */
  refusal: d()
}), ru = re.extend({
  type: g("output_text"),
  /**
   * The text output from the model.
   */
  text: d()
}), xa = re.extend({
  type: g("input_text"),
  /**
   * A text input for example a message from a user
   */
  text: d()
}), su = re.extend({
  type: g("reasoning_text"),
  /**
   * A text input for example a message from a user
   */
  text: d()
}), au = re.extend({
  type: g("input_image"),
  /**
   * The image input to the model. Could be a URL, base64 or an object with a file ID.
   */
  image: d().or(m({
    id: d()
  })).describe("Could be a URL, base64 or an object with a file ID.")
}), iu = re.extend({
  type: g("input_file"),
  /**
   * The file input to the model. Could be a URL, base64 or an object with a file ID.
   */
  file: d().describe("Either base64 encoded file data or a publicly accessible file URL").or(m({
    id: d().describe("OpenAI file ID")
  })).or(m({
    url: d().describe("Publicly accessible PDF file URL")
  })).describe("Contents of the file or an object with a file ID.")
}), Sa = re.extend({
  type: g("audio"),
  /**
   * The audio input to the model. Could be base64 encoded audio data or an object with a file ID.
   */
  audio: d().or(m({
    id: d()
  })).describe("Base64 encoded audio data or file id"),
  /**
   * The format of the audio.
   */
  format: d().nullable().optional(),
  /**
   * The transcript of the audio.
   */
  transcript: d().nullable().optional()
}), ou = re.extend({
  type: g("image"),
  /**
   * The image input to the model. Could be base64 encoded image data or an object with a file ID.
   */
  image: d().describe("Base64 encoded image data")
}), uu = re.extend({
  type: g("text"),
  /**
   * The text output from the model.
   */
  text: d()
}), cu = re.extend({
  type: g("image"),
  /**
   * The image data. Could be base64 encoded image data or an object with a file ID.
   */
  data: d().describe("Base64 encoded image data"),
  /**
   * The media type of the image.
   */
  mediaType: d().describe("IANA media type of the image")
}), du = re.extend({
  type: g("computer_screenshot"),
  /**
   * A base64 encoded image data or a URL representing the screenshot.
   */
  data: d().describe("Base64 encoded image data or URL")
}), lu = me("type", [
  m({ type: g("screenshot") }),
  m({
    type: g("click"),
    x: A(),
    y: A(),
    button: ae(["left", "right", "wheel", "back", "forward"])
  }),
  m({
    type: g("double_click"),
    x: A(),
    y: A()
  }),
  m({
    type: g("scroll"),
    x: A(),
    y: A(),
    scroll_x: A(),
    scroll_y: A()
  }),
  m({
    type: g("type"),
    text: d()
  }),
  m({ type: g("wait") }),
  m({
    type: g("move"),
    x: A(),
    y: A()
  }),
  m({
    type: g("keypress"),
    keys: U(d())
  }),
  m({
    type: g("drag"),
    path: U(m({ x: A(), y: A() }))
  })
]), pu = me("type", [
  ru,
  nu,
  Sa,
  ou
]), Ur = vt.extend({
  /**
   * Any item without a type is treated as a message
   */
  type: g("message").optional()
}), Yn = Ur.extend({
  /**
   * Representing a message from the assistant (i.e. the model)
   */
  role: g("assistant"),
  /**
   * The status of the message.
   */
  status: ae(["in_progress", "completed", "incomplete"]),
  /**
   * The content of the message.
   */
  content: U(pu)
}), fu = me("type", [
  xa,
  au,
  iu,
  Sa
]), Ia = Ur.extend({
  // type: z.literal('message'),
  /**
   * Representing a message from the user
   */
  role: g("user"),
  /**
   * The content of the message.
   */
  content: U(fu).or(d())
}), Ta = Ur.extend({
  // type: z.literal('message'),
  /**
   * Representing a system message to the user
   */
  role: g("system"),
  /**
   * The content of the message.
   */
  content: d()
});
me("role", [
  Ta,
  Yn,
  Ia
]);
const Ht = vt.extend({
  type: g("hosted_tool_call"),
  /**
   * The name of the hosted tool. For example `web_search_call` or `file_search_call`
   */
  name: d().describe("The name of the hosted tool"),
  /**
   * The arguments of the hosted tool call.
   */
  arguments: d().describe("The arguments of the hosted tool call").optional(),
  /**
   * The status of the tool call.
   */
  status: d().optional(),
  /**
   * The primary output of the tool call. Additional output might be in the `providerData` field.
   */
  output: d().optional()
}), Wt = vt.extend({
  type: g("function_call"),
  /**
   * The ID of the tool call. Required to match up the respective tool call result.
   */
  callId: d().describe("The ID of the tool call"),
  /**
   * The name of the function.
   */
  name: d().describe("The name of the function"),
  /**
   * The status of the function call.
   */
  status: ae(["in_progress", "completed", "incomplete"]).optional(),
  /**
   * The arguments of the function call.
   */
  arguments: d()
}), Tr = vt.extend({
  type: g("function_call_result"),
  /**
   * The name of the tool that was called
   */
  name: d().describe("The name of the tool"),
  /**
   * The ID of the tool call. Required to match up the respective tool call result.
   */
  callId: d().describe("The ID of the tool call"),
  /**
   * The status of the tool call.
   */
  status: ae(["in_progress", "completed", "incomplete"]),
  /**
   * The output of the tool call.
   */
  output: me("type", [uu, cu])
}), qr = vt.extend({
  type: g("computer_call"),
  /**
   * The ID of the computer call. Required to match up the respective computer call result.
   */
  callId: d().describe("The ID of the computer call"),
  /**
   * The status of the computer call.
   */
  status: ae(["in_progress", "completed", "incomplete"]),
  /**
   * The action to be performed by the computer.
   */
  action: lu
}), hu = vt.extend({
  type: g("computer_call_result"),
  /**
   * The ID of the computer call. Required to match up the respective computer call result.
   */
  callId: d().describe("The ID of the computer call"),
  /**
   * The output of the computer call.
   */
  output: du
}), mu = me("type", [
  qr,
  Wt,
  Ht
]), Jr = re.extend({
  id: d().optional(),
  type: g("reasoning"),
  /**
   * The user facing representation of the reasoning. Additional information might be in the `providerData` field.
   */
  content: U(xa),
  /**
   * The raw reasoning text from the model.
   */
  rawContent: U(su).optional()
}), ka = vt.extend({
  type: g("unknown")
}), Br = me("type", [
  Yn,
  Ht,
  Wt,
  qr,
  Jr,
  ka
]), gu = ia([
  Ia,
  Yn,
  Ta,
  Ht,
  Wt,
  qr,
  Tr,
  hu,
  Jr,
  ka
]), _u = m({
  requests: A().optional(),
  inputTokens: A(),
  outputTokens: A(),
  totalTokens: A(),
  inputTokensDetails: ee(d(), A()).optional(),
  outputTokensDetails: ee(d(), A()).optional()
}), Aa = re.extend({
  type: g("output_text_delta"),
  /**
   * The delta text that was streamed by the modelto the user.
   */
  delta: d()
}), yu = re.extend({
  type: g("response_started")
}), Ca = re.extend({
  type: g("response_done"),
  /**
   * The response from the model.
   */
  response: re.extend({
    /**
     * The ID of the response.
     */
    id: d(),
    /**
     * The usage data for the response.
     */
    usage: _u,
    /**
     * The output from the model.
     */
    output: U(Br)
  })
}), vu = re.extend({
  type: g("model"),
  event: L().describe("The event from the model")
});
me("type", [
  Aa,
  Ca,
  yu,
  vu
]);
class Xn {
  constructor(e) {
    /**
     * The number of requests made to the LLM API.
     */
    _(this, "requests");
    /**
     * The number of input tokens used across all requests.
     */
    _(this, "inputTokens");
    /**
     * The number of output tokens used across all requests.
     */
    _(this, "outputTokens");
    /**
     * The total number of tokens sent and received, across all requests.
     */
    _(this, "totalTokens");
    /**
     * Details about the input tokens used across all requests.
     */
    _(this, "inputTokensDetails", []);
    /**
     * Details about the output tokens used across all requests.
     */
    _(this, "outputTokensDetails", []);
    if (typeof e > "u")
      this.requests = 0, this.inputTokens = 0, this.outputTokens = 0, this.totalTokens = 0, this.inputTokensDetails = [], this.outputTokensDetails = [];
    else {
      this.requests = (e == null ? void 0 : e.requests) ?? 1, this.inputTokens = (e == null ? void 0 : e.inputTokens) ?? (e == null ? void 0 : e.input_tokens) ?? 0, this.outputTokens = (e == null ? void 0 : e.outputTokens) ?? (e == null ? void 0 : e.output_tokens) ?? 0, this.totalTokens = (e == null ? void 0 : e.totalTokens) ?? (e == null ? void 0 : e.total_tokens) ?? 0;
      const t = (e == null ? void 0 : e.inputTokensDetails) ?? (e == null ? void 0 : e.input_tokens_details);
      this.inputTokensDetails = t ? [t] : [];
      const r = (e == null ? void 0 : e.outputTokensDetails) ?? (e == null ? void 0 : e.output_tokens_details);
      this.outputTokensDetails = r ? [r] : [];
    }
  }
  add(e) {
    this.requests += e.requests, this.inputTokens += e.inputTokens, this.outputTokens += e.outputTokens, this.totalTokens += e.totalTokens, e.inputTokensDetails && this.inputTokensDetails.push(...e.inputTokensDetails), e.outputTokensDetails && this.outputTokensDetails.push(...e.outputTokensDetails);
  }
}
var pe;
class St {
  constructor(e = {}) {
    /**
     * The context object you passed to the `Runner.run()` method.
     */
    _(this, "context");
    /**
     * The usage of the agent run so far. For streamed responses, the usage will be stale until the
     * last chunk of the stream is processed.
     */
    _(this, "usage");
    /**
     * A map of tool names to whether they have been approved.
     */
    I(this, pe);
    this.context = e, this.usage = new Xn(), v(this, pe, /* @__PURE__ */ new Map());
  }
  /**
   * Rebuild the approvals map from a serialized state.
   * @internal
   *
   * @param approvals - The approvals map to rebuild.
   */
  _rebuildApprovals(e) {
    v(this, pe, new Map(Object.entries(e)));
  }
  /**
   * Check if a tool call has been approved.
   *
   * @param approval - Details about the tool call being evaluated.
   * @returns `true` if the tool call has been approved, `false` if blocked and `undefined` if not yet approved or rejected.
   */
  isToolApproved(e) {
    const { toolName: t, callId: r } = e, s = o(this, pe).get(t);
    if ((s == null ? void 0 : s.approved) === !0 && s.rejected === !0)
      return O.warn("Tool is permanently approved and rejected at the same time. Approval takes precedence"), !0;
    if ((s == null ? void 0 : s.approved) === !0)
      return !0;
    if ((s == null ? void 0 : s.rejected) === !0)
      return !1;
    const a = Array.isArray(s == null ? void 0 : s.approved) ? s.approved.includes(r) : !1, i = Array.isArray(s == null ? void 0 : s.rejected) ? s.rejected.includes(r) : !1;
    if (a && i)
      return O.warn(`Tool call ${r} is both approved and rejected at the same time. Approval takes precedence`), !0;
    if (a)
      return !0;
    if (i)
      return !1;
  }
  /**
   * Approve a tool call.
   *
   * @param approvalItem - The tool approval item to approve.
   * @param options - Additional approval behavior options.
   */
  approveTool(e, { alwaysApprove: t = !1 } = {}) {
    const r = e.rawItem.name;
    if (t) {
      o(this, pe).set(r, {
        approved: !0,
        rejected: []
      });
      return;
    }
    const s = o(this, pe).get(r) ?? {
      approved: [],
      rejected: []
    };
    if (Array.isArray(s.approved)) {
      const a = "callId" in e.rawItem ? e.rawItem.callId : e.rawItem.id;
      s.approved.push(a);
    }
    o(this, pe).set(r, s);
  }
  /**
   * Reject a tool call.
   *
   * @param approvalItem - The tool approval item to reject.
   */
  rejectTool(e, { alwaysReject: t = !1 } = {}) {
    const r = e.rawItem.name;
    if (t) {
      o(this, pe).set(r, {
        approved: !1,
        rejected: !0
      });
      return;
    }
    const s = o(this, pe).get(r) ?? {
      approved: [],
      rejected: []
    };
    if (Array.isArray(s.rejected)) {
      const a = "callId" in e.rawItem ? e.rawItem.callId : e.rawItem.id;
      s.rejected.push(a);
    }
    o(this, pe).set(r, s);
  }
  toJSON() {
    return {
      context: this.context,
      usage: this.usage,
      approvals: Object.fromEntries(o(this, pe).entries())
    };
  }
}
pe = new WeakMap();
function As(n) {
  return n.type === "function" ? {
    type: "function",
    name: n.name,
    description: n.description,
    parameters: n.parameters,
    strict: n.strict
  } : n.type === "computer" ? {
    type: "computer",
    name: n.name,
    environment: n.computer.environment,
    dimensions: n.computer.dimensions
  } : {
    type: "hosted_tool",
    name: n.name,
    providerData: n.providerData
  };
}
function Cs(n) {
  return {
    toolName: n.toolName,
    toolDescription: n.toolDescription,
    inputJsonSchema: n.inputJsonSchema,
    strictJsonSchema: n.strictJsonSchema
  };
}
class wt {
  constructor() {
    _(this, "type", "base_item");
    _(this, "rawItem");
  }
  toJSON() {
    return {
      type: this.type,
      rawItem: this.rawItem
    };
  }
}
class Qn extends wt {
  constructor(t, r) {
    super();
    _(this, "rawItem");
    _(this, "agent");
    _(this, "type", "message_output_item");
    this.rawItem = t, this.agent = r;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      agent: this.agent.toJSON()
    };
  }
  get content() {
    let t = "";
    for (const r of this.rawItem.content)
      r.type === "output_text" && (t += r.text);
    return t;
  }
}
class pt extends wt {
  constructor(t, r) {
    super();
    _(this, "rawItem");
    _(this, "agent");
    _(this, "type", "tool_call_item");
    this.rawItem = t, this.agent = r;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      agent: this.agent.toJSON()
    };
  }
}
class qt extends wt {
  constructor(t, r, s) {
    super();
    _(this, "rawItem");
    _(this, "agent");
    _(this, "output");
    _(this, "type", "tool_call_output_item");
    this.rawItem = t, this.agent = r, this.output = s;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      agent: this.agent.toJSON(),
      output: Ke(this.output)
    };
  }
}
class Gr extends wt {
  constructor(t, r) {
    super();
    _(this, "rawItem");
    _(this, "agent");
    _(this, "type", "reasoning_item");
    this.rawItem = t, this.agent = r;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      agent: this.agent.toJSON()
    };
  }
}
class zr extends wt {
  constructor(t, r) {
    super();
    _(this, "rawItem");
    _(this, "agent");
    _(this, "type", "handoff_call_item");
    this.rawItem = t, this.agent = r;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      agent: this.agent.toJSON()
    };
  }
}
class Vr extends wt {
  constructor(t, r, s) {
    super();
    _(this, "rawItem");
    _(this, "sourceAgent");
    _(this, "targetAgent");
    _(this, "type", "handoff_output_item");
    this.rawItem = t, this.sourceAgent = r, this.targetAgent = s;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      sourceAgent: this.sourceAgent.toJSON(),
      targetAgent: this.targetAgent.toJSON()
    };
  }
}
class we extends wt {
  constructor(t, r) {
    super();
    _(this, "rawItem");
    _(this, "agent");
    _(this, "type", "tool_approval_item");
    this.rawItem = t, this.agent = r;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      agent: this.agent.toJSON()
    };
  }
}
function er(n) {
  return async (e, ...t) => Rr(async () => {
    const r = n(...t);
    Cn(r);
    try {
      return r.start(), await e(r);
    } catch (s) {
      throw r.setError({
        message: s.message,
        data: s.data
      }), s;
    } finally {
      r.end(), Gt();
    }
  });
}
function Es(n, e) {
  var t;
  return Re().createSpan({
    ...n,
    data: {
      type: "agent",
      name: ((t = n == null ? void 0 : n.data) == null ? void 0 : t.name) ?? "Agent",
      ...n == null ? void 0 : n.data
    }
  }, e);
}
function wu(n, e) {
  var t, r;
  return Re().createSpan({
    ...n,
    data: {
      type: "function",
      input: ((t = n == null ? void 0 : n.data) == null ? void 0 : t.input) ?? "",
      output: ((r = n == null ? void 0 : n.data) == null ? void 0 : r.output) ?? "",
      ...n == null ? void 0 : n.data
    }
  }, e);
}
const Os = er(wu);
function bu(n, e) {
  return Re().createSpan({
    ...n,
    data: { type: "handoff", ...n == null ? void 0 : n.data }
  }, e);
}
const xu = er(bu);
function Su(n, e) {
  return Re().createSpan({
    ...n,
    data: {
      type: "guardrail",
      triggered: !1,
      ...n == null ? void 0 : n.data
    }
  }, e);
}
const Rs = er(Su);
function Iu(n, e) {
  return Re().createSpan({
    ...n,
    data: {
      type: "mcp_tools",
      ...n == null ? void 0 : n.data
    }
  }, e);
}
const Tu = er(Iu);
class ku {
  /**
   * @param data The raw responses stream events from the LLM.
   */
  constructor(e) {
    _(this, "data");
    /**
     * The type of the event.
     */
    _(this, "type", "raw_model_stream_event");
    this.data = e;
  }
}
class Au {
  /**
   * @param name The name of the event.
   * @param item The item that was created.
   */
  constructor(e, t) {
    _(this, "name");
    _(this, "item");
    _(this, "type", "run_item_stream_event");
    this.name = e, this.item = t;
  }
}
class Cu {
  /**
   * @param agent The new agent
   */
  constructor(e) {
    _(this, "agent");
    _(this, "type", "agent_updated_stream_event");
    this.agent = e;
  }
}
function Ns(n, e, t, r) {
  var y;
  const s = [], a = [], i = [], u = [], l = [], c = [], p = new Map(r.map((w) => [w.toolName, w])), f = new Map(t.filter((w) => w.type === "function").map((w) => [w.name, w])), h = t.find((w) => w.type === "computer"), b = new Map(t.filter((w) => {
    var E;
    return w.type === "hosted_tool" && ((E = w.providerData) == null ? void 0 : E.type) === "mcp";
  }).map((w) => w).map((w) => [w.providerData.server_label, w]));
  for (const w of n.output) {
    if (w.type === "message")
      w.role === "assistant" && s.push(new Qn(w, e));
    else if (w.type === "hosted_tool_call") {
      s.push(new pt(w, e));
      const R = w.name;
      if (c.push(R), ((y = w.providerData) == null ? void 0 : y.type) === "mcp_approval_request" || w.name === "mcp_approval_request") {
        const F = w.providerData, W = F.server_label, J = b.get(W);
        if (typeof J > "u") {
          const H = `MCP server (${W}) not found in Agent (${e.name})`;
          throw Tt({
            message: H,
            data: { mcp_server_label: W }
          }), new ve(H);
        }
        const G = new we({
          type: "hosted_tool_call",
          // We must use this name to align with the name sent from the servers
          name: F.name,
          id: F.id,
          status: "in_progress",
          providerData: F
        }, e);
        l.push({
          requestItem: G,
          mcpTool: J
        }), J.providerData.on_approval || s.push(G);
      }
    } else if (w.type === "reasoning")
      s.push(new Gr(w, e));
    else if (w.type === "computer_call") {
      if (s.push(new pt(w, e)), c.push("computer_use"), !h)
        throw Tt({
          message: "Model produced computer action without a computer tool.",
          data: {
            agent_name: e.name
          }
        }), new ve("Model produced computer action without a computer tool.");
      u.push({
        toolCall: w,
        computer: h
      });
    }
    if (w.type !== "function_call")
      continue;
    c.push(w.name);
    const E = p.get(w.name);
    if (E)
      s.push(new zr(w, e)), a.push({
        toolCall: w,
        handoff: E
      });
    else {
      const R = f.get(w.name);
      if (!R)
        throw Tt({
          message: `Tool ${w.name} not found in agent ${e.name}.`,
          data: {
            tool_name: w.name,
            agent_name: e.name
          }
        }), new ve(`Tool ${w.name} not found in agent ${e.name}.`);
      s.push(new pt(w, e)), i.push({
        toolCall: w,
        tool: R
      });
    }
  }
  return {
    newItems: s,
    handoffs: a,
    functions: i,
    computerActions: u,
    mcpApprovalRequests: l,
    toolsUsed: c,
    hasToolsOrApprovalsToRun() {
      return a.length > 0 || i.length > 0 || l.length > 0 || u.length > 0;
    }
  };
}
const Eu = me("type", [
  m({
    type: g("next_step_handoff"),
    newAgent: L()
  }),
  m({
    type: g("next_step_final_output"),
    output: d()
  }),
  m({
    type: g("next_step_run_again")
  }),
  m({
    type: g("next_step_interruption"),
    data: ee(d(), L())
  })
]);
class _e {
  constructor(e, t, r, s, a) {
    _(this, "originalInput");
    _(this, "modelResponse");
    _(this, "preStepItems");
    _(this, "newStepItems");
    _(this, "nextStep");
    this.originalInput = e, this.modelResponse = t, this.preStepItems = r, this.newStepItems = s, this.nextStep = a;
  }
  /**
   * The items generated during the agent run (i.e. everything generated after originalInput)
   */
  get generatedItems() {
    return this.preStepItems.concat(this.newStepItems);
  }
}
function Ds(n, e, t) {
  return n.resetToolChoice && e.hasUsedTools(n) ? { ...t, toolChoice: void 0 } : t;
}
async function Ps(n, e, t, r, s, a, i) {
  const u = t.filter((y) => y instanceof we && "callId" in y.rawItem && y.rawItem.type === "function_call").map((y) => y.rawItem.callId), l = s.functions.filter((y) => u.includes(y.toolCall.callId)), c = await Ea(n, l, a, i), p = c.map((y) => y.runItem), f = s.mcpApprovalRequests.filter((y) => {
    var w;
    return y.requestItem.type === "tool_approval_item" && y.requestItem.rawItem.type === "hosted_tool_call" && ((w = y.requestItem.rawItem.providerData) == null ? void 0 : w.type) === "mcp_approval_request";
  });
  for (const y of f) {
    const w = y.requestItem.rawItem.id, E = i._context.isToolApproved({
      // Since this item name must be the same with the one sent from Responses API server
      toolName: y.requestItem.rawItem.name,
      callId: w
    });
    if (typeof E < "u") {
      const R = {
        approve: E,
        approval_request_id: w,
        reason: void 0
      };
      p.push(new pt({
        type: "hosted_tool_call",
        name: "mcp_approval_response",
        providerData: R
      }, n));
    }
  }
  const h = await Oa(n, c, i), b = t.filter((y) => !(y instanceof we));
  return h.isFinalOutput ? (a.emit("agent_end", i._context, n, h.finalOutput), n.emit("agent_end", i._context, h.finalOutput), new _e(e, r, b, p, {
    type: "next_step_final_output",
    output: h.finalOutput
  })) : h.isInterrupted ? new _e(e, r, b, p, {
    type: "next_step_interruption",
    data: {
      interruptions: h.interruptions
    }
  }) : new _e(e, r, b, p, { type: "next_step_run_again" });
}
async function Ms(n, e, t, r, s, a, i) {
  var E, R, F, W;
  const u = t;
  let l = s.newItems;
  const [c, p] = await Promise.all([
    Ea(n, s.functions, a, i),
    Ru(n, s.computerActions, a, i._context)
  ]);
  if (l = l.concat(c.map((J) => J.runItem)), l = l.concat(p), s.mcpApprovalRequests.length > 0)
    for (const J of s.mcpApprovalRequests) {
      const G = J.mcpTool.providerData, H = J.requestItem.rawItem.providerData;
      if (G.on_approval) {
        const X = await G.on_approval(i._context, J.requestItem), le = {
          approve: X.approve,
          approval_request_id: H.id,
          reason: X.reason
        };
        l.push(new pt({
          type: "hosted_tool_call",
          name: "mcp_approval_response",
          providerData: le
        }, n));
      } else {
        l.push(J.requestItem);
        const X = {
          type: "hosted_mcp_tool_approval",
          tool: J.mcpTool,
          runItem: new we({
            type: "hosted_tool_call",
            name: H.name,
            id: H.id,
            arguments: H.arguments,
            status: "in_progress",
            providerData: H
          }, n)
        };
        c.push(X);
      }
    }
  if (s.handoffs.length > 0)
    return await Nu(n, e, u, l, r, s.handoffs, a, i._context);
  const f = await Oa(n, c, i);
  if (f.isFinalOutput)
    return a.emit("agent_end", i._context, n, f.finalOutput), n.emit("agent_end", i._context, f.finalOutput), new _e(e, r, u, l, {
      type: "next_step_final_output",
      output: f.finalOutput
    });
  if (f.isInterrupted)
    return new _e(e, r, u, l, {
      type: "next_step_interruption",
      data: {
        interruptions: f.interruptions
      }
    });
  if ((((E = s.functions) == null ? void 0 : E.length) ?? 0) > 0 || (((R = s.computerActions) == null ? void 0 : R.length) ?? 0) > 0 || (((F = s.mcpApprovalRequests) == null ? void 0 : F.length) ?? 0) > 0 || (((W = s.handoffs) == null ? void 0 : W.length) ?? 0) > 0)
    return new _e(e, r, u, l, { type: "next_step_run_again" });
  const b = l.filter((J) => J instanceof Qn), y = b.length > 0 ? ba(b[b.length - 1].rawItem) : void 0;
  if (typeof y > "u")
    return new _e(e, r, u, l, { type: "next_step_run_again" });
  if (!c.some((J) => J.runItem instanceof we)) {
    if (n.outputType === "text")
      return new _e(e, r, u, l, {
        type: "next_step_final_output",
        output: y
      });
    if (n.outputType !== "text" && y) {
      const { parser: J } = Lr(n.outputType, "final_output"), [G] = await jr(() => J(y));
      if (G)
        throw Tt({
          message: "Invalid output type",
          data: {
            error: String(G)
          }
        }), new ve("Invalid output type");
      return new _e(e, r, u, l, { type: "next_step_final_output", output: y });
    }
  }
  return new _e(e, r, u, l, { type: "next_step_run_again" });
}
function Gn(n, e) {
  return {
    type: "function_call_result",
    name: n.name,
    callId: n.callId,
    status: "completed",
    output: {
      type: "text",
      text: Ke(e)
    }
  };
}
async function Ea(n, e, t, r) {
  async function s(a) {
    let i = a.toolCall.arguments;
    if (a.tool.parameters && (_t(a.tool.parameters) ? i = a.tool.parameters.parse(i) : i = JSON.parse(i)), await a.tool.needsApproval(r._context, i, a.toolCall.callId)) {
      const l = r._context.isToolApproved({
        toolName: a.tool.name,
        callId: a.toolCall.callId
      });
      if (l === !1)
        return Os(async (c) => {
          const p = "Tool execution was not approved.";
          return c.setError({
            message: p,
            data: {
              tool_name: a.tool.name,
              error: `Tool execution for ${a.toolCall.callId} was manually rejected by user.`
            }
          }), c.spanData.output = p, {
            type: "function_output",
            tool: a.tool,
            output: p,
            runItem: new qt(Gn(a.toolCall, p), n, p)
          };
        }, {
          data: {
            name: a.tool.name
          }
        });
      if (l !== !0)
        return {
          type: "function_approval",
          tool: a.tool,
          runItem: new we(a.toolCall, n)
        };
    }
    return Os(async (l) => {
      t.config.traceIncludeSensitiveData && (l.spanData.input = a.toolCall.arguments);
      try {
        t.emit("agent_tool_start", r._context, n, a.tool, {
          toolCall: a.toolCall
        }), n.emit("agent_tool_start", r._context, a.tool, {
          toolCall: a.toolCall
        });
        const c = await a.tool.invoke(r._context, a.toolCall.arguments, { toolCall: a.toolCall }), p = Ke(c);
        t.emit("agent_tool_end", r._context, n, a.tool, p, { toolCall: a.toolCall }), n.emit("agent_tool_end", r._context, a.tool, p, { toolCall: a.toolCall }), t.config.traceIncludeSensitiveData && (l.spanData.output = p);
        const f = {
          type: "function_output",
          tool: a.tool,
          output: c,
          runItem: new qt(Gn(a.toolCall, c), n, c)
        }, h = Qo(a.toolCall);
        if (h) {
          f.agentRunResult = h;
          const b = h.interruptions;
          b.length > 0 && (f.interruptions = b);
        }
        return f;
      } catch (c) {
        throw l.setError({
          message: "Error running tool",
          data: {
            tool_name: a.tool.name,
            error: String(c)
          }
        }), c;
      }
    }, {
      data: {
        name: a.tool.name
      }
    });
  }
  try {
    return await Promise.all(e.map(s));
  } catch (a) {
    throw new So(`Failed to run function tools: ${a}`, a, r);
  }
}
async function Ou(n, e) {
  const t = e.action;
  let r;
  switch (t.type) {
    case "click":
      await n.click(t.x, t.y, t.button);
      break;
    case "double_click":
      await n.doubleClick(t.x, t.y);
      break;
    case "drag":
      await n.drag(t.path.map((s) => [s.x, s.y]));
      break;
    case "keypress":
      await n.keypress(t.keys);
      break;
    case "move":
      await n.move(t.x, t.y);
      break;
    case "screenshot":
      r = await n.screenshot();
      break;
    case "scroll":
      await n.scroll(t.x, t.y, t.scroll_x, t.scroll_y);
      break;
    case "type":
      await n.type(t.text);
      break;
    case "wait":
      await n.wait();
      break;
  }
  if (typeof r < "u" || typeof n.screenshot == "function" && (r = await n.screenshot(), typeof r < "u"))
    return r;
  throw new Error("Computer does not implement screenshot()");
}
async function Ru(n, e, t, r, s = void 0) {
  const a = s ?? O, i = [];
  for (const u of e) {
    const l = u.computer.computer, c = u.toolCall;
    t.emit("agent_tool_start", r, n, u.computer, {
      toolCall: c
    }), typeof n.emit == "function" && n.emit("agent_tool_start", r, u.computer, { toolCall: c });
    let p;
    try {
      p = await Ou(l, c);
    } catch (b) {
      a.error("Failed to execute computer action:", b), p = "";
    }
    t.emit("agent_tool_end", r, n, u.computer, p, {
      toolCall: c
    }), typeof n.emit == "function" && n.emit("agent_tool_end", r, u.computer, p, {
      toolCall: c
    });
    const f = p ? `data:image/png;base64,${p}` : "", h = {
      type: "computer_call_result",
      callId: c.callId,
      output: { type: "computer_screenshot", data: f }
    };
    i.push(new qt(h, n, f));
  }
  return i;
}
async function Nu(n, e, t, r, s, a, i, u) {
  if (r = [...r], a.length === 0)
    return O.warn("Incorrectly called executeHandoffCalls with no handoffs. This should not happen. Moving on."), new _e(e, s, t, r, { type: "next_step_run_again" });
  if (a.length > 1) {
    const c = "Multiple handoffs detected, ignoring this one.";
    for (let p = 1; p < a.length; p++)
      r.push(new qt(Gn(a[p].toolCall, c), n, c));
  }
  const l = a[0];
  return xu(async (c) => {
    const p = l.handoff, f = await p.onInvokeHandoff(u, l.toolCall.arguments);
    if (c.spanData.to_agent = f.name, a.length > 1) {
      const b = a.map((y) => y.handoff.agentName);
      c.setError({
        message: "Multiple handoffs requested",
        data: {
          requested_agents: b
        }
      });
    }
    r.push(new Vr(Gn(l.toolCall, ya(f)), n, f)), i.emit("agent_handoff", u, n, f), n.emit("agent_handoff", u, f);
    const h = p.inputFilter ?? i.config.handoffInputFilter;
    if (h) {
      O.debug("Filtering inputs for handoff"), typeof h != "function" && c.setError({
        message: "Invalid input filter",
        data: {
          details: "not callable"
        }
      });
      const b = {
        inputHistory: Array.isArray(e) ? [...e] : e,
        preHandoffItems: [...t],
        newItems: [...r],
        runContext: u
      }, y = h(b);
      e = y.inputHistory, t = y.preHandoffItems, r = y.newItems;
    }
    return new _e(e, s, t, r, { type: "next_step_handoff", newAgent: f });
  }, {
    data: {
      from_agent: n.name
    }
  });
}
const Tn = {
  isFinalOutput: !1,
  isInterrupted: void 0
};
async function Oa(n, e, t) {
  if (e.length === 0)
    return Tn;
  const r = [];
  for (const i of e)
    if (i.runItem instanceof we && r.push(i.runItem), i.type === "function_output") {
      if (Array.isArray(i.interruptions))
        r.push(...i.interruptions);
      else if (i.agentRunResult) {
        const u = i.agentRunResult.interruptions;
        u.length > 0 && r.push(...u);
      }
    }
  if (r.length > 0)
    return {
      isFinalOutput: !1,
      isInterrupted: !0,
      interruptions: r
    };
  if (n.toolUseBehavior === "run_llm_again")
    return Tn;
  const s = e[0];
  if (n.toolUseBehavior === "stop_on_first_tool")
    return (s == null ? void 0 : s.type) === "function_output" ? {
      isFinalOutput: !0,
      isInterrupted: void 0,
      finalOutput: Ke(s.output)
    } : Tn;
  const a = n.toolUseBehavior;
  if (typeof a == "object") {
    const i = e.find((u) => a.stopAtToolNames.includes(u.tool.name));
    return (i == null ? void 0 : i.type) === "function_output" ? {
      isFinalOutput: !0,
      isInterrupted: void 0,
      finalOutput: Ke(i.output)
    } : Tn;
  }
  if (typeof a == "function")
    return a(t._context, e);
  throw new te(`Invalid toolUseBehavior: ${a}`, t);
}
function Du(n) {
  if (n instanceof Qn)
    return "message_output_created";
  if (n instanceof zr)
    return "handoff_requested";
  if (n instanceof Vr)
    return "handoff_occurred";
  if (n instanceof pt)
    return "tool_called";
  if (n instanceof qt)
    return "tool_output";
  if (n instanceof Gr)
    return "reasoning_item_created";
  if (n instanceof we)
    return "tool_approval_requested";
}
function Ra(n, e) {
  const t = Du(e);
  if (!t) {
    O.warn("Unknown item type: ", e);
    return;
  }
  n._addItem(new Au(t, e));
}
function Pu(n, e) {
  for (const t of e)
    Ra(n, t);
}
function js(n, e, t) {
  const r = t == null ? void 0 : t.skipItems;
  for (const s of e.newStepItems)
    r != null && r.has(s) || Ra(n, s);
}
var At;
class $s {
  constructor() {
    I(this, At, /* @__PURE__ */ new Map());
  }
  addToolUse(e, t) {
    o(this, At).set(e, t);
  }
  hasUsedTools(e) {
    return o(this, At).has(e);
  }
  toJSON() {
    return Object.fromEntries(Array.from(o(this, At).entries()).map(([e, t]) => [e.name, t]));
  }
}
At = new WeakMap();
const An = "1.0", Mu = g(An), ke = m({
  name: d()
}), ju = m({
  object: g("trace.span"),
  id: d(),
  trace_id: d(),
  parent_id: d().nullable(),
  started_at: d().nullable(),
  ended_at: d().nullable(),
  error: m({
    message: d(),
    data: ee(d(), L()).optional()
  }).nullable(),
  span_data: ee(d(), L())
}), Na = ju.extend({
  previous_span: Mi(() => Na).optional()
}), Da = m({
  requests: A(),
  inputTokens: A(),
  outputTokens: A(),
  totalTokens: A()
}), Fs = m({
  usage: Da,
  output: U(Br),
  responseId: d().optional(),
  providerData: ee(d(), L()).optional()
}), Pa = me("type", [
  m({
    type: g("message_output_item"),
    rawItem: Yn,
    agent: ke
  }),
  m({
    type: g("tool_call_item"),
    rawItem: mu.or(Ht),
    agent: ke
  }),
  m({
    type: g("tool_call_output_item"),
    rawItem: Tr,
    agent: ke,
    output: d()
  }),
  m({
    type: g("reasoning_item"),
    rawItem: Jr,
    agent: ke
  }),
  m({
    type: g("handoff_call_item"),
    rawItem: Wt,
    agent: ke
  }),
  m({
    type: g("handoff_output_item"),
    rawItem: Tr,
    sourceAgent: ke,
    targetAgent: ke
  }),
  m({
    type: g("tool_approval_item"),
    rawItem: Wt.or(Ht),
    agent: ke
  })
]), $u = m({
  object: g("trace"),
  id: d(),
  workflow_name: d(),
  group_id: d().nullable(),
  metadata: ee(d(), L())
}), Fu = m({
  newItems: U(Pa),
  toolsUsed: U(d()),
  handoffs: U(m({
    toolCall: L(),
    handoff: L()
  })),
  functions: U(m({
    toolCall: L(),
    tool: L()
  })),
  computerActions: U(m({
    toolCall: L(),
    computer: L()
  })),
  mcpApprovalRequests: U(m({
    requestItem: m({
      // protocol.HostedToolCallItem
      rawItem: m({
        type: g("hosted_tool_call"),
        name: d(),
        arguments: d().optional(),
        status: d().optional(),
        output: d().optional(),
        // this always exists but marked as optional for early version compatibility; when releasing 1.0, we can remove the nullable and optional
        providerData: ee(d(), L()).nullable().optional()
      })
    }),
    // HostedMCPTool
    mcpTool: m({
      type: g("hosted_tool"),
      name: g("hosted_mcp"),
      providerData: ee(d(), L())
    })
  })).optional()
}), Ma = m({
  tripwireTriggered: lt(),
  outputInfo: L()
}), Lu = m({
  guardrail: m({
    type: g("input"),
    name: d()
  }),
  output: Ma
}), Zu = m({
  guardrail: m({
    type: g("output"),
    name: d()
  }),
  agentOutput: L(),
  agent: ke,
  output: Ma
}), Ls = m({
  $schemaVersion: Mu,
  currentTurn: A(),
  currentAgent: ke,
  originalInput: d().or(U(gu)),
  modelResponses: U(Fs),
  context: m({
    usage: Da,
    approvals: ee(d(), m({
      approved: U(d()).or(lt()),
      rejected: U(d()).or(lt())
    })),
    context: ee(d(), L())
  }),
  toolUseTracker: ee(d(), U(d())),
  maxTurns: A(),
  currentAgentSpan: Na.nullable().optional(),
  noActiveAgentRun: lt(),
  inputGuardrailResults: U(Lu),
  outputGuardrailResults: U(Zu),
  currentStep: Eu.optional(),
  lastModelResponse: Fs.optional(),
  generatedItems: U(Pa),
  lastProcessedResponse: Fu.optional(),
  trace: $u.nullable()
});
class et {
  constructor(e, t, r, s) {
    /**
     * Current turn number in the conversation.
     */
    _(this, "_currentTurn", 0);
    /**
     * The agent currently handling the conversation.
     */
    _(this, "_currentAgent");
    /**
     * Original user input prior to any processing.
     */
    _(this, "_originalInput");
    /**
     * Responses from the model so far.
     */
    _(this, "_modelResponses");
    /**
     * Active tracing span for the current agent if tracing is enabled.
     */
    _(this, "_currentAgentSpan");
    /**
     * Run context tracking approvals, usage, and other metadata.
     */
    _(this, "_context");
    /**
     * Tracks what tools each agent has used.
     */
    _(this, "_toolUseTracker");
    /**
     * Items generated by the agent during the run.
     */
    _(this, "_generatedItems");
    /**
     * Maximum allowed turns before forcing termination.
     */
    _(this, "_maxTurns");
    /**
     * Whether the run has an active agent step in progress.
     */
    _(this, "_noActiveAgentRun", !0);
    /**
     * Last model response for the previous turn.
     */
    _(this, "_lastTurnResponse");
    /**
     * Results from input guardrails applied to the run.
     */
    _(this, "_inputGuardrailResults");
    /**
     * Results from output guardrails applied to the run.
     */
    _(this, "_outputGuardrailResults");
    /**
     * Next step computed for the agent to take.
     */
    _(this, "_currentStep");
    /**
     * Parsed model response after applying guardrails and tools.
     */
    _(this, "_lastProcessedResponse");
    /**
     * Trace associated with this run if tracing is enabled.
     */
    _(this, "_trace", null);
    this._context = e, this._originalInput = structuredClone(t), this._modelResponses = [], this._currentAgentSpan = void 0, this._currentAgent = r, this._toolUseTracker = new $s(), this._generatedItems = [], this._maxTurns = s, this._inputGuardrailResults = [], this._outputGuardrailResults = [], this._trace = Yt();
  }
  /**
   * The history of the agent run. This includes the input items and the new items generated during the run.
   *
   * This can be used as inputs for the next agent run.
   */
  get history() {
    return Kt(this._originalInput, this._generatedItems);
  }
  /**
   * Returns all interruptions if the current step is an interruption otherwise returns an empty array.
   */
  getInterruptions() {
    var e;
    return ((e = this._currentStep) == null ? void 0 : e.type) !== "next_step_interruption" ? [] : this._currentStep.data.interruptions;
  }
  /**
   * Approves a tool call requested by the agent through an interruption and approval item request.
   *
   * To approve the request use this method and then run the agent again with the same state object
   * to continue the execution.
   *
   * By default it will only approve the current tool call. To allow the tool to be used multiple
   * times throughout the run, set the `alwaysApprove` option to `true`.
   *
   * @param approvalItem - The tool call approval item to approve.
   * @param options - Options for the approval.
   */
  approve(e, t = { alwaysApprove: !1 }) {
    this._context.approveTool(e, t);
  }
  /**
   * Rejects a tool call requested by the agent through an interruption and approval item request.
   *
   * To reject the request use this method and then run the agent again with the same state object
   * to continue the execution.
   *
   * By default it will only reject the current tool call. To allow the tool to be used multiple
   * times throughout the run, set the `alwaysReject` option to `true`.
   *
   * @param approvalItem - The tool call approval item to reject.
   * @param options - Options for the rejection.
   */
  reject(e, t = { alwaysReject: !1 }) {
    this._context.rejectTool(e, t);
  }
  /**
   * Serializes the run state to a JSON object.
   *
   * This method is used to serialize the run state to a JSON object that can be used to
   * resume the run later.
   *
   * @returns The serialized run state.
   */
  toJSON() {
    var r;
    const e = {
      $schemaVersion: An,
      currentTurn: this._currentTurn,
      currentAgent: {
        name: this._currentAgent.name
      },
      originalInput: this._originalInput,
      modelResponses: this._modelResponses.map((s) => ({
        usage: {
          requests: s.usage.requests,
          inputTokens: s.usage.inputTokens,
          outputTokens: s.usage.outputTokens,
          totalTokens: s.usage.totalTokens
        },
        output: s.output,
        responseId: s.responseId,
        providerData: s.providerData
      })),
      context: this._context.toJSON(),
      toolUseTracker: this._toolUseTracker.toJSON(),
      maxTurns: this._maxTurns,
      currentAgentSpan: (r = this._currentAgentSpan) == null ? void 0 : r.toJSON(),
      noActiveAgentRun: this._noActiveAgentRun,
      inputGuardrailResults: this._inputGuardrailResults,
      outputGuardrailResults: this._outputGuardrailResults.map((s) => ({
        ...s,
        agent: s.agent.toJSON()
      })),
      currentStep: this._currentStep,
      lastModelResponse: this._lastTurnResponse,
      generatedItems: this._generatedItems.map((s) => s.toJSON()),
      lastProcessedResponse: this._lastProcessedResponse,
      trace: this._trace ? this._trace.toJSON() : null
    }, t = Ls.safeParse(e);
    if (!t.success)
      throw new xo(`Failed to serialize run state. ${t.error.message}`);
    return t.data;
  }
  /**
   * Serializes the run state to a string.
   *
   * This method is used to serialize the run state to a string that can be used to
   * resume the run later.
   *
   * @returns The serialized run state.
   */
  toString() {
    return JSON.stringify(this.toJSON());
  }
  /**
   * Deserializes a run state from a string.
   *
   * This method is used to deserialize a run state from a string that was serialized using the
   * `toString` method.
   */
  static async fromString(e, t) {
    var f, h, b, y, w;
    const [r, s] = await jr(() => JSON.parse(t));
    if (r)
      throw new te(`Failed to parse run state. ${r instanceof Error ? r.message : String(r)}`);
    const a = s.$schemaVersion;
    if (!a)
      throw new te("Run state is missing schema version");
    if (a !== An)
      throw new te(`Run state schema version ${a} is not supported. Please use version ${An}`);
    const i = Ls.parse(JSON.parse(t)), u = Uu(e), l = new St(i.context.context);
    l._rebuildApprovals(i.context.approvals);
    const c = u.get(i.currentAgent.name);
    if (!c)
      throw new te(`Agent ${i.currentAgent.name} not found`);
    const p = new et(l, "", c, i.maxTurns);
    p._currentTurn = i.currentTurn, p._toolUseTracker = new $s();
    for (const [E, R] of Object.entries(i.toolUseTracker))
      p._toolUseTracker.addToolUse(u.get(E), R);
    if (i.currentAgentSpan) {
      i.trace || O.warn("Trace is not set, skipping tracing setup");
      const E = Re().createTrace({
        traceId: (f = i.trace) == null ? void 0 : f.id,
        name: (h = i.trace) == null ? void 0 : h.workflow_name,
        groupId: ((b = i.trace) == null ? void 0 : b.group_id) ?? void 0,
        metadata: (y = i.trace) == null ? void 0 : y.metadata
      });
      p._currentAgentSpan = ja(E, i.currentAgentSpan), p._trace = E;
    }
    return p._noActiveAgentRun = i.noActiveAgentRun, p._inputGuardrailResults = i.inputGuardrailResults, p._outputGuardrailResults = i.outputGuardrailResults.map((E) => ({
      ...E,
      agent: u.get(E.agent.name)
    })), p._currentStep = i.currentStep, p._originalInput = i.originalInput, p._modelResponses = i.modelResponses.map(Zs), p._lastTurnResponse = i.lastModelResponse ? Zs(i.lastModelResponse) : void 0, p._generatedItems = i.generatedItems.map((E) => $a(E, u)), p._lastProcessedResponse = i.lastProcessedResponse ? await qu(u, p._currentAgent, p._context, i.lastProcessedResponse) : void 0, ((w = i.currentStep) == null ? void 0 : w.type) === "next_step_handoff" && (p._currentStep = {
      type: "next_step_handoff",
      newAgent: u.get(i.currentStep.newAgent.name)
    }), p;
  }
}
function Uu(n) {
  const e = /* @__PURE__ */ new Map(), t = [n];
  for (; t.length > 0; ) {
    const r = t.shift();
    if (!e.has(r.name)) {
      e.set(r.name, r);
      for (const s of r.handoffs)
        s instanceof yt ? e.has(s.name) || t.push(s) : s.agent && (e.has(s.agent.name) || t.push(s.agent));
    }
  }
  return e;
}
function ja(n, e) {
  const t = e.span_data, r = e.previous_span ? ja(n, e.previous_span) : void 0, s = Re().createSpan({
    spanId: e.id,
    traceId: e.trace_id,
    parentId: e.parent_id ?? void 0,
    startedAt: e.started_at ?? void 0,
    endedAt: e.ended_at ?? void 0,
    data: t
  }, n);
  return s.previousSpan = r, s;
}
function Zs(n) {
  const e = new Xn();
  return e.requests = n.usage.requests, e.inputTokens = n.usage.inputTokens, e.outputTokens = n.usage.outputTokens, e.totalTokens = n.usage.totalTokens, {
    usage: e,
    output: n.output.map((t) => Br.parse(t)),
    responseId: n.responseId,
    providerData: n.providerData
  };
}
function $a(n, e) {
  switch (n.type) {
    case "message_output_item":
      return new Qn(n.rawItem, e.get(n.agent.name));
    case "tool_call_item":
      return new pt(n.rawItem, e.get(n.agent.name));
    case "tool_call_output_item":
      return new qt(n.rawItem, e.get(n.agent.name), n.output);
    case "reasoning_item":
      return new Gr(n.rawItem, e.get(n.agent.name));
    case "handoff_call_item":
      return new zr(n.rawItem, e.get(n.agent.name));
    case "handoff_output_item":
      return new Vr(n.rawItem, e.get(n.sourceAgent.name), e.get(n.targetAgent.name));
    case "tool_approval_item":
      return new we(n.rawItem, e.get(n.agent.name));
  }
}
async function qu(n, e, t, r) {
  const s = await e.getAllTools(t), a = new Map(s.filter((c) => c.type === "function").map((c) => [c.name, c])), i = new Map(s.filter((c) => c.type === "computer").map((c) => [c.name, c])), u = new Map(e.handoffs.map((c) => c instanceof yt ? [c.name, wa(c)] : [c.toolName, c])), l = {
    newItems: r.newItems.map((c) => $a(c, n)),
    toolsUsed: r.toolsUsed,
    handoffs: r.handoffs.map((c) => {
      if (!u.has(c.handoff.toolName))
        throw new te(`Handoff ${c.handoff.toolName} not found`);
      return {
        toolCall: c.toolCall,
        handoff: u.get(c.handoff.toolName)
      };
    }),
    functions: await Promise.all(r.functions.map(async (c) => {
      if (!a.has(c.tool.name))
        throw new te(`Tool ${c.tool.name} not found`);
      return {
        toolCall: c.toolCall,
        tool: a.get(c.tool.name)
      };
    })),
    computerActions: r.computerActions.map((c) => {
      const p = c.computer.name;
      if (!i.has(p))
        throw new te(`Computer tool ${p} not found`);
      return {
        toolCall: c.toolCall,
        computer: i.get(p)
      };
    }),
    mcpApprovalRequests: (r.mcpApprovalRequests ?? []).map((c) => ({
      requestItem: new we(c.requestItem.rawItem, e),
      mcpTool: c.mcpTool
    }))
  };
  return {
    ...l,
    hasToolsOrApprovalsToRun() {
      return l.handoffs.length > 0 || l.functions.length > 0 || l.mcpApprovalRequests.length > 0 || l.computerActions.length > 0;
    }
  };
}
const Us = 10;
function qs(n, e) {
  return n ? !1 : e ? !0 : "enabled_without_data";
}
function kr(n) {
  return typeof n == "string" ? [{ type: "message", role: "user", content: n }] : [...n];
}
class Js {
  constructor({ conversationId: e, previousResponseId: t }) {
    // Conversation ID:
    // - https://platform.openai.com/docs/guides/conversation-state?api-mode=responses#using-the-conversations-api
    // - https://platform.openai.com/docs/api-reference/conversations/create
    _(this, "conversationId");
    // Previous Response ID:
    // https://platform.openai.com/docs/guides/conversation-state?api-mode=responses#passing-context-from-the-previous-response
    _(this, "previousResponseId");
    // Using this flag because WeakSet does not provide a way to check its size
    _(this, "sentInitialInput", !1);
    // The items already sent to the model; using WeakSet for memory efficiency
    _(this, "sentItems", /* @__PURE__ */ new WeakSet());
    // The items received from the server; using WeakSet for memory efficiency
    _(this, "serverItems", /* @__PURE__ */ new WeakSet());
    this.conversationId = e ?? void 0, this.previousResponseId = t ?? void 0;
  }
  /**
   * Pre-populates tracker caches from an existing RunState when resuming server-managed runs.
   */
  primeFromState({ originalInput: e, generatedItems: t, modelResponses: r }) {
    if (this.sentInitialInput)
      return;
    for (const a of kr(e))
      a && typeof a == "object" && this.sentItems.add(a);
    this.sentInitialInput = !0;
    const s = r[r.length - 1];
    for (const a of r)
      for (const i of a.output)
        i && typeof i == "object" && this.serverItems.add(i);
    !this.conversationId && (s != null && s.responseId) && (this.previousResponseId = s.responseId);
    for (const a of t) {
      const i = a.rawItem;
      !i || typeof i != "object" || this.serverItems.has(i) && this.sentItems.add(i);
    }
  }
  trackServerItems(e) {
    if (e) {
      for (const t of e.output)
        t && typeof t == "object" && this.serverItems.add(t);
      !this.conversationId && this.previousResponseId !== void 0 && e.responseId && (this.previousResponseId = e.responseId);
    }
  }
  prepareInput(e, t) {
    const r = [];
    if (!this.sentInitialInput) {
      const s = kr(e);
      for (const a of s)
        r.push(a), a && typeof a == "object" && this.sentItems.add(a);
      this.sentInitialInput = !0;
    }
    for (const s of t) {
      if (s.type === "tool_approval_item")
        continue;
      const a = s.rawItem;
      !a || typeof a != "object" || this.sentItems.has(a) || this.serverItems.has(a) || (r.push(a), this.sentItems.add(a));
    }
    return r;
  }
}
function Kt(n, e) {
  const t = e.filter((r) => r.type !== "tool_approval_item").map((r) => r.rawItem);
  return [...kr(n), ...t];
}
var oe, Ar, Cr, Er, Fa, Or;
class Ju extends Go {
  constructor(t = {}) {
    super();
    I(this, oe);
    _(this, "config");
    _(this, "inputGuardrailDefs");
    _(this, "outputGuardrailDefs");
    this.config = {
      modelProvider: t.modelProvider ?? tu(),
      model: t.model,
      modelSettings: t.modelSettings,
      handoffInputFilter: t.handoffInputFilter,
      inputGuardrails: t.inputGuardrails,
      outputGuardrails: t.outputGuardrails,
      tracingDisabled: t.tracingDisabled ?? !1,
      traceIncludeSensitiveData: t.traceIncludeSensitiveData ?? !0,
      workflowName: t.workflowName ?? "Agent workflow",
      traceId: t.traceId,
      groupId: t.groupId,
      traceMetadata: t.traceMetadata
    }, this.inputGuardrailDefs = (t.inputGuardrails ?? []).map(ks), this.outputGuardrailDefs = (t.outputGuardrails ?? []).map(Ir);
  }
  run(t, r, s = {
    stream: !1,
    context: void 0
  }) {
    return r instanceof et && r._trace ? Bu(r._trace, async () => (r._currentAgentSpan && Cn(r._currentAgentSpan), s != null && s.stream ? $(this, oe, Or).call(this, t, r, s) : $(this, oe, Ar).call(this, t, r, s))) : Gu(async () => s != null && s.stream ? $(this, oe, Or).call(this, t, r, s) : $(this, oe, Ar).call(this, t, r, s), {
      traceId: this.config.traceId,
      name: this.config.workflowName,
      groupId: this.config.groupId,
      metadata: this.config.traceMetadata
    });
  }
}
oe = new WeakSet(), Ar = async function(t, r, s) {
  return Rr(async () => {
    var l, c;
    const a = r instanceof et, i = a ? r : new et(s.context instanceof St ? s.context : new St(s.context), r, t, s.maxTurns ?? Us), u = s.conversationId || s.previousResponseId ? new Js({
      conversationId: s.conversationId,
      previousResponseId: s.previousResponseId
    }) : void 0;
    u && a && u.primeFromState({
      originalInput: i._originalInput,
      generatedItems: i._generatedItems,
      modelResponses: i._modelResponses
    });
    try {
      for (; ; ) {
        const p = i._currentAgent.model !== void 0 && i._currentAgent.model !== "" || this.config.model !== void 0 && this.config.model !== "";
        let f = Bs(i._currentAgent.model, this.config.model);
        if (typeof f == "string" && (f = await this.config.modelProvider.getModel(f)), i._currentStep = i._currentStep ?? {
          type: "next_step_run_again"
        }, i._currentStep.type === "next_step_interruption") {
          if (O.debug("Continuing from interruption"), !i._lastTurnResponse || !i._lastProcessedResponse)
            throw new te("No model response found in previous state", i);
          const h = await Ps(i._currentAgent, i._originalInput, i._generatedItems, i._lastTurnResponse, i._lastProcessedResponse, this, i);
          if (i._toolUseTracker.addToolUse(i._currentAgent, i._lastProcessedResponse.toolsUsed), i._originalInput = h.originalInput, i._generatedItems = h.generatedItems, i._currentStep = h.nextStep, h.nextStep.type === "next_step_interruption")
            return new or(i);
          continue;
        }
        if (i._currentStep.type === "next_step_run_again") {
          const h = await i._currentAgent.getEnabledHandoffs(i._context);
          if (!i._currentAgentSpan) {
            const X = h.map((le) => le.agentName);
            i._currentAgentSpan = Es({
              data: {
                name: i._currentAgent.name,
                handoffs: X,
                output_type: i._currentAgent.outputSchemaName
              }
            }), i._currentAgentSpan.start(), Cn(i._currentAgentSpan);
          }
          const b = await i._currentAgent.getAllTools(i._context), y = b.map((X) => As(X)), w = h.map((X) => Cs(X));
          if (i._currentAgentSpan && (i._currentAgentSpan.spanData.tools = b.map((X) => X.name)), i._currentTurn++, i._currentTurn > i._maxTurns)
            throw (l = i._currentAgentSpan) == null || l.setError({
              message: "Max turns exceeded",
              data: { max_turns: i._maxTurns }
            }), new _s(`Max turns (${i._maxTurns}) exceeded`, i);
          O.debug(`Running agent ${i._currentAgent.name} (turn ${i._currentTurn})`), i._currentTurn === 1 && await $(this, oe, Cr).call(this, i);
          const E = u ? u.prepareInput(i._originalInput, i._generatedItems) : Kt(i._originalInput, i._generatedItems);
          i._noActiveAgentRun && (i._currentAgent.emit("agent_start", i._context, i._currentAgent), this.emit("agent_start", i._context, i._currentAgent));
          let R = {
            ...this.config.modelSettings,
            ...i._currentAgent.modelSettings
          };
          const F = i._currentAgent.modelSettings;
          R = Gs(p, F, f, R), R = Ds(i._currentAgent, i._toolUseTracker, R);
          const W = (u == null ? void 0 : u.previousResponseId) ?? s.previousResponseId, J = (u == null ? void 0 : u.conversationId) ?? s.conversationId;
          i._lastTurnResponse = await f.getResponse({
            systemInstructions: await i._currentAgent.getSystemPrompt(i._context),
            prompt: await i._currentAgent.getPrompt(i._context),
            // Explicit agent/run config models should take precedence over prompt defaults.
            ...p ? { overridePromptModel: !0 } : {},
            input: E,
            previousResponseId: W,
            conversationId: J,
            modelSettings: R,
            tools: y,
            outputType: ws(i._currentAgent.outputType),
            handoffs: w,
            tracing: qs(this.config.tracingDisabled, this.config.traceIncludeSensitiveData),
            signal: s.signal
          }), i._modelResponses.push(i._lastTurnResponse), i._context.usage.add(i._lastTurnResponse.usage), i._noActiveAgentRun = !1, u == null || u.trackServerItems(i._lastTurnResponse);
          const G = Ns(i._lastTurnResponse, i._currentAgent, b, h);
          i._lastProcessedResponse = G;
          const H = await Ms(i._currentAgent, i._originalInput, i._generatedItems, i._lastTurnResponse, i._lastProcessedResponse, this, i);
          i._toolUseTracker.addToolUse(i._currentAgent, i._lastProcessedResponse.toolsUsed), i._originalInput = H.originalInput, i._generatedItems = H.generatedItems, i._currentStep = H.nextStep;
        }
        if (i._currentStep && i._currentStep.type === "next_step_final_output")
          return await $(this, oe, Er).call(this, i, i._currentStep.output), this.emit("agent_end", i._context, i._currentAgent, i._currentStep.output), i._currentAgent.emit("agent_end", i._context, i._currentStep.output), new or(i);
        if (i._currentStep && i._currentStep.type === "next_step_handoff")
          i._currentAgent = i._currentStep.newAgent, i._currentAgentSpan && (i._currentAgentSpan.end(), Gt(), i._currentAgentSpan = void 0), i._noActiveAgentRun = !0, i._currentStep = { type: "next_step_run_again" };
        else {
          if (i._currentStep && i._currentStep.type === "next_step_interruption")
            return new or(i);
          O.debug("Running next loop");
        }
      }
    } catch (p) {
      throw i._currentAgentSpan && i._currentAgentSpan.setError({
        message: "Error in agent run",
        data: { error: String(p) }
      }), p;
    } finally {
      i._currentAgentSpan && (((c = i._currentStep) == null ? void 0 : c.type) !== "next_step_interruption" && i._currentAgentSpan.end(), Gt());
    }
  });
}, Cr = async function(t) {
  const r = this.inputGuardrailDefs.concat(t._currentAgent.inputGuardrails.map(ks));
  if (r.length > 0) {
    const s = {
      agent: t._currentAgent,
      input: t._originalInput,
      context: t._context
    };
    try {
      const a = await Promise.all(r.map(async (i) => Rs(async (u) => {
        const l = await i.run(s);
        return u.spanData.triggered = l.output.tripwireTriggered, l;
      }, { data: { name: i.name } }, t._currentAgentSpan)));
      for (const i of a)
        if (i.output.tripwireTriggered)
          throw t._currentAgentSpan && t._currentAgentSpan.setError({
            message: "Guardrail tripwire triggered",
            data: { guardrail: i.guardrail.name }
          }), new vs(`Input guardrail triggered: ${JSON.stringify(i.output.outputInfo)}`, i, t);
    } catch (a) {
      throw a instanceof vs ? a : (t._currentTurn--, new ys(`Input guardrail failed to complete: ${a}`, a, t));
    }
  }
}, Er = async function(t, r) {
  const s = this.outputGuardrailDefs.concat(t._currentAgent.outputGuardrails.map(Ir));
  if (s.length > 0) {
    const a = t._currentAgent.processFinalOutput(r), i = {
      agent: t._currentAgent,
      agentOutput: a,
      context: t._context,
      details: { modelResponse: t._lastTurnResponse }
    };
    try {
      const u = await Promise.all(s.map(async (l) => Rs(async (c) => {
        const p = await l.run(i);
        return c.spanData.triggered = p.output.tripwireTriggered, p;
      }, { data: { name: l.name } }, t._currentAgentSpan)));
      for (const l of u)
        if (l.output.tripwireTriggered)
          throw t._currentAgentSpan && t._currentAgentSpan.setError({
            message: "Guardrail tripwire triggered",
            data: { guardrail: l.guardrail.name }
          }), new br(`Output guardrail triggered: ${JSON.stringify(l.output.outputInfo)}`, l, t);
    } catch (u) {
      throw u instanceof br ? u : new ys(`Output guardrail failed to complete: ${u}`, u, t);
    }
  }
}, Fa = async function(t, r, s) {
  var i, u, l;
  const a = r.conversationId || r.previousResponseId ? new Js({
    conversationId: r.conversationId,
    previousResponseId: r.previousResponseId
  }) : void 0;
  a && s && a.primeFromState({
    originalInput: t.state._originalInput,
    generatedItems: t.state._generatedItems,
    modelResponses: t.state._modelResponses
  });
  try {
    for (; ; ) {
      const c = t.state._currentAgent, p = await c.getEnabledHandoffs(t.state._context), f = await c.getAllTools(t.state._context), h = f.map((y) => As(y)), b = p.map((y) => Cs(y));
      if (t.state._currentStep = t.state._currentStep ?? {
        type: "next_step_run_again"
      }, t.state._currentStep.type === "next_step_interruption") {
        if (O.debug("Continuing from interruption"), !t.state._lastTurnResponse || !t.state._lastProcessedResponse)
          throw new te("No model response found in previous state", t.state);
        const y = await Ps(t.state._currentAgent, t.state._originalInput, t.state._generatedItems, t.state._lastTurnResponse, t.state._lastProcessedResponse, this, t.state);
        if (js(t, y), t.state._toolUseTracker.addToolUse(t.state._currentAgent, t.state._lastProcessedResponse.toolsUsed), t.state._originalInput = y.originalInput, t.state._generatedItems = y.generatedItems, t.state._currentStep = y.nextStep, y.nextStep.type === "next_step_interruption")
          return;
        continue;
      }
      if (t.state._currentStep.type === "next_step_run_again") {
        if (!t.state._currentAgentSpan) {
          const xe = p.map((ge) => ge.agentName);
          t.state._currentAgentSpan = Es({
            data: {
              name: c.name,
              handoffs: xe,
              tools: f.map((ge) => ge.name),
              output_type: c.outputSchemaName
            }
          }), t.state._currentAgentSpan.start(), Cn(t.state._currentAgentSpan);
        }
        if (t.state._currentTurn++, t.state._currentTurn > t.state._maxTurns)
          throw (i = t.state._currentAgentSpan) == null || i.setError({
            message: "Max turns exceeded",
            data: { max_turns: t.state._maxTurns }
          }), new _s(`Max turns (${t.state._maxTurns}) exceeded`, t.state);
        O.debug(`Running agent ${c.name} (turn ${t.state._currentTurn})`);
        const y = c.model !== void 0 && c.model !== "" || this.config.model !== void 0 && this.config.model !== "";
        let w = Bs(c.model, this.config.model);
        typeof w == "string" && (w = await this.config.modelProvider.getModel(w)), t.state._currentTurn === 1 && await $(this, oe, Cr).call(this, t.state);
        let E = {
          ...this.config.modelSettings,
          ...c.modelSettings
        };
        const R = c.modelSettings;
        E = Gs(y, R, w, E), E = Ds(c, t.state._toolUseTracker, E);
        const F = a ? a.prepareInput(t.input, t.newItems) : Kt(t.input, t.newItems);
        t.state._noActiveAgentRun && (c.emit("agent_start", t.state._context, c), this.emit("agent_start", t.state._context, c));
        let W;
        const J = (a == null ? void 0 : a.previousResponseId) ?? r.previousResponseId, G = (a == null ? void 0 : a.conversationId) ?? r.conversationId;
        for await (const xe of w.getStreamedResponse({
          systemInstructions: await c.getSystemPrompt(t.state._context),
          prompt: await c.getPrompt(t.state._context),
          // Streaming requests should also honor explicitly chosen models.
          ...y ? { overridePromptModel: !0 } : {},
          input: F,
          previousResponseId: J,
          conversationId: G,
          modelSettings: E,
          tools: h,
          handoffs: b,
          outputType: ws(c.outputType),
          tracing: qs(this.config.tracingDisabled, this.config.traceIncludeSensitiveData),
          signal: r.signal
        })) {
          if (xe.type === "response_done") {
            const ge = Ca.parse(xe);
            W = {
              usage: new Xn(ge.response.usage),
              output: ge.response.output,
              responseId: ge.response.id
            };
          }
          if (t.cancelled)
            return;
          t._addItem(new ku(xe));
        }
        if (t.state._noActiveAgentRun = !1, !W)
          throw new ve("Model did not produce a final response!", t.state);
        t.state._lastTurnResponse = W, a == null || a.trackServerItems(W), t.state._modelResponses.push(t.state._lastTurnResponse);
        const H = Ns(t.state._lastTurnResponse, c, f, p);
        t.state._lastProcessedResponse = H;
        const X = new Set(H.newItems);
        X.size > 0 && Pu(t, H.newItems);
        const le = await Ms(c, t.state._originalInput, t.state._generatedItems, t.state._lastTurnResponse, t.state._lastProcessedResponse, this, t.state);
        js(t, le, {
          skipItems: X
        }), t.state._toolUseTracker.addToolUse(c, H.toolsUsed), t.state._originalInput = le.originalInput, t.state._generatedItems = le.generatedItems, t.state._currentStep = le.nextStep;
      }
      if (t.state._currentStep.type === "next_step_final_output") {
        await $(this, oe, Er).call(this, t.state, t.state._currentStep.output), this.emit("agent_end", t.state._context, c, t.state._currentStep.output), c.emit("agent_end", t.state._context, t.state._currentStep.output);
        return;
      } else {
        if (t.state._currentStep.type === "next_step_interruption")
          return;
        t.state._currentStep.type === "next_step_handoff" ? (t.state._currentAgent = (u = t.state._currentStep) == null ? void 0 : u.newAgent, t.state._currentAgentSpan && (t.state._currentAgentSpan.end(), Gt()), t.state._currentAgentSpan = void 0, t._addItem(new Cu(t.state._currentAgent)), t.state._noActiveAgentRun = !0, t.state._currentStep = {
          type: "next_step_run_again"
        }) : O.debug("Running next loop");
      }
    }
  } catch (c) {
    throw t.state._currentAgentSpan && t.state._currentAgentSpan.setError({
      message: "Error in agent run",
      data: { error: String(c) }
    }), c;
  } finally {
    t.state._currentAgentSpan && (((l = t.state._currentStep) == null ? void 0 : l.type) !== "next_step_interruption" && t.state._currentAgentSpan.end(), Gt());
  }
}, Or = async function(t, r, s) {
  return s = s ?? {}, Rr(async () => {
    const a = r instanceof et, i = a ? r : new et(s.context instanceof St ? s.context : new St(s.context), r, t, s.maxTurns ?? Us), u = new Za({
      signal: s.signal,
      state: i
    });
    u.maxTurns = s.maxTurns ?? i._maxTurns;
    const l = $(this, oe, Fa).call(this, u, s, a).then(() => {
      u._done();
    }, (c) => {
      u._raiseError(c);
    });
    return u._setStreamLoopPromise(l), u;
  });
};
function Bs(n, e) {
  return typeof n == "string" && n !== yt.DEFAULT_MODEL_PLACEHOLDER || n ? n : e ?? n ?? yt.DEFAULT_MODEL_PLACEHOLDER;
}
function Gs(n, e, t, r) {
  var s, a, i, u, l, c, p, f;
  if (
    // gpt-5 is enabled for the default model for agents
    ga() && // explicitly set model for the agent
    n && // this runner uses a non-gpt-5 model
    (typeof t != "string" || !Kn(t)) && ((s = e.providerData) != null && s.reasoning || (i = (a = e.providerData) == null ? void 0 : a.text) != null && i.verbosity || (u = e.providerData) != null && u.reasoning_effort)
  ) {
    const h = { ...r };
    return (l = h.providerData) == null || delete l.reasoning, (p = (c = h.providerData) == null ? void 0 : c.text) == null || delete p.verbosity, (f = h.providerData) == null || delete f.reasoning_effort, h.reasoning && (delete h.reasoning.effort, delete h.reasoning.summary), h.text && delete h.text.verbosity, h;
  }
  return r;
}
class La {
  constructor(e) {
    _(this, "state");
    this.state = e;
  }
  /**
   * The history of the agent run. This includes the input items and the new items generated during
   * the agent run.
   *
   * This can be used as inputs for the next agent run.
   */
  get history() {
    return Kt(this.input, this.newItems);
  }
  /**
   * The new items generated during the agent run. These include things like new messages, tool
   * calls and their outputs, etc.
   *
   * It does not include information about the agents and instead represents the model data.
   *
   * For the output including the agents, use the `newItems` property.
   */
  get output() {
    return Kt([], this.newItems);
  }
  /**
   * A copy of the original input items.
   */
  get input() {
    return this.state._originalInput;
  }
  /**
   * The run items generated during the agent run. This associates the model data with the agents.
   *
   * For the model data that can be used as inputs for the next agent run, use the `output` property.
   */
  get newItems() {
    return this.state._generatedItems;
  }
  /**
   * The raw LLM responses generated by the model during the agent run.
   */
  get rawResponses() {
    return this.state._modelResponses;
  }
  /**
   * The last response ID generated by the model during the agent run.
   */
  get lastResponseId() {
    const e = this.rawResponses;
    return e && e.length > 0 ? e[e.length - 1].responseId : void 0;
  }
  /**
   * The last agent that was run
   */
  get lastAgent() {
    return this.state._currentAgent;
  }
  /**
   * Guardrail results for the input messages.
   */
  get inputGuardrailResults() {
    return this.state._inputGuardrailResults;
  }
  /**
   * Guardrail results for the final output of the agent.
   */
  get outputGuardrailResults() {
    return this.state._outputGuardrailResults;
  }
  /**
   * Any interruptions that occurred during the agent run for example for tool approvals.
   */
  get interruptions() {
    var e;
    return ((e = this.state._currentStep) == null ? void 0 : e.type) === "next_step_interruption" ? this.state._currentStep.data.interruptions : [];
  }
  /**
   * The final output of the agent. If the output type was set to anything other than `text`,
   * this will be parsed either as JSON or using the Zod schema you provided.
   */
  get finalOutput() {
    var e;
    if (((e = this.state._currentStep) == null ? void 0 : e.type) === "next_step_final_output")
      return this.state._currentAgent.processFinalOutput(this.state._currentStep.output);
    O.warn("Accessed finalOutput before agent run is completed.");
  }
}
class or extends La {
  constructor(e) {
    super(e);
  }
}
var tn, qe, fe, De, Ct, Et, nn, nt, rn;
class Za extends La {
  constructor(t = {}) {
    super(t.state);
    /**
     * The current turn number
     */
    _(this, "currentTurn", 0);
    /**
     * The maximum number of turns that can be run
     */
    _(this, "maxTurns");
    I(this, tn, null);
    I(this, qe);
    I(this, fe);
    I(this, De);
    I(this, Ct);
    I(this, Et);
    I(this, nn);
    I(this, nt, !1);
    I(this, rn);
    if (v(this, qe, t.signal), v(this, De, new Lo({
      start: (r) => {
        v(this, fe, r);
      },
      cancel: () => {
        v(this, nt, !0);
      }
    })), v(this, Ct, new Promise((r, s) => {
      v(this, Et, r), v(this, nn, s);
    })), o(this, qe)) {
      const r = () => {
        var a, i;
        if (o(this, nt))
          return;
        v(this, nt, !0);
        const s = o(this, fe);
        if (v(this, fe, void 0), o(this, De).locked) {
          if (s)
            try {
              s.close();
            } catch (u) {
              O.debug(`Failed to close readable stream on abort: ${u}`);
            }
        } else
          o(this, De).cancel((a = o(this, qe)) == null ? void 0 : a.reason).catch((u) => {
            O.debug(`Failed to cancel readable stream on abort: ${u}`);
          });
        (i = o(this, Et)) == null || i.call(this);
      };
      o(this, qe).aborted ? r() : o(this, qe).addEventListener("abort", r, { once: !0 });
    }
  }
  /**
   * The current agent that is running
   */
  get currentAgent() {
    return this.lastAgent;
  }
  /**
   * @internal
   * Adds an item to the stream of output items
   */
  _addItem(t) {
    var r;
    this.cancelled || (r = o(this, fe)) == null || r.enqueue(t);
  }
  /**
   * @internal
   * Indicates that the stream has been completed
   */
  _done() {
    var t;
    !this.cancelled && o(this, fe) && (o(this, fe).close(), v(this, fe, void 0), (t = o(this, Et)) == null || t.call(this));
  }
  /**
   * @internal
   * Handles an error in the stream loop.
   */
  _raiseError(t) {
    var r;
    !this.cancelled && o(this, fe) && (o(this, fe).error(t), v(this, fe, void 0)), v(this, tn, t), (r = o(this, nn)) == null || r.call(this, t), o(this, Ct).catch((s) => {
      O.debug(`Resulted in an error: ${s}`);
    });
  }
  /**
   * Returns true if the stream has been cancelled.
   */
  get cancelled() {
    return o(this, nt);
  }
  /**
   * Returns the underlying readable stream.
   * @returns A readable stream of the agent run.
   */
  toStream() {
    return o(this, De);
  }
  /**
   * Await this promise to ensure that the stream has been completed if you are not consuming the
   * stream directly.
   */
  get completed() {
    return o(this, Ct);
  }
  /**
   * Error thrown during the run, if any.
   */
  get error() {
    return o(this, tn);
  }
  toTextStream(t = {}) {
    const r = o(this, De).pipeThrough(new Zo({
      transform(s, a) {
        if (s.type === "raw_model_stream_event" && s.data.type === "output_text_delta") {
          const i = Aa.parse(s.data);
          a.enqueue(i.delta);
        }
      }
    }));
    return t.compatibleWithNodeStreams ? Fo.fromWeb(r) : r;
  }
  [Symbol.asyncIterator]() {
    return o(this, De)[Symbol.asyncIterator]();
  }
  /**
   * @internal
   * Sets the stream loop promise that completes when the internal stream loop finishes.
   * This is used to defer trace end until all agent work is complete.
   */
  _setStreamLoopPromise(t) {
    v(this, rn, t);
  }
  /**
   * @internal
   * Returns a promise that resolves when the stream loop completes.
   * This is used by the tracing system to wait for all agent work before ending the trace.
   */
  _getStreamLoopPromise() {
    return o(this, rn);
  }
}
tn = new WeakMap(), qe = new WeakMap(), fe = new WeakMap(), De = new WeakMap(), Ct = new WeakMap(), Et = new WeakMap(), nn = new WeakMap(), nt = new WeakMap(), rn = new WeakMap();
let zs;
function Oe() {
  return zs ?? (zs = new Uo()), zs;
}
function Yt() {
  const n = Oe().getStore();
  return n != null && n.trace ? n.trace : null;
}
function Xt() {
  const n = Oe().getStore();
  return n != null && n.span ? n.span : null;
}
function Ua(n) {
  return async () => {
    const e = Yt();
    if (!e)
      throw new Error("No trace found");
    await e.start();
    const t = await n(e);
    if (t instanceof Za) {
      const r = t._getStreamLoopPromise();
      if (r)
        return r.finally(() => e.end()), t;
    }
    return await e.end(), t;
  };
}
async function Bu(n, e, t = {}) {
  const r = typeof n == "string" ? Re().createTrace({
    ...t,
    name: n
  }) : n;
  return Oe().run({ trace: r }, Ua(e));
}
async function Gu(n, e = {}) {
  if (Yt())
    return await n();
  const r = Re().createTrace(e);
  return Oe().run({ trace: r }, Ua(n));
}
function Cn(n) {
  const e = Oe().getStore();
  if (!e)
    throw new Error("No existing trace found");
  e.span && (e.span.previousSpan = e.previousSpan, e.previousSpan = e.span), e.span = n, Oe().enterWith(e);
}
function Gt() {
  var e;
  const n = Oe().getStore();
  n && (n.span = n.previousSpan, n.previousSpan = (e = n.previousSpan) == null ? void 0 : e.previousSpan, Oe().enterWith(n));
}
function Tt(n) {
  const e = Xt();
  e && e.setError(n);
}
function zu(n) {
  var e, t, r;
  return {
    trace: (e = n.trace) == null ? void 0 : e.clone(),
    span: (t = n.span) == null ? void 0 : t.clone(),
    previousSpan: (r = n.previousSpan) == null ? void 0 : r.clone()
  };
}
function Rr(n) {
  const e = Oe().getStore();
  if (!e)
    throw new Error("No existing trace found");
  const t = zu(e);
  return Oe().run(t, n);
}
class Vu {
  async export(e) {
    if (pa.disabled) {
      O.debug("Tracing is disabled. Skipping export");
      return;
    }
    for (const t of e)
      t.type === "trace" ? console.log(`[Exporter] Export trace traceId=${t.traceId} name=${t.name}${t.groupId ? ` groupId=${t.groupId}` : ""}`) : console.log(`[Exporter] Export span: ${JSON.stringify(t)}`);
  }
}
var sn, Ot, an, on, Rt, ie, Pe, Je, Be, Nt, de, Nr, Dr, xt;
class Hu {
  constructor(e, {
    maxQueueSize: t = 1e3,
    maxBatchSize: r = 100,
    scheduleDelay: s = 5e3,
    // 5 seconds
    exportTriggerRatio: a = 0.8
  } = {}) {
    I(this, de);
    I(this, sn);
    I(this, Ot);
    I(this, an);
    I(this, on);
    I(this, Rt);
    I(this, ie, []);
    I(this, Pe);
    I(this, Je, null);
    I(this, Be, !1);
    I(this, Nt, null);
    v(this, sn, t), v(this, Ot, r), v(this, an, s), v(this, on, t * a), v(this, Rt, e), v(this, Pe, Jo), O.debug("Automatic trace export loop is not supported in this environment. You need to manually call `getGlobalTraceProvider().forceFlush()` to export traces.");
  }
  start() {
    v(this, Nt, new AbortController()), $(this, de, Dr).call(this);
  }
  async onTraceStart(e) {
    await $(this, de, Nr).call(this, e);
  }
  async onTraceEnd(e) {
  }
  async onSpanStart(e) {
  }
  async onSpanEnd(e) {
    await $(this, de, Nr).call(this, e);
  }
  async shutdown(e) {
    var t;
    for (e && o(this, Pe).setTimeout(() => {
      var r;
      (r = o(this, Nt)) == null || r.abort();
    }, e), O.debug("Shutting down gracefully"); o(this, ie).length > 0; ) {
      if (O.debug(`Waiting for buffer to empty. Items left: ${o(this, ie).length}`), o(this, Be) || await $(this, de, xt).call(this, !0), (t = o(this, Nt)) != null && t.signal.aborted) {
        O.debug("Timeout reached, force flushing"), await $(this, de, xt).call(this, !0);
        break;
      }
      await new Promise((r) => o(this, Pe).setTimeout(r, 500));
    }
    O.debug("Buffer empty. Exiting"), o(this, Pe) && o(this, Je) && o(this, Pe).clearTimeout(o(this, Je));
  }
  async forceFlush() {
    o(this, ie).length > 0 && await $(this, de, xt).call(this, !0);
  }
}
sn = new WeakMap(), Ot = new WeakMap(), an = new WeakMap(), on = new WeakMap(), Rt = new WeakMap(), ie = new WeakMap(), Pe = new WeakMap(), Je = new WeakMap(), Be = new WeakMap(), Nt = new WeakMap(), de = new WeakSet(), Nr = async function(e) {
  if (o(this, ie).length + 1 > o(this, sn)) {
    O.error("Dropping trace because buffer is full");
    return;
  }
  o(this, ie).push(e), o(this, ie).length > o(this, on) && await $(this, de, xt).call(this);
}, Dr = function() {
  v(this, Je, o(this, Pe).setTimeout(async () => {
    await $(this, de, xt).call(this), $(this, de, Dr).call(this);
  }, o(this, an))), typeof o(this, Je).unref == "function" && o(this, Je).unref();
}, xt = async function(e = !1) {
  if (o(this, ie).length !== 0) {
    if (O.debug(`Exporting batches. Force: ${e}. Buffer size: ${o(this, ie).length}`), e || o(this, ie).length < o(this, Ot)) {
      const t = [...o(this, ie)];
      v(this, ie, []), v(this, Be, !0), await o(this, Rt).export(t), v(this, Be, !1);
    } else if (o(this, ie).length > 0) {
      const t = o(this, ie).splice(0, o(this, Ot));
      v(this, Be, !0), await o(this, Rt).export(t), v(this, Be, !1);
    }
  }
};
var he;
class Wu {
  constructor() {
    I(this, he, []);
  }
  start() {
    for (const e of o(this, he))
      e.start && e.start();
  }
  addTraceProcessor(e) {
    o(this, he).push(e);
  }
  setProcessors(e) {
    O.debug("Shutting down old processors");
    for (const t of o(this, he))
      t.shutdown();
    v(this, he, e);
  }
  async onTraceStart(e) {
    for (const t of o(this, he))
      await t.onTraceStart(e);
  }
  async onTraceEnd(e) {
    for (const t of o(this, he))
      await t.onTraceEnd(e);
  }
  async onSpanStart(e) {
    for (const t of o(this, he))
      await t.onSpanStart(e);
  }
  async onSpanEnd(e) {
    for (const t of o(this, he))
      await t.onSpanEnd(e);
  }
  async shutdown(e) {
    for (const t of o(this, he))
      await t.shutdown(e);
  }
  async forceFlush() {
    for (const e of o(this, he))
      await e.forceFlush();
  }
}
he = new WeakMap();
let ur = null, cr = null;
function Ku() {
  return ur || (ur = new Vu()), ur;
}
function qa() {
  return cr || (cr = new Hu(Ku())), cr;
}
function Vs() {
  return (/* @__PURE__ */ new Date()).toISOString();
}
function Ja() {
  return `trace_${ma().replace(/-/g, "")}`;
}
function Yu() {
  return `span_${ma().replace(/-/g, "").slice(0, 24)}`;
}
function Xu(n) {
  return Object.fromEntries(Object.entries(n).filter(([e]) => !e.startsWith("_")));
}
var un, cn, dn, ln, rt, Ge, ze, st, pn;
const Wr = class Wr {
  constructor(e, t) {
    _(this, "type", "trace.span");
    I(this, un);
    I(this, cn);
    I(this, dn);
    I(this, ln);
    I(this, rt);
    I(this, Ge);
    I(this, ze);
    I(this, st);
    I(this, pn);
    v(this, cn, e.traceId), v(this, dn, e.spanId ?? Yu()), v(this, un, e.data), v(this, rt, t), v(this, ln, e.parentId ?? null), v(this, st, e.error ?? null), v(this, Ge, e.startedAt ?? null), v(this, ze, e.endedAt ?? null);
  }
  get traceId() {
    return o(this, cn);
  }
  get spanData() {
    return o(this, un);
  }
  get spanId() {
    return o(this, dn);
  }
  get parentId() {
    return o(this, ln);
  }
  get previousSpan() {
    return o(this, pn);
  }
  set previousSpan(e) {
    v(this, pn, e);
  }
  start() {
    if (o(this, Ge)) {
      O.warn("Span already started");
      return;
    }
    v(this, Ge, Vs()), o(this, rt).onSpanStart(this);
  }
  end() {
    if (o(this, ze)) {
      O.debug("Span already finished", this.spanData);
      return;
    }
    v(this, ze, Vs()), o(this, rt).onSpanEnd(this);
  }
  setError(e) {
    v(this, st, e);
  }
  get error() {
    return o(this, st);
  }
  get startedAt() {
    return o(this, Ge);
  }
  get endedAt() {
    return o(this, ze);
  }
  clone() {
    var t;
    const e = new Wr({
      traceId: this.traceId,
      spanId: this.spanId,
      parentId: this.parentId ?? void 0,
      data: this.spanData,
      startedAt: o(this, Ge) ?? void 0,
      endedAt: o(this, ze) ?? void 0,
      error: o(this, st) ?? void 0
    }, o(this, rt));
    return e.previousSpan = (t = this.previousSpan) == null ? void 0 : t.clone(), e;
  }
  toJSON() {
    return {
      object: this.type,
      id: this.spanId,
      trace_id: this.traceId,
      parent_id: this.parentId,
      started_at: this.startedAt,
      ended_at: this.endedAt,
      span_data: Xu(this.spanData),
      error: this.error
    };
  }
};
un = new WeakMap(), cn = new WeakMap(), dn = new WeakMap(), ln = new WeakMap(), rt = new WeakMap(), Ge = new WeakMap(), ze = new WeakMap(), st = new WeakMap(), pn = new WeakMap();
let Qt = Wr;
class Ze extends Qt {
  constructor(e, t) {
    super({ traceId: "no-op", spanId: "no-op", data: e }, t);
  }
  start() {
  }
  end() {
  }
  setError() {
  }
  toJSON() {
    return null;
  }
}
var Dt, Me;
const Kr = class Kr {
  constructor(e, t) {
    _(this, "type", "trace");
    _(this, "traceId");
    _(this, "name");
    _(this, "groupId", null);
    _(this, "metadata");
    I(this, Dt);
    I(this, Me);
    this.traceId = e.traceId ?? Ja(), this.name = e.name ?? "Agent workflow", this.groupId = e.groupId ?? null, this.metadata = e.metadata ?? {}, v(this, Dt, t ?? qa()), v(this, Me, e.started ?? !1);
  }
  async start() {
    o(this, Me) || (v(this, Me, !0), await o(this, Dt).onTraceStart(this));
  }
  async end() {
    o(this, Me) && (v(this, Me, !1), await o(this, Dt).onTraceEnd(this));
  }
  clone() {
    return new Kr({
      traceId: this.traceId,
      name: this.name,
      groupId: this.groupId ?? void 0,
      metadata: this.metadata,
      started: o(this, Me)
    });
  }
  toJSON() {
    return {
      object: this.type,
      id: this.traceId,
      workflow_name: this.name,
      group_id: this.groupId,
      metadata: this.metadata
    };
  }
};
Dt = new WeakMap(), Me = new WeakMap();
let en = Kr;
class dr extends en {
  constructor() {
    super({});
  }
  async start() {
  }
  async end() {
  }
  toJSON() {
    return null;
  }
}
var se, at, Vn, Ba;
class Qu {
  constructor() {
    I(this, Vn);
    I(this, se);
    I(this, at);
    v(this, se, new Wu()), v(this, at, pa.disabled), $(this, Vn, Ba).call(this);
  }
  /**
   * Add a processor to the list of processors. Each processor will receive all traces/spans.
   *
   * @param processor - The processor to add.
   */
  registerProcessor(e) {
    o(this, se).addTraceProcessor(e);
  }
  /**
   * Set the list of processors. This will replace any existing processors.
   *
   * @param processors - The list of processors to set.
   */
  setProcessors(e) {
    o(this, se).setProcessors(e);
  }
  /**
   * Get the current trace.
   *
   * @returns The current trace.
   */
  getCurrentTrace() {
    return Yt();
  }
  getCurrentSpan() {
    return Xt();
  }
  setDisabled(e) {
    v(this, at, e);
  }
  startExportLoop() {
    o(this, se).start();
  }
  createTrace(e) {
    if (o(this, at))
      return O.debug("Tracing is disabled, Not creating trace %o", e), new dr();
    const t = e.traceId ?? Ja(), r = e.name ?? "Agent workflow";
    return O.debug("Creating trace %s with name %s", t, r), new en({ ...e, name: r, traceId: t }, o(this, se));
  }
  createSpan(e, t) {
    if (o(this, at) || e.disabled)
      return O.debug("Tracing is disabled, Not creating span %o", e), new Ze(e.data, o(this, se));
    let r, s;
    if (t) {
      if (t instanceof en) {
        if (t instanceof dr)
          return O.debug("Parent trace is no-op, returning NoopSpan"), new Ze(e.data, o(this, se));
        s = t.traceId;
      } else if (t instanceof Qt) {
        if (t instanceof Ze)
          return O.debug("Parent span is no-op, returning NoopSpan"), new Ze(e.data, o(this, se));
        r = t.spanId, s = t.traceId;
      }
    } else {
      const a = Yt(), i = Xt();
      if (!a)
        return O.error("No active trace. Make sure to start a trace with `withTrace()` first. Returning NoopSpan."), new Ze(e.data, o(this, se));
      if (i instanceof Ze || a instanceof dr)
        return O.debug(`Parent ${i} or ${a} is no-op, returning NoopSpan`), new Ze(e.data, o(this, se));
      s = a.traceId, i ? (O.debug("Using parent span %s", i.spanId), r = i.spanId) : O.debug("No parent span, using current trace %s", a.traceId);
    }
    return s ? (O.debug(`Creating span ${JSON.stringify(e.data)} with id ${e.spanId ?? s}`), new Qt({
      ...e,
      traceId: s,
      parentId: r
    }, o(this, se))) : (O.error("No traceId found. Make sure to start a trace with `withTrace()` first. Returning NoopSpan."), new Ze(e.data, o(this, se)));
  }
  async shutdown(e) {
    try {
      O.debug("Shutting down tracing provider"), await o(this, se).shutdown(e);
    } catch (t) {
      O.error("Error shutting down tracing provider %o", t);
    }
  }
  async forceFlush() {
    await o(this, se).forceFlush();
  }
}
se = new WeakMap(), at = new WeakMap(), Vn = new WeakSet(), /** Adds listeners to `process` to ensure `shutdown` occurs before exit. */
Ba = function() {
  if (typeof process < "u" && typeof process.on == "function") {
    const e = async () => {
      const t = setTimeout(() => {
        console.warn("Cleanup timeout, forcing exit"), process.exit(1);
      }, 5e3);
      try {
        await this.shutdown();
      } finally {
        clearTimeout(t);
      }
    };
    process.on("beforeExit", e), process.on("SIGINT", async () => {
      await e(), Hs("SIGINT") || process.exit(130);
    }), process.on("SIGTERM", async () => {
      await e(), Hs("SIGTERM") || process.exit(0);
    }), process.on("unhandledRejection", async (t, r) => {
      O.error("Unhandled rejection", t, r), await e(), ec("unhandledRejection") || process.exit(1);
    });
  }
};
function Hs(n) {
  return process.listeners(n).length > 1;
}
function ec(n) {
  return process.listeners(n).length > 1;
}
let lr;
function Re() {
  return lr || (lr = new Qu()), lr;
}
function tc(n) {
  Re().registerProcessor(n);
}
tc(qa());
function Ga(n) {
  const e = atob(n), t = e.length, r = new Uint8Array(t);
  for (let s = 0; s < t; s++)
    r[s] = e.charCodeAt(s);
  return r.buffer;
}
function za(n) {
  const e = String.fromCharCode(...new Uint8Array(n));
  return btoa(e);
}
function Va(n) {
  if (typeof n > "u" || n === null || typeof n != "object" || !("type" in n) || typeof n.type != "string" || !n.type || n.type !== "message" || !("content" in n) || !Array.isArray(n.content) || n.content.length < 1)
    return;
  const e = n.content[n.content.length - 1];
  if (!(!("type" in e) || typeof e.type != "string")) {
    if (e.type === "output_text")
      return typeof e.text == "string" ? e.text : void 0;
    if (e.type === "output_audio")
      return typeof e.transcript == "string" ? e.transcript : void 0;
  }
}
function nc(n, e) {
  const t = n.filter((a) => !e.some((i) => i.itemId === a.itemId)), r = e.filter((a) => !n.some((i) => i.itemId === a.itemId)), s = e.filter((a) => n.some((i) => i.itemId === a.itemId && JSON.stringify(i) !== JSON.stringify(a)));
  return {
    removals: t,
    additions: r,
    updates: s
  };
}
function rc() {
  return typeof window > "u" ? !1 : typeof window.RTCPeerConnection < "u";
}
function Ws(n) {
  return n.role === "system" ? n : n.role === "assistant" ? {
    ...n,
    content: n.content.map((e) => e.type === "output_audio" ? {
      ...e,
      audio: null
    } : e)
  } : n.role === "user" ? {
    ...n,
    content: n.content.map((e) => e.type === "input_audio" ? {
      ...e,
      audio: null
    } : e)
  } : n;
}
function Ks(n, e, t) {
  if (e.type === "conversation.item.input_audio_transcription.completed")
    return n.map((a) => {
      if (a.itemId === e.item_id && a.type === "message" && "role" in a && a.role === "user") {
        const i = a.content.map((u) => u.type === "input_audio" ? {
          ...u,
          transcript: e.transcript
        } : u);
        return {
          ...a,
          content: i,
          status: "completed"
        };
      }
      return a;
    });
  const r = !t && e.type === "message" ? Ws(e) : e, s = n.findIndex((a) => a.itemId === e.itemId);
  if (s !== -1)
    return n.map((a, i) => i === s ? r : !t && a.type === "message" ? Ws(a) : a);
  if (e.previousItemId) {
    const a = n.findIndex((i) => i.itemId === e.previousItemId);
    return a !== -1 ? [
      ...n.slice(0, a + 1),
      r,
      ...n.slice(a + 1)
    ] : [...n, r];
  } else
    return [...n, r];
}
const Ha = {
  "User-Agent": `Agents/JavaScript ${pr.version}`,
  "X-OpenAI-Agents-SDK": `openai-agents-sdk.${pr.version}`
}, sc = `openai-agents-sdk.${pr.version}`;
function ac(n, e) {
  const { name: t, arguments: r, ...s } = e;
  return new we({
    type: "hosted_tool_call",
    name: t,
    arguments: JSON.stringify(r),
    status: "in_progress",
    providerData: {
      ...s
    }
  }, n);
}
function Ys(n) {
  const { name: e, arguments: t, providerData: r } = n.rawItem, { itemId: s, serverLabel: a, ...i } = r ?? {};
  if (!s || !a)
    throw new Error("Invalid approval item for Realtime MCP approval request");
  return {
    type: "mcp_approval_request",
    itemId: s,
    serverLabel: a,
    ...i,
    name: e,
    arguments: t ? JSON.parse(t) : {},
    approved: null
  };
}
class bd extends yt {
  constructor(t) {
    super(t);
    /**
     * The voice intended to be used by the agent. If another agent already spoke during the
     * RealtimeSession, changing the voice during a handoff will fail.
     */
    _(this, "voice");
    this.voice = t.voice;
  }
}
function ic(n) {
  return {
    debounceTextLength: n.debounceTextLength ?? 100
  };
}
function oc({ policyHint: n, ...e }) {
  const t = Ir(e), r = n ?? t.name;
  return {
    ...t,
    policyHint: r,
    run: async (s) => {
      const a = await t.run(s);
      return {
        ...a,
        guardrail: { ...a.guardrail, policyHint: r }
      };
    }
  };
}
function uc(n) {
  return `
⚠️ Your last answer was blocked. 
Failed Guardrail Reason: ${n.guardrail.policyHint}. 
Failure Details: ${JSON.stringify(n.output.outputInfo ?? {})}. 
Please respond again following policy. Apologize for not being able to answer the question (while avoiding the specific reason) and divert discussion back to an approved topic immediately and not invite more discussion.
`.trim();
}
function Qe(n, e) {
  return n in e && typeof e[n] < "u";
}
function cc(n) {
  return Qe("modalities", n) || Qe("inputAudioFormat", n) || Qe("outputAudioFormat", n) || Qe("inputAudioTranscription", n) || Qe("turnDetection", n) || Qe("inputAudioNoiseReduction", n) || Qe("speed", n);
}
function dc(n) {
  var e, t, r, s, a, i, u, l;
  if (!cc(n)) {
    const c = (e = n.audio) != null && e.input ? {
      format: kn(n.audio.input.format),
      noiseReduction: n.audio.input.noiseReduction ?? null,
      transcription: n.audio.input.transcription,
      turnDetection: n.audio.input.turnDetection
    } : void 0, p = ((r = (t = n.audio) == null ? void 0 : t.output) == null ? void 0 : r.voice) ?? n.voice, f = (s = n.audio) != null && s.output || typeof p < "u" ? {
      format: kn((i = (a = n.audio) == null ? void 0 : a.output) == null ? void 0 : i.format),
      voice: p,
      speed: (l = (u = n.audio) == null ? void 0 : u.output) == null ? void 0 : l.speed
    } : void 0;
    return {
      model: n.model,
      instructions: n.instructions,
      toolChoice: n.toolChoice,
      tools: n.tools,
      tracing: n.tracing,
      providerData: n.providerData,
      prompt: n.prompt,
      outputModalities: n.outputModalities,
      audio: c || f ? {
        input: c,
        output: f
      } : void 0
    };
  }
  return {
    model: n.model,
    instructions: n.instructions,
    toolChoice: n.toolChoice,
    tools: n.tools,
    tracing: n.tracing,
    providerData: n.providerData,
    prompt: n.prompt,
    outputModalities: n.modalities,
    audio: {
      input: {
        format: kn(n.inputAudioFormat),
        noiseReduction: n.inputAudioNoiseReduction ?? null,
        transcription: n.inputAudioTranscription,
        turnDetection: n.turnDetection
      },
      output: {
        format: kn(n.outputAudioFormat),
        voice: n.voice,
        speed: n.speed
      }
    }
  };
}
function kn(n) {
  if (!n)
    return;
  if (typeof n == "object")
    return n;
  const e = String(n);
  return e === "pcm16" ? { type: "audio/pcm", rate: 24e3 } : e === "g711_ulaw" ? { type: "audio/pcmu" } : e === "g711_alaw" ? { type: "audio/pcma" } : { type: "audio/pcm", rate: 24e3 };
}
m({
  itemId: d()
});
const Xs = me("role", [
  m({
    itemId: d(),
    previousItemId: d().nullable().optional(),
    type: g("message"),
    role: g("system"),
    content: U(m({ type: g("input_text"), text: d() }))
  }),
  m({
    itemId: d(),
    previousItemId: d().nullable().optional(),
    type: g("message"),
    role: g("user"),
    status: ae(["in_progress", "completed"]),
    content: U(m({ type: g("input_text"), text: d() }).or(m({
      type: g("input_audio"),
      audio: d().nullable().optional(),
      transcript: d().nullable()
    })))
  }),
  m({
    itemId: d(),
    previousItemId: d().nullable().optional(),
    type: g("message"),
    role: g("assistant"),
    status: ae(["in_progress", "completed", "incomplete"]),
    content: U(m({ type: g("output_text"), text: d() }).or(m({
      type: g("output_audio"),
      audio: d().nullable().optional(),
      transcript: d().nullable().optional()
    })))
  })
]), Qs = m({
  itemId: d(),
  previousItemId: d().nullable().optional(),
  type: g("function_call"),
  status: ae(["in_progress", "completed", "incomplete"]),
  arguments: d(),
  name: d(),
  output: d().nullable()
}), ea = m({
  itemId: d(),
  previousItemId: d().nullable().optional(),
  type: ae(["mcp_call", "mcp_tool_call"]),
  status: ae(["in_progress", "completed", "incomplete"]),
  arguments: d(),
  name: d(),
  output: d().nullable()
}), lc = m({
  itemId: d(),
  type: g("mcp_approval_request"),
  serverLabel: d(),
  name: d(),
  arguments: ee(d(), L()),
  approved: lt().optional().nullable()
}), ye = ha("openai-agents:realtime"), Wa = m({
  id: d().optional().nullable(),
  conversation_id: d().optional().nullable(),
  max_output_tokens: A().or(g("inf")).optional().nullable(),
  metadata: ee(d(), L()).optional().nullable(),
  // GA rename: modalities -> output_modalities
  output_modalities: U(d()).optional().nullable(),
  object: g("realtime.response").optional().nullable(),
  output: U(L()).optional().nullable(),
  // GA grouping: audio.output.{format,voice}
  audio: m({
    output: m({
      format: L().optional().nullable(),
      voice: d().optional().nullable()
    }).optional().nullable()
  }).optional().nullable(),
  status: ae(["completed", "incomplete", "failed", "cancelled", "in_progress"]).optional().nullable(),
  status_details: ee(d(), L()).optional().nullable(),
  usage: m({
    input_tokens: A().optional(),
    input_token_details: ee(d(), L()).optional().nullable(),
    output_tokens: A().optional(),
    output_token_details: ee(d(), L()).optional().nullable()
  }).optional().nullable()
}), pc = m({
  id: d().optional(),
  audio: d().nullable().optional(),
  text: d().nullable().optional(),
  transcript: d().nullable().optional(),
  type: ia([
    g("input_text"),
    g("input_audio"),
    g("item_reference"),
    g("output_text"),
    g("output_audio")
  ])
}), Jt = m({
  id: d().optional(),
  arguments: d().optional(),
  call_id: d().optional(),
  content: U(pc).optional(),
  name: d().optional(),
  output: d().nullable().optional(),
  role: ae(["user", "assistant", "system"]).optional(),
  status: ae(["completed", "incomplete", "in_progress"]).optional(),
  type: ae([
    "message",
    "function_call",
    "function_call_output",
    "mcp_list_tools",
    "mcp_tool_call",
    "mcp_call",
    "mcp_approval_request",
    "mcp_approval_response"
  ]).optional(),
  approval_request_id: d().nullable().optional(),
  approve: lt().nullable().optional(),
  reason: d().nullable().optional(),
  server_label: d().optional(),
  error: L().nullable().optional(),
  tools: U(m({
    name: d(),
    description: d(),
    input_schema: ee(L()).optional()
  }).passthrough()).optional()
}).passthrough(), fc = m({
  type: g("conversation.created"),
  event_id: d(),
  conversation: m({
    id: d().optional(),
    object: g("realtime.conversation").optional()
  })
}), hc = m({
  type: g("conversation.item.added"),
  event_id: d(),
  item: Jt,
  previous_item_id: d().nullable().optional()
}), mc = m({
  type: g("conversation.item.done"),
  event_id: d(),
  item: Jt,
  previous_item_id: d().nullable().optional()
}), gc = m({
  type: g("conversation.item.deleted"),
  event_id: d(),
  item_id: d()
}), _c = m({
  type: g("conversation.item.input_audio_transcription.completed"),
  event_id: d(),
  item_id: d(),
  content_index: A(),
  transcript: d(),
  logprobs: U(L()).nullable().optional()
}), yc = m({
  type: g("conversation.item.input_audio_transcription.delta"),
  event_id: d(),
  item_id: d(),
  content_index: A().optional(),
  delta: d().optional(),
  logprobs: U(L()).nullable().optional()
}), vc = m({
  type: g("conversation.item.input_audio_transcription.failed"),
  event_id: d(),
  item_id: d(),
  content_index: A(),
  error: m({
    code: d().optional(),
    message: d().optional(),
    param: d().optional(),
    type: d().optional()
  })
}), wc = m({
  type: g("conversation.item.retrieved"),
  event_id: d(),
  item: Jt
}), bc = m({
  type: g("conversation.item.truncated"),
  event_id: d(),
  item_id: d(),
  audio_end_ms: A(),
  content_index: A()
}), xc = m({
  type: g("conversation.item.create"),
  item: Jt,
  event_id: d().optional(),
  previous_item_id: d().nullable().optional()
}), Sc = m({
  type: g("conversation.item.delete"),
  item_id: d(),
  event_id: d().optional()
}), Ic = m({
  type: g("conversation.item.retrieve"),
  item_id: d(),
  event_id: d().optional()
}), Tc = m({
  type: g("conversation.item.truncate"),
  item_id: d(),
  audio_end_ms: A(),
  content_index: A(),
  event_id: d().optional()
}), kc = m({
  type: g("error"),
  event_id: d().optional(),
  error: L().optional()
}), Ac = m({
  type: g("input_audio_buffer.cleared"),
  event_id: d()
}), Cc = m({
  type: g("input_audio_buffer.append"),
  audio: d(),
  event_id: d().optional()
}), Ec = m({
  type: g("input_audio_buffer.clear"),
  event_id: d().optional()
}), Oc = m({
  type: g("input_audio_buffer.commit"),
  event_id: d().optional()
}), Rc = m({
  type: g("input_audio_buffer.committed"),
  event_id: d(),
  item_id: d(),
  previous_item_id: d().nullable().optional()
}), Nc = m({
  type: g("input_audio_buffer.speech_started"),
  event_id: d(),
  item_id: d(),
  audio_start_ms: A()
}), Dc = m({
  type: g("input_audio_buffer.speech_stopped"),
  event_id: d(),
  item_id: d(),
  audio_end_ms: A()
}), Pc = m({
  type: g("output_audio_buffer.started"),
  event_id: d()
}).passthrough(), Mc = m({
  type: g("output_audio_buffer.stopped"),
  event_id: d()
}).passthrough(), jc = m({
  type: g("output_audio_buffer.cleared"),
  event_id: d()
}), $c = m({
  type: g("rate_limits.updated"),
  event_id: d(),
  rate_limits: U(m({
    limit: A().optional(),
    name: ae(["requests", "tokens"]).optional(),
    remaining: A().optional(),
    reset_seconds: A().optional()
  }))
}), Fc = m({
  type: g("response.output_audio.delta"),
  event_id: d(),
  item_id: d(),
  content_index: A(),
  delta: d(),
  output_index: A(),
  response_id: d()
}), Lc = m({
  type: g("response.output_audio.done"),
  event_id: d(),
  item_id: d(),
  content_index: A(),
  output_index: A(),
  response_id: d()
}), Zc = m({
  type: g("response.output_audio_transcript.delta"),
  event_id: d(),
  item_id: d(),
  content_index: A(),
  delta: d(),
  output_index: A(),
  response_id: d()
}), Uc = m({
  //  GA may introduce response.output_audio_transcript.done
  type: g("response.output_audio_transcript.done"),
  event_id: d(),
  item_id: d(),
  content_index: A(),
  transcript: d(),
  output_index: A(),
  response_id: d()
}), qc = m({
  type: g("response.content_part.added"),
  event_id: d(),
  item_id: d(),
  content_index: A(),
  output_index: A(),
  response_id: d(),
  part: m({
    audio: d().optional(),
    text: d().optional(),
    transcript: d().optional(),
    type: ae(["text", "audio"]).optional()
  })
}), Jc = m({
  type: g("response.content_part.done"),
  event_id: d(),
  item_id: d(),
  content_index: A(),
  output_index: A(),
  response_id: d(),
  part: m({
    audio: d().optional(),
    text: d().optional(),
    transcript: d().optional(),
    type: ae(["text", "audio"]).optional()
  })
}), Bc = m({
  type: g("response.created"),
  event_id: d(),
  response: Wa
}), Ka = m({
  type: g("response.done"),
  event_id: d(),
  response: Wa
}), Gc = m({
  type: g("response.function_call_arguments.delta"),
  event_id: d(),
  item_id: d(),
  call_id: d(),
  delta: d(),
  output_index: A(),
  response_id: d()
}), zc = m({
  type: g("response.function_call_arguments.done"),
  event_id: d(),
  item_id: d(),
  call_id: d(),
  arguments: d(),
  output_index: A(),
  response_id: d()
}), Vc = m({
  type: g("response.output_item.added"),
  event_id: d(),
  item: Jt,
  output_index: A(),
  response_id: d()
}), Hc = m({
  type: g("response.output_item.done"),
  event_id: d(),
  item: Jt,
  output_index: A(),
  response_id: d()
}), Wc = m({
  type: g("response.output_text.delta"),
  event_id: d(),
  item_id: d(),
  content_index: A(),
  delta: d(),
  output_index: A(),
  response_id: d()
}), Kc = m({
  // No rename specified for done; keep response.text.done
  type: g("response.output_text.done"),
  event_id: d(),
  item_id: d(),
  content_index: A(),
  text: d(),
  output_index: A(),
  response_id: d()
}), Yc = m({
  type: g("session.created"),
  event_id: d(),
  session: L()
}), Xc = m({
  type: g("session.updated"),
  event_id: d(),
  session: L()
}), Qc = m({
  type: g("response.cancel"),
  event_id: d().optional(),
  response_id: d().optional()
}), ed = m({
  type: g("response.create"),
  event_id: d().optional(),
  response: L().optional()
}), td = m({
  type: g("session.update"),
  event_id: d().optional(),
  session: L()
}), nd = m({
  type: g("mcp_list_tools.in_progress"),
  event_id: d().optional(),
  item_id: d().optional()
}), rd = m({
  type: g("mcp_list_tools.completed"),
  event_id: d().optional(),
  item_id: d().optional()
}), sd = m({
  type: g("response.mcp_call_arguments.delta"),
  event_id: d(),
  response_id: d(),
  item_id: d(),
  output_index: A(),
  delta: d(),
  obfuscation: d()
}), ad = m({
  type: g("response.mcp_call_arguments.done"),
  event_id: d(),
  response_id: d(),
  item_id: d(),
  output_index: A(),
  arguments: d()
}), id = m({
  type: g("response.mcp_call.in_progress"),
  event_id: d(),
  output_index: A(),
  item_id: d()
}), od = m({
  type: g("response.mcp_call.completed"),
  event_id: d(),
  output_index: A(),
  item_id: d()
}), ud = m({
  type: g("mcp_list_tools.failed"),
  event_id: d().optional(),
  item_id: d().optional()
}), cd = m({
  type: d(),
  event_id: d().optional().nullable()
}).passthrough(), dd = me("type", [
  fc,
  hc,
  mc,
  gc,
  _c,
  yc,
  vc,
  wc,
  bc,
  kc,
  Ac,
  Rc,
  Nc,
  Dc,
  Pc,
  Mc,
  jc,
  $c,
  Fc,
  Lc,
  Zc,
  Uc,
  qc,
  Jc,
  Bc,
  Ka,
  Gc,
  zc,
  Vc,
  Hc,
  Wc,
  Kc,
  Yc,
  Xc,
  nd,
  rd,
  ud,
  sd,
  ad,
  id,
  od
]);
me("type", [
  xc,
  Sc,
  Ic,
  Tc,
  Cc,
  Ec,
  Oc,
  Qc,
  ed,
  td
]);
function Hr(n) {
  const e = JSON.parse(n.data.toString()), t = dd.safeParse(e);
  if (!t.success) {
    const r = cd.safeParse(e);
    return r.success ? { data: r.data, isGeneric: !0 } : { data: null, isGeneric: !0 };
  }
  return { data: t.data, isGeneric: !1 };
}
const ld = "gpt-realtime", Te = {
  outputModalities: ["audio"],
  audio: {
    input: {
      format: { type: "audio/pcm", rate: 24e3 },
      transcription: { model: "gpt-4o-mini-transcribe" },
      turnDetection: { type: "semantic_vad" },
      noiseReduction: null
    },
    output: {
      format: { type: "audio/pcm", rate: 24e3 },
      speed: 1
    }
  }
};
var it, fn, ce, hn;
const Yr = class Yr extends Zr {
  constructor(t = {}) {
    super();
    I(this, it);
    I(this, fn);
    I(this, ce, null);
    I(this, hn, null);
    _(this, "eventEmitter", new Wn());
    v(this, it, t.model ?? ld), v(this, fn, t.apiKey);
  }
  /**
   * The current model that is being used by the transport layer.
   */
  get currentModel() {
    return o(this, it);
  }
  /**
   * The current model that is being used by the transport layer.
   * **Note**: The model cannot be changed mid conversation.
   */
  set currentModel(t) {
    v(this, it, t);
  }
  get _rawSessionConfig() {
    return o(this, hn) ?? null;
  }
  async _getApiKey(t) {
    const r = t.apiKey ?? o(this, fn);
    return typeof r == "function" ? await r() : r;
  }
  _onMessage(t) {
    var a, i, u, l, c, p;
    const { data: r, isGeneric: s } = Hr(t);
    if (r !== null && (this.emit("*", r), !s)) {
      if (r.type === "error" ? this.emit("error", { type: "error", error: r }) : this.emit(r.type, r), r.type === "response.created") {
        this.emit("turn_started", {
          type: "response_started",
          providerData: {
            ...r
          }
        });
        return;
      }
      if (r.type === "session.updated" && v(this, hn, r.session), r.type === "response.done") {
        const f = Ka.safeParse(r);
        if (!f.success) {
          ye.error("Error parsing response done event", f.error);
          return;
        }
        const h = ((a = f.data.response.usage) == null ? void 0 : a.input_tokens) ?? 0, b = ((i = f.data.response.usage) == null ? void 0 : i.output_tokens) ?? 0, y = h + b, w = new Xn({
          inputTokens: h,
          inputTokensDetails: ((u = f.data.response.usage) == null ? void 0 : u.input_token_details) ?? {},
          outputTokens: b,
          outputTokensDetails: ((l = f.data.response.usage) == null ? void 0 : l.output_token_details) ?? {},
          totalTokens: y
        });
        this.emit("usage_update", w), this.emit("turn_done", {
          type: "response_done",
          response: {
            id: f.data.response.id ?? "",
            output: f.data.response.output ?? [],
            usage: {
              inputTokens: h,
              inputTokensDetails: ((c = f.data.response.usage) == null ? void 0 : c.input_token_details) ?? {},
              outputTokens: b,
              outputTokensDetails: ((p = f.data.response.usage) == null ? void 0 : p.output_token_details) ?? {},
              totalTokens: y
            }
          }
        });
        return;
      }
      if (r.type === "response.output_audio.done") {
        this.emit("audio_done");
        return;
      }
      if (r.type === "conversation.item.deleted") {
        this.emit("item_deleted", {
          itemId: r.item_id
        });
        return;
      }
      if (r.type === "conversation.item.input_audio_transcription.completed" || r.type === "conversation.item.truncated") {
        this.sendEvent({
          type: "conversation.item.retrieve",
          item_id: r.item_id
        });
        return;
      }
      if (r.type === "conversation.item.input_audio_transcription.delta" || r.type === "response.output_text.delta" || r.type === "response.output_audio_transcript.delta" || r.type === "response.function_call_arguments.delta") {
        r.type === "response.output_audio_transcript.delta" && this.emit("audio_transcript_delta", {
          type: "transcript_delta",
          delta: r.delta,
          itemId: r.item_id,
          responseId: r.response_id
        });
        return;
      }
      if (r.type === "conversation.item.added" || r.type === "conversation.item.done" || r.type === "conversation.item.retrieved") {
        if (r.item.type === "mcp_list_tools" && r.type === "conversation.item.done") {
          const f = r.item.server_label ?? "", h = r.item.tools ?? [];
          try {
            this.emit("mcp_tools_listed", {
              serverLabel: f,
              tools: h
            });
          } catch (b) {
            ye.error("Error emitting mcp_tools_listed", b, r.item);
          }
          return;
        }
        if (r.item.type === "message") {
          const f = r.type === "conversation.item.added" || r.type === "conversation.item.done" ? r.previous_item_id : null, h = Xs.parse({
            itemId: r.item.id,
            previousItemId: f,
            type: r.item.type,
            role: r.item.role,
            content: r.item.content,
            status: r.item.status
          });
          this.emit("item_update", h);
          return;
        }
        if (r.item.type === "mcp_approval_request" && r.type === "conversation.item.done") {
          const f = r.item, h = lc.parse({
            itemId: f.id,
            type: f.type,
            serverLabel: f.server_label,
            name: f.name,
            arguments: JSON.parse(f.arguments || "{}"),
            approved: f.approved
          });
          this.emit("item_update", h), this.emit("mcp_approval_request", h);
          return;
        }
        if (r.item.type === "mcp_tool_call" || r.item.type === "mcp_call") {
          const f = r.type === "conversation.item.done" ? "completed" : "in_progress", h = ea.parse({
            itemId: r.item.id,
            type: r.item.type,
            status: f,
            arguments: r.item.arguments,
            name: r.item.name,
            output: r.item.output
          });
          this.emit("item_update", h), r.type === "conversation.item.done" && this.emit("mcp_tool_call_completed", h);
          return;
        }
      }
      if (r.type === "response.mcp_call.in_progress") {
        const f = r;
        this.sendEvent({
          type: "conversation.item.retrieve",
          item_id: f.item_id
        });
        return;
      }
      if (r.type === "mcp_list_tools.in_progress") {
        const f = r;
        f.item_id && this.sendEvent({
          type: "conversation.item.retrieve",
          item_id: f.item_id
        });
        return;
      }
      if (r.type === "response.output_item.done" || r.type === "response.output_item.added") {
        const f = r.item;
        if (f.type === "function_call" && f.status === "completed") {
          const h = Qs.parse({
            itemId: f.id,
            type: f.type,
            status: "in_progress",
            // we set it to in_progress for the UI as it will only be completed with the output
            arguments: f.arguments,
            name: f.name,
            output: null
          });
          this.emit("item_update", h), this.emit("function_call", {
            id: f.id,
            type: "function_call",
            callId: f.call_id ?? "",
            arguments: f.arguments ?? "",
            name: f.name ?? ""
          });
          return;
        }
        if (f.type === "mcp_tool_call" || f.type === "mcp_call") {
          const h = ea.parse({
            itemId: f.id,
            type: f.type,
            status: r.type === "response.output_item.done" ? "completed" : "in_progress",
            // we set it to in_progress for the UI as it will only be completed with the output
            arguments: f.arguments,
            name: f.name,
            output: f.output
          });
          this.emit("item_update", h);
          return;
        }
        if (f.type === "message") {
          const h = Xs.parse({
            itemId: r.item.id,
            type: r.item.type,
            role: r.item.role,
            content: r.item.content,
            status: r.type === "response.output_item.done" ? f.status ?? "completed" : f.status ?? "in_progress"
          });
          this.emit("item_update", h);
          return;
        }
      }
    }
  }
  _onError(t) {
    this.emit("error", {
      type: "error",
      error: t
    });
  }
  _onOpen() {
    this.emit("connected");
  }
  _onClose() {
    this.emit("disconnected");
  }
  /**
   * Send a message to the Realtime API. This will create a new item in the conversation and
   * trigger a response.
   *
   * @param message - The message to send.
   * @param otherEventData - Additional event data to send.
   */
  sendMessage(t, r, { triggerResponse: s = !0 } = {}) {
    const a = typeof t == "string" ? [
      {
        type: "input_text",
        text: t
      }
    ] : t.content.map((i) => i.type === "input_image" ? {
      type: "input_image",
      image_url: i.image,
      ...i.providerData ?? {}
    } : i);
    this.sendEvent({
      type: "conversation.item.create",
      item: {
        type: "message",
        role: "user",
        content: a
      },
      ...r
    }), s && this.sendEvent({
      type: "response.create"
    });
  }
  addImage(t, { triggerResponse: r = !0 } = {}) {
    this.sendMessage({
      type: "message",
      role: "user",
      content: [{ type: "input_image", image: t }]
    }, {}, { triggerResponse: r });
  }
  _getMergedSessionConfig(t) {
    var a, i, u, l, c, p, f, h, b, y, w, E, R, F, W, J, G, H, X, le, xe, ge, Xr, Qr, es, ts, ns, rs;
    const r = dc(t), s = {
      type: "realtime",
      instructions: r.instructions,
      model: r.model ?? o(this, it),
      output_modalities: r.outputModalities ?? Te.outputModalities,
      audio: {
        input: {
          format: ((i = (a = r.audio) == null ? void 0 : a.input) == null ? void 0 : i.format) ?? ((l = (u = Te.audio) == null ? void 0 : u.input) == null ? void 0 : l.format),
          noise_reduction: ((p = (c = r.audio) == null ? void 0 : c.input) == null ? void 0 : p.noiseReduction) ?? ((h = (f = Te.audio) == null ? void 0 : f.input) == null ? void 0 : h.noiseReduction),
          transcription: ((y = (b = r.audio) == null ? void 0 : b.input) == null ? void 0 : y.transcription) ?? ((E = (w = Te.audio) == null ? void 0 : w.input) == null ? void 0 : E.transcription),
          turn_detection: Yr.buildTurnDetectionConfig((F = (R = r.audio) == null ? void 0 : R.input) == null ? void 0 : F.turnDetection) ?? ((J = (W = Te.audio) == null ? void 0 : W.input) == null ? void 0 : J.turnDetection)
        },
        output: {
          format: ((H = (G = r.audio) == null ? void 0 : G.output) == null ? void 0 : H.format) ?? ((le = (X = Te.audio) == null ? void 0 : X.output) == null ? void 0 : le.format),
          voice: ((ge = (xe = r.audio) == null ? void 0 : xe.output) == null ? void 0 : ge.voice) ?? ((Qr = (Xr = Te.audio) == null ? void 0 : Xr.output) == null ? void 0 : Qr.voice),
          speed: ((ts = (es = r.audio) == null ? void 0 : es.output) == null ? void 0 : ts.speed) ?? ((rs = (ns = Te.audio) == null ? void 0 : ns.output) == null ? void 0 : rs.speed)
        }
      },
      tool_choice: r.toolChoice ?? Te.toolChoice,
      // We don't set tracing here to make sure that we don't try to override it on every
      // session.update as it might lead to errors
      ...r.providerData ?? {}
    };
    return r.prompt && (s.prompt = {
      id: r.prompt.promptId,
      version: r.prompt.version,
      variables: r.prompt.variables
    }), r.tools && r.tools.length > 0 && (s.tools = r.tools.map((ni) => ({
      ...ni,
      strict: void 0
    }))), s;
  }
  static buildTurnDetectionConfig(t) {
    if (typeof t > "u")
      return;
    const { type: r, createResponse: s, create_response: a, eagerness: i, interruptResponse: u, interrupt_response: l, prefixPaddingMs: c, prefix_padding_ms: p, silenceDurationMs: f, silence_duration_ms: h, threshold: b, idleTimeoutMs: y, idle_timeout_ms: w, ...E } = t, R = {
      type: r,
      create_response: s || a,
      eagerness: i,
      interrupt_response: u || l,
      prefix_padding_ms: c || p,
      silence_duration_ms: f || h,
      idle_timeout_ms: y || w,
      threshold: b,
      ...E
    };
    return Object.keys(R).forEach((F) => {
      R[F] === void 0 && delete R[F];
    }), Object.keys(R).length > 0 ? R : void 0;
  }
  /**
   * Sets the internal tracing config. This is used to track the tracing config that has been set
   * during the session.create event.
   */
  set _tracingConfig(t) {
    v(this, ce, t);
  }
  /**
   * Sets the tracing config for the session. This will send the tracing config to the Realtime API.
   *
   * @param tracingConfig - The tracing config to set. We don't support 'auto' here as the SDK will always configure a Workflow Name unless it exists
   */
  _updateTracingConfig(t) {
    var r, s, a;
    if (typeof o(this, ce) > "u" && v(this, ce, null), t === "auto") {
      this.sendEvent({
        type: "session.update",
        session: {
          type: "realtime",
          tracing: "auto"
        }
      });
      return;
    }
    if (o(this, ce) !== null && typeof o(this, ce) != "string" && typeof t != "string") {
      ye.warn("Tracing config is already set, skipping setting it again. This likely happens when you already set a tracing config on session creation.");
      return;
    }
    if (t === null) {
      ye.debug("Disabling tracing for this session. It cannot be turned on for this session from this point on."), this.sendEvent({
        type: "session.update",
        session: {
          type: "realtime",
          tracing: null
        }
      });
      return;
    }
    if (o(this, ce) === null || typeof o(this, ce) == "string") {
      this.sendEvent({
        type: "session.update",
        session: {
          type: "realtime",
          tracing: t
        }
      });
      return;
    }
    if ((t == null ? void 0 : t.group_id) !== ((r = o(this, ce)) == null ? void 0 : r.group_id) || (t == null ? void 0 : t.metadata) !== ((s = o(this, ce)) == null ? void 0 : s.metadata) || (t == null ? void 0 : t.workflow_name) !== ((a = o(this, ce)) == null ? void 0 : a.workflow_name)) {
      ye.warn("Mismatch in tracing config. Ignoring the new tracing config. This likely happens when you already set a tracing config on session creation. Current tracing config: %s, new tracing config: %s", JSON.stringify(o(this, ce)), JSON.stringify(t));
      return;
    }
    this.sendEvent({
      type: "session.update",
      session: {
        type: "realtime",
        tracing: t
      }
    });
  }
  /**
   * Updates the session config. This will merge it with the current session config with the default
   * values and send it to the Realtime API.
   *
   * @param config - The session config to update.
   */
  updateSessionConfig(t) {
    const r = this._getMergedSessionConfig(t);
    this.sendEvent({
      type: "session.update",
      session: r
    });
  }
  /**
   * Send the output of a function call to the Realtime API.
   *
   * @param toolCall - The tool call to send the output for.
   * @param output - The output of the function call.
   * @param startResponse - Whether to start a new response after sending the output.
   */
  sendFunctionCallOutput(t, r, s = !0) {
    this.sendEvent({
      type: "conversation.item.create",
      item: {
        type: "function_call_output",
        output: r,
        call_id: t.callId
      }
    });
    try {
      const a = Qs.parse({
        itemId: t.id,
        previousItemId: t.previousItemId,
        type: "function_call",
        status: "completed",
        arguments: t.arguments,
        name: t.name,
        output: r
      });
      this.emit("item_update", a);
    } catch (a) {
      ye.error("Error parsing tool call item", a, t);
    }
    s && this.sendEvent({
      type: "response.create"
    });
  }
  /**
   * Send an audio buffer to the Realtime API. If `{ commit: true }` is passed, the audio buffer
   * will be committed and the model will start processing it. This is necessary if you have
   * disabled turn detection / voice activity detection (VAD).
   *
   * @param audio - The audio buffer to send.
   * @param options - The options for the audio buffer.
   */
  sendAudio(t, { commit: r = !1 } = {}) {
    this.sendEvent({
      type: "input_audio_buffer.append",
      audio: za(t)
    }), r && this.sendEvent({
      type: "input_audio_buffer.commit"
    });
  }
  /**
   * Reset the history of the conversation. This will create a diff between the old and new history
   * and send the necessary events to the Realtime API to update the history.
   *
   * @param oldHistory - The old history of the conversation.
   * @param newHistory - The new history of the conversation.
   */
  resetHistory(t, r) {
    const { removals: s, additions: a, updates: i } = nc(t, r), u = new Set(s.map((c) => c.itemId));
    for (const c of i)
      u.add(c.itemId);
    if (u.size > 0)
      for (const c of u)
        this.sendEvent({
          type: "conversation.item.delete",
          item_id: c
        });
    const l = [...a, ...i];
    for (const c of l)
      if (c.type === "message") {
        const p = {
          type: "message",
          role: c.role,
          content: c.content,
          id: c.itemId
        };
        c.role !== "system" && c.status && (p.status = c.status), this.sendEvent({
          type: "conversation.item.create",
          item: p
        });
      } else c.type === "function_call" && ye.warn("Function calls cannot be manually added or updated at the moment. Ignoring.");
  }
  sendMcpResponse(t, r) {
    this.sendEvent({
      type: "conversation.item.create",
      previous_item_id: t.itemId,
      item: {
        type: "mcp_approval_response",
        approval_request_id: t.itemId,
        approve: r
      }
    });
  }
};
it = new WeakMap(), fn = new WeakMap(), ce = new WeakMap(), hn = new WeakMap();
let zn = Yr;
var mn, V, gn, ot, _n;
class pd extends zn {
  constructor(t = {}) {
    if (typeof RTCPeerConnection > "u")
      throw new Error("WebRTC is not supported in this environment");
    super(t);
    _(this, "options");
    I(this, mn);
    I(this, V, {
      status: "disconnected",
      peerConnection: void 0,
      dataChannel: void 0,
      callId: void 0
    });
    I(this, gn);
    I(this, ot, !1);
    I(this, _n, !1);
    this.options = t, v(this, mn, t.baseUrl ?? "https://api.openai.com/v1/realtime/calls"), v(this, gn, t.useInsecureApiKey ?? !1);
  }
  /**
   * The current call ID of the WebRTC connection.
   */
  get callId() {
    return o(this, V).callId;
  }
  /**
   * The current status of the WebRTC connection.
   */
  get status() {
    return o(this, V).status;
  }
  /**
   * The current connection state of the WebRTC connection including the peer connection and data
   * channel.
   */
  get connectionState() {
    return o(this, V);
  }
  /**
   * Whether the session is muted.
   */
  get muted() {
    return o(this, _n);
  }
  /**
   * Connect to the Realtime API. This will establish the connection to the OpenAI Realtime API
   * via WebRTC.
   *
   * If you are using a browser, the transport layer will also automatically configure the
   * microphone and audio output to be used by the session.
   *
   * @param options - The options for the connection.
   */
  async connect(t) {
    if (o(this, V).status === "connected")
      return;
    o(this, V).status === "connecting" && ye.warn("Realtime connection already in progress. Please await original promise");
    const r = t.model ?? this.currentModel;
    this.currentModel = r;
    const s = t.url ?? o(this, mn), a = await this._getApiKey(t), i = typeof a == "string" && a.startsWith("ek_");
    if (!o(this, gn) && !i)
      throw new te("Using the WebRTC connection in a browser environment requires an ephemeral client key. If you need to use a regular API key, use the WebSocket transport or set the `useInsecureApiKey` option to true.");
    return new Promise(async (u, l) => {
      var c, p;
      try {
        const f = {
          ...t.initialSessionConfig || {},
          model: this.currentModel
        }, h = new URL(s);
        let b = new RTCPeerConnection();
        const y = b.createDataChannel("oai-events");
        let w;
        v(this, V, {
          status: "connecting",
          peerConnection: b,
          dataChannel: y,
          callId: w
        }), this.emit("connection_change", o(this, V).status), y.addEventListener("open", () => {
          v(this, V, {
            status: "connected",
            peerConnection: b,
            dataChannel: y,
            callId: w
          }), this.updateSessionConfig(f), this.emit("connection_change", o(this, V).status), this._onOpen(), u();
        }), y.addEventListener("error", (G) => {
          this.close(), this._onError(G), l(G);
        }), y.addEventListener("message", (G) => {
          this._onMessage(G);
          const { data: H, isGeneric: X } = Hr(G);
          !H || X || (H.type === "response.created" ? v(this, ot, !0) : H.type === "response.done" && v(this, ot, !1), H.type === "session.created" && (this._tracingConfig = H.session.tracing, this._updateTracingConfig(f.tracing ?? "auto")));
        });
        const E = this.options.audioElement ?? document.createElement("audio");
        E.autoplay = !0, b.ontrack = (G) => {
          E.srcObject = G.streams[0];
        };
        const R = this.options.mediaStream ?? await navigator.mediaDevices.getUserMedia({
          audio: !0
        });
        b.addTrack(R.getAudioTracks()[0]), this.options.changePeerConnection && (b = await this.options.changePeerConnection(b), v(this, V, { ...o(this, V), peerConnection: b }));
        const F = await b.createOffer();
        if (await b.setLocalDescription(F), !F.sdp)
          throw new Error("Failed to create offer");
        const W = await fetch(h, {
          method: "POST",
          body: F.sdp,
          headers: {
            "Content-Type": "application/sdp",
            Authorization: `Bearer ${a}`,
            "X-OpenAI-Agents-SDK": Ha["X-OpenAI-Agents-SDK"]
          }
        });
        w = (p = (c = W.headers) == null ? void 0 : c.get("Location")) == null ? void 0 : p.split("/").pop(), v(this, V, { ...o(this, V), callId: w });
        const J = {
          type: "answer",
          sdp: await W.text()
        };
        await b.setRemoteDescription(J);
      } catch (f) {
        this.close(), this._onError(f), l(f);
      }
    });
  }
  /**
   * Send an event to the Realtime API. This will stringify the event and send it directly to the
   * API. This can be used if you want to take control over the connection and send events manually.
   *
   * @param event - The event to send.
   */
  sendEvent(t) {
    if (!o(this, V).dataChannel || o(this, V).dataChannel.readyState !== "open")
      throw new Error("WebRTC data channel is not connected. Make sure you call `connect()` before sending events.");
    o(this, V).dataChannel.send(JSON.stringify(t));
  }
  /**
   * Mute or unmute the session.
   * @param muted - Whether to mute the session.
   */
  mute(t) {
    v(this, _n, t), o(this, V).peerConnection && o(this, V).peerConnection.getSenders().forEach((s) => {
      s.track && (s.track.enabled = !t);
    });
  }
  /**
   * Close the connection to the Realtime API and disconnects the underlying WebRTC connection.
   */
  close() {
    if (o(this, V).dataChannel && o(this, V).dataChannel.close(), o(this, V).peerConnection) {
      const t = o(this, V).peerConnection;
      t.getSenders().forEach((r) => {
        var s;
        (s = r.track) == null || s.stop();
      }), t.close();
    }
    o(this, V).status !== "disconnected" && (v(this, V, {
      status: "disconnected",
      peerConnection: void 0,
      dataChannel: void 0,
      callId: void 0
    }), this.emit("connection_change", o(this, V).status), this._onClose());
  }
  /**
   * Interrupt the current response if one is ongoing and clear the audio buffer so that the agent
   * stops talking.
   */
  interrupt() {
    o(this, ot) && (this.sendEvent({
      type: "response.cancel"
    }), v(this, ot, !1)), this.sendEvent({
      type: "output_audio_buffer.clear"
    });
  }
}
mn = new WeakMap(), V = new WeakMap(), gn = new WeakMap(), ot = new WeakMap(), _n = new WeakMap();
const fd = globalThis.WebSocket;
var Ve, He, ne, yn, je, ut, ct, Pt, vn, Hn, Ya;
class hd extends zn {
  constructor(t = {}) {
    super(t);
    I(this, Hn);
    I(this, Ve);
    I(this, He);
    I(this, ne, {
      status: "disconnected",
      websocket: void 0
    });
    I(this, yn);
    I(this, je);
    I(this, ut);
    /**
     * Timestamp maintained by the transport layer to aid with the calculation of the elapsed time
     * since the response started to compute the right interruption time.
     *
     * Mostly internal but might be used by extended transport layers for their interruption
     * calculation.
     */
    _(this, "_firstAudioTimestamp");
    _(this, "_audioLengthMs", 0);
    I(this, ct, !1);
    I(this, Pt);
    I(this, vn);
    v(this, He, t.url), v(this, yn, t.useInsecureApiKey ?? !1), v(this, Pt, t.createWebSocket), v(this, vn, t.skipOpenEventListeners ?? !1);
  }
  getCommonRequestHeaders() {
    return Ha;
  }
  /**
   * The current status of the WebSocket connection.
   */
  get status() {
    return o(this, ne).status;
  }
  /**
   * The current connection state of the WebSocket connection.
   */
  get connectionState() {
    return o(this, ne);
  }
  /**
   * Always returns `null` as the WebSocket transport layer does not handle muting. Instead,
   * this should be handled by the client by not triggering the `sendAudio` method.
   */
  get muted() {
    return null;
  }
  /**
   * The current item ID of the ongoing response.
   */
  get currentItemId() {
    return o(this, je);
  }
  /**
   * Triggers the `audio` event that a client might listen to to receive the audio buffer.
   * Protected for you to be able to override and disable emitting this event in case your extended
   * transport layer handles audio internally.
   *
   * @param audioEvent - The audio event to emit.
   */
  _onAudio(t) {
    this.emit("audio", t);
  }
  async connect(t) {
    const r = t.model ?? this.currentModel;
    this.currentModel = r, v(this, Ve, await this._getApiKey(t));
    const s = t.url ?? o(this, He) ?? `wss://api.openai.com/v1/realtime?model=${this.currentModel}`;
    v(this, He, s);
    const a = {
      ...t.initialSessionConfig || {},
      model: this.currentModel
    };
    await new Promise((i, u) => {
      $(this, Hn, Ya).call(this, i, u, a).catch(u);
    }), await this.updateSessionConfig(a);
  }
  /**
   * Send an event to the Realtime API. This will stringify the event and send it directly to the
   * API. This can be used if you want to take control over the connection and send events manually.
   *
   * @param event - The event to send.
   */
  sendEvent(t) {
    if (!o(this, ne).websocket)
      throw new Error("WebSocket is not connected. Make sure you call `connect()` before sending events.");
    o(this, ne).websocket.send(JSON.stringify(t));
  }
  /**
   * Close the WebSocket connection.
   *
   * This will also reset any internal connection tracking used for interruption handling.
   */
  close() {
    var t;
    (t = o(this, ne).websocket) == null || t.close(), v(this, je, void 0), this._firstAudioTimestamp = void 0, this._audioLengthMs = 0, v(this, ut, void 0);
  }
  /**
   * Will throw an error as the WebSocket transport layer does not support muting.
   */
  mute(t) {
    throw new Error("Mute is not supported for the WebSocket transport. You have to mute the audio input yourself.");
  }
  /**
   * Send an audio buffer to the Realtime API. This is used for your client to send audio to the
   * model to respond.
   *
   * @param audio - The audio buffer to send.
   * @param options - The options for the audio buffer.
   */
  sendAudio(t, r = {}) {
    o(this, ne).status === "connected" && super.sendAudio(t, r);
  }
  /**
   * Send a cancel response event to the Realtime API. This is used to cancel an ongoing
   *  response that the model is currently generating.
   */
  _cancelResponse() {
    o(this, ct) && (this.sendEvent({
      type: "response.cancel"
    }), v(this, ct, !1));
  }
  /**
   * Do NOT call this method directly. Call `interrupt()` instead for proper interruption handling.
   *
   * This method is used to send the right events to the API to inform the model that the user has
   * interrupted the response. It might be overridden/extended by an extended transport layer. See
   * the `TwilioRealtimeTransportLayer` for an example.
   *
   * @param elapsedTime - The elapsed time since the response started.
   */
  _interrupt(t, r = !0) {
    if (t < 0)
      return;
    r && this._cancelResponse();
    const s = this._audioLengthMs ?? Number.POSITIVE_INFINITY, a = Math.max(0, Math.floor(Math.min(t, s)));
    this.emit("audio_interrupted"), this.sendEvent({
      type: "conversation.item.truncate",
      item_id: o(this, je),
      content_index: o(this, ut),
      audio_end_ms: a
    });
  }
  /**
   * Interrupt the ongoing response. This method is triggered automatically by the client when
   * voice activity detection (VAD) is enabled (default) as well as when an output guardrail got
   * triggered.
   *
   * You can also call this method directly if you want to interrupt the conversation for example
   * based on an event in the client.
   */
  interrupt(t = !0) {
    if (!o(this, je) || typeof this._firstAudioTimestamp != "number")
      return;
    const r = Date.now() - this._firstAudioTimestamp;
    r >= 0 && this._interrupt(r, t), v(this, je, void 0), this._firstAudioTimestamp = void 0, this._audioLengthMs = 0, v(this, ut, void 0);
  }
}
Ve = new WeakMap(), He = new WeakMap(), ne = new WeakMap(), yn = new WeakMap(), je = new WeakMap(), ut = new WeakMap(), ct = new WeakMap(), Pt = new WeakMap(), vn = new WeakMap(), Hn = new WeakSet(), Ya = async function(t, r, s) {
  if (o(this, ne).websocket) {
    t();
    return;
  }
  if (!o(this, Ve))
    throw new te("API key is not set. Please call `connect()` with an API key first.");
  if (!o(this, Ve).startsWith("ek_") && !o(this, yn))
    throw new te("Using the WebSocket connection in a browser environment requires an ephemeral client key. If you have to use a regular API key, set the `useInsecureApiKey` option to true.");
  let a = null;
  if (o(this, Pt))
    a = await o(this, Pt).call(this, {
      url: o(this, He),
      apiKey: o(this, Ve)
    });
  else {
    const u = [
      "realtime",
      // Auth
      "openai-insecure-api-key." + o(this, Ve),
      // Version header
      sc
    ];
    a = new fd(o(this, He), u);
  }
  v(this, ne, {
    status: "connecting",
    websocket: a
  }), this.emit("connection_change", o(this, ne).status);
  const i = () => {
    v(this, ne, {
      status: "connected",
      websocket: a
    }), this.emit("connection_change", o(this, ne).status), this._onOpen(), t();
  };
  o(this, vn) === !0 ? i() : a.addEventListener("open", i), a.addEventListener("error", (u) => {
    this._onError(u), v(this, ne, {
      status: "disconnected",
      websocket: void 0
    }), this.emit("connection_change", o(this, ne).status), r(u);
  }), a.addEventListener("message", (u) => {
    var p, f, h, b, y, w, E;
    this._onMessage(u);
    const { data: l, isGeneric: c } = Hr(u);
    if (!(!l || c))
      if (l.type === "response.output_audio.delta") {
        v(this, ut, l.content_index), v(this, je, l.item_id), this._firstAudioTimestamp === void 0 && (this._firstAudioTimestamp = Date.now(), this._audioLengthMs = 0);
        const R = Ga(l.delta), F = (h = (f = (p = this._rawSessionConfig) == null ? void 0 : p.audio) == null ? void 0 : f.output) == null ? void 0 : h.format;
        if (F && typeof F == "object") {
          const J = F.type;
          if (J === "audio/pcmu" || J === "audio/pcma")
            this._audioLengthMs += R.byteLength / 8;
          else if (J === "audio/pcm") {
            const G = F.rate ?? 24e3;
            this._audioLengthMs += R.byteLength / 2 / G * 1e3;
          } else
            this._audioLengthMs += R.byteLength / 24 / 2;
        } else typeof F == "string" ? F.startsWith("g711_") ? this._audioLengthMs += R.byteLength / 8 : this._audioLengthMs += R.byteLength / 24 / 2 : this._audioLengthMs += R.byteLength / 24 / 2;
        const W = {
          type: "audio",
          data: R,
          responseId: l.response_id
        };
        this._onAudio(W);
      } else if (l.type === "input_audio_buffer.speech_started") {
        const R = ((E = (w = (y = (b = this._rawSessionConfig) == null ? void 0 : b.audio) == null ? void 0 : y.input) == null ? void 0 : w.turn_detection) == null ? void 0 : E.interrupt_response) ?? !1;
        this.interrupt(!R);
      } else l.type === "response.created" ? v(this, ct, !0) : l.type === "response.done" ? v(this, ct, !1) : l.type === "session.created" && (this._tracingConfig = l.session.tracing, this._updateTracingConfig(s.tracing ?? "auto"));
  }), a.addEventListener("close", () => {
    v(this, ne, {
      status: "disconnected",
      websocket: void 0
    }), this.emit("connection_change", o(this, ne).status), this._onClose();
  });
};
const Xa = Symbol("backgroundResult");
function xd(n) {
  return {
    [Xa]: !0,
    content: n
  };
}
function md(n) {
  return typeof n == "object" && n !== null && Xa in n;
}
function gd(n) {
  return n.type === "function" || n.type === "hosted_tool" && n.name === "hosted_mcp";
}
function _d(n) {
  if (n.type === "function")
    return n;
  if (n.type === "hosted_tool" && n.name === "hosted_mcp") {
    const e = n.providerData.server_url && n.providerData.server_url.length > 0 ? n.providerData.server_url : void 0;
    return {
      type: "mcp",
      server_label: n.providerData.server_label,
      server_url: e,
      headers: n.providerData.headers,
      allowed_tools: n.providerData.allowed_tools,
      require_approval: n.providerData.require_approval
    };
  }
  throw new te(`Invalid tool type: ${n}`);
}
function yd() {
  return JSON.parse(JSON.stringify(Te));
}
var j, N, Mt, D, jt, $t, wn, Y, Ft, Lt, Ae, bn, dt, xn, Sn, K, En, On, Qa, Rn, ei, Pr, ti, Mr;
class Sd extends Wn {
  constructor(t, r = {}) {
    super();
    I(this, K);
    _(this, "initialAgent");
    _(this, "options");
    I(this, j);
    I(this, N);
    I(this, Mt);
    I(this, D);
    I(this, jt, []);
    I(this, $t);
    I(this, wn, {});
    I(this, Y, []);
    I(this, Ft);
    I(this, Lt, {});
    I(this, Ae, !1);
    // Tracks all MCP tools fetched per server label (from mcp_list_tools results).
    I(this, bn, /* @__PURE__ */ new Map());
    // Tracks currently available MCP tools based on the active agent's configured server_labels.
    I(this, dt, []);
    // Keeps track of the last full session config we sent (camelCase keys) so that
    // subsequent updates (e.g. during agent handoffs) preserve properties that are
    // not explicitly recalculated here (such as inputAudioFormat, outputAudioFormat,
    // modalities, speed, toolChoice, turnDetection, etc.). Without this, updating
    // the agent would drop audio format overrides (e.g. g711_ulaw) and revert to
    // transport defaults causing issues for integrations like Twilio.
    I(this, xn, yd());
    I(this, Sn, !0);
    this.initialAgent = t, this.options = r, typeof r.transport > "u" && rc() || r.transport === "webrtc" ? v(this, j, new pd()) : r.transport === "websocket" || typeof r.transport > "u" ? v(this, j, new hd()) : v(this, j, r.transport), v(this, N, t), v(this, D, new St({
      ...r.context ?? {},
      history: o(this, Y)
    })), v(this, jt, (r.outputGuardrails ?? []).map(oc)), v(this, $t, ic(r.outputGuardrailSettings ?? {})), v(this, Ft, r.historyStoreAudio ?? !1), v(this, Sn, r.automaticallyTriggerResponseForMcpToolCalls ?? !0);
  }
  /**
   * The transport layer used by the session.
   */
  get transport() {
    return o(this, j);
  }
  /**
   * The current agent in the session.
   */
  get currentAgent() {
    return o(this, N);
  }
  /**
   * The current usage of the session.
   */
  get usage() {
    return o(this, D).usage;
  }
  /**
   * The current context of the session.
   */
  get context() {
    return o(this, D);
  }
  /**
   * Whether the session is muted. Might be `null` if the underlying transport layer does not
   * support muting.
   */
  get muted() {
    return o(this, j).muted;
  }
  /**
   * The history of the session.
   */
  get history() {
    return o(this, Y);
  }
  get availableMcpTools() {
    return o(this, dt);
  }
  async updateAgent(t) {
    return o(this, N).emit("agent_handoff", o(this, D), t), this.emit("agent_handoff", o(this, D), o(this, N), t), await $(this, K, En).call(this, t), await o(this, j).updateSessionConfig(await $(this, K, On).call(this)), t;
  }
  /**
   * Connect to the session. This will establish the connection to the underlying transport layer
   * and start the session.
   *
   * After connecting, the session will also emit a `history_updated` event with an empty history.
   *
   * @param options - The options for the connection.
   */
  async connect(t) {
    await $(this, K, En).call(this, this.initialAgent), $(this, K, ti).call(this), await o(this, j).connect({
      apiKey: t.apiKey ?? this.options.apiKey,
      model: this.options.model,
      url: t.url,
      initialSessionConfig: await $(this, K, On).call(this, this.options.config)
    }), v(this, Y, []), this.emit("history_updated", o(this, Y));
  }
  /**
   * Update the history of the session.
   * @param newHistory - The new history to set.
   */
  updateHistory(t) {
    let r;
    typeof t == "function" ? r = t(o(this, Y)) : r = t, o(this, j).resetHistory(o(this, Y), r);
  }
  /**
   * Send a message to the session.
   * @param message - The message to send.
   * @param otherEventData - Additional event data to send.
   */
  sendMessage(t, r = {}) {
    o(this, j).sendMessage(t, r);
  }
  /**
   * Add image to the session
   * @param image - The image to add.
   */
  addImage(t, { triggerResponse: r = !0 } = {}) {
    o(this, j).addImage(t, { triggerResponse: r });
  }
  /**
   * Mute the session.
   * @param muted - Whether to mute the session.
   */
  mute(t) {
    o(this, j).mute(t);
  }
  /**
   * Disconnect from the session.
   */
  close() {
    v(this, Lt, {}), o(this, j).close();
  }
  /**
   * Send audio to the session.
   * @param audio - The audio to send.
   * @param options - Additional options.
   * @param options.commit - Whether to finish the turn with this audio.
   */
  sendAudio(t, r = {}) {
    o(this, j).sendAudio(t, r);
  }
  /**
   * Interrupt the session artificially for example if you want to build a "stop talking"
   * button.
   */
  interrupt() {
    o(this, j).interrupt();
  }
  /**
   * Approve a tool call. This will also trigger the tool call to the agent.
   * @param approvalItem - The approval item to approve.
   * @param options - Additional options.
   * @param options.alwaysApprove - Whether to always approve the tool call.
   */
  async approve(t, r = { alwaysApprove: !1 }) {
    o(this, D).approveTool(t, r);
    const s = o(this, N).tools.find((a) => a.name === t.rawItem.name);
    if (s && s.type === "function" && t.rawItem.type === "function_call")
      await $(this, K, Rn).call(this, t.rawItem, s);
    else if (t.rawItem.type === "hosted_tool_call") {
      r.alwaysApprove && ye.warn("Always approving MCP tools is not supported. Use the allowed tools configuration instead.");
      const a = Ys(t);
      o(this, j).sendMcpResponse(a, !0);
    } else
      throw new ve(`Tool ${t.rawItem.name} not found`);
  }
  /**
   * Reject a tool call. This will also trigger the tool call to the agent.
   * @param approvalItem - The approval item to reject.
   * @param options - Additional options.
   * @param options.alwaysReject - Whether to always reject the tool call.
   */
  async reject(t, r = { alwaysReject: !1 }) {
    o(this, D).rejectTool(t, r);
    const s = o(this, N).tools.find((a) => a.name === t.rawItem.name);
    if (s && s.type === "function" && t.rawItem.type === "function_call")
      await $(this, K, Rn).call(this, t.rawItem, s);
    else if (t.rawItem.type === "hosted_tool_call") {
      r.alwaysReject && ye.warn("Always rejecting MCP tools is not supported. Use the allowed tools configuration instead.");
      const a = Ys(t);
      o(this, j).sendMcpResponse(a, !1);
    } else
      throw new ve(`Tool ${t.rawItem.name} not found`);
  }
}
j = new WeakMap(), N = new WeakMap(), Mt = new WeakMap(), D = new WeakMap(), jt = new WeakMap(), $t = new WeakMap(), wn = new WeakMap(), Y = new WeakMap(), Ft = new WeakMap(), Lt = new WeakMap(), Ae = new WeakMap(), bn = new WeakMap(), dt = new WeakMap(), xn = new WeakMap(), Sn = new WeakMap(), K = new WeakSet(), En = async function(t) {
  v(this, N, t);
  const r = await o(this, N).getEnabledHandoffs(o(this, D)), s = r.map((l) => l.getHandoffAsFunctionTool()), a = (await o(this, N).getAllTools(o(this, D))).filter(gd).map(_d), i = typeof o(this, N).tools < "u" || typeof o(this, N).mcpServers < "u", u = r.length > 0;
  v(this, Mt, i || u ? [...a, ...s] : void 0), $(this, K, Mr).call(this);
}, On = async function(t = {}) {
  const r = await o(this, N).getSystemPrompt(o(this, D)), s = this.options.tracingDisabled ? null : this.options.workflowName ? {
    workflow_name: this.options.workflowName
  } : "auto";
  s !== null && s !== "auto" ? (this.options.groupId && (s.group_id = this.options.groupId), this.options.traceMetadata && (s.metadata = this.options.traceMetadata)) : (this.options.groupId || this.options.traceMetadata) && ye.warn("In order to set traceMetadata or a groupId you need to specify a workflowName.");
  const i = {
    ...{
      ...o(this, xn) ?? {},
      ...this.options.config ?? {},
      ...t ?? {}
    },
    instructions: r,
    voice: o(this, N).voice,
    model: this.options.model,
    tools: o(this, Mt),
    tracing: s,
    prompt: typeof o(this, N).prompt == "function" ? await o(this, N).prompt(o(this, D), o(this, N)) : o(this, N).prompt
  };
  return v(this, xn, i), i;
}, Qa = async function(t, r) {
  const s = await r.onInvokeHandoff(o(this, D), t.arguments);
  o(this, N).emit("agent_handoff", o(this, D), s), this.emit("agent_handoff", o(this, D), o(this, N), s), await $(this, K, En).call(this, s), await o(this, j).updateSessionConfig(await $(this, K, On).call(this));
  const a = ya(s);
  return o(this, j).sendFunctionCallOutput(t, a, !0), s;
}, Rn = async function(t, r) {
  o(this, D).context.history = JSON.parse(JSON.stringify(o(this, Y)));
  let s = t.arguments;
  if (r.parameters && (_t(r.parameters) ? s = r.parameters.parse(s) : s = JSON.parse(s)), await r.needsApproval(o(this, D), s, t.callId)) {
    const l = this.context.isToolApproved({
      toolName: r.name,
      callId: t.callId
    });
    if (l === !1) {
      this.emit("agent_tool_start", o(this, D), o(this, N), r, {
        toolCall: t
      }), o(this, N).emit("agent_tool_start", o(this, D), r, {
        toolCall: t
      });
      const c = "Tool execution was not approved.";
      o(this, j).sendFunctionCallOutput(t, c, !0), this.emit("agent_tool_end", o(this, D), o(this, N), r, c, { toolCall: t }), o(this, N).emit("agent_tool_end", o(this, D), r, c, {
        toolCall: t
      });
      return;
    } else if (typeof l > "u") {
      this.emit("tool_approval_requested", o(this, D), o(this, N), {
        type: "function_approval",
        tool: r,
        approvalItem: new we(t, o(this, N))
      });
      return;
    }
  }
  this.emit("agent_tool_start", o(this, D), o(this, N), r, {
    toolCall: t
  }), o(this, N).emit("agent_tool_start", o(this, D), r, {
    toolCall: t
  }), o(this, D).context.history = JSON.parse(JSON.stringify(o(this, Y)));
  const i = await r.invoke(o(this, D), t.arguments, {
    toolCall: t
  });
  let u;
  md(i) ? (u = Ke(i.content), o(this, j).sendFunctionCallOutput(t, u, !1)) : (u = Ke(i), o(this, j).sendFunctionCallOutput(t, u, !0)), this.emit("agent_tool_end", o(this, D), o(this, N), r, u, { toolCall: t }), o(this, N).emit("agent_tool_end", o(this, D), r, u, { toolCall: t });
}, ei = async function(t) {
  const r = await o(this, N).getEnabledHandoffs(o(this, D)), s = new Map(r.map((l) => [l.toolName, l])), a = await o(this, N).getAllTools(o(this, D)), i = new Map(a.map((l) => [l.name, l])), u = s.get(t.name);
  if (u)
    await $(this, K, Qa).call(this, t, u);
  else {
    const l = i.get(t.name);
    if (l && l.type === "function")
      await $(this, K, Rn).call(this, t, l);
    else
      throw new ve(`Tool ${t.name} not found`);
  }
}, Pr = async function(t, r, s) {
  if (o(this, jt).length === 0)
    return;
  const a = {
    agent: o(this, N),
    agentOutput: t,
    context: o(this, D)
  }, u = (await Promise.all(o(this, jt).map((l) => l.run(a)))).find((l) => l.output.tripwireTriggered);
  if (u) {
    if (o(this, Lt)[r])
      return;
    o(this, Lt)[r] = !0;
    const l = new br(`Output guardrail triggered: ${JSON.stringify(u.output.outputInfo)}`, u);
    this.emit("guardrail_tripped", o(this, D), o(this, N), l, {
      itemId: s
    }), this.interrupt();
    const c = uc(u);
    this.sendMessage(c);
    return;
  }
}, ti = function() {
  o(this, j).on("*", (s) => {
    if (this.emit("transport_event", s), s.type === "conversation.item.input_audio_transcription.completed")
      try {
        const a = s;
        v(this, Y, Ks(o(this, Y), a, o(this, Ft))), o(this, D).context.history = o(this, Y), this.emit("history_updated", o(this, Y));
      } catch (a) {
        this.emit("error", {
          type: "error",
          error: a
        });
      }
  }), o(this, j).on("mcp_tools_listed", ({ serverLabel: s, tools: a }) => {
    try {
      o(this, bn).set(s, a ?? []), $(this, K, Mr).call(this);
    } catch (i) {
      this.emit("error", { type: "error", error: i });
    }
  }), o(this, j).on("audio", (s) => {
    o(this, Ae) || (v(this, Ae, !0), this.emit("audio_start", o(this, D), o(this, N))), this.emit("audio", s);
  }), o(this, j).on("turn_started", () => {
    v(this, Ae, !1), this.emit("agent_start", o(this, D), o(this, N)), o(this, N).emit("agent_start", o(this, D), o(this, N));
  }), o(this, j).on("turn_done", (s) => {
    const a = s.response.output[s.response.output.length - 1], i = Va(a) ?? "", u = (a == null ? void 0 : a.id) ?? "";
    this.emit("agent_end", o(this, D), o(this, N), i), o(this, N).emit("agent_end", o(this, D), i), $(this, K, Pr).call(this, i, s.response.id, u);
  }), o(this, j).on("audio_done", () => {
    o(this, Ae) && v(this, Ae, !1), this.emit("audio_stopped", o(this, D), o(this, N));
  });
  let t = 0, r;
  o(this, j).on("audio_transcript_delta", (s) => {
    try {
      const a = s.delta, i = s.itemId, u = s.responseId;
      r !== i && (r = i, t = 0);
      const c = (o(this, wn)[i] ?? "") + a;
      if (o(this, wn)[i] = c, o(this, $t).debounceTextLength < 0)
        return;
      const p = Math.floor(c.length / o(this, $t).debounceTextLength);
      p > t && (t = p, $(this, K, Pr).call(this, c, u, i));
    } catch (a) {
      this.emit("error", {
        type: "error",
        error: a
      });
    }
  }), o(this, j).on("item_update", (s) => {
    try {
      const a = !o(this, Y).some((i) => i.itemId === s.itemId);
      if (v(this, Y, Ks(o(this, Y), s, o(this, Ft))), o(this, D).context.history = o(this, Y), a) {
        const i = o(this, Y).find((u) => u.itemId === s.itemId);
        i && this.emit("history_added", i);
      }
      this.emit("history_updated", o(this, Y));
    } catch (a) {
      this.emit("error", {
        type: "error",
        error: a
      });
    }
  }), o(this, j).on("item_deleted", (s) => {
    try {
      v(this, Y, o(this, Y).filter((a) => a.itemId !== s.itemId)), o(this, D).context.history = o(this, Y), this.emit("history_updated", o(this, Y));
    } catch (a) {
      this.emit("error", {
        type: "error",
        error: a
      });
    }
  }), o(this, j).on("function_call", async (s) => {
    try {
      await $(this, K, ei).call(this, s);
    } catch (a) {
      ye.error("Error handling function call", a), this.emit("error", {
        type: "error",
        error: a
      });
    }
  }), o(this, j).on("usage_update", (s) => {
    o(this, D).usage.add(s);
  }), o(this, j).on("audio_interrupted", () => {
    o(this, Ae) && v(this, Ae, !1), this.emit("audio_interrupted", o(this, D), o(this, N));
  }), o(this, j).on("error", (s) => {
    this.emit("error", s);
  }), o(this, j).on("mcp_tool_call_completed", (s) => {
    this.emit("mcp_tool_call_completed", o(this, D), o(this, N), s), o(this, Sn) && o(this, j).sendEvent({
      type: "response.create"
    });
  }), o(this, j).on("mcp_approval_request", (s) => {
    this.emit("tool_approval_requested", o(this, D), o(this, N), {
      type: "mcp_approval_request",
      approvalItem: ac(o(this, N), s)
    });
  });
}, /**
 * Recomputes the currently available MCP tools based on the current agent's active
 * MCP server configurations and the cached per-server tool listings. Emits
 * `mcp_tools_changed` if the set changed.
 */
Mr = function() {
  var l;
  const t = (l = o(this, Mt)) == null ? void 0 : l.filter((c) => c.type === "mcp"), r = (c) => {
    const p = c.allowed_tools;
    if (p) {
      if (Array.isArray(p))
        return p;
      if (p && Array.isArray(p.tool_names))
        return p.tool_names;
    }
  }, s = /* @__PURE__ */ new Map();
  for (const c of t) {
    const p = o(this, bn).get(c.server_label) ?? [], f = r(c);
    for (const h of p)
      f && !f.includes(h.name) || s.has(h.name) || s.set(h.name, h);
  }
  const a = Array.from(s.values()), i = o(this, dt);
  (i.length !== a.length || JSON.stringify(i.map((c) => c.name).sort()) !== JSON.stringify(a.map((c) => c.name).sort())) && (v(this, dt, a), this.emit("mcp_tools_changed", o(this, dt)));
};
const Id = {
  base64ToArrayBuffer: Ga,
  arrayBufferToBase64: za,
  getLastTextFromAudioOutputMessage: Va
};
export {
  ld as DEFAULT_OPENAI_REALTIME_MODEL,
  Te as DEFAULT_OPENAI_REALTIME_SESSION_CONFIG,
  ve as ModelBehaviorError,
  zn as OpenAIRealtimeBase,
  pd as OpenAIRealtimeWebRTC,
  hd as OpenAIRealtimeWebSocket,
  br as OutputGuardrailTripwireTriggered,
  bd as RealtimeAgent,
  Sd as RealtimeSession,
  te as UserError,
  xd as backgroundResult,
  md as isBackgroundResult,
  xr as tool,
  Id as utils
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
