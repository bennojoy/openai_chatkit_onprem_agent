(function(M,z){typeof exports=="object"&&typeof module<"u"?z(exports):typeof define=="function"&&define.amd?define(["exports"],z):(M=typeof globalThis<"u"?globalThis:M||self,z(M.OpenAIAgentsRealtime={}))})(this,(function(M){"use strict";var bd=Object.defineProperty;var ti=M=>{throw TypeError(M)};var xd=(M,z,te)=>z in M?bd(M,z,{enumerable:!0,configurable:!0,writable:!0,value:te}):M[z]=te;var _=(M,z,te)=>xd(M,typeof z!="symbol"?z+"":z,te),Gr=(M,z,te)=>z.has(M)||ti("Cannot "+te);var o=(M,z,te)=>(Gr(M,z,"read from private field"),te?te.call(M):z.get(M)),I=(M,z,te)=>z.has(M)?ti("Cannot add the same private member more than once"):z instanceof WeakSet?z.add(M):z.set(M,te),v=(M,z,te,Cn)=>(Gr(M,z,"write to private field"),Cn?Cn.call(M,te):z.set(M,te),te),F=(M,z,te)=>(Gr(M,z,"access private method"),te);var Rt,ht,ge,Dt,ce,zr,Vr,Wr,ni,Hr,an,We,_e,Le,Pt,Mt,on,mt,un,cn,jt,dn,ln,$t,de,Ze,He,Ke,Ft,pe,Kr,Yr,zt,ye,pn,fn,hn,mn,gt,Ye,Xe,_t,gn,Lt,Ue,ue,yt,nr,ri,vt,_n,fe,yn,vn,H,wn,wt,bn,Qe,et,ie,xn,qe,bt,xt,Zt,Sn,rr,si,$,D,Ut,P,qt,Jt,In,Q,Bt,Gt,Pe,Tn,St,kn,An,Y,sr,ar,ai,ir,ii,Xr,oi,Qr;const z={version:"0.1.10"};async function te(n){try{return[null,await n()]}catch(e){return[e,null]}}function Cn(n,e){const t={...n};return Object.defineProperties(t,{$brand:{value:"auto-parseable-response-format",enumerable:!1},$parseRaw:{value:e,enumerable:!1}}),t}const ui=Symbol("Let zodToJsonSchema decide on which parser to use"),es={name:void 0,$refStrategy:"root",effectStrategy:"input",pipeStrategy:"all",dateStrategy:"format:date-time",mapStrategy:"entries",nullableStrategy:"from-target",removeAdditionalStrategy:"passthrough",definitionPath:"definitions",target:"jsonSchema7",strictUnions:!1,errorMessages:!1,markdownDescription:!1,patternStrategy:"escape",applyRegexFlags:!1,emailStrategy:"format:email",base64Strategy:"contentEncoding:base64",nameStrategy:"ref"},ci=n=>typeof n=="string"?{...es,basePath:["#"],definitions:{},name:n}:{...es,basePath:["#"],definitions:{},...n},or=n=>"_def"in n?n._def:n;function di(n){if(!n)return!0;for(const e in n)return!1;return!0}const li=n=>{const e=ci(n),t=e.name!==void 0?[...e.basePath,e.definitionPath,e.name]:e.basePath;return{...e,currentPath:t,propertyPath:void 0,seenRefs:new Set,seen:new Map(Object.entries(e.definitions).map(([r,s])=>[or(s),{def:or(s),path:[...e.basePath,e.definitionPath,r],jsonSchema:void 0}]))}};function ts(n,e,t,r){r!=null&&r.errorMessages&&t&&(n.errorMessage={...n.errorMessage,[e]:t})}function W(n,e,t,r,s){n[e]=t,ts(n,e,r,s)}var q;(function(n){n.assertEqual=s=>{};function e(s){}n.assertIs=e;function t(s){throw new Error}n.assertNever=t,n.arrayToEnum=s=>{const a={};for(const i of s)a[i]=i;return a},n.getValidEnumValues=s=>{const a=n.objectKeys(s).filter(u=>typeof s[s[u]]!="number"),i={};for(const u of a)i[u]=s[u];return n.objectValues(i)},n.objectValues=s=>n.objectKeys(s).map(function(a){return s[a]}),n.objectKeys=typeof Object.keys=="function"?s=>Object.keys(s):s=>{const a=[];for(const i in s)Object.prototype.hasOwnProperty.call(s,i)&&a.push(i);return a},n.find=(s,a)=>{for(const i of s)if(a(i))return i},n.isInteger=typeof Number.isInteger=="function"?s=>Number.isInteger(s):s=>typeof s=="number"&&Number.isFinite(s)&&Math.floor(s)===s;function r(s,a=" | "){return s.map(i=>typeof i=="string"?`'${i}'`:i).join(a)}n.joinValues=r,n.jsonStringifyReplacer=(s,a)=>typeof a=="bigint"?a.toString():a})(q||(q={}));var ns;(function(n){n.mergeShapes=(e,t)=>({...e,...t})})(ns||(ns={}));const k=q.arrayToEnum(["string","nan","number","integer","float","boolean","date","bigint","symbol","function","undefined","null","array","object","unknown","promise","void","never","map","set"]),Je=n=>{switch(typeof n){case"undefined":return k.undefined;case"string":return k.string;case"number":return Number.isNaN(n)?k.nan:k.number;case"boolean":return k.boolean;case"function":return k.function;case"bigint":return k.bigint;case"symbol":return k.symbol;case"object":return Array.isArray(n)?k.array:n===null?k.null:n.then&&typeof n.then=="function"&&n.catch&&typeof n.catch=="function"?k.promise:typeof Map<"u"&&n instanceof Map?k.map:typeof Set<"u"&&n instanceof Set?k.set:typeof Date<"u"&&n instanceof Date?k.date:k.object;default:return k.unknown}},x=q.arrayToEnum(["invalid_type","invalid_literal","custom","invalid_union","invalid_union_discriminator","invalid_enum_value","unrecognized_keys","invalid_arguments","invalid_return_type","invalid_date","invalid_string","too_small","too_big","invalid_intersection_types","not_multiple_of","not_finite"]);class Me extends Error{get errors(){return this.issues}constructor(e){super(),this.issues=[],this.addIssue=r=>{this.issues=[...this.issues,r]},this.addIssues=(r=[])=>{this.issues=[...this.issues,...r]};const t=new.target.prototype;Object.setPrototypeOf?Object.setPrototypeOf(this,t):this.__proto__=t,this.name="ZodError",this.issues=e}format(e){const t=e||function(a){return a.message},r={_errors:[]},s=a=>{for(const i of a.issues)if(i.code==="invalid_union")i.unionErrors.map(s);else if(i.code==="invalid_return_type")s(i.returnTypeError);else if(i.code==="invalid_arguments")s(i.argumentsError);else if(i.path.length===0)r._errors.push(t(i));else{let u=r,l=0;for(;l<i.path.length;){const c=i.path[l];l===i.path.length-1?(u[c]=u[c]||{_errors:[]},u[c]._errors.push(t(i))):u[c]=u[c]||{_errors:[]},u=u[c],l++}}};return s(this),r}static assert(e){if(!(e instanceof Me))throw new Error(`Not a ZodError: ${e}`)}toString(){return this.message}get message(){return JSON.stringify(this.issues,q.jsonStringifyReplacer,2)}get isEmpty(){return this.issues.length===0}flatten(e=t=>t.message){const t={},r=[];for(const s of this.issues)s.path.length>0?(t[s.path[0]]=t[s.path[0]]||[],t[s.path[0]].push(e(s))):r.push(e(s));return{formErrors:r,fieldErrors:t}}get formErrors(){return this.flatten()}}Me.create=n=>new Me(n);const ur=(n,e)=>{let t;switch(n.code){case x.invalid_type:n.received===k.undefined?t="Required":t=`Expected ${n.expected}, received ${n.received}`;break;case x.invalid_literal:t=`Invalid literal value, expected ${JSON.stringify(n.expected,q.jsonStringifyReplacer)}`;break;case x.unrecognized_keys:t=`Unrecognized key(s) in object: ${q.joinValues(n.keys,", ")}`;break;case x.invalid_union:t="Invalid input";break;case x.invalid_union_discriminator:t=`Invalid discriminator value. Expected ${q.joinValues(n.options)}`;break;case x.invalid_enum_value:t=`Invalid enum value. Expected ${q.joinValues(n.options)}, received '${n.received}'`;break;case x.invalid_arguments:t="Invalid function arguments";break;case x.invalid_return_type:t="Invalid function return type";break;case x.invalid_date:t="Invalid date";break;case x.invalid_string:typeof n.validation=="object"?"includes"in n.validation?(t=`Invalid input: must include "${n.validation.includes}"`,typeof n.validation.position=="number"&&(t=`${t} at one or more positions greater than or equal to ${n.validation.position}`)):"startsWith"in n.validation?t=`Invalid input: must start with "${n.validation.startsWith}"`:"endsWith"in n.validation?t=`Invalid input: must end with "${n.validation.endsWith}"`:q.assertNever(n.validation):n.validation!=="regex"?t=`Invalid ${n.validation}`:t="Invalid";break;case x.too_small:n.type==="array"?t=`Array must contain ${n.exact?"exactly":n.inclusive?"at least":"more than"} ${n.minimum} element(s)`:n.type==="string"?t=`String must contain ${n.exact?"exactly":n.inclusive?"at least":"over"} ${n.minimum} character(s)`:n.type==="number"?t=`Number must be ${n.exact?"exactly equal to ":n.inclusive?"greater than or equal to ":"greater than "}${n.minimum}`:n.type==="date"?t=`Date must be ${n.exact?"exactly equal to ":n.inclusive?"greater than or equal to ":"greater than "}${new Date(Number(n.minimum))}`:t="Invalid input";break;case x.too_big:n.type==="array"?t=`Array must contain ${n.exact?"exactly":n.inclusive?"at most":"less than"} ${n.maximum} element(s)`:n.type==="string"?t=`String must contain ${n.exact?"exactly":n.inclusive?"at most":"under"} ${n.maximum} character(s)`:n.type==="number"?t=`Number must be ${n.exact?"exactly":n.inclusive?"less than or equal to":"less than"} ${n.maximum}`:n.type==="bigint"?t=`BigInt must be ${n.exact?"exactly":n.inclusive?"less than or equal to":"less than"} ${n.maximum}`:n.type==="date"?t=`Date must be ${n.exact?"exactly":n.inclusive?"smaller than or equal to":"smaller than"} ${new Date(Number(n.maximum))}`:t="Invalid input";break;case x.custom:t="Invalid input";break;case x.invalid_intersection_types:t="Intersection results could not be merged";break;case x.not_multiple_of:t=`Number must be a multiple of ${n.multipleOf}`;break;case x.not_finite:t="Number must be finite";break;default:t=e.defaultError,q.assertNever(n)}return{message:t}};let pi=ur;function fi(){return pi}const hi=n=>{const{data:e,path:t,errorMaps:r,issueData:s}=n,a=[...t,...s.path||[]],i={...s,path:a};if(s.message!==void 0)return{...s,path:a,message:s.message};let u="";const l=r.filter(c=>!!c).slice().reverse();for(const c of l)u=c(i,{data:e,defaultError:u}).message;return{...s,path:a,message:u}};function T(n,e){const t=fi(),r=hi({issueData:e,data:n.data,path:n.path,errorMaps:[n.common.contextualErrorMap,n.schemaErrorMap,t,t===ur?void 0:ur].filter(s=>!!s)});n.common.issues.push(r)}class le{constructor(){this.value="valid"}dirty(){this.value==="valid"&&(this.value="dirty")}abort(){this.value!=="aborted"&&(this.value="aborted")}static mergeArray(e,t){const r=[];for(const s of t){if(s.status==="aborted")return N;s.status==="dirty"&&e.dirty(),r.push(s.value)}return{status:e.value,value:r}}static async mergeObjectAsync(e,t){const r=[];for(const s of t){const a=await s.key,i=await s.value;r.push({key:a,value:i})}return le.mergeObjectSync(e,r)}static mergeObjectSync(e,t){const r={};for(const s of t){const{key:a,value:i}=s;if(a.status==="aborted"||i.status==="aborted")return N;a.status==="dirty"&&e.dirty(),i.status==="dirty"&&e.dirty(),a.value!=="__proto__"&&(typeof i.value<"u"||s.alwaysSet)&&(r[a.value]=i.value)}return{status:e.value,value:r}}}const N=Object.freeze({status:"aborted"}),Vt=n=>({status:"dirty",value:n}),we=n=>({status:"valid",value:n}),rs=n=>n.status==="aborted",ss=n=>n.status==="dirty",It=n=>n.status==="valid",En=n=>typeof Promise<"u"&&n instanceof Promise;var C;(function(n){n.errToObj=e=>typeof e=="string"?{message:e}:e||{},n.toString=e=>typeof e=="string"?e:e==null?void 0:e.message})(C||(C={}));class Ee{constructor(e,t,r,s){this._cachedPath=[],this.parent=e,this.data=t,this._path=r,this._key=s}get path(){return this._cachedPath.length||(Array.isArray(this._key)?this._cachedPath.push(...this._path,...this._key):this._cachedPath.push(...this._path,this._key)),this._cachedPath}}const as=(n,e)=>{if(It(e))return{success:!0,data:e.value};if(!n.common.issues.length)throw new Error("Validation failed but no issues detected.");return{success:!1,get error(){if(this._error)return this._error;const t=new Me(n.common.issues);return this._error=t,this._error}}};function j(n){if(!n)return{};const{errorMap:e,invalid_type_error:t,required_error:r,description:s}=n;if(e&&(t||r))throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);return e?{errorMap:e,description:s}:{errorMap:(i,u)=>{const{message:l}=n;return i.code==="invalid_enum_value"?{message:l??u.defaultError}:typeof u.data>"u"?{message:l??r??u.defaultError}:i.code!=="invalid_type"?{message:u.defaultError}:{message:l??t??u.defaultError}},description:s}}class L{get description(){return this._def.description}_getType(e){return Je(e.data)}_getOrReturnCtx(e,t){return t||{common:e.parent.common,data:e.data,parsedType:Je(e.data),schemaErrorMap:this._def.errorMap,path:e.path,parent:e.parent}}_processInputParams(e){return{status:new le,ctx:{common:e.parent.common,data:e.data,parsedType:Je(e.data),schemaErrorMap:this._def.errorMap,path:e.path,parent:e.parent}}}_parseSync(e){const t=this._parse(e);if(En(t))throw new Error("Synchronous parse encountered promise.");return t}_parseAsync(e){const t=this._parse(e);return Promise.resolve(t)}parse(e,t){const r=this.safeParse(e,t);if(r.success)return r.data;throw r.error}safeParse(e,t){const r={common:{issues:[],async:(t==null?void 0:t.async)??!1,contextualErrorMap:t==null?void 0:t.errorMap},path:(t==null?void 0:t.path)||[],schemaErrorMap:this._def.errorMap,parent:null,data:e,parsedType:Je(e)},s=this._parseSync({data:e,path:r.path,parent:r});return as(r,s)}"~validate"(e){var r,s;const t={common:{issues:[],async:!!this["~standard"].async},path:[],schemaErrorMap:this._def.errorMap,parent:null,data:e,parsedType:Je(e)};if(!this["~standard"].async)try{const a=this._parseSync({data:e,path:[],parent:t});return It(a)?{value:a.value}:{issues:t.common.issues}}catch(a){(s=(r=a==null?void 0:a.message)==null?void 0:r.toLowerCase())!=null&&s.includes("encountered")&&(this["~standard"].async=!0),t.common={issues:[],async:!0}}return this._parseAsync({data:e,path:[],parent:t}).then(a=>It(a)?{value:a.value}:{issues:t.common.issues})}async parseAsync(e,t){const r=await this.safeParseAsync(e,t);if(r.success)return r.data;throw r.error}async safeParseAsync(e,t){const r={common:{issues:[],contextualErrorMap:t==null?void 0:t.errorMap,async:!0},path:(t==null?void 0:t.path)||[],schemaErrorMap:this._def.errorMap,parent:null,data:e,parsedType:Je(e)},s=this._parse({data:e,path:r.path,parent:r}),a=await(En(s)?s:Promise.resolve(s));return as(r,a)}refine(e,t){const r=s=>typeof t=="string"||typeof t>"u"?{message:t}:typeof t=="function"?t(s):t;return this._refinement((s,a)=>{const i=e(s),u=()=>a.addIssue({code:x.custom,...r(s)});return typeof Promise<"u"&&i instanceof Promise?i.then(l=>l?!0:(u(),!1)):i?!0:(u(),!1)})}refinement(e,t){return this._refinement((r,s)=>e(r)?!0:(s.addIssue(typeof t=="function"?t(r,s):t),!1))}_refinement(e){return new rt({schema:this,typeName:S.ZodEffects,effect:{type:"refinement",refinement:e}})}superRefine(e){return this._refinement(e)}constructor(e){this.spa=this.safeParseAsync,this._def=e,this.parse=this.parse.bind(this),this.safeParse=this.safeParse.bind(this),this.parseAsync=this.parseAsync.bind(this),this.safeParseAsync=this.safeParseAsync.bind(this),this.spa=this.spa.bind(this),this.refine=this.refine.bind(this),this.refinement=this.refinement.bind(this),this.superRefine=this.superRefine.bind(this),this.optional=this.optional.bind(this),this.nullable=this.nullable.bind(this),this.nullish=this.nullish.bind(this),this.array=this.array.bind(this),this.promise=this.promise.bind(this),this.or=this.or.bind(this),this.and=this.and.bind(this),this.transform=this.transform.bind(this),this.brand=this.brand.bind(this),this.default=this.default.bind(this),this.catch=this.catch.bind(this),this.describe=this.describe.bind(this),this.pipe=this.pipe.bind(this),this.readonly=this.readonly.bind(this),this.isNullable=this.isNullable.bind(this),this.isOptional=this.isOptional.bind(this),this["~standard"]={version:1,vendor:"zod",validate:t=>this["~validate"](t)}}optional(){return Fe.create(this,this._def)}nullable(){return st.create(this,this._def)}nullish(){return this.nullable().optional()}array(){return Oe.create(this)}promise(){return jn.create(this,this._def)}or(e){return Rn.create([this,e],this._def)}and(e){return Nn.create(this,e,this._def)}transform(e){return new rt({...j(this._def),schema:this,typeName:S.ZodEffects,effect:{type:"transform",transform:e}})}default(e){const t=typeof e=="function"?e:()=>e;return new $n({...j(this._def),innerType:this,defaultValue:t,typeName:S.ZodDefault})}brand(){return new hs({typeName:S.ZodBranded,type:this,...j(this._def)})}catch(e){const t=typeof e=="function"?e:()=>e;return new Fn({...j(this._def),innerType:this,catchValue:t,typeName:S.ZodCatch})}describe(e){const t=this.constructor;return new t({...this._def,description:e})}pipe(e){return _r.create(this,e)}readonly(){return Ln.create(this)}isOptional(){return this.safeParse(void 0).success}isNullable(){return this.safeParse(null).success}}const mi=/^c[^\s-]{8,}$/i,gi=/^[0-9a-z]+$/,_i=/^[0-9A-HJKMNP-TV-Z]{26}$/i,yi=/^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i,vi=/^[a-z0-9_-]{21}$/i,wi=/^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$/,bi=/^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/,xi=/^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i,Si="^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$";let cr;const Ii=/^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/,Ti=/^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/(3[0-2]|[12]?[0-9])$/,ki=/^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/,Ai=/^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/,Ci=/^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/,Ei=/^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/,is="((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))",Oi=new RegExp(`^${is}$`);function os(n){let e="[0-5]\\d";n.precision?e=`${e}\\.\\d{${n.precision}}`:n.precision==null&&(e=`${e}(\\.\\d+)?`);const t=n.precision?"+":"?";return`([01]\\d|2[0-3]):[0-5]\\d(:${e})${t}`}function Ri(n){return new RegExp(`^${os(n)}$`)}function Ni(n){let e=`${is}T${os(n)}`;const t=[];return t.push(n.local?"Z?":"Z"),n.offset&&t.push("([+-]\\d{2}:?\\d{2})"),e=`${e}(${t.join("|")})`,new RegExp(`^${e}$`)}function Di(n,e){return!!((e==="v4"||!e)&&Ii.test(n)||(e==="v6"||!e)&&ki.test(n))}function Pi(n,e){if(!wi.test(n))return!1;try{const[t]=n.split("."),r=t.replace(/-/g,"+").replace(/_/g,"/").padEnd(t.length+(4-t.length%4)%4,"="),s=JSON.parse(atob(r));return!(typeof s!="object"||s===null||"typ"in s&&(s==null?void 0:s.typ)!=="JWT"||!s.alg||e&&s.alg!==e)}catch{return!1}}function Mi(n,e){return!!((e==="v4"||!e)&&Ti.test(n)||(e==="v6"||!e)&&Ai.test(n))}class je extends L{_parse(e){if(this._def.coerce&&(e.data=String(e.data)),this._getType(e)!==k.string){const a=this._getOrReturnCtx(e);return T(a,{code:x.invalid_type,expected:k.string,received:a.parsedType}),N}const r=new le;let s;for(const a of this._def.checks)if(a.kind==="min")e.data.length<a.value&&(s=this._getOrReturnCtx(e,s),T(s,{code:x.too_small,minimum:a.value,type:"string",inclusive:!0,exact:!1,message:a.message}),r.dirty());else if(a.kind==="max")e.data.length>a.value&&(s=this._getOrReturnCtx(e,s),T(s,{code:x.too_big,maximum:a.value,type:"string",inclusive:!0,exact:!1,message:a.message}),r.dirty());else if(a.kind==="length"){const i=e.data.length>a.value,u=e.data.length<a.value;(i||u)&&(s=this._getOrReturnCtx(e,s),i?T(s,{code:x.too_big,maximum:a.value,type:"string",inclusive:!0,exact:!0,message:a.message}):u&&T(s,{code:x.too_small,minimum:a.value,type:"string",inclusive:!0,exact:!0,message:a.message}),r.dirty())}else if(a.kind==="email")xi.test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"email",code:x.invalid_string,message:a.message}),r.dirty());else if(a.kind==="emoji")cr||(cr=new RegExp(Si,"u")),cr.test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"emoji",code:x.invalid_string,message:a.message}),r.dirty());else if(a.kind==="uuid")yi.test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"uuid",code:x.invalid_string,message:a.message}),r.dirty());else if(a.kind==="nanoid")vi.test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"nanoid",code:x.invalid_string,message:a.message}),r.dirty());else if(a.kind==="cuid")mi.test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"cuid",code:x.invalid_string,message:a.message}),r.dirty());else if(a.kind==="cuid2")gi.test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"cuid2",code:x.invalid_string,message:a.message}),r.dirty());else if(a.kind==="ulid")_i.test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"ulid",code:x.invalid_string,message:a.message}),r.dirty());else if(a.kind==="url")try{new URL(e.data)}catch{s=this._getOrReturnCtx(e,s),T(s,{validation:"url",code:x.invalid_string,message:a.message}),r.dirty()}else a.kind==="regex"?(a.regex.lastIndex=0,a.regex.test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"regex",code:x.invalid_string,message:a.message}),r.dirty())):a.kind==="trim"?e.data=e.data.trim():a.kind==="includes"?e.data.includes(a.value,a.position)||(s=this._getOrReturnCtx(e,s),T(s,{code:x.invalid_string,validation:{includes:a.value,position:a.position},message:a.message}),r.dirty()):a.kind==="toLowerCase"?e.data=e.data.toLowerCase():a.kind==="toUpperCase"?e.data=e.data.toUpperCase():a.kind==="startsWith"?e.data.startsWith(a.value)||(s=this._getOrReturnCtx(e,s),T(s,{code:x.invalid_string,validation:{startsWith:a.value},message:a.message}),r.dirty()):a.kind==="endsWith"?e.data.endsWith(a.value)||(s=this._getOrReturnCtx(e,s),T(s,{code:x.invalid_string,validation:{endsWith:a.value},message:a.message}),r.dirty()):a.kind==="datetime"?Ni(a).test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{code:x.invalid_string,validation:"datetime",message:a.message}),r.dirty()):a.kind==="date"?Oi.test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{code:x.invalid_string,validation:"date",message:a.message}),r.dirty()):a.kind==="time"?Ri(a).test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{code:x.invalid_string,validation:"time",message:a.message}),r.dirty()):a.kind==="duration"?bi.test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"duration",code:x.invalid_string,message:a.message}),r.dirty()):a.kind==="ip"?Di(e.data,a.version)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"ip",code:x.invalid_string,message:a.message}),r.dirty()):a.kind==="jwt"?Pi(e.data,a.alg)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"jwt",code:x.invalid_string,message:a.message}),r.dirty()):a.kind==="cidr"?Mi(e.data,a.version)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"cidr",code:x.invalid_string,message:a.message}),r.dirty()):a.kind==="base64"?Ci.test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"base64",code:x.invalid_string,message:a.message}),r.dirty()):a.kind==="base64url"?Ei.test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"base64url",code:x.invalid_string,message:a.message}),r.dirty()):q.assertNever(a);return{status:r.value,value:e.data}}_regex(e,t,r){return this.refinement(s=>e.test(s),{validation:t,code:x.invalid_string,...C.errToObj(r)})}_addCheck(e){return new je({...this._def,checks:[...this._def.checks,e]})}email(e){return this._addCheck({kind:"email",...C.errToObj(e)})}url(e){return this._addCheck({kind:"url",...C.errToObj(e)})}emoji(e){return this._addCheck({kind:"emoji",...C.errToObj(e)})}uuid(e){return this._addCheck({kind:"uuid",...C.errToObj(e)})}nanoid(e){return this._addCheck({kind:"nanoid",...C.errToObj(e)})}cuid(e){return this._addCheck({kind:"cuid",...C.errToObj(e)})}cuid2(e){return this._addCheck({kind:"cuid2",...C.errToObj(e)})}ulid(e){return this._addCheck({kind:"ulid",...C.errToObj(e)})}base64(e){return this._addCheck({kind:"base64",...C.errToObj(e)})}base64url(e){return this._addCheck({kind:"base64url",...C.errToObj(e)})}jwt(e){return this._addCheck({kind:"jwt",...C.errToObj(e)})}ip(e){return this._addCheck({kind:"ip",...C.errToObj(e)})}cidr(e){return this._addCheck({kind:"cidr",...C.errToObj(e)})}datetime(e){return typeof e=="string"?this._addCheck({kind:"datetime",precision:null,offset:!1,local:!1,message:e}):this._addCheck({kind:"datetime",precision:typeof(e==null?void 0:e.precision)>"u"?null:e==null?void 0:e.precision,offset:(e==null?void 0:e.offset)??!1,local:(e==null?void 0:e.local)??!1,...C.errToObj(e==null?void 0:e.message)})}date(e){return this._addCheck({kind:"date",message:e})}time(e){return typeof e=="string"?this._addCheck({kind:"time",precision:null,message:e}):this._addCheck({kind:"time",precision:typeof(e==null?void 0:e.precision)>"u"?null:e==null?void 0:e.precision,...C.errToObj(e==null?void 0:e.message)})}duration(e){return this._addCheck({kind:"duration",...C.errToObj(e)})}regex(e,t){return this._addCheck({kind:"regex",regex:e,...C.errToObj(t)})}includes(e,t){return this._addCheck({kind:"includes",value:e,position:t==null?void 0:t.position,...C.errToObj(t==null?void 0:t.message)})}startsWith(e,t){return this._addCheck({kind:"startsWith",value:e,...C.errToObj(t)})}endsWith(e,t){return this._addCheck({kind:"endsWith",value:e,...C.errToObj(t)})}min(e,t){return this._addCheck({kind:"min",value:e,...C.errToObj(t)})}max(e,t){return this._addCheck({kind:"max",value:e,...C.errToObj(t)})}length(e,t){return this._addCheck({kind:"length",value:e,...C.errToObj(t)})}nonempty(e){return this.min(1,C.errToObj(e))}trim(){return new je({...this._def,checks:[...this._def.checks,{kind:"trim"}]})}toLowerCase(){return new je({...this._def,checks:[...this._def.checks,{kind:"toLowerCase"}]})}toUpperCase(){return new je({...this._def,checks:[...this._def.checks,{kind:"toUpperCase"}]})}get isDatetime(){return!!this._def.checks.find(e=>e.kind==="datetime")}get isDate(){return!!this._def.checks.find(e=>e.kind==="date")}get isTime(){return!!this._def.checks.find(e=>e.kind==="time")}get isDuration(){return!!this._def.checks.find(e=>e.kind==="duration")}get isEmail(){return!!this._def.checks.find(e=>e.kind==="email")}get isURL(){return!!this._def.checks.find(e=>e.kind==="url")}get isEmoji(){return!!this._def.checks.find(e=>e.kind==="emoji")}get isUUID(){return!!this._def.checks.find(e=>e.kind==="uuid")}get isNANOID(){return!!this._def.checks.find(e=>e.kind==="nanoid")}get isCUID(){return!!this._def.checks.find(e=>e.kind==="cuid")}get isCUID2(){return!!this._def.checks.find(e=>e.kind==="cuid2")}get isULID(){return!!this._def.checks.find(e=>e.kind==="ulid")}get isIP(){return!!this._def.checks.find(e=>e.kind==="ip")}get isCIDR(){return!!this._def.checks.find(e=>e.kind==="cidr")}get isBase64(){return!!this._def.checks.find(e=>e.kind==="base64")}get isBase64url(){return!!this._def.checks.find(e=>e.kind==="base64url")}get minLength(){let e=null;for(const t of this._def.checks)t.kind==="min"&&(e===null||t.value>e)&&(e=t.value);return e}get maxLength(){let e=null;for(const t of this._def.checks)t.kind==="max"&&(e===null||t.value<e)&&(e=t.value);return e}}je.create=n=>new je({checks:[],typeName:S.ZodString,coerce:(n==null?void 0:n.coerce)??!1,...j(n)});function ji(n,e){const t=(n.toString().split(".")[1]||"").length,r=(e.toString().split(".")[1]||"").length,s=t>r?t:r,a=Number.parseInt(n.toFixed(s).replace(".","")),i=Number.parseInt(e.toFixed(s).replace(".",""));return a%i/10**s}class Tt extends L{constructor(){super(...arguments),this.min=this.gte,this.max=this.lte,this.step=this.multipleOf}_parse(e){if(this._def.coerce&&(e.data=Number(e.data)),this._getType(e)!==k.number){const a=this._getOrReturnCtx(e);return T(a,{code:x.invalid_type,expected:k.number,received:a.parsedType}),N}let r;const s=new le;for(const a of this._def.checks)a.kind==="int"?q.isInteger(e.data)||(r=this._getOrReturnCtx(e,r),T(r,{code:x.invalid_type,expected:"integer",received:"float",message:a.message}),s.dirty()):a.kind==="min"?(a.inclusive?e.data<a.value:e.data<=a.value)&&(r=this._getOrReturnCtx(e,r),T(r,{code:x.too_small,minimum:a.value,type:"number",inclusive:a.inclusive,exact:!1,message:a.message}),s.dirty()):a.kind==="max"?(a.inclusive?e.data>a.value:e.data>=a.value)&&(r=this._getOrReturnCtx(e,r),T(r,{code:x.too_big,maximum:a.value,type:"number",inclusive:a.inclusive,exact:!1,message:a.message}),s.dirty()):a.kind==="multipleOf"?ji(e.data,a.value)!==0&&(r=this._getOrReturnCtx(e,r),T(r,{code:x.not_multiple_of,multipleOf:a.value,message:a.message}),s.dirty()):a.kind==="finite"?Number.isFinite(e.data)||(r=this._getOrReturnCtx(e,r),T(r,{code:x.not_finite,message:a.message}),s.dirty()):q.assertNever(a);return{status:s.value,value:e.data}}gte(e,t){return this.setLimit("min",e,!0,C.toString(t))}gt(e,t){return this.setLimit("min",e,!1,C.toString(t))}lte(e,t){return this.setLimit("max",e,!0,C.toString(t))}lt(e,t){return this.setLimit("max",e,!1,C.toString(t))}setLimit(e,t,r,s){return new Tt({...this._def,checks:[...this._def.checks,{kind:e,value:t,inclusive:r,message:C.toString(s)}]})}_addCheck(e){return new Tt({...this._def,checks:[...this._def.checks,e]})}int(e){return this._addCheck({kind:"int",message:C.toString(e)})}positive(e){return this._addCheck({kind:"min",value:0,inclusive:!1,message:C.toString(e)})}negative(e){return this._addCheck({kind:"max",value:0,inclusive:!1,message:C.toString(e)})}nonpositive(e){return this._addCheck({kind:"max",value:0,inclusive:!0,message:C.toString(e)})}nonnegative(e){return this._addCheck({kind:"min",value:0,inclusive:!0,message:C.toString(e)})}multipleOf(e,t){return this._addCheck({kind:"multipleOf",value:e,message:C.toString(t)})}finite(e){return this._addCheck({kind:"finite",message:C.toString(e)})}safe(e){return this._addCheck({kind:"min",inclusive:!0,value:Number.MIN_SAFE_INTEGER,message:C.toString(e)})._addCheck({kind:"max",inclusive:!0,value:Number.MAX_SAFE_INTEGER,message:C.toString(e)})}get minValue(){let e=null;for(const t of this._def.checks)t.kind==="min"&&(e===null||t.value>e)&&(e=t.value);return e}get maxValue(){let e=null;for(const t of this._def.checks)t.kind==="max"&&(e===null||t.value<e)&&(e=t.value);return e}get isInt(){return!!this._def.checks.find(e=>e.kind==="int"||e.kind==="multipleOf"&&q.isInteger(e.value))}get isFinite(){let e=null,t=null;for(const r of this._def.checks){if(r.kind==="finite"||r.kind==="int"||r.kind==="multipleOf")return!0;r.kind==="min"?(t===null||r.value>t)&&(t=r.value):r.kind==="max"&&(e===null||r.value<e)&&(e=r.value)}return Number.isFinite(t)&&Number.isFinite(e)}}Tt.create=n=>new Tt({checks:[],typeName:S.ZodNumber,coerce:(n==null?void 0:n.coerce)||!1,...j(n)});class Wt extends L{constructor(){super(...arguments),this.min=this.gte,this.max=this.lte}_parse(e){if(this._def.coerce)try{e.data=BigInt(e.data)}catch{return this._getInvalidInput(e)}if(this._getType(e)!==k.bigint)return this._getInvalidInput(e);let r;const s=new le;for(const a of this._def.checks)a.kind==="min"?(a.inclusive?e.data<a.value:e.data<=a.value)&&(r=this._getOrReturnCtx(e,r),T(r,{code:x.too_small,type:"bigint",minimum:a.value,inclusive:a.inclusive,message:a.message}),s.dirty()):a.kind==="max"?(a.inclusive?e.data>a.value:e.data>=a.value)&&(r=this._getOrReturnCtx(e,r),T(r,{code:x.too_big,type:"bigint",maximum:a.value,inclusive:a.inclusive,message:a.message}),s.dirty()):a.kind==="multipleOf"?e.data%a.value!==BigInt(0)&&(r=this._getOrReturnCtx(e,r),T(r,{code:x.not_multiple_of,multipleOf:a.value,message:a.message}),s.dirty()):q.assertNever(a);return{status:s.value,value:e.data}}_getInvalidInput(e){const t=this._getOrReturnCtx(e);return T(t,{code:x.invalid_type,expected:k.bigint,received:t.parsedType}),N}gte(e,t){return this.setLimit("min",e,!0,C.toString(t))}gt(e,t){return this.setLimit("min",e,!1,C.toString(t))}lte(e,t){return this.setLimit("max",e,!0,C.toString(t))}lt(e,t){return this.setLimit("max",e,!1,C.toString(t))}setLimit(e,t,r,s){return new Wt({...this._def,checks:[...this._def.checks,{kind:e,value:t,inclusive:r,message:C.toString(s)}]})}_addCheck(e){return new Wt({...this._def,checks:[...this._def.checks,e]})}positive(e){return this._addCheck({kind:"min",value:BigInt(0),inclusive:!1,message:C.toString(e)})}negative(e){return this._addCheck({kind:"max",value:BigInt(0),inclusive:!1,message:C.toString(e)})}nonpositive(e){return this._addCheck({kind:"max",value:BigInt(0),inclusive:!0,message:C.toString(e)})}nonnegative(e){return this._addCheck({kind:"min",value:BigInt(0),inclusive:!0,message:C.toString(e)})}multipleOf(e,t){return this._addCheck({kind:"multipleOf",value:e,message:C.toString(t)})}get minValue(){let e=null;for(const t of this._def.checks)t.kind==="min"&&(e===null||t.value>e)&&(e=t.value);return e}get maxValue(){let e=null;for(const t of this._def.checks)t.kind==="max"&&(e===null||t.value<e)&&(e=t.value);return e}}Wt.create=n=>new Wt({checks:[],typeName:S.ZodBigInt,coerce:(n==null?void 0:n.coerce)??!1,...j(n)});class dr extends L{_parse(e){if(this._def.coerce&&(e.data=!!e.data),this._getType(e)!==k.boolean){const r=this._getOrReturnCtx(e);return T(r,{code:x.invalid_type,expected:k.boolean,received:r.parsedType}),N}return we(e.data)}}dr.create=n=>new dr({typeName:S.ZodBoolean,coerce:(n==null?void 0:n.coerce)||!1,...j(n)});class On extends L{_parse(e){if(this._def.coerce&&(e.data=new Date(e.data)),this._getType(e)!==k.date){const a=this._getOrReturnCtx(e);return T(a,{code:x.invalid_type,expected:k.date,received:a.parsedType}),N}if(Number.isNaN(e.data.getTime())){const a=this._getOrReturnCtx(e);return T(a,{code:x.invalid_date}),N}const r=new le;let s;for(const a of this._def.checks)a.kind==="min"?e.data.getTime()<a.value&&(s=this._getOrReturnCtx(e,s),T(s,{code:x.too_small,message:a.message,inclusive:!0,exact:!1,minimum:a.value,type:"date"}),r.dirty()):a.kind==="max"?e.data.getTime()>a.value&&(s=this._getOrReturnCtx(e,s),T(s,{code:x.too_big,message:a.message,inclusive:!0,exact:!1,maximum:a.value,type:"date"}),r.dirty()):q.assertNever(a);return{status:r.value,value:new Date(e.data.getTime())}}_addCheck(e){return new On({...this._def,checks:[...this._def.checks,e]})}min(e,t){return this._addCheck({kind:"min",value:e.getTime(),message:C.toString(t)})}max(e,t){return this._addCheck({kind:"max",value:e.getTime(),message:C.toString(t)})}get minDate(){let e=null;for(const t of this._def.checks)t.kind==="min"&&(e===null||t.value>e)&&(e=t.value);return e!=null?new Date(e):null}get maxDate(){let e=null;for(const t of this._def.checks)t.kind==="max"&&(e===null||t.value<e)&&(e=t.value);return e!=null?new Date(e):null}}On.create=n=>new On({checks:[],coerce:(n==null?void 0:n.coerce)||!1,typeName:S.ZodDate,...j(n)});class us extends L{_parse(e){if(this._getType(e)!==k.symbol){const r=this._getOrReturnCtx(e);return T(r,{code:x.invalid_type,expected:k.symbol,received:r.parsedType}),N}return we(e.data)}}us.create=n=>new us({typeName:S.ZodSymbol,...j(n)});class lr extends L{_parse(e){if(this._getType(e)!==k.undefined){const r=this._getOrReturnCtx(e);return T(r,{code:x.invalid_type,expected:k.undefined,received:r.parsedType}),N}return we(e.data)}}lr.create=n=>new lr({typeName:S.ZodUndefined,...j(n)});class pr extends L{_parse(e){if(this._getType(e)!==k.null){const r=this._getOrReturnCtx(e);return T(r,{code:x.invalid_type,expected:k.null,received:r.parsedType}),N}return we(e.data)}}pr.create=n=>new pr({typeName:S.ZodNull,...j(n)});class fr extends L{constructor(){super(...arguments),this._any=!0}_parse(e){return we(e.data)}}fr.create=n=>new fr({typeName:S.ZodAny,...j(n)});class cs extends L{constructor(){super(...arguments),this._unknown=!0}_parse(e){return we(e.data)}}cs.create=n=>new cs({typeName:S.ZodUnknown,...j(n)});class Be extends L{_parse(e){const t=this._getOrReturnCtx(e);return T(t,{code:x.invalid_type,expected:k.never,received:t.parsedType}),N}}Be.create=n=>new Be({typeName:S.ZodNever,...j(n)});class ds extends L{_parse(e){if(this._getType(e)!==k.undefined){const r=this._getOrReturnCtx(e);return T(r,{code:x.invalid_type,expected:k.void,received:r.parsedType}),N}return we(e.data)}}ds.create=n=>new ds({typeName:S.ZodVoid,...j(n)});class Oe extends L{_parse(e){const{ctx:t,status:r}=this._processInputParams(e),s=this._def;if(t.parsedType!==k.array)return T(t,{code:x.invalid_type,expected:k.array,received:t.parsedType}),N;if(s.exactLength!==null){const i=t.data.length>s.exactLength.value,u=t.data.length<s.exactLength.value;(i||u)&&(T(t,{code:i?x.too_big:x.too_small,minimum:u?s.exactLength.value:void 0,maximum:i?s.exactLength.value:void 0,type:"array",inclusive:!0,exact:!0,message:s.exactLength.message}),r.dirty())}if(s.minLength!==null&&t.data.length<s.minLength.value&&(T(t,{code:x.too_small,minimum:s.minLength.value,type:"array",inclusive:!0,exact:!1,message:s.minLength.message}),r.dirty()),s.maxLength!==null&&t.data.length>s.maxLength.value&&(T(t,{code:x.too_big,maximum:s.maxLength.value,type:"array",inclusive:!0,exact:!1,message:s.maxLength.message}),r.dirty()),t.common.async)return Promise.all([...t.data].map((i,u)=>s.type._parseAsync(new Ee(t,i,t.path,u)))).then(i=>le.mergeArray(r,i));const a=[...t.data].map((i,u)=>s.type._parseSync(new Ee(t,i,t.path,u)));return le.mergeArray(r,a)}get element(){return this._def.type}min(e,t){return new Oe({...this._def,minLength:{value:e,message:C.toString(t)}})}max(e,t){return new Oe({...this._def,maxLength:{value:e,message:C.toString(t)}})}length(e,t){return new Oe({...this._def,exactLength:{value:e,message:C.toString(t)}})}nonempty(e){return this.min(1,e)}}Oe.create=(n,e)=>new Oe({type:n,minLength:null,maxLength:null,exactLength:null,typeName:S.ZodArray,...j(e)});function kt(n){if(n instanceof ne){const e={};for(const t in n.shape){const r=n.shape[t];e[t]=Fe.create(kt(r))}return new ne({...n._def,shape:()=>e})}else return n instanceof Oe?new Oe({...n._def,type:kt(n.element)}):n instanceof Fe?Fe.create(kt(n.unwrap())):n instanceof st?st.create(kt(n.unwrap())):n instanceof tt?tt.create(n.items.map(e=>kt(e))):n}class ne extends L{constructor(){super(...arguments),this._cached=null,this.nonstrict=this.passthrough,this.augment=this.extend}_getCached(){if(this._cached!==null)return this._cached;const e=this._def.shape(),t=q.objectKeys(e);return this._cached={shape:e,keys:t},this._cached}_parse(e){if(this._getType(e)!==k.object){const c=this._getOrReturnCtx(e);return T(c,{code:x.invalid_type,expected:k.object,received:c.parsedType}),N}const{status:r,ctx:s}=this._processInputParams(e),{shape:a,keys:i}=this._getCached(),u=[];if(!(this._def.catchall instanceof Be&&this._def.unknownKeys==="strip"))for(const c in s.data)i.includes(c)||u.push(c);const l=[];for(const c of i){const p=a[c],f=s.data[c];l.push({key:{status:"valid",value:c},value:p._parse(new Ee(s,f,s.path,c)),alwaysSet:c in s.data})}if(this._def.catchall instanceof Be){const c=this._def.unknownKeys;if(c==="passthrough")for(const p of u)l.push({key:{status:"valid",value:p},value:{status:"valid",value:s.data[p]}});else if(c==="strict")u.length>0&&(T(s,{code:x.unrecognized_keys,keys:u}),r.dirty());else if(c!=="strip")throw new Error("Internal ZodObject error: invalid unknownKeys value.")}else{const c=this._def.catchall;for(const p of u){const f=s.data[p];l.push({key:{status:"valid",value:p},value:c._parse(new Ee(s,f,s.path,p)),alwaysSet:p in s.data})}}return s.common.async?Promise.resolve().then(async()=>{const c=[];for(const p of l){const f=await p.key,h=await p.value;c.push({key:f,value:h,alwaysSet:p.alwaysSet})}return c}).then(c=>le.mergeObjectSync(r,c)):le.mergeObjectSync(r,l)}get shape(){return this._def.shape()}strict(e){return C.errToObj,new ne({...this._def,unknownKeys:"strict",...e!==void 0?{errorMap:(t,r)=>{var a,i;const s=((i=(a=this._def).errorMap)==null?void 0:i.call(a,t,r).message)??r.defaultError;return t.code==="unrecognized_keys"?{message:C.errToObj(e).message??s}:{message:s}}}:{}})}strip(){return new ne({...this._def,unknownKeys:"strip"})}passthrough(){return new ne({...this._def,unknownKeys:"passthrough"})}extend(e){return new ne({...this._def,shape:()=>({...this._def.shape(),...e})})}merge(e){return new ne({unknownKeys:e._def.unknownKeys,catchall:e._def.catchall,shape:()=>({...this._def.shape(),...e._def.shape()}),typeName:S.ZodObject})}setKey(e,t){return this.augment({[e]:t})}catchall(e){return new ne({...this._def,catchall:e})}pick(e){const t={};for(const r of q.objectKeys(e))e[r]&&this.shape[r]&&(t[r]=this.shape[r]);return new ne({...this._def,shape:()=>t})}omit(e){const t={};for(const r of q.objectKeys(this.shape))e[r]||(t[r]=this.shape[r]);return new ne({...this._def,shape:()=>t})}deepPartial(){return kt(this)}partial(e){const t={};for(const r of q.objectKeys(this.shape)){const s=this.shape[r];e&&!e[r]?t[r]=s:t[r]=s.optional()}return new ne({...this._def,shape:()=>t})}required(e){const t={};for(const r of q.objectKeys(this.shape))if(e&&!e[r])t[r]=this.shape[r];else{let a=this.shape[r];for(;a instanceof Fe;)a=a._def.innerType;t[r]=a}return new ne({...this._def,shape:()=>t})}keyof(){return ps(q.objectKeys(this.shape))}}ne.create=(n,e)=>new ne({shape:()=>n,unknownKeys:"strip",catchall:Be.create(),typeName:S.ZodObject,...j(e)}),ne.strictCreate=(n,e)=>new ne({shape:()=>n,unknownKeys:"strict",catchall:Be.create(),typeName:S.ZodObject,...j(e)}),ne.lazycreate=(n,e)=>new ne({shape:n,unknownKeys:"strip",catchall:Be.create(),typeName:S.ZodObject,...j(e)});class Rn extends L{_parse(e){const{ctx:t}=this._processInputParams(e),r=this._def.options;function s(a){for(const u of a)if(u.result.status==="valid")return u.result;for(const u of a)if(u.result.status==="dirty")return t.common.issues.push(...u.ctx.common.issues),u.result;const i=a.map(u=>new Me(u.ctx.common.issues));return T(t,{code:x.invalid_union,unionErrors:i}),N}if(t.common.async)return Promise.all(r.map(async a=>{const i={...t,common:{...t.common,issues:[]},parent:null};return{result:await a._parseAsync({data:t.data,path:t.path,parent:i}),ctx:i}})).then(s);{let a;const i=[];for(const l of r){const c={...t,common:{...t.common,issues:[]},parent:null},p=l._parseSync({data:t.data,path:t.path,parent:c});if(p.status==="valid")return p;p.status==="dirty"&&!a&&(a={result:p,ctx:c}),c.common.issues.length&&i.push(c.common.issues)}if(a)return t.common.issues.push(...a.ctx.common.issues),a.result;const u=i.map(l=>new Me(l));return T(t,{code:x.invalid_union,unionErrors:u}),N}}get options(){return this._def.options}}Rn.create=(n,e)=>new Rn({options:n,typeName:S.ZodUnion,...j(e)});const $e=n=>n instanceof Pn?$e(n.schema):n instanceof rt?$e(n.innerType()):n instanceof Mn?[n.value]:n instanceof nt?n.options:n instanceof gr?q.objectValues(n.enum):n instanceof $n?$e(n._def.innerType):n instanceof lr?[void 0]:n instanceof pr?[null]:n instanceof Fe?[void 0,...$e(n.unwrap())]:n instanceof st?[null,...$e(n.unwrap())]:n instanceof hs||n instanceof Ln?$e(n.unwrap()):n instanceof Fn?$e(n._def.innerType):[];class hr extends L{_parse(e){const{ctx:t}=this._processInputParams(e);if(t.parsedType!==k.object)return T(t,{code:x.invalid_type,expected:k.object,received:t.parsedType}),N;const r=this.discriminator,s=t.data[r],a=this.optionsMap.get(s);return a?t.common.async?a._parseAsync({data:t.data,path:t.path,parent:t}):a._parseSync({data:t.data,path:t.path,parent:t}):(T(t,{code:x.invalid_union_discriminator,options:Array.from(this.optionsMap.keys()),path:[r]}),N)}get discriminator(){return this._def.discriminator}get options(){return this._def.options}get optionsMap(){return this._def.optionsMap}static create(e,t,r){const s=new Map;for(const a of t){const i=$e(a.shape[e]);if(!i.length)throw new Error(`A discriminator value for key \`${e}\` could not be extracted from all schema options`);for(const u of i){if(s.has(u))throw new Error(`Discriminator property ${String(e)} has duplicate value ${String(u)}`);s.set(u,a)}}return new hr({typeName:S.ZodDiscriminatedUnion,discriminator:e,options:t,optionsMap:s,...j(r)})}}function mr(n,e){const t=Je(n),r=Je(e);if(n===e)return{valid:!0,data:n};if(t===k.object&&r===k.object){const s=q.objectKeys(e),a=q.objectKeys(n).filter(u=>s.indexOf(u)!==-1),i={...n,...e};for(const u of a){const l=mr(n[u],e[u]);if(!l.valid)return{valid:!1};i[u]=l.data}return{valid:!0,data:i}}else if(t===k.array&&r===k.array){if(n.length!==e.length)return{valid:!1};const s=[];for(let a=0;a<n.length;a++){const i=n[a],u=e[a],l=mr(i,u);if(!l.valid)return{valid:!1};s.push(l.data)}return{valid:!0,data:s}}else return t===k.date&&r===k.date&&+n==+e?{valid:!0,data:n}:{valid:!1}}class Nn extends L{_parse(e){const{status:t,ctx:r}=this._processInputParams(e),s=(a,i)=>{if(rs(a)||rs(i))return N;const u=mr(a.value,i.value);return u.valid?((ss(a)||ss(i))&&t.dirty(),{status:t.value,value:u.data}):(T(r,{code:x.invalid_intersection_types}),N)};return r.common.async?Promise.all([this._def.left._parseAsync({data:r.data,path:r.path,parent:r}),this._def.right._parseAsync({data:r.data,path:r.path,parent:r})]).then(([a,i])=>s(a,i)):s(this._def.left._parseSync({data:r.data,path:r.path,parent:r}),this._def.right._parseSync({data:r.data,path:r.path,parent:r}))}}Nn.create=(n,e,t)=>new Nn({left:n,right:e,typeName:S.ZodIntersection,...j(t)});class tt extends L{_parse(e){const{status:t,ctx:r}=this._processInputParams(e);if(r.parsedType!==k.array)return T(r,{code:x.invalid_type,expected:k.array,received:r.parsedType}),N;if(r.data.length<this._def.items.length)return T(r,{code:x.too_small,minimum:this._def.items.length,inclusive:!0,exact:!1,type:"array"}),N;!this._def.rest&&r.data.length>this._def.items.length&&(T(r,{code:x.too_big,maximum:this._def.items.length,inclusive:!0,exact:!1,type:"array"}),t.dirty());const a=[...r.data].map((i,u)=>{const l=this._def.items[u]||this._def.rest;return l?l._parse(new Ee(r,i,r.path,u)):null}).filter(i=>!!i);return r.common.async?Promise.all(a).then(i=>le.mergeArray(t,i)):le.mergeArray(t,a)}get items(){return this._def.items}rest(e){return new tt({...this._def,rest:e})}}tt.create=(n,e)=>{if(!Array.isArray(n))throw new Error("You must pass an array of schemas to z.tuple([ ... ])");return new tt({items:n,typeName:S.ZodTuple,rest:null,...j(e)})};class Dn extends L{get keySchema(){return this._def.keyType}get valueSchema(){return this._def.valueType}_parse(e){const{status:t,ctx:r}=this._processInputParams(e);if(r.parsedType!==k.object)return T(r,{code:x.invalid_type,expected:k.object,received:r.parsedType}),N;const s=[],a=this._def.keyType,i=this._def.valueType;for(const u in r.data)s.push({key:a._parse(new Ee(r,u,r.path,u)),value:i._parse(new Ee(r,r.data[u],r.path,u)),alwaysSet:u in r.data});return r.common.async?le.mergeObjectAsync(t,s):le.mergeObjectSync(t,s)}get element(){return this._def.valueType}static create(e,t,r){return t instanceof L?new Dn({keyType:e,valueType:t,typeName:S.ZodRecord,...j(r)}):new Dn({keyType:je.create(),valueType:e,typeName:S.ZodRecord,...j(t)})}}class ls extends L{get keySchema(){return this._def.keyType}get valueSchema(){return this._def.valueType}_parse(e){const{status:t,ctx:r}=this._processInputParams(e);if(r.parsedType!==k.map)return T(r,{code:x.invalid_type,expected:k.map,received:r.parsedType}),N;const s=this._def.keyType,a=this._def.valueType,i=[...r.data.entries()].map(([u,l],c)=>({key:s._parse(new Ee(r,u,r.path,[c,"key"])),value:a._parse(new Ee(r,l,r.path,[c,"value"]))}));if(r.common.async){const u=new Map;return Promise.resolve().then(async()=>{for(const l of i){const c=await l.key,p=await l.value;if(c.status==="aborted"||p.status==="aborted")return N;(c.status==="dirty"||p.status==="dirty")&&t.dirty(),u.set(c.value,p.value)}return{status:t.value,value:u}})}else{const u=new Map;for(const l of i){const c=l.key,p=l.value;if(c.status==="aborted"||p.status==="aborted")return N;(c.status==="dirty"||p.status==="dirty")&&t.dirty(),u.set(c.value,p.value)}return{status:t.value,value:u}}}}ls.create=(n,e,t)=>new ls({valueType:e,keyType:n,typeName:S.ZodMap,...j(t)});class Ht extends L{_parse(e){const{status:t,ctx:r}=this._processInputParams(e);if(r.parsedType!==k.set)return T(r,{code:x.invalid_type,expected:k.set,received:r.parsedType}),N;const s=this._def;s.minSize!==null&&r.data.size<s.minSize.value&&(T(r,{code:x.too_small,minimum:s.minSize.value,type:"set",inclusive:!0,exact:!1,message:s.minSize.message}),t.dirty()),s.maxSize!==null&&r.data.size>s.maxSize.value&&(T(r,{code:x.too_big,maximum:s.maxSize.value,type:"set",inclusive:!0,exact:!1,message:s.maxSize.message}),t.dirty());const a=this._def.valueType;function i(l){const c=new Set;for(const p of l){if(p.status==="aborted")return N;p.status==="dirty"&&t.dirty(),c.add(p.value)}return{status:t.value,value:c}}const u=[...r.data.values()].map((l,c)=>a._parse(new Ee(r,l,r.path,c)));return r.common.async?Promise.all(u).then(l=>i(l)):i(u)}min(e,t){return new Ht({...this._def,minSize:{value:e,message:C.toString(t)}})}max(e,t){return new Ht({...this._def,maxSize:{value:e,message:C.toString(t)}})}size(e,t){return this.min(e,t).max(e,t)}nonempty(e){return this.min(1,e)}}Ht.create=(n,e)=>new Ht({valueType:n,minSize:null,maxSize:null,typeName:S.ZodSet,...j(e)});class Pn extends L{get schema(){return this._def.getter()}_parse(e){const{ctx:t}=this._processInputParams(e);return this._def.getter()._parse({data:t.data,path:t.path,parent:t})}}Pn.create=(n,e)=>new Pn({getter:n,typeName:S.ZodLazy,...j(e)});class Mn extends L{_parse(e){if(e.data!==this._def.value){const t=this._getOrReturnCtx(e);return T(t,{received:t.data,code:x.invalid_literal,expected:this._def.value}),N}return{status:"valid",value:e.data}}get value(){return this._def.value}}Mn.create=(n,e)=>new Mn({value:n,typeName:S.ZodLiteral,...j(e)});function ps(n,e){return new nt({values:n,typeName:S.ZodEnum,...j(e)})}class nt extends L{_parse(e){if(typeof e.data!="string"){const t=this._getOrReturnCtx(e),r=this._def.values;return T(t,{expected:q.joinValues(r),received:t.parsedType,code:x.invalid_type}),N}if(this._cache||(this._cache=new Set(this._def.values)),!this._cache.has(e.data)){const t=this._getOrReturnCtx(e),r=this._def.values;return T(t,{received:t.data,code:x.invalid_enum_value,options:r}),N}return we(e.data)}get options(){return this._def.values}get enum(){const e={};for(const t of this._def.values)e[t]=t;return e}get Values(){const e={};for(const t of this._def.values)e[t]=t;return e}get Enum(){const e={};for(const t of this._def.values)e[t]=t;return e}extract(e,t=this._def){return nt.create(e,{...this._def,...t})}exclude(e,t=this._def){return nt.create(this.options.filter(r=>!e.includes(r)),{...this._def,...t})}}nt.create=ps;class gr extends L{_parse(e){const t=q.getValidEnumValues(this._def.values),r=this._getOrReturnCtx(e);if(r.parsedType!==k.string&&r.parsedType!==k.number){const s=q.objectValues(t);return T(r,{expected:q.joinValues(s),received:r.parsedType,code:x.invalid_type}),N}if(this._cache||(this._cache=new Set(q.getValidEnumValues(this._def.values))),!this._cache.has(e.data)){const s=q.objectValues(t);return T(r,{received:r.data,code:x.invalid_enum_value,options:s}),N}return we(e.data)}get enum(){return this._def.values}}gr.create=(n,e)=>new gr({values:n,typeName:S.ZodNativeEnum,...j(e)});class jn extends L{unwrap(){return this._def.type}_parse(e){const{ctx:t}=this._processInputParams(e);if(t.parsedType!==k.promise&&t.common.async===!1)return T(t,{code:x.invalid_type,expected:k.promise,received:t.parsedType}),N;const r=t.parsedType===k.promise?t.data:Promise.resolve(t.data);return we(r.then(s=>this._def.type.parseAsync(s,{path:t.path,errorMap:t.common.contextualErrorMap})))}}jn.create=(n,e)=>new jn({type:n,typeName:S.ZodPromise,...j(e)});class rt extends L{innerType(){return this._def.schema}sourceType(){return this._def.schema._def.typeName===S.ZodEffects?this._def.schema.sourceType():this._def.schema}_parse(e){const{status:t,ctx:r}=this._processInputParams(e),s=this._def.effect||null,a={addIssue:i=>{T(r,i),i.fatal?t.abort():t.dirty()},get path(){return r.path}};if(a.addIssue=a.addIssue.bind(a),s.type==="preprocess"){const i=s.transform(r.data,a);if(r.common.async)return Promise.resolve(i).then(async u=>{if(t.value==="aborted")return N;const l=await this._def.schema._parseAsync({data:u,path:r.path,parent:r});return l.status==="aborted"?N:l.status==="dirty"||t.value==="dirty"?Vt(l.value):l});{if(t.value==="aborted")return N;const u=this._def.schema._parseSync({data:i,path:r.path,parent:r});return u.status==="aborted"?N:u.status==="dirty"||t.value==="dirty"?Vt(u.value):u}}if(s.type==="refinement"){const i=u=>{const l=s.refinement(u,a);if(r.common.async)return Promise.resolve(l);if(l instanceof Promise)throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");return u};if(r.common.async===!1){const u=this._def.schema._parseSync({data:r.data,path:r.path,parent:r});return u.status==="aborted"?N:(u.status==="dirty"&&t.dirty(),i(u.value),{status:t.value,value:u.value})}else return this._def.schema._parseAsync({data:r.data,path:r.path,parent:r}).then(u=>u.status==="aborted"?N:(u.status==="dirty"&&t.dirty(),i(u.value).then(()=>({status:t.value,value:u.value}))))}if(s.type==="transform")if(r.common.async===!1){const i=this._def.schema._parseSync({data:r.data,path:r.path,parent:r});if(!It(i))return N;const u=s.transform(i.value,a);if(u instanceof Promise)throw new Error("Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.");return{status:t.value,value:u}}else return this._def.schema._parseAsync({data:r.data,path:r.path,parent:r}).then(i=>It(i)?Promise.resolve(s.transform(i.value,a)).then(u=>({status:t.value,value:u})):N);q.assertNever(s)}}rt.create=(n,e,t)=>new rt({schema:n,typeName:S.ZodEffects,effect:e,...j(t)}),rt.createWithPreprocess=(n,e,t)=>new rt({schema:e,effect:{type:"preprocess",transform:n},typeName:S.ZodEffects,...j(t)});class Fe extends L{_parse(e){return this._getType(e)===k.undefined?we(void 0):this._def.innerType._parse(e)}unwrap(){return this._def.innerType}}Fe.create=(n,e)=>new Fe({innerType:n,typeName:S.ZodOptional,...j(e)});class st extends L{_parse(e){return this._getType(e)===k.null?we(null):this._def.innerType._parse(e)}unwrap(){return this._def.innerType}}st.create=(n,e)=>new st({innerType:n,typeName:S.ZodNullable,...j(e)});class $n extends L{_parse(e){const{ctx:t}=this._processInputParams(e);let r=t.data;return t.parsedType===k.undefined&&(r=this._def.defaultValue()),this._def.innerType._parse({data:r,path:t.path,parent:t})}removeDefault(){return this._def.innerType}}$n.create=(n,e)=>new $n({innerType:n,typeName:S.ZodDefault,defaultValue:typeof e.default=="function"?e.default:()=>e.default,...j(e)});class Fn extends L{_parse(e){const{ctx:t}=this._processInputParams(e),r={...t,common:{...t.common,issues:[]}},s=this._def.innerType._parse({data:r.data,path:r.path,parent:{...r}});return En(s)?s.then(a=>({status:"valid",value:a.status==="valid"?a.value:this._def.catchValue({get error(){return new Me(r.common.issues)},input:r.data})})):{status:"valid",value:s.status==="valid"?s.value:this._def.catchValue({get error(){return new Me(r.common.issues)},input:r.data})}}removeCatch(){return this._def.innerType}}Fn.create=(n,e)=>new Fn({innerType:n,typeName:S.ZodCatch,catchValue:typeof e.catch=="function"?e.catch:()=>e.catch,...j(e)});class fs extends L{_parse(e){if(this._getType(e)!==k.nan){const r=this._getOrReturnCtx(e);return T(r,{code:x.invalid_type,expected:k.nan,received:r.parsedType}),N}return{status:"valid",value:e.data}}}fs.create=n=>new fs({typeName:S.ZodNaN,...j(n)});class hs extends L{_parse(e){const{ctx:t}=this._processInputParams(e),r=t.data;return this._def.type._parse({data:r,path:t.path,parent:t})}unwrap(){return this._def.type}}class _r extends L{_parse(e){const{status:t,ctx:r}=this._processInputParams(e);if(r.common.async)return(async()=>{const a=await this._def.in._parseAsync({data:r.data,path:r.path,parent:r});return a.status==="aborted"?N:a.status==="dirty"?(t.dirty(),Vt(a.value)):this._def.out._parseAsync({data:a.value,path:r.path,parent:r})})();{const s=this._def.in._parseSync({data:r.data,path:r.path,parent:r});return s.status==="aborted"?N:s.status==="dirty"?(t.dirty(),{status:"dirty",value:s.value}):this._def.out._parseSync({data:s.value,path:r.path,parent:r})}}static create(e,t){return new _r({in:e,out:t,typeName:S.ZodPipeline})}}class Ln extends L{_parse(e){const t=this._def.innerType._parse(e),r=s=>(It(s)&&(s.value=Object.freeze(s.value)),s);return En(t)?t.then(s=>r(s)):r(t)}unwrap(){return this._def.innerType}}Ln.create=(n,e)=>new Ln({innerType:n,typeName:S.ZodReadonly,...j(e)});var S;(function(n){n.ZodString="ZodString",n.ZodNumber="ZodNumber",n.ZodNaN="ZodNaN",n.ZodBigInt="ZodBigInt",n.ZodBoolean="ZodBoolean",n.ZodDate="ZodDate",n.ZodSymbol="ZodSymbol",n.ZodUndefined="ZodUndefined",n.ZodNull="ZodNull",n.ZodAny="ZodAny",n.ZodUnknown="ZodUnknown",n.ZodNever="ZodNever",n.ZodVoid="ZodVoid",n.ZodArray="ZodArray",n.ZodObject="ZodObject",n.ZodUnion="ZodUnion",n.ZodDiscriminatedUnion="ZodDiscriminatedUnion",n.ZodIntersection="ZodIntersection",n.ZodTuple="ZodTuple",n.ZodRecord="ZodRecord",n.ZodMap="ZodMap",n.ZodSet="ZodSet",n.ZodFunction="ZodFunction",n.ZodLazy="ZodLazy",n.ZodLiteral="ZodLiteral",n.ZodEnum="ZodEnum",n.ZodEffects="ZodEffects",n.ZodNativeEnum="ZodNativeEnum",n.ZodOptional="ZodOptional",n.ZodNullable="ZodNullable",n.ZodDefault="ZodDefault",n.ZodCatch="ZodCatch",n.ZodPromise="ZodPromise",n.ZodBranded="ZodBranded",n.ZodPipeline="ZodPipeline",n.ZodReadonly="ZodReadonly"})(S||(S={}));const d=je.create,A=Tt.create,at=dr.create,Z=fr.create;Be.create;const J=Oe.create,m=ne.create,ms=Rn.create,he=hr.create;Nn.create,tt.create;const re=Dn.create,$i=Pn.create,g=Mn.create,oe=nt.create;jn.create,Fe.create,st.create;function Fi(){return{}}function Li(n,e){var r,s;const t={type:"array"};return((s=(r=n.type)==null?void 0:r._def)==null?void 0:s.typeName)!==S.ZodAny&&(t.items=B(n.type._def,{...e,currentPath:[...e.currentPath,"items"]})),n.minLength&&W(t,"minItems",n.minLength.value,n.minLength.message,e),n.maxLength&&W(t,"maxItems",n.maxLength.value,n.maxLength.message,e),n.exactLength&&(W(t,"minItems",n.exactLength.value,n.exactLength.message,e),W(t,"maxItems",n.exactLength.value,n.exactLength.message,e)),t}function Zi(n,e){const t={type:"integer",format:"int64"};if(!n.checks)return t;for(const r of n.checks)switch(r.kind){case"min":e.target==="jsonSchema7"?r.inclusive?W(t,"minimum",r.value,r.message,e):W(t,"exclusiveMinimum",r.value,r.message,e):(r.inclusive||(t.exclusiveMinimum=!0),W(t,"minimum",r.value,r.message,e));break;case"max":e.target==="jsonSchema7"?r.inclusive?W(t,"maximum",r.value,r.message,e):W(t,"exclusiveMaximum",r.value,r.message,e):(r.inclusive||(t.exclusiveMaximum=!0),W(t,"maximum",r.value,r.message,e));break;case"multipleOf":W(t,"multipleOf",r.value,r.message,e);break}return t}function Ui(){return{type:"boolean"}}function qi(n,e){return B(n.type._def,e)}const Ji=(n,e)=>B(n.innerType._def,e);function gs(n,e,t){const r=t??e.dateStrategy;if(Array.isArray(r))return{anyOf:r.map((s,a)=>gs(n,e,s))};switch(r){case"string":case"format:date-time":return{type:"string",format:"date-time"};case"format:date":return{type:"string",format:"date"};case"integer":return Bi(n,e)}}const Bi=(n,e)=>{const t={type:"integer",format:"unix-time"};if(e.target==="openApi3")return t;for(const r of n.checks)switch(r.kind){case"min":W(t,"minimum",r.value,r.message,e);break;case"max":W(t,"maximum",r.value,r.message,e);break}return t};function Gi(n,e){return{...B(n.innerType._def,e),default:n.defaultValue()}}function zi(n,e,t){return e.effectStrategy==="input"?B(n.schema._def,e,t):{}}function Vi(n){return{type:"string",enum:[...n.values]}}const Wi=n=>"type"in n&&n.type==="string"?!1:"allOf"in n;function Hi(n,e){const t=[B(n.left._def,{...e,currentPath:[...e.currentPath,"allOf","0"]}),B(n.right._def,{...e,currentPath:[...e.currentPath,"allOf","1"]})].filter(a=>!!a);let r=e.target==="jsonSchema2019-09"?{unevaluatedProperties:!1}:void 0;const s=[];return t.forEach(a=>{if(Wi(a))s.push(...a.allOf),a.unevaluatedProperties===void 0&&(r=void 0);else{let i=a;if("additionalProperties"in a&&a.additionalProperties===!1){const{additionalProperties:u,...l}=a;i=l}else r=void 0;s.push(i)}}),s.length?{allOf:s,...r}:void 0}function Ki(n,e){const t=typeof n.value;return t!=="bigint"&&t!=="number"&&t!=="boolean"&&t!=="string"?{type:Array.isArray(n.value)?"array":"object"}:e.target==="openApi3"?{type:t==="bigint"?"integer":t,enum:[n.value]}:{type:t==="bigint"?"integer":t,const:n.value}}let yr;const it={cuid:/^[cC][^\s-]{8,}$/,cuid2:/^[0-9a-z]+$/,ulid:/^[0-9A-HJKMNP-TV-Z]{26}$/,email:/^(?!\.)(?!.*\.\.)([a-zA-Z0-9_'+\-\.]*)[a-zA-Z0-9_+-]@([a-zA-Z0-9][a-zA-Z0-9\-]*\.)+[a-zA-Z]{2,}$/,emoji:()=>(yr===void 0&&(yr=RegExp("^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$","u")),yr),base64:/^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/,nanoid:/^[a-zA-Z0-9_-]{21}$/};function _s(n,e){const t={type:"string"};function r(s){return e.patternStrategy==="escape"?Yi(s):s}if(n.checks)for(const s of n.checks)switch(s.kind){case"min":W(t,"minLength",typeof t.minLength=="number"?Math.max(t.minLength,s.value):s.value,s.message,e);break;case"max":W(t,"maxLength",typeof t.maxLength=="number"?Math.min(t.maxLength,s.value):s.value,s.message,e);break;case"email":switch(e.emailStrategy){case"format:email":Te(t,"email",s.message,e);break;case"format:idn-email":Te(t,"idn-email",s.message,e);break;case"pattern:zod":ke(t,it.email,s.message,e);break}break;case"url":Te(t,"uri",s.message,e);break;case"uuid":Te(t,"uuid",s.message,e);break;case"regex":ke(t,s.regex,s.message,e);break;case"cuid":ke(t,it.cuid,s.message,e);break;case"cuid2":ke(t,it.cuid2,s.message,e);break;case"startsWith":ke(t,RegExp(`^${r(s.value)}`),s.message,e);break;case"endsWith":ke(t,RegExp(`${r(s.value)}$`),s.message,e);break;case"datetime":Te(t,"date-time",s.message,e);break;case"date":Te(t,"date",s.message,e);break;case"time":Te(t,"time",s.message,e);break;case"duration":Te(t,"duration",s.message,e);break;case"length":W(t,"minLength",typeof t.minLength=="number"?Math.max(t.minLength,s.value):s.value,s.message,e),W(t,"maxLength",typeof t.maxLength=="number"?Math.min(t.maxLength,s.value):s.value,s.message,e);break;case"includes":{ke(t,RegExp(r(s.value)),s.message,e);break}case"ip":{s.version!=="v6"&&Te(t,"ipv4",s.message,e),s.version!=="v4"&&Te(t,"ipv6",s.message,e);break}case"emoji":ke(t,it.emoji,s.message,e);break;case"ulid":{ke(t,it.ulid,s.message,e);break}case"base64":{switch(e.base64Strategy){case"format:binary":{Te(t,"binary",s.message,e);break}case"contentEncoding:base64":{W(t,"contentEncoding","base64",s.message,e);break}case"pattern:zod":{ke(t,it.base64,s.message,e);break}}break}case"nanoid":ke(t,it.nanoid,s.message,e)}return t}const Yi=n=>Array.from(n).map(e=>/[a-zA-Z0-9]/.test(e)?e:`\\${e}`).join(""),Te=(n,e,t,r)=>{var s;n.format||(s=n.anyOf)!=null&&s.some(a=>a.format)?(n.anyOf||(n.anyOf=[]),n.format&&(n.anyOf.push({format:n.format,...n.errorMessage&&r.errorMessages&&{errorMessage:{format:n.errorMessage.format}}}),delete n.format,n.errorMessage&&(delete n.errorMessage.format,Object.keys(n.errorMessage).length===0&&delete n.errorMessage)),n.anyOf.push({format:e,...t&&r.errorMessages&&{errorMessage:{format:t}}})):W(n,"format",e,t,r)},ke=(n,e,t,r)=>{var s;n.pattern||(s=n.allOf)!=null&&s.some(a=>a.pattern)?(n.allOf||(n.allOf=[]),n.pattern&&(n.allOf.push({pattern:n.pattern,...n.errorMessage&&r.errorMessages&&{errorMessage:{pattern:n.errorMessage.pattern}}}),delete n.pattern,n.errorMessage&&(delete n.errorMessage.pattern,Object.keys(n.errorMessage).length===0&&delete n.errorMessage)),n.allOf.push({pattern:ys(e,r),...t&&r.errorMessages&&{errorMessage:{pattern:t}}})):W(n,"pattern",ys(e,r),t,r)},ys=(n,e)=>{var c;const t=typeof n=="function"?n():n;if(!e.applyRegexFlags||!t.flags)return t.source;const r={i:t.flags.includes("i"),m:t.flags.includes("m"),s:t.flags.includes("s")},s=r.i?t.source.toLowerCase():t.source;let a="",i=!1,u=!1,l=!1;for(let p=0;p<s.length;p++){if(i){a+=s[p],i=!1;continue}if(r.i){if(u){if(s[p].match(/[a-z]/)){l?(a+=s[p],a+=`${s[p-2]}-${s[p]}`.toUpperCase(),l=!1):s[p+1]==="-"&&((c=s[p+2])!=null&&c.match(/[a-z]/))?(a+=s[p],l=!0):a+=`${s[p]}${s[p].toUpperCase()}`;continue}}else if(s[p].match(/[a-z]/)){a+=`[${s[p]}${s[p].toUpperCase()}]`;continue}}if(r.m){if(s[p]==="^"){a+=`(^|(?<=[\r
]))`;continue}else if(s[p]==="$"){a+=`($|(?=[\r
]))`;continue}}if(r.s&&s[p]==="."){a+=u?`${s[p]}\r
`:`[${s[p]}\r
]`;continue}a+=s[p],s[p]==="\\"?i=!0:u&&s[p]==="]"?u=!1:!u&&s[p]==="["&&(u=!0)}try{const p=new RegExp(a)}catch{return console.warn(`Could not convert regex pattern at ${e.currentPath.join("/")} to a flag-independent form! Falling back to the flag-ignorant source`),t.source}return a};function vs(n,e){var r,s,a,i;if(e.target==="openApi3"&&((r=n.keyType)==null?void 0:r._def.typeName)===S.ZodEnum)return{type:"object",required:n.keyType._def.values,properties:n.keyType._def.values.reduce((u,l)=>({...u,[l]:B(n.valueType._def,{...e,currentPath:[...e.currentPath,"properties",l]})??{}}),{}),additionalProperties:!1};const t={type:"object",additionalProperties:B(n.valueType._def,{...e,currentPath:[...e.currentPath,"additionalProperties"]})??{}};if(e.target==="openApi3")return t;if(((s=n.keyType)==null?void 0:s._def.typeName)===S.ZodString&&((a=n.keyType._def.checks)!=null&&a.length)){const u=Object.entries(_s(n.keyType._def,e)).reduce((l,[c,p])=>c==="type"?l:{...l,[c]:p},{});return{...t,propertyNames:u}}else if(((i=n.keyType)==null?void 0:i._def.typeName)===S.ZodEnum)return{...t,propertyNames:{enum:n.keyType._def.values}};return t}function Xi(n,e){if(e.mapStrategy==="record")return vs(n,e);const t=B(n.keyType._def,{...e,currentPath:[...e.currentPath,"items","items","0"]})||{},r=B(n.valueType._def,{...e,currentPath:[...e.currentPath,"items","items","1"]})||{};return{type:"array",maxItems:125,items:{type:"array",items:[t,r],minItems:2,maxItems:2}}}function Qi(n){const e=n.values,r=Object.keys(n.values).filter(a=>typeof e[e[a]]!="number").map(a=>e[a]),s=Array.from(new Set(r.map(a=>typeof a)));return{type:s.length===1?s[0]==="string"?"string":"number":["string","number"],enum:r}}function eo(){return{not:{}}}function to(n){return n.target==="openApi3"?{enum:["null"],nullable:!0}:{type:"null"}}const Zn={ZodString:"string",ZodNumber:"number",ZodBigInt:"integer",ZodBoolean:"boolean",ZodNull:"null"};function no(n,e){if(e.target==="openApi3")return ws(n,e);const t=n.options instanceof Map?Array.from(n.options.values()):n.options;if(t.every(r=>r._def.typeName in Zn&&(!r._def.checks||!r._def.checks.length))){const r=t.reduce((s,a)=>{const i=Zn[a._def.typeName];return i&&!s.includes(i)?[...s,i]:s},[]);return{type:r.length>1?r:r[0]}}else if(t.every(r=>r._def.typeName==="ZodLiteral"&&!r.description)){const r=t.reduce((s,a)=>{const i=typeof a._def.value;switch(i){case"string":case"number":case"boolean":return[...s,i];case"bigint":return[...s,"integer"];case"object":if(a._def.value===null)return[...s,"null"];case"symbol":case"undefined":case"function":default:return s}},[]);if(r.length===t.length){const s=r.filter((a,i,u)=>u.indexOf(a)===i);return{type:s.length>1?s:s[0],enum:t.reduce((a,i)=>a.includes(i._def.value)?a:[...a,i._def.value],[])}}}else if(t.every(r=>r._def.typeName==="ZodEnum"))return{type:"string",enum:t.reduce((r,s)=>[...r,...s._def.values.filter(a=>!r.includes(a))],[])};return ws(n,e)}const ws=(n,e)=>{const t=(n.options instanceof Map?Array.from(n.options.values()):n.options).map((r,s)=>B(r._def,{...e,currentPath:[...e.currentPath,"anyOf",`${s}`]})).filter(r=>!!r&&(!e.strictUnions||typeof r=="object"&&Object.keys(r).length>0));return t.length?{anyOf:t}:void 0};function ro(n,e){if(["ZodString","ZodNumber","ZodBigInt","ZodBoolean","ZodNull"].includes(n.innerType._def.typeName)&&(!n.innerType._def.checks||!n.innerType._def.checks.length))return e.target==="openApi3"||e.nullableStrategy==="property"?{type:Zn[n.innerType._def.typeName],nullable:!0}:{type:[Zn[n.innerType._def.typeName],"null"]};if(e.target==="openApi3"){const r=B(n.innerType._def,{...e,currentPath:[...e.currentPath]});return r&&"$ref"in r?{allOf:[r],nullable:!0}:r&&{...r,nullable:!0}}const t=B(n.innerType._def,{...e,currentPath:[...e.currentPath,"anyOf","0"]});return t&&{anyOf:[t,{type:"null"}]}}function so(n,e){const t={type:"number"};if(!n.checks)return t;for(const r of n.checks)switch(r.kind){case"int":t.type="integer",ts(t,"type",r.message,e);break;case"min":e.target==="jsonSchema7"?r.inclusive?W(t,"minimum",r.value,r.message,e):W(t,"exclusiveMinimum",r.value,r.message,e):(r.inclusive||(t.exclusiveMinimum=!0),W(t,"minimum",r.value,r.message,e));break;case"max":e.target==="jsonSchema7"?r.inclusive?W(t,"maximum",r.value,r.message,e):W(t,"exclusiveMaximum",r.value,r.message,e):(r.inclusive||(t.exclusiveMaximum=!0),W(t,"maximum",r.value,r.message,e));break;case"multipleOf":W(t,"multipleOf",r.value,r.message,e);break}return t}function ao(n,e){return e.removeAdditionalStrategy==="strict"?n.catchall._def.typeName==="ZodNever"?n.unknownKeys!=="strict":B(n.catchall._def,{...e,currentPath:[...e.currentPath,"additionalProperties"]})??!0:n.catchall._def.typeName==="ZodNever"?n.unknownKeys==="passthrough":B(n.catchall._def,{...e,currentPath:[...e.currentPath,"additionalProperties"]})??!0}function io(n,e){const t={type:"object",...Object.entries(n.shape()).reduce((r,[s,a])=>{var l;if(a===void 0||a._def===void 0)return r;const i=[...e.currentPath,"properties",s],u=B(a._def,{...e,currentPath:i,propertyPath:i});if(u===void 0)return r;if(e.openaiStrictMode&&a.isOptional()&&!a.isNullable()&&typeof((l=a._def)==null?void 0:l.defaultValue)>"u")throw new Error(`Zod field at \`${i.join("/")}\` uses \`.optional()\` without \`.nullable()\` which is not supported by the API. See: https://platform.openai.com/docs/guides/structured-outputs?api-mode=responses#all-fields-must-be-required`);return{properties:{...r.properties,[s]:u},required:a.isOptional()&&!e.openaiStrictMode?r.required:[...r.required,s]}},{properties:{},required:[]}),additionalProperties:ao(n,e)};return t.required.length||delete t.required,t}const oo=(n,e)=>{if(e.propertyPath&&e.currentPath.slice(0,e.propertyPath.length).toString()===e.propertyPath.toString())return B(n.innerType._def,{...e,currentPath:e.currentPath});const t=B(n.innerType._def,{...e,currentPath:[...e.currentPath,"anyOf","1"]});return t?{anyOf:[{not:{}},t]}:{}},uo=(n,e)=>{if(e.pipeStrategy==="input")return B(n.in._def,e);if(e.pipeStrategy==="output")return B(n.out._def,e);const t=B(n.in._def,{...e,currentPath:[...e.currentPath,"allOf","0"]}),r=B(n.out._def,{...e,currentPath:[...e.currentPath,"allOf",t?"1":"0"]});return{allOf:[t,r].filter(s=>s!==void 0)}};function co(n,e){return B(n.type._def,e)}function lo(n,e){const r={type:"array",uniqueItems:!0,items:B(n.valueType._def,{...e,currentPath:[...e.currentPath,"items"]})};return n.minSize&&W(r,"minItems",n.minSize.value,n.minSize.message,e),n.maxSize&&W(r,"maxItems",n.maxSize.value,n.maxSize.message,e),r}function po(n,e){return n.rest?{type:"array",minItems:n.items.length,items:n.items.map((t,r)=>B(t._def,{...e,currentPath:[...e.currentPath,"items",`${r}`]})).reduce((t,r)=>r===void 0?t:[...t,r],[]),additionalItems:B(n.rest._def,{...e,currentPath:[...e.currentPath,"additionalItems"]})}:{type:"array",minItems:n.items.length,maxItems:n.items.length,items:n.items.map((t,r)=>B(t._def,{...e,currentPath:[...e.currentPath,"items",`${r}`]})).reduce((t,r)=>r===void 0?t:[...t,r],[])}}function fo(){return{not:{}}}function ho(){return{}}const mo=(n,e)=>B(n.innerType._def,e);function B(n,e,t=!1){var i;const r=e.seen.get(n);if(e.override){const u=(i=e.override)==null?void 0:i.call(e,n,e,r,t);if(u!==ui)return u}if(r&&!t){const u=go(r,e);if(u!==void 0)return"$ref"in u&&e.seenRefs.add(u.$ref),u}const s={def:n,path:e.currentPath,jsonSchema:void 0};e.seen.set(n,s);const a=yo(n,n.typeName,e,t);return a&&vo(n,e,a),s.jsonSchema=a,a}const go=(n,e)=>{switch(e.$refStrategy){case"root":return{$ref:n.path.join("/")};case"extract-to-root":const t=n.path.slice(e.basePath.length+1).join("_");return t!==e.name&&e.nameStrategy==="duplicate-ref"&&(e.definitions[t]=n.def),{$ref:[...e.basePath,e.definitionPath,t].join("/")};case"relative":return{$ref:_o(e.currentPath,n.path)};case"none":case"seen":return n.path.length<e.currentPath.length&&n.path.every((r,s)=>e.currentPath[s]===r)?(console.warn(`Recursive reference detected at ${e.currentPath.join("/")}! Defaulting to any`),{}):e.$refStrategy==="seen"?{}:void 0}},_o=(n,e)=>{let t=0;for(;t<n.length&&t<e.length&&n[t]===e[t];t++);return[(n.length-t).toString(),...e.slice(t)].join("/")},yo=(n,e,t,r)=>{switch(e){case S.ZodString:return _s(n,t);case S.ZodNumber:return so(n,t);case S.ZodObject:return io(n,t);case S.ZodBigInt:return Zi(n,t);case S.ZodBoolean:return Ui();case S.ZodDate:return gs(n,t);case S.ZodUndefined:return fo();case S.ZodNull:return to(t);case S.ZodArray:return Li(n,t);case S.ZodUnion:case S.ZodDiscriminatedUnion:return no(n,t);case S.ZodIntersection:return Hi(n,t);case S.ZodTuple:return po(n,t);case S.ZodRecord:return vs(n,t);case S.ZodLiteral:return Ki(n,t);case S.ZodEnum:return Vi(n);case S.ZodNativeEnum:return Qi(n);case S.ZodNullable:return ro(n,t);case S.ZodOptional:return oo(n,t);case S.ZodMap:return Xi(n,t);case S.ZodSet:return lo(n,t);case S.ZodLazy:return B(n.getter()._def,t);case S.ZodPromise:return co(n,t);case S.ZodNaN:case S.ZodNever:return eo();case S.ZodEffects:return zi(n,t,r);case S.ZodAny:return Fi();case S.ZodUnknown:return ho();case S.ZodDefault:return Gi(n,t);case S.ZodBranded:return qi(n,t);case S.ZodReadonly:return mo(n,t);case S.ZodCatch:return Ji(n,t);case S.ZodPipeline:return uo(n,t);case S.ZodFunction:case S.ZodVoid:case S.ZodSymbol:return;default:return(s=>{})()}},vo=(n,e,t)=>(n.description&&(t.description=n.description,e.markdownDescription&&(t.markdownDescription=n.description)),t),wo=(n,e)=>{const t=li(e),r=typeof e=="string"?e:(e==null?void 0:e.nameStrategy)==="title"||e==null?void 0:e.name,s=B(n._def,r===void 0?t:{...t,currentPath:[...t.basePath,t.definitionPath,r]},!1)??{},a=typeof e=="object"&&e.name!==void 0&&e.nameStrategy==="title"?e.name:void 0;a!==void 0&&(s.title=a);const i=(()=>{if(di(t.definitions))return;const l={},c=new Set;for(let p=0;p<500;p++){const f=Object.entries(t.definitions).filter(([h])=>!c.has(h));if(f.length===0)break;for(const[h,b]of f)l[h]=B(or(b),{...t,currentPath:[...t.basePath,t.definitionPath,h]},!0)??{},c.add(h)}return l})(),u=r===void 0?i?{...s,[t.definitionPath]:i}:s:t.nameStrategy==="duplicate-ref"?{...s,...i||t.seenRefs.size?{[t.definitionPath]:{...i,...t.seenRefs.size?{[r]:s}:void 0}}:void 0}:{$ref:[...t.$refStrategy==="relative"?[]:t.basePath,t.definitionPath,r].join("/"),[t.definitionPath]:{...i,[r]:s}};return t.target==="jsonSchema7"?u.$schema="http://json-schema.org/draft-07/schema#":t.target==="jsonSchema2019-09"&&(u.$schema="https://json-schema.org/draft/2019-09/schema#"),u};function bo(n,{parser:e,callback:t}){const r={...n};return Object.defineProperties(r,{$brand:{value:"auto-parseable-tool",enumerable:!1},$parseRaw:{value:e,enumerable:!1},$callback:{value:t,enumerable:!1}}),r}function bs(n,e){return wo(n,{openaiStrictMode:!0,name:e.name,nameStrategy:"duplicate-ref",$refStrategy:"extract-to-root",nullableStrategy:"property"})}function xo(n,e,t){return Cn({type:"json_schema",...t,name:e,strict:!0,schema:bs(n,{name:e})},r=>n.parse(JSON.parse(r)))}function So(n){return bo({type:"function",name:n.name,parameters:bs(n.parameters,{name:n.name}),strict:!0},{callback:n.function,parser:e=>n.parameters.parse(JSON.parse(e))})}class Ge extends Error{constructor(t,r){super(t);_(this,"state");this.state=r}}class Io extends Ge{}class xs extends Ge{}class me extends Ge{}class se extends Ge{}class Ss extends Ge{constructor(t,r,s){super(t,s);_(this,"error");this.error=r}}class To extends Ge{constructor(t,r,s){super(t,s);_(this,"error");this.error=r}}class Is extends Ge{constructor(t,r,s){super(t,s);_(this,"result");this.result=r}}class Un extends Ge{constructor(t,r,s){super(t,s);_(this,"result");this.result=r}}function ot(n){return typeof n=="object"&&n!==null&&"_def"in n&&typeof n._def=="object"&&n._def!==null&&"typeName"in n._def&&n._def.typeName==="ZodObject"}function ko(n){return typeof n=="object"&&n!==null&&"input"in n&&typeof n.input=="string"}function qn(n){if(n=n.replace(/\s/g,"_"),n=n.replace(/[^a-zA-Z0-9]/g,"_"),n.length===0)throw new Error("Tool name cannot be empty");return n}function vr(n,e){const t=r=>JSON.parse(r);if(ot(n)){const r=So({name:e,parameters:n,function:()=>{}});return{schema:r.parameters,parser:r.$parseRaw}}else if(typeof n=="object"&&n!==null)return{schema:n,parser:t};throw new se("Input type is not a ZodObject or a valid JSON schema")}function Ts(n){if(n==="text")return"text";if(ot(n)){const e=xo(n,"output");return{type:e.type,name:e.name,strict:e.strict||!1,schema:e.schema}}return n}function Ao(n){return n&&n.__esModule&&Object.prototype.hasOwnProperty.call(n,"default")?n.default:n}var Jn={exports:{}},wr,ks;function Co(){if(ks)return wr;ks=1;var n=1e3,e=n*60,t=e*60,r=t*24,s=r*7,a=r*365.25;wr=function(p,f){f=f||{};var h=typeof p;if(h==="string"&&p.length>0)return i(p);if(h==="number"&&isFinite(p))return f.long?l(p):u(p);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(p))};function i(p){if(p=String(p),!(p.length>100)){var f=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(p);if(f){var h=parseFloat(f[1]),b=(f[2]||"ms").toLowerCase();switch(b){case"years":case"year":case"yrs":case"yr":case"y":return h*a;case"weeks":case"week":case"w":return h*s;case"days":case"day":case"d":return h*r;case"hours":case"hour":case"hrs":case"hr":case"h":return h*t;case"minutes":case"minute":case"mins":case"min":case"m":return h*e;case"seconds":case"second":case"secs":case"sec":case"s":return h*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return h;default:return}}}}function u(p){var f=Math.abs(p);return f>=r?Math.round(p/r)+"d":f>=t?Math.round(p/t)+"h":f>=e?Math.round(p/e)+"m":f>=n?Math.round(p/n)+"s":p+"ms"}function l(p){var f=Math.abs(p);return f>=r?c(p,f,r,"day"):f>=t?c(p,f,t,"hour"):f>=e?c(p,f,e,"minute"):f>=n?c(p,f,n,"second"):p+" ms"}function c(p,f,h,b){var y=f>=h*1.5;return Math.round(p/h)+" "+b+(y?"s":"")}return wr}var br,As;function Eo(){if(As)return br;As=1;function n(e){r.debug=r,r.default=r,r.coerce=c,r.disable=u,r.enable=a,r.enabled=l,r.humanize=Co(),r.destroy=p,Object.keys(e).forEach(f=>{r[f]=e[f]}),r.names=[],r.skips=[],r.formatters={};function t(f){let h=0;for(let b=0;b<f.length;b++)h=(h<<5)-h+f.charCodeAt(b),h|=0;return r.colors[Math.abs(h)%r.colors.length]}r.selectColor=t;function r(f){let h,b=null,y,w;function O(...R){if(!O.enabled)return;const U=O,X=Number(new Date),G=X-(h||X);U.diff=G,U.prev=h,U.curr=X,h=X,R[0]=r.coerce(R[0]),typeof R[0]!="string"&&R.unshift("%O");let V=0;R[0]=R[0].replace(/%([a-zA-Z%])/g,(ee,ve)=>{if(ee==="%%")return"%";V++;const Ce=r.formatters[ve];if(typeof Ce=="function"){const Ie=R[V];ee=Ce.call(U,Ie),R.splice(V,1),V--}return ee}),r.formatArgs.call(U,R),(U.log||r.log).apply(U,R)}return O.namespace=f,O.useColors=r.useColors(),O.color=r.selectColor(f),O.extend=s,O.destroy=r.destroy,Object.defineProperty(O,"enabled",{enumerable:!0,configurable:!1,get:()=>b!==null?b:(y!==r.namespaces&&(y=r.namespaces,w=r.enabled(f)),w),set:R=>{b=R}}),typeof r.init=="function"&&r.init(O),O}function s(f,h){const b=r(this.namespace+(typeof h>"u"?":":h)+f);return b.log=this.log,b}function a(f){r.save(f),r.namespaces=f,r.names=[],r.skips=[];const h=(typeof f=="string"?f:"").trim().replace(/\s+/g,",").split(",").filter(Boolean);for(const b of h)b[0]==="-"?r.skips.push(b.slice(1)):r.names.push(b)}function i(f,h){let b=0,y=0,w=-1,O=0;for(;b<f.length;)if(y<h.length&&(h[y]===f[b]||h[y]==="*"))h[y]==="*"?(w=y,O=b,y++):(b++,y++);else if(w!==-1)y=w+1,O++,b=O;else return!1;for(;y<h.length&&h[y]==="*";)y++;return y===h.length}function u(){const f=[...r.names,...r.skips.map(h=>"-"+h)].join(",");return r.enable(""),f}function l(f){for(const h of r.skips)if(i(f,h))return!1;for(const h of r.names)if(i(f,h))return!0;return!1}function c(f){return f instanceof Error?f.stack||f.message:f}function p(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")}return r.enable(r.load()),r}return br=n,br}var Cs;function Oo(){return Cs||(Cs=1,(function(n,e){e.formatArgs=r,e.save=s,e.load=a,e.useColors=t,e.storage=i(),e.destroy=(()=>{let l=!1;return()=>{l||(l=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"];function t(){if(typeof window<"u"&&window.process&&(window.process.type==="renderer"||window.process.__nwjs))return!0;if(typeof navigator<"u"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;let l;return typeof document<"u"&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||typeof window<"u"&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||typeof navigator<"u"&&navigator.userAgent&&(l=navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/))&&parseInt(l[1],10)>=31||typeof navigator<"u"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)}function r(l){if(l[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+l[0]+(this.useColors?"%c ":" ")+"+"+n.exports.humanize(this.diff),!this.useColors)return;const c="color: "+this.color;l.splice(1,0,c,"color: inherit");let p=0,f=0;l[0].replace(/%[a-zA-Z%]/g,h=>{h!=="%%"&&(p++,h==="%c"&&(f=p))}),l.splice(f,0,c)}e.log=console.debug||console.log||(()=>{});function s(l){try{l?e.storage.setItem("debug",l):e.storage.removeItem("debug")}catch{}}function a(){let l;try{l=e.storage.getItem("debug")||e.storage.getItem("DEBUG")}catch{}return!l&&typeof process<"u"&&"env"in process&&(l=process.env.DEBUG),l}function i(){try{return localStorage}catch{}}n.exports=Eo()(e);const{formatters:u}=n.exports;u.j=function(l){try{return JSON.stringify(l)}catch(c){return"[UnexpectedJSONParseError]: "+c.message}}})(Jn,Jn.exports)),Jn.exports}var Ro=Oo();const No=Ao(Ro);function Es(){return Lo()}function Os(n){const e=Es();return typeof e<"u"&&(e[n]==="true"||e[n]==="1")}const Rs={get disabled(){return!0}},Ns={get dontLogModelData(){return Os("OPENAI_AGENTS_DONT_LOG_MODEL_DATA")},get dontLogToolData(){return Os("OPENAI_AGENTS_DONT_LOG_TOOL_DATA")}},Do=Ns.dontLogModelData,Po=Ns.dontLogToolData;function Ds(n="openai-agents"){return{namespace:n,debug:No(n),error:console.error,warn:console.warn,dontLogModelData:Do,dontLogToolData:Po}}const E=Ds("openai-agents:core");function ze(n){if(n==null)return String(n);if(typeof n=="string")return n;if(typeof n=="object")try{return JSON.stringify(n)}catch{return"[object with circular references]"}return String(n)}function Mo(n,e){return`An error occurred while running the tool. Please try again. Error: ${e instanceof Error?e.toString():String(e)}`}function Bn(n){const e=n.name?qn(n.name):qn(n.execute.name),t=typeof n.errorFunction>"u"?Mo:n.errorFunction;if(!e)throw new Error("Tool name cannot be empty. Either name your function or provide a name in the options.");const r=n.strict??!0;if(!r&&ot(n.parameters))throw new se("Strict mode is required for Zod parameters");const{parser:s,schema:a}=vr(n.parameters,e);async function i(p,f,h){const[b,y]=await te(()=>s(f));if(b!==null)throw E.dontLogToolData?E.debug(`Invalid JSON input for tool ${e}`):E.debug(`Invalid JSON input for tool ${e}: ${f}`),new me("Invalid JSON input for tool");E.dontLogToolData?E.debug(`Invoking tool ${e}`):E.debug(`Invoking tool ${e} with input ${f}`);const w=await n.execute(y,p,h),O=ze(w);return E.dontLogToolData?E.debug(`Tool ${e} completed`):E.debug(`Tool ${e} returned: ${O}`),w}async function u(p,f,h){return i(p,f,h).catch(b=>{if(t){const y=en();return y==null||y.setError({message:"Error running tool (non-fatal)",data:{tool_name:e,error:b.toString()}}),t(p,b)}throw b})}const l=typeof n.needsApproval=="function"?n.needsApproval:async()=>typeof n.needsApproval=="boolean"?n.needsApproval:!1,c=typeof n.isEnabled=="function"?async(p,f)=>{const h=n.isEnabled;return!!await h({runContext:p,agent:f})}:async()=>typeof n.isEnabled=="boolean"?n.isEnabled:!0;return{type:"function",name:e,description:n.description,parameters:a,strict:r,invoke:u,needsApproval:l,isEnabled:c}}m({name:d(),description:d().optional(),inputSchema:m({type:g("object"),properties:re(d(),Z()),required:J(d()),additionalProperties:at()})});const xr={};async function jo({server:n,convertSchemasToStrict:e,runContext:t,agent:r}){return n.cacheToolsList&&xr[n.name]?xr[n.name].map(s=>Ps(s,n,e)):Au(async s=>{const a=await n.listTools();let i=a;if(t&&r){const l={runContext:t,agent:r,serverName:n.name},c=[];for(const p of a){const f=n.toolFilter;if(f)if(typeof f=="function"){if(!await f(l,p)){E.debug(`MCP Tool (server: ${n.name}, tool: ${p.name}) is blocked by the callable filter.`);continue}}else{const h=f.allowedToolNames??[],b=f.blockedToolNames??[];if(h.length>0||b.length>0){const y=h.length>0?h.includes(p.name):!0,w=b.length>0?b.includes(p.name):!1;if(!y||w){w?E.debug(`MCP Tool (server: ${n.name}, tool: ${p.name}) is blocked by the static filter.`):y||E.debug(`MCP Tool (server: ${n.name}, tool: ${p.name}) is not allowed by the static filter.`);continue}}}c.push(p)}i=c}s.spanData.result=i.map(l=>l.name);const u=i.map(l=>Ps(l,n,e));return n.cacheToolsList&&(xr[n.name]=i),u},{data:{server:n.name}})}async function $o(n,e,t,r=!1){const s=Array.isArray(n)?{mcpServers:n,runContext:e,agent:t,convertSchemasToStrict:r}:n,{mcpServers:a,convertSchemasToStrict:i=!1,runContext:u,agent:l}=s,c=[],p=new Set;for(const f of a){const h=await jo({server:f,convertSchemasToStrict:i,runContext:u,agent:l}),y=[...new Set(h.map(w=>w.name))].filter(w=>p.has(w));if(y.length>0)throw new se(`Duplicate tool names found across MCP servers: ${y.join(", ")}`);for(const w of h)p.add(w.name),c.push(w)}return c}function Ps(n,e,t){var i,u,l,c;async function r(p,f){let h={};typeof p=="string"&&p?h=JSON.parse(p):typeof p=="object"&&p!=null&&(h=p);const b=en();b&&(b.spanData.mcp_data={server:e.name});const y=await e.callTool(n.name,h);return y.length===1?y[0]:y}const s={...n.inputSchema,type:((i=n.inputSchema)==null?void 0:i.type)??"object",properties:((u=n.inputSchema)==null?void 0:u.properties)??{},required:((l=n.inputSchema)==null?void 0:l.required)??[],additionalProperties:((c=n.inputSchema)==null?void 0:c.additionalProperties)??!1};if(t||s.additionalProperties===!0)try{const p=Fo(s);return Bn({name:n.name,description:n.description||"",parameters:p,strict:!0,execute:r})}catch(p){E.warn(`Error converting MCP schema to strict mode: ${p}`)}const a={...s,additionalProperties:!0};return Bn({name:n.name,description:n.description||"",parameters:a,strict:!1,execute:r})}function Fo(n){const e={...n,additionalProperties:!1};return e.required||(e.required=[]),e}function Lo(){return{}}class Gn{constructor(){I(this,Rt,new EventTarget);I(this,ht,new Map)}on(e,t){const r=e;let s=o(this,ht).get(r);s||(s=new Map,o(this,ht).set(r,s));let a=s.get(t);a||(a=new Set,s.set(t,a));const i=(u=>t(...u.detail??[]));return a.add(i),o(this,Rt).addEventListener(r,i),this}off(e,t){const r=e,s=o(this,ht).get(r),a=s==null?void 0:s.get(t);if(a!=null&&a.size){for(const i of a)o(this,Rt).removeEventListener(r,i);s==null||s.delete(t),(s==null?void 0:s.size)===0&&o(this,ht).delete(r)}return this}emit(e,...t){const r=new CustomEvent(e,{detail:t});return o(this,Rt).dispatchEvent(r)}once(e,t){const r=(...s)=>{this.off(e,r),t(...s)};return this.on(e,r),this}}Rt=new WeakMap,ht=new WeakMap;const Ms=()=>typeof crypto<"u"&&crypto.randomUUID?crypto.randomUUID():"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(n){const e=Math.random()*16|0;return(n==="x"?e:e&3|8).toString(16)}),Zo=class{constructor(){}pipeTo(e,t){}pipeThrough(e,t){}},Uo=globalThis.ReadableStream,qo=globalThis.TransformStream;class Jo{constructor(){_(this,"context",null)}run(e,t){return this.context=e,t()}getStore(){return this.context}enterWith(e){this.context=e}}class Bo{constructor(){}setTimeout(e,t){const r=setTimeout(e,t);return r.ref=typeof r.ref=="function"?r.ref:()=>r,r.unref=typeof r.unref=="function"?r.unref:()=>r,r.hasRef=typeof r.hasRef=="function"?r.hasRef:()=>!0,r.refresh=typeof r.refresh=="function"?r.refresh:()=>r,r}clearTimeout(e){window.clearTimeout(e)}}const Go=new Bo;class Sr{on(e,t){return this.eventEmitter.on(e,t),this.eventEmitter}off(e,t){return this.eventEmitter.off(e,t),this.eventEmitter}emit(e,...t){return this.eventEmitter.emit(e,...t)}once(e,t){return this.eventEmitter.once(e,t),this.eventEmitter}}class zo extends Sr{constructor(){super(...arguments);_(this,"eventEmitter",new Gn)}}class Vo extends Sr{constructor(){super(...arguments);_(this,"eventEmitter",new Gn)}}const Wo="OPENAI_DEFAULT_MODEL";function zn(n){return n.startsWith("gpt-5-chat")?!1:n.startsWith("gpt-5")}function js(){return zn($s())}function $s(){var e;return((e=Es()[Wo])==null?void 0:e.toLowerCase())??"gpt-4.1"}function Ho(n){const e=$s();return zn(e)?{reasoning:{effort:"low"},text:{verbosity:"low"}}:{}}function Fs(n){return JSON.stringify({assistant:n.name})}function Ko(n){return`transfer_to_${qn(n.name)}`}function Yo(n){return`Handoff to the ${n.name} agent to handle the request. ${n.handoffDescription??""}`}class Ls{constructor(e,t){_(this,"toolName");_(this,"toolDescription");_(this,"inputJsonSchema",{type:"object",properties:{},required:[],additionalProperties:!1});_(this,"strictJsonSchema",!0);_(this,"onInvokeHandoff");_(this,"agentName");_(this,"inputFilter");_(this,"agent");_(this,"isEnabled",async()=>!0);this.agentName=e.name,this.onInvokeHandoff=t,this.toolName=Ko(e),this.toolDescription=Yo(e),this.agent=e}getHandoffAsFunctionTool(){return{type:"function",name:this.toolName,description:this.toolDescription,parameters:this.inputJsonSchema,strict:this.strictJsonSchema}}}function Zs(n,e={}){let t;const r=!!e.onHandoff,s=!!e.inputType;if(!(r===s))throw new se("You must provide either both `onHandoff` and `inputType` or neither.");async function i(l,c){var p;if(t){if(!c)throw Et({message:`Handoff function expected non empty input but got: ${c}`,data:{details:"input is empty"}}),new me("Handoff function expected non empty input");try{const f=await t(c);e.onHandoff&&await e.onHandoff(l,f)}catch(f){throw Et({message:"Invalid JSON provided",data:{}}),E.dontLogToolData||E.error(`Invalid JSON when parsing: ${c}. Error: ${f}`),new me("Invalid JSON provided")}}else await((p=e.onHandoff)==null?void 0:p.call(e,l));return n}const u=new Ls(n,i);if(typeof e.isEnabled=="function"){const l=e.isEnabled;u.isEnabled=async({runContext:c,agent:p})=>!!await l({runContext:c,agent:p})}else typeof e.isEnabled=="boolean"&&(u.isEnabled=async()=>e.isEnabled);if(e.inputType){const l=vr(e.inputType,u.toolName);u.inputJsonSchema=l.schema,u.strictJsonSchema=!0,t=l.parser}return e.toolNameOverride&&(u.toolName=e.toolNameOverride),e.toolDescriptionOverride&&(u.toolDescription=e.toolDescriptionOverride),e.inputFilter&&(u.inputFilter=e.inputFilter),u}function Xo(n){return n instanceof Ls?n:Zs(n)}function Us(n){if(n.type!=="message"||n.role!=="assistant")return;const e=n.content[n.content.length-1];if(e.type==="output_text")return e.text}function Qo(n){return n.output.length===0?"":Us(n.output[n.output.length-1])||""}const Ir=new WeakMap;function eu(n,e){n&&Ir.set(n,e)}function tu(n){const e=Ir.get(n);return e&&Ir.delete(n),e}const nu=m({input:d()}),Nt=class Nt extends zo{constructor(t){super();_(this,"name");_(this,"instructions");_(this,"prompt");_(this,"handoffDescription");_(this,"handoffs");_(this,"model");_(this,"modelSettings");_(this,"tools");_(this,"mcpServers");_(this,"inputGuardrails");_(this,"outputGuardrails");_(this,"outputType","text");_(this,"toolUseBehavior");_(this,"resetToolChoice");if(typeof t.name!="string"||t.name.trim()==="")throw new se("Agent must have a name.");if(this.name=t.name,this.instructions=t.instructions??Nt.DEFAULT_MODEL_PLACEHOLDER,this.prompt=t.prompt,this.handoffDescription=t.handoffDescription??"",this.handoffs=t.handoffs??[],this.model=t.model??"",this.modelSettings=t.modelSettings??Ho(),this.tools=t.tools??[],this.mcpServers=t.mcpServers??[],this.inputGuardrails=t.inputGuardrails??[],this.outputGuardrails=t.outputGuardrails??[],t.outputType&&(this.outputType=t.outputType),this.toolUseBehavior=t.toolUseBehavior??"run_llm_again",this.resetToolChoice=t.resetToolChoice??!0,t.model!==void 0&&js()&&(typeof t.model!="string"||!zn(t.model))&&t.modelSettings===void 0&&(this.modelSettings={}),(t.handoffOutputTypeWarningEnabled===void 0||t.handoffOutputTypeWarningEnabled)&&this.handoffs&&this.outputType){const r=new Set([JSON.stringify(this.outputType)]);for(const s of this.handoffs)"outputType"in s&&s.outputType?r.add(JSON.stringify(s.outputType)):"agent"in s&&s.agent.outputType&&r.add(JSON.stringify(s.agent.outputType));r.size>1&&E.warn(`[Agent] Warning: Handoff agents have different output types: ${Array.from(r).join(", ")}. You can make it type-safe by using Agent.create({ ... }) method instead.`)}}static create(t){return new Nt({...t,handoffs:t.handoffs,outputType:t.outputType,handoffOutputTypeWarningEnabled:!1})}get outputSchemaName(){if(this.outputType==="text")return"text";if(ot(this.outputType))return"ZodOutput";if(typeof this.outputType=="object")return this.outputType.name;throw new Error(`Unknown output type: ${this.outputType}`)}clone(t){return new Nt({...this,...t})}asTool(t){const{toolName:r,toolDescription:s,customOutputExtractor:a,needsApproval:i,runConfig:u,runOptions:l,isEnabled:c}=t;return Bn({name:r??qn(this.name),description:s??"",parameters:nu,strict:!0,needsApproval:i,isEnabled:c,execute:async(p,f,h)=>{if(!ko(p))throw new me("Agent tool called with invalid input");const y=await new Bu(u??{}).run(this,p.input,{context:f,...l??{}}),w=typeof this.toolUseBehavior=="object"&&this.toolUseBehavior!==null&&"stopAtToolNames"in this.toolUseBehavior;typeof a!="function"&&w&&E.debug(`You're passing the agent (name: ${this.name}) with toolUseBehavior.stopAtToolNames configured as a tool to a different agent; this may not work as you expect. You may want to have a wrapper function tool to consistently return the final output.`);const O=typeof a=="function"?await a(y):Qo(y.rawResponses[y.rawResponses.length-1]);return h!=null&&h.toolCall&&eu(h.toolCall,y),O}})}async getSystemPrompt(t){return typeof this.instructions=="function"?await this.instructions(t,this):this.instructions}async getPrompt(t){return typeof this.prompt=="function"?await this.prompt(t,this):this.prompt}async getMcpTools(t){return this.mcpServers.length>0?$o({mcpServers:this.mcpServers,runContext:t,agent:this,convertSchemasToStrict:!1}):[]}async getAllTools(t){const r=await this.getMcpTools(t),s=[];for(const a of this.tools){if(a.type==="function"){const i=a.isEnabled;if(!(typeof i=="function"?await i(t,this):typeof i=="boolean"?i:!0))continue}s.push(a)}return[...r,...s]}async getEnabledHandoffs(t){var a;const r=((a=this.handoffs)==null?void 0:a.map(i=>Xo(i)))??[],s=[];for(const i of r)await i.isEnabled({runContext:t,agent:this})&&s.push(i);return s}processFinalOutput(t){if(this.outputType==="text")return t;if(typeof this.outputType=="object"){const r=JSON.parse(t);return ot(this.outputType)?this.outputType.parse(r):r}throw new Error(`Unknown output type: ${this.outputType}`)}toJSON(){return{name:this.name}}};_(Nt,"DEFAULT_MODEL_PLACEHOLDER","");let ut=Nt;function qs({name:n,execute:e}){return{type:"input",name:n,guardrailFunction:e,async run(t){return{guardrail:{type:"input",name:n},output:await e(t)}}}}function Tr({name:n,execute:e}){return{type:"output",name:n,guardrailFunction:e,async run(t){return{guardrail:{type:"output",name:n},agent:t.agent,agentOutput:t.agentOutput,output:await e(t)}}}}function ru(){throw new Error("No default model provider set. Make sure to set a provider using setDefaultModelProvider before calling getDefaultModelProvider or pass an explicit provider.")}const ae=m({providerData:re(d(),Z()).optional()}),ct=ae.extend({id:d().optional()}),su=ae.extend({type:g("refusal"),refusal:d()}),au=ae.extend({type:g("output_text"),text:d()}),Js=ae.extend({type:g("input_text"),text:d()}),iu=ae.extend({type:g("reasoning_text"),text:d()}),ou=ae.extend({type:g("input_image"),image:d().or(m({id:d()})).describe("Could be a URL, base64 or an object with a file ID.")}),uu=ae.extend({type:g("input_file"),file:d().describe("Either base64 encoded file data or a publicly accessible file URL").or(m({id:d().describe("OpenAI file ID")})).or(m({url:d().describe("Publicly accessible PDF file URL")})).describe("Contents of the file or an object with a file ID.")}),Bs=ae.extend({type:g("audio"),audio:d().or(m({id:d()})).describe("Base64 encoded audio data or file id"),format:d().nullable().optional(),transcript:d().nullable().optional()}),cu=ae.extend({type:g("image"),image:d().describe("Base64 encoded image data")}),du=ae.extend({type:g("text"),text:d()}),lu=ae.extend({type:g("image"),data:d().describe("Base64 encoded image data"),mediaType:d().describe("IANA media type of the image")}),pu=ae.extend({type:g("computer_screenshot"),data:d().describe("Base64 encoded image data or URL")}),fu=he("type",[m({type:g("screenshot")}),m({type:g("click"),x:A(),y:A(),button:oe(["left","right","wheel","back","forward"])}),m({type:g("double_click"),x:A(),y:A()}),m({type:g("scroll"),x:A(),y:A(),scroll_x:A(),scroll_y:A()}),m({type:g("type"),text:d()}),m({type:g("wait")}),m({type:g("move"),x:A(),y:A()}),m({type:g("keypress"),keys:J(d())}),m({type:g("drag"),path:J(m({x:A(),y:A()}))})]),hu=he("type",[au,su,Bs,cu]),kr=ct.extend({type:g("message").optional()}),Vn=kr.extend({role:g("assistant"),status:oe(["in_progress","completed","incomplete"]),content:J(hu)}),mu=he("type",[Js,ou,uu,Bs]),Gs=kr.extend({role:g("user"),content:J(mu).or(d())}),zs=kr.extend({role:g("system"),content:d()});he("role",[zs,Vn,Gs]);const Kt=ct.extend({type:g("hosted_tool_call"),name:d().describe("The name of the hosted tool"),arguments:d().describe("The arguments of the hosted tool call").optional(),status:d().optional(),output:d().optional()}),Yt=ct.extend({type:g("function_call"),callId:d().describe("The ID of the tool call"),name:d().describe("The name of the function"),status:oe(["in_progress","completed","incomplete"]).optional(),arguments:d()}),Ar=ct.extend({type:g("function_call_result"),name:d().describe("The name of the tool"),callId:d().describe("The ID of the tool call"),status:oe(["in_progress","completed","incomplete"]),output:he("type",[du,lu])}),Cr=ct.extend({type:g("computer_call"),callId:d().describe("The ID of the computer call"),status:oe(["in_progress","completed","incomplete"]),action:fu}),gu=ct.extend({type:g("computer_call_result"),callId:d().describe("The ID of the computer call"),output:pu}),_u=he("type",[Cr,Yt,Kt]),Er=ae.extend({id:d().optional(),type:g("reasoning"),content:J(Js),rawContent:J(iu).optional()}),Vs=ct.extend({type:g("unknown")}),Or=he("type",[Vn,Kt,Yt,Cr,Er,Vs]),yu=ms([Gs,Vn,zs,Kt,Yt,Cr,Ar,gu,Er,Vs]),vu=m({requests:A().optional(),inputTokens:A(),outputTokens:A(),totalTokens:A(),inputTokensDetails:re(d(),A()).optional(),outputTokensDetails:re(d(),A()).optional()}),Ws=ae.extend({type:g("output_text_delta"),delta:d()}),wu=ae.extend({type:g("response_started")}),Hs=ae.extend({type:g("response_done"),response:ae.extend({id:d(),usage:vu,output:J(Or)})}),bu=ae.extend({type:g("model"),event:Z().describe("The event from the model")});he("type",[Ws,Hs,wu,bu]);class Wn{constructor(e){_(this,"requests");_(this,"inputTokens");_(this,"outputTokens");_(this,"totalTokens");_(this,"inputTokensDetails",[]);_(this,"outputTokensDetails",[]);if(typeof e>"u")this.requests=0,this.inputTokens=0,this.outputTokens=0,this.totalTokens=0,this.inputTokensDetails=[],this.outputTokensDetails=[];else{this.requests=(e==null?void 0:e.requests)??1,this.inputTokens=(e==null?void 0:e.inputTokens)??(e==null?void 0:e.input_tokens)??0,this.outputTokens=(e==null?void 0:e.outputTokens)??(e==null?void 0:e.output_tokens)??0,this.totalTokens=(e==null?void 0:e.totalTokens)??(e==null?void 0:e.total_tokens)??0;const t=(e==null?void 0:e.inputTokensDetails)??(e==null?void 0:e.input_tokens_details);this.inputTokensDetails=t?[t]:[];const r=(e==null?void 0:e.outputTokensDetails)??(e==null?void 0:e.output_tokens_details);this.outputTokensDetails=r?[r]:[]}}add(e){this.requests+=e.requests,this.inputTokens+=e.inputTokens,this.outputTokens+=e.outputTokens,this.totalTokens+=e.totalTokens,e.inputTokensDetails&&this.inputTokensDetails.push(...e.inputTokensDetails),e.outputTokensDetails&&this.outputTokensDetails.push(...e.outputTokensDetails)}}class At{constructor(e={}){_(this,"context");_(this,"usage");I(this,ge);this.context=e,this.usage=new Wn,v(this,ge,new Map)}_rebuildApprovals(e){v(this,ge,new Map(Object.entries(e)))}isToolApproved(e){const{toolName:t,callId:r}=e,s=o(this,ge).get(t);if((s==null?void 0:s.approved)===!0&&s.rejected===!0)return E.warn("Tool is permanently approved and rejected at the same time. Approval takes precedence"),!0;if((s==null?void 0:s.approved)===!0)return!0;if((s==null?void 0:s.rejected)===!0)return!1;const a=Array.isArray(s==null?void 0:s.approved)?s.approved.includes(r):!1,i=Array.isArray(s==null?void 0:s.rejected)?s.rejected.includes(r):!1;if(a&&i)return E.warn(`Tool call ${r} is both approved and rejected at the same time. Approval takes precedence`),!0;if(a)return!0;if(i)return!1}approveTool(e,{alwaysApprove:t=!1}={}){const r=e.rawItem.name;if(t){o(this,ge).set(r,{approved:!0,rejected:[]});return}const s=o(this,ge).get(r)??{approved:[],rejected:[]};if(Array.isArray(s.approved)){const a="callId"in e.rawItem?e.rawItem.callId:e.rawItem.id;s.approved.push(a)}o(this,ge).set(r,s)}rejectTool(e,{alwaysReject:t=!1}={}){const r=e.rawItem.name;if(t){o(this,ge).set(r,{approved:!1,rejected:!0});return}const s=o(this,ge).get(r)??{approved:[],rejected:[]};if(Array.isArray(s.rejected)){const a="callId"in e.rawItem?e.rawItem.callId:e.rawItem.id;s.rejected.push(a)}o(this,ge).set(r,s)}toJSON(){return{context:this.context,usage:this.usage,approvals:Object.fromEntries(o(this,ge).entries())}}}ge=new WeakMap;function Ks(n){return n.type==="function"?{type:"function",name:n.name,description:n.description,parameters:n.parameters,strict:n.strict}:n.type==="computer"?{type:"computer",name:n.name,environment:n.computer.environment,dimensions:n.computer.dimensions}:{type:"hosted_tool",name:n.name,providerData:n.providerData}}function Ys(n){return{toolName:n.toolName,toolDescription:n.toolDescription,inputJsonSchema:n.inputJsonSchema,strictJsonSchema:n.strictJsonSchema}}class dt{constructor(){_(this,"type","base_item");_(this,"rawItem")}toJSON(){return{type:this.type,rawItem:this.rawItem}}}class Hn extends dt{constructor(t,r){super();_(this,"rawItem");_(this,"agent");_(this,"type","message_output_item");this.rawItem=t,this.agent=r}toJSON(){return{...super.toJSON(),agent:this.agent.toJSON()}}get content(){let t="";for(const r of this.rawItem.content)r.type==="output_text"&&(t+=r.text);return t}}class lt extends dt{constructor(t,r){super();_(this,"rawItem");_(this,"agent");_(this,"type","tool_call_item");this.rawItem=t,this.agent=r}toJSON(){return{...super.toJSON(),agent:this.agent.toJSON()}}}class Ct extends dt{constructor(t,r,s){super();_(this,"rawItem");_(this,"agent");_(this,"output");_(this,"type","tool_call_output_item");this.rawItem=t,this.agent=r,this.output=s}toJSON(){return{...super.toJSON(),agent:this.agent.toJSON(),output:ze(this.output)}}}class Rr extends dt{constructor(t,r){super();_(this,"rawItem");_(this,"agent");_(this,"type","reasoning_item");this.rawItem=t,this.agent=r}toJSON(){return{...super.toJSON(),agent:this.agent.toJSON()}}}class Nr extends dt{constructor(t,r){super();_(this,"rawItem");_(this,"agent");_(this,"type","handoff_call_item");this.rawItem=t,this.agent=r}toJSON(){return{...super.toJSON(),agent:this.agent.toJSON()}}}class Dr extends dt{constructor(t,r,s){super();_(this,"rawItem");_(this,"sourceAgent");_(this,"targetAgent");_(this,"type","handoff_output_item");this.rawItem=t,this.sourceAgent=r,this.targetAgent=s}toJSON(){return{...super.toJSON(),sourceAgent:this.sourceAgent.toJSON(),targetAgent:this.targetAgent.toJSON()}}}class be extends dt{constructor(t,r){super();_(this,"rawItem");_(this,"agent");_(this,"type","tool_approval_item");this.rawItem=t,this.agent=r}toJSON(){return{...super.toJSON(),agent:this.agent.toJSON()}}}function Kn(n){return async(e,...t)=>jr(async()=>{const r=n(...t);er(r);try{return r.start(),await e(r)}catch(s){throw r.setError({message:s.message,data:s.data}),s}finally{r.end(),tn()}})}function Xs(n,e){var t;return De().createSpan({...n,data:{type:"agent",name:((t=n==null?void 0:n.data)==null?void 0:t.name)??"Agent",...n==null?void 0:n.data}},e)}function xu(n,e){var t,r;return De().createSpan({...n,data:{type:"function",input:((t=n==null?void 0:n.data)==null?void 0:t.input)??"",output:((r=n==null?void 0:n.data)==null?void 0:r.output)??"",...n==null?void 0:n.data}},e)}const Qs=Kn(xu);function Su(n,e){return De().createSpan({...n,data:{type:"handoff",...n==null?void 0:n.data}},e)}const Iu=Kn(Su);function Tu(n,e){return De().createSpan({...n,data:{type:"guardrail",triggered:!1,...n==null?void 0:n.data}},e)}const ea=Kn(Tu);function ku(n,e){return De().createSpan({...n,data:{type:"mcp_tools",...n==null?void 0:n.data}},e)}const Au=Kn(ku);class Cu{constructor(e){_(this,"data");_(this,"type","raw_model_stream_event");this.data=e}}class Eu{constructor(e,t){_(this,"name");_(this,"item");_(this,"type","run_item_stream_event");this.name=e,this.item=t}}class Ou{constructor(e){_(this,"agent");_(this,"type","agent_updated_stream_event");this.agent=e}}function ta(n,e,t,r){var y;const s=[],a=[],i=[],u=[],l=[],c=[],p=new Map(r.map(w=>[w.toolName,w])),f=new Map(t.filter(w=>w.type==="function").map(w=>[w.name,w])),h=t.find(w=>w.type==="computer"),b=new Map(t.filter(w=>{var O;return w.type==="hosted_tool"&&((O=w.providerData)==null?void 0:O.type)==="mcp"}).map(w=>w).map(w=>[w.providerData.server_label,w]));for(const w of n.output){if(w.type==="message")w.role==="assistant"&&s.push(new Hn(w,e));else if(w.type==="hosted_tool_call"){s.push(new lt(w,e));const R=w.name;if(c.push(R),((y=w.providerData)==null?void 0:y.type)==="mcp_approval_request"||w.name==="mcp_approval_request"){const U=w.providerData,X=U.server_label,G=b.get(X);if(typeof G>"u"){const K=`MCP server (${X}) not found in Agent (${e.name})`;throw Et({message:K,data:{mcp_server_label:X}}),new me(K)}const V=new be({type:"hosted_tool_call",name:U.name,id:U.id,status:"in_progress",providerData:U},e);l.push({requestItem:V,mcpTool:G}),G.providerData.on_approval||s.push(V)}}else if(w.type==="reasoning")s.push(new Rr(w,e));else if(w.type==="computer_call"){if(s.push(new lt(w,e)),c.push("computer_use"),!h)throw Et({message:"Model produced computer action without a computer tool.",data:{agent_name:e.name}}),new me("Model produced computer action without a computer tool.");u.push({toolCall:w,computer:h})}if(w.type!=="function_call")continue;c.push(w.name);const O=p.get(w.name);if(O)s.push(new Nr(w,e)),a.push({toolCall:w,handoff:O});else{const R=f.get(w.name);if(!R)throw Et({message:`Tool ${w.name} not found in agent ${e.name}.`,data:{tool_name:w.name,agent_name:e.name}}),new me(`Tool ${w.name} not found in agent ${e.name}.`);s.push(new lt(w,e)),i.push({toolCall:w,tool:R})}}return{newItems:s,handoffs:a,functions:i,computerActions:u,mcpApprovalRequests:l,toolsUsed:c,hasToolsOrApprovalsToRun(){return a.length>0||i.length>0||l.length>0||u.length>0}}}const Ru=he("type",[m({type:g("next_step_handoff"),newAgent:Z()}),m({type:g("next_step_final_output"),output:d()}),m({type:g("next_step_run_again")}),m({type:g("next_step_interruption"),data:re(d(),Z())})]);class xe{constructor(e,t,r,s,a){_(this,"originalInput");_(this,"modelResponse");_(this,"preStepItems");_(this,"newStepItems");_(this,"nextStep");this.originalInput=e,this.modelResponse=t,this.preStepItems=r,this.newStepItems=s,this.nextStep=a}get generatedItems(){return this.preStepItems.concat(this.newStepItems)}}function na(n,e,t){return n.resetToolChoice&&e.hasUsedTools(n)?{...t,toolChoice:void 0}:t}async function ra(n,e,t,r,s,a,i){const u=t.filter(y=>y instanceof be&&"callId"in y.rawItem&&y.rawItem.type==="function_call").map(y=>y.rawItem.callId),l=s.functions.filter(y=>u.includes(y.toolCall.callId)),c=await aa(n,l,a,i),p=c.map(y=>y.runItem),f=s.mcpApprovalRequests.filter(y=>{var w;return y.requestItem.type==="tool_approval_item"&&y.requestItem.rawItem.type==="hosted_tool_call"&&((w=y.requestItem.rawItem.providerData)==null?void 0:w.type)==="mcp_approval_request"});for(const y of f){const w=y.requestItem.rawItem.id,O=i._context.isToolApproved({toolName:y.requestItem.rawItem.name,callId:w});if(typeof O<"u"){const R={approve:O,approval_request_id:w,reason:void 0};p.push(new lt({type:"hosted_tool_call",name:"mcp_approval_response",providerData:R},n))}}const h=await ia(n,c,i),b=t.filter(y=>!(y instanceof be));return h.isFinalOutput?(a.emit("agent_end",i._context,n,h.finalOutput),n.emit("agent_end",i._context,h.finalOutput),new xe(e,r,b,p,{type:"next_step_final_output",output:h.finalOutput})):h.isInterrupted?new xe(e,r,b,p,{type:"next_step_interruption",data:{interruptions:h.interruptions}}):new xe(e,r,b,p,{type:"next_step_run_again"})}async function sa(n,e,t,r,s,a,i){var O,R,U,X;const u=t;let l=s.newItems;const[c,p]=await Promise.all([aa(n,s.functions,a,i),Du(n,s.computerActions,a,i._context)]);if(l=l.concat(c.map(G=>G.runItem)),l=l.concat(p),s.mcpApprovalRequests.length>0)for(const G of s.mcpApprovalRequests){const V=G.mcpTool.providerData,K=G.requestItem.rawItem.providerData;if(V.on_approval){const ee=await V.on_approval(i._context,G.requestItem),ve={approve:ee.approve,approval_request_id:K.id,reason:ee.reason};l.push(new lt({type:"hosted_tool_call",name:"mcp_approval_response",providerData:ve},n))}else{l.push(G.requestItem);const ee={type:"hosted_mcp_tool_approval",tool:G.mcpTool,runItem:new be({type:"hosted_tool_call",name:K.name,id:K.id,arguments:K.arguments,status:"in_progress",providerData:K},n)};c.push(ee)}}if(s.handoffs.length>0)return await Pu(n,e,u,l,r,s.handoffs,a,i._context);const f=await ia(n,c,i);if(f.isFinalOutput)return a.emit("agent_end",i._context,n,f.finalOutput),n.emit("agent_end",i._context,f.finalOutput),new xe(e,r,u,l,{type:"next_step_final_output",output:f.finalOutput});if(f.isInterrupted)return new xe(e,r,u,l,{type:"next_step_interruption",data:{interruptions:f.interruptions}});if((((O=s.functions)==null?void 0:O.length)??0)>0||(((R=s.computerActions)==null?void 0:R.length)??0)>0||(((U=s.mcpApprovalRequests)==null?void 0:U.length)??0)>0||(((X=s.handoffs)==null?void 0:X.length)??0)>0)return new xe(e,r,u,l,{type:"next_step_run_again"});const b=l.filter(G=>G instanceof Hn),y=b.length>0?Us(b[b.length-1].rawItem):void 0;if(typeof y>"u")return new xe(e,r,u,l,{type:"next_step_run_again"});if(!c.some(G=>G.runItem instanceof be)){if(n.outputType==="text")return new xe(e,r,u,l,{type:"next_step_final_output",output:y});if(n.outputType!=="text"&&y){const{parser:G}=vr(n.outputType,"final_output"),[V]=await te(()=>G(y));if(V)throw Et({message:"Invalid output type",data:{error:String(V)}}),new me("Invalid output type");return new xe(e,r,u,l,{type:"next_step_final_output",output:y})}}return new xe(e,r,u,l,{type:"next_step_run_again"})}function Yn(n,e){return{type:"function_call_result",name:n.name,callId:n.callId,status:"completed",output:{type:"text",text:ze(e)}}}async function aa(n,e,t,r){async function s(a){let i=a.toolCall.arguments;if(a.tool.parameters&&(ot(a.tool.parameters)?i=a.tool.parameters.parse(i):i=JSON.parse(i)),await a.tool.needsApproval(r._context,i,a.toolCall.callId)){const l=r._context.isToolApproved({toolName:a.tool.name,callId:a.toolCall.callId});if(l===!1)return Qs(async c=>{const p="Tool execution was not approved.";return c.setError({message:p,data:{tool_name:a.tool.name,error:`Tool execution for ${a.toolCall.callId} was manually rejected by user.`}}),c.spanData.output=p,{type:"function_output",tool:a.tool,output:p,runItem:new Ct(Yn(a.toolCall,p),n,p)}},{data:{name:a.tool.name}});if(l!==!0)return{type:"function_approval",tool:a.tool,runItem:new be(a.toolCall,n)}}return Qs(async l=>{t.config.traceIncludeSensitiveData&&(l.spanData.input=a.toolCall.arguments);try{t.emit("agent_tool_start",r._context,n,a.tool,{toolCall:a.toolCall}),n.emit("agent_tool_start",r._context,a.tool,{toolCall:a.toolCall});const c=await a.tool.invoke(r._context,a.toolCall.arguments,{toolCall:a.toolCall}),p=ze(c);t.emit("agent_tool_end",r._context,n,a.tool,p,{toolCall:a.toolCall}),n.emit("agent_tool_end",r._context,a.tool,p,{toolCall:a.toolCall}),t.config.traceIncludeSensitiveData&&(l.spanData.output=p);const f={type:"function_output",tool:a.tool,output:c,runItem:new Ct(Yn(a.toolCall,c),n,c)},h=tu(a.toolCall);if(h){f.agentRunResult=h;const b=h.interruptions;b.length>0&&(f.interruptions=b)}return f}catch(c){throw l.setError({message:"Error running tool",data:{tool_name:a.tool.name,error:String(c)}}),c}},{data:{name:a.tool.name}})}try{return await Promise.all(e.map(s))}catch(a){throw new To(`Failed to run function tools: ${a}`,a,r)}}async function Nu(n,e){const t=e.action;let r;switch(t.type){case"click":await n.click(t.x,t.y,t.button);break;case"double_click":await n.doubleClick(t.x,t.y);break;case"drag":await n.drag(t.path.map(s=>[s.x,s.y]));break;case"keypress":await n.keypress(t.keys);break;case"move":await n.move(t.x,t.y);break;case"screenshot":r=await n.screenshot();break;case"scroll":await n.scroll(t.x,t.y,t.scroll_x,t.scroll_y);break;case"type":await n.type(t.text);break;case"wait":await n.wait();break}if(typeof r<"u"||typeof n.screenshot=="function"&&(r=await n.screenshot(),typeof r<"u"))return r;throw new Error("Computer does not implement screenshot()")}async function Du(n,e,t,r,s=void 0){const a=s??E,i=[];for(const u of e){const l=u.computer.computer,c=u.toolCall;t.emit("agent_tool_start",r,n,u.computer,{toolCall:c}),typeof n.emit=="function"&&n.emit("agent_tool_start",r,u.computer,{toolCall:c});let p;try{p=await Nu(l,c)}catch(b){a.error("Failed to execute computer action:",b),p=""}t.emit("agent_tool_end",r,n,u.computer,p,{toolCall:c}),typeof n.emit=="function"&&n.emit("agent_tool_end",r,u.computer,p,{toolCall:c});const f=p?`data:image/png;base64,${p}`:"",h={type:"computer_call_result",callId:c.callId,output:{type:"computer_screenshot",data:f}};i.push(new Ct(h,n,f))}return i}async function Pu(n,e,t,r,s,a,i,u){if(r=[...r],a.length===0)return E.warn("Incorrectly called executeHandoffCalls with no handoffs. This should not happen. Moving on."),new xe(e,s,t,r,{type:"next_step_run_again"});if(a.length>1){const c="Multiple handoffs detected, ignoring this one.";for(let p=1;p<a.length;p++)r.push(new Ct(Yn(a[p].toolCall,c),n,c))}const l=a[0];return Iu(async c=>{const p=l.handoff,f=await p.onInvokeHandoff(u,l.toolCall.arguments);if(c.spanData.to_agent=f.name,a.length>1){const b=a.map(y=>y.handoff.agentName);c.setError({message:"Multiple handoffs requested",data:{requested_agents:b}})}r.push(new Dr(Yn(l.toolCall,Fs(f)),n,f)),i.emit("agent_handoff",u,n,f),n.emit("agent_handoff",u,f);const h=p.inputFilter??i.config.handoffInputFilter;if(h){E.debug("Filtering inputs for handoff"),typeof h!="function"&&c.setError({message:"Invalid input filter",data:{details:"not callable"}});const b={inputHistory:Array.isArray(e)?[...e]:e,preHandoffItems:[...t],newItems:[...r],runContext:u},y=h(b);e=y.inputHistory,t=y.preHandoffItems,r=y.newItems}return new xe(e,s,t,r,{type:"next_step_handoff",newAgent:f})},{data:{from_agent:n.name}})}const Xn={isFinalOutput:!1,isInterrupted:void 0};async function ia(n,e,t){if(e.length===0)return Xn;const r=[];for(const i of e)if(i.runItem instanceof be&&r.push(i.runItem),i.type==="function_output"){if(Array.isArray(i.interruptions))r.push(...i.interruptions);else if(i.agentRunResult){const u=i.agentRunResult.interruptions;u.length>0&&r.push(...u)}}if(r.length>0)return{isFinalOutput:!1,isInterrupted:!0,interruptions:r};if(n.toolUseBehavior==="run_llm_again")return Xn;const s=e[0];if(n.toolUseBehavior==="stop_on_first_tool")return(s==null?void 0:s.type)==="function_output"?{isFinalOutput:!0,isInterrupted:void 0,finalOutput:ze(s.output)}:Xn;const a=n.toolUseBehavior;if(typeof a=="object"){const i=e.find(u=>a.stopAtToolNames.includes(u.tool.name));return(i==null?void 0:i.type)==="function_output"?{isFinalOutput:!0,isInterrupted:void 0,finalOutput:ze(i.output)}:Xn}if(typeof a=="function")return a(t._context,e);throw new se(`Invalid toolUseBehavior: ${a}`,t)}function Mu(n){if(n instanceof Hn)return"message_output_created";if(n instanceof Nr)return"handoff_requested";if(n instanceof Dr)return"handoff_occurred";if(n instanceof lt)return"tool_called";if(n instanceof Ct)return"tool_output";if(n instanceof Rr)return"reasoning_item_created";if(n instanceof be)return"tool_approval_requested"}function oa(n,e){const t=Mu(e);if(!t){E.warn("Unknown item type: ",e);return}n._addItem(new Eu(t,e))}function ju(n,e){for(const t of e)oa(n,t)}function ua(n,e,t){const r=t==null?void 0:t.skipItems;for(const s of e.newStepItems)r!=null&&r.has(s)||oa(n,s)}class ca{constructor(){I(this,Dt,new Map)}addToolUse(e,t){o(this,Dt).set(e,t)}hasUsedTools(e){return o(this,Dt).has(e)}toJSON(){return Object.fromEntries(Array.from(o(this,Dt).entries()).map(([e,t])=>[e.name,t]))}}Dt=new WeakMap;const Qn="1.0",$u=g(Qn),Re=m({name:d()}),da=m({object:g("trace.span"),id:d(),trace_id:d(),parent_id:d().nullable(),started_at:d().nullable(),ended_at:d().nullable(),error:m({message:d(),data:re(d(),Z()).optional()}).nullable(),span_data:re(d(),Z())}).extend({previous_span:$i(()=>da).optional()}),la=m({requests:A(),inputTokens:A(),outputTokens:A(),totalTokens:A()}),pa=m({usage:la,output:J(Or),responseId:d().optional(),providerData:re(d(),Z()).optional()}),fa=he("type",[m({type:g("message_output_item"),rawItem:Vn,agent:Re}),m({type:g("tool_call_item"),rawItem:_u.or(Kt),agent:Re}),m({type:g("tool_call_output_item"),rawItem:Ar,agent:Re,output:d()}),m({type:g("reasoning_item"),rawItem:Er,agent:Re}),m({type:g("handoff_call_item"),rawItem:Yt,agent:Re}),m({type:g("handoff_output_item"),rawItem:Ar,sourceAgent:Re,targetAgent:Re}),m({type:g("tool_approval_item"),rawItem:Yt.or(Kt),agent:Re})]),Fu=m({object:g("trace"),id:d(),workflow_name:d(),group_id:d().nullable(),metadata:re(d(),Z())}),Lu=m({newItems:J(fa),toolsUsed:J(d()),handoffs:J(m({toolCall:Z(),handoff:Z()})),functions:J(m({toolCall:Z(),tool:Z()})),computerActions:J(m({toolCall:Z(),computer:Z()})),mcpApprovalRequests:J(m({requestItem:m({rawItem:m({type:g("hosted_tool_call"),name:d(),arguments:d().optional(),status:d().optional(),output:d().optional(),providerData:re(d(),Z()).nullable().optional()})}),mcpTool:m({type:g("hosted_tool"),name:g("hosted_mcp"),providerData:re(d(),Z())})})).optional()}),ha=m({tripwireTriggered:at(),outputInfo:Z()}),Zu=m({guardrail:m({type:g("input"),name:d()}),output:ha}),Uu=m({guardrail:m({type:g("output"),name:d()}),agentOutput:Z(),agent:Re,output:ha}),ma=m({$schemaVersion:$u,currentTurn:A(),currentAgent:Re,originalInput:d().or(J(yu)),modelResponses:J(pa),context:m({usage:la,approvals:re(d(),m({approved:J(d()).or(at()),rejected:J(d()).or(at())})),context:re(d(),Z())}),toolUseTracker:re(d(),J(d())),maxTurns:A(),currentAgentSpan:da.nullable().optional(),noActiveAgentRun:at(),inputGuardrailResults:J(Zu),outputGuardrailResults:J(Uu),currentStep:Ru.optional(),lastModelResponse:pa.optional(),generatedItems:J(fa),lastProcessedResponse:Lu.optional(),trace:Fu.nullable()});class pt{constructor(e,t,r,s){_(this,"_currentTurn",0);_(this,"_currentAgent");_(this,"_originalInput");_(this,"_modelResponses");_(this,"_currentAgentSpan");_(this,"_context");_(this,"_toolUseTracker");_(this,"_generatedItems");_(this,"_maxTurns");_(this,"_noActiveAgentRun",!0);_(this,"_lastTurnResponse");_(this,"_inputGuardrailResults");_(this,"_outputGuardrailResults");_(this,"_currentStep");_(this,"_lastProcessedResponse");_(this,"_trace",null);this._context=e,this._originalInput=structuredClone(t),this._modelResponses=[],this._currentAgentSpan=void 0,this._currentAgent=r,this._toolUseTracker=new ca,this._generatedItems=[],this._maxTurns=s,this._inputGuardrailResults=[],this._outputGuardrailResults=[],this._trace=Qt()}get history(){return Xt(this._originalInput,this._generatedItems)}getInterruptions(){var e;return((e=this._currentStep)==null?void 0:e.type)!=="next_step_interruption"?[]:this._currentStep.data.interruptions}approve(e,t={alwaysApprove:!1}){this._context.approveTool(e,t)}reject(e,t={alwaysReject:!1}){this._context.rejectTool(e,t)}toJSON(){var r;const e={$schemaVersion:Qn,currentTurn:this._currentTurn,currentAgent:{name:this._currentAgent.name},originalInput:this._originalInput,modelResponses:this._modelResponses.map(s=>({usage:{requests:s.usage.requests,inputTokens:s.usage.inputTokens,outputTokens:s.usage.outputTokens,totalTokens:s.usage.totalTokens},output:s.output,responseId:s.responseId,providerData:s.providerData})),context:this._context.toJSON(),toolUseTracker:this._toolUseTracker.toJSON(),maxTurns:this._maxTurns,currentAgentSpan:(r=this._currentAgentSpan)==null?void 0:r.toJSON(),noActiveAgentRun:this._noActiveAgentRun,inputGuardrailResults:this._inputGuardrailResults,outputGuardrailResults:this._outputGuardrailResults.map(s=>({...s,agent:s.agent.toJSON()})),currentStep:this._currentStep,lastModelResponse:this._lastTurnResponse,generatedItems:this._generatedItems.map(s=>s.toJSON()),lastProcessedResponse:this._lastProcessedResponse,trace:this._trace?this._trace.toJSON():null},t=ma.safeParse(e);if(!t.success)throw new Io(`Failed to serialize run state. ${t.error.message}`);return t.data}toString(){return JSON.stringify(this.toJSON())}static async fromString(e,t){var f,h,b,y,w;const[r,s]=await te(()=>JSON.parse(t));if(r)throw new se(`Failed to parse run state. ${r instanceof Error?r.message:String(r)}`);const a=s.$schemaVersion;if(!a)throw new se("Run state is missing schema version");if(a!==Qn)throw new se(`Run state schema version ${a} is not supported. Please use version ${Qn}`);const i=ma.parse(JSON.parse(t)),u=qu(e),l=new At(i.context.context);l._rebuildApprovals(i.context.approvals);const c=u.get(i.currentAgent.name);if(!c)throw new se(`Agent ${i.currentAgent.name} not found`);const p=new pt(l,"",c,i.maxTurns);p._currentTurn=i.currentTurn,p._toolUseTracker=new ca;for(const[O,R]of Object.entries(i.toolUseTracker))p._toolUseTracker.addToolUse(u.get(O),R);if(i.currentAgentSpan){i.trace||E.warn("Trace is not set, skipping tracing setup");const O=De().createTrace({traceId:(f=i.trace)==null?void 0:f.id,name:(h=i.trace)==null?void 0:h.workflow_name,groupId:((b=i.trace)==null?void 0:b.group_id)??void 0,metadata:(y=i.trace)==null?void 0:y.metadata});p._currentAgentSpan=ga(O,i.currentAgentSpan),p._trace=O}return p._noActiveAgentRun=i.noActiveAgentRun,p._inputGuardrailResults=i.inputGuardrailResults,p._outputGuardrailResults=i.outputGuardrailResults.map(O=>({...O,agent:u.get(O.agent.name)})),p._currentStep=i.currentStep,p._originalInput=i.originalInput,p._modelResponses=i.modelResponses.map(_a),p._lastTurnResponse=i.lastModelResponse?_a(i.lastModelResponse):void 0,p._generatedItems=i.generatedItems.map(O=>ya(O,u)),p._lastProcessedResponse=i.lastProcessedResponse?await Ju(u,p._currentAgent,p._context,i.lastProcessedResponse):void 0,((w=i.currentStep)==null?void 0:w.type)==="next_step_handoff"&&(p._currentStep={type:"next_step_handoff",newAgent:u.get(i.currentStep.newAgent.name)}),p}}function qu(n){const e=new Map,t=[n];for(;t.length>0;){const r=t.shift();if(!e.has(r.name)){e.set(r.name,r);for(const s of r.handoffs)s instanceof ut?e.has(s.name)||t.push(s):s.agent&&(e.has(s.agent.name)||t.push(s.agent))}}return e}function ga(n,e){const t=e.span_data,r=e.previous_span?ga(n,e.previous_span):void 0,s=De().createSpan({spanId:e.id,traceId:e.trace_id,parentId:e.parent_id??void 0,startedAt:e.started_at??void 0,endedAt:e.ended_at??void 0,data:t},n);return s.previousSpan=r,s}function _a(n){const e=new Wn;return e.requests=n.usage.requests,e.inputTokens=n.usage.inputTokens,e.outputTokens=n.usage.outputTokens,e.totalTokens=n.usage.totalTokens,{usage:e,output:n.output.map(t=>Or.parse(t)),responseId:n.responseId,providerData:n.providerData}}function ya(n,e){switch(n.type){case"message_output_item":return new Hn(n.rawItem,e.get(n.agent.name));case"tool_call_item":return new lt(n.rawItem,e.get(n.agent.name));case"tool_call_output_item":return new Ct(n.rawItem,e.get(n.agent.name),n.output);case"reasoning_item":return new Rr(n.rawItem,e.get(n.agent.name));case"handoff_call_item":return new Nr(n.rawItem,e.get(n.agent.name));case"handoff_output_item":return new Dr(n.rawItem,e.get(n.sourceAgent.name),e.get(n.targetAgent.name));case"tool_approval_item":return new be(n.rawItem,e.get(n.agent.name))}}async function Ju(n,e,t,r){const s=await e.getAllTools(t),a=new Map(s.filter(c=>c.type==="function").map(c=>[c.name,c])),i=new Map(s.filter(c=>c.type==="computer").map(c=>[c.name,c])),u=new Map(e.handoffs.map(c=>c instanceof ut?[c.name,Zs(c)]:[c.toolName,c])),l={newItems:r.newItems.map(c=>ya(c,n)),toolsUsed:r.toolsUsed,handoffs:r.handoffs.map(c=>{if(!u.has(c.handoff.toolName))throw new se(`Handoff ${c.handoff.toolName} not found`);return{toolCall:c.toolCall,handoff:u.get(c.handoff.toolName)}}),functions:await Promise.all(r.functions.map(async c=>{if(!a.has(c.tool.name))throw new se(`Tool ${c.tool.name} not found`);return{toolCall:c.toolCall,tool:a.get(c.tool.name)}})),computerActions:r.computerActions.map(c=>{const p=c.computer.name;if(!i.has(p))throw new se(`Computer tool ${p} not found`);return{toolCall:c.toolCall,computer:i.get(p)}}),mcpApprovalRequests:(r.mcpApprovalRequests??[]).map(c=>({requestItem:new be(c.requestItem.rawItem,e),mcpTool:c.mcpTool}))};return{...l,hasToolsOrApprovalsToRun(){return l.handoffs.length>0||l.functions.length>0||l.mcpApprovalRequests.length>0||l.computerActions.length>0}}}const va=10;function wa(n,e){return n?!1:e?!0:"enabled_without_data"}function Pr(n){return typeof n=="string"?[{type:"message",role:"user",content:n}]:[...n]}class ba{constructor({conversationId:e,previousResponseId:t}){_(this,"conversationId");_(this,"previousResponseId");_(this,"sentInitialInput",!1);_(this,"sentItems",new WeakSet);_(this,"serverItems",new WeakSet);this.conversationId=e??void 0,this.previousResponseId=t??void 0}primeFromState({originalInput:e,generatedItems:t,modelResponses:r}){if(this.sentInitialInput)return;for(const a of Pr(e))a&&typeof a=="object"&&this.sentItems.add(a);this.sentInitialInput=!0;const s=r[r.length-1];for(const a of r)for(const i of a.output)i&&typeof i=="object"&&this.serverItems.add(i);!this.conversationId&&(s!=null&&s.responseId)&&(this.previousResponseId=s.responseId);for(const a of t){const i=a.rawItem;!i||typeof i!="object"||this.serverItems.has(i)&&this.sentItems.add(i)}}trackServerItems(e){if(e){for(const t of e.output)t&&typeof t=="object"&&this.serverItems.add(t);!this.conversationId&&this.previousResponseId!==void 0&&e.responseId&&(this.previousResponseId=e.responseId)}}prepareInput(e,t){const r=[];if(!this.sentInitialInput){const s=Pr(e);for(const a of s)r.push(a),a&&typeof a=="object"&&this.sentItems.add(a);this.sentInitialInput=!0}for(const s of t){if(s.type==="tool_approval_item")continue;const a=s.rawItem;!a||typeof a!="object"||this.sentItems.has(a)||this.serverItems.has(a)||(r.push(a),this.sentItems.add(a))}return r}}function Xt(n,e){const t=e.filter(r=>r.type!=="tool_approval_item").map(r=>r.rawItem);return[...Pr(n),...t]}class Bu extends Vo{constructor(t={}){super();I(this,ce);_(this,"config");_(this,"inputGuardrailDefs");_(this,"outputGuardrailDefs");this.config={modelProvider:t.modelProvider??ru(),model:t.model,modelSettings:t.modelSettings,handoffInputFilter:t.handoffInputFilter,inputGuardrails:t.inputGuardrails,outputGuardrails:t.outputGuardrails,tracingDisabled:t.tracingDisabled??!1,traceIncludeSensitiveData:t.traceIncludeSensitiveData??!0,workflowName:t.workflowName??"Agent workflow",traceId:t.traceId,groupId:t.groupId,traceMetadata:t.traceMetadata},this.inputGuardrailDefs=(t.inputGuardrails??[]).map(qs),this.outputGuardrailDefs=(t.outputGuardrails??[]).map(Tr)}run(t,r,s={stream:!1,context:void 0}){return r instanceof pt&&r._trace?Gu(r._trace,async()=>(r._currentAgentSpan&&er(r._currentAgentSpan),s!=null&&s.stream?F(this,ce,Hr).call(this,t,r,s):F(this,ce,zr).call(this,t,r,s))):zu(async()=>s!=null&&s.stream?F(this,ce,Hr).call(this,t,r,s):F(this,ce,zr).call(this,t,r,s),{traceId:this.config.traceId,name:this.config.workflowName,groupId:this.config.groupId,metadata:this.config.traceMetadata})}}ce=new WeakSet,zr=async function(t,r,s){return jr(async()=>{var l,c;const a=r instanceof pt,i=a?r:new pt(s.context instanceof At?s.context:new At(s.context),r,t,s.maxTurns??va),u=s.conversationId||s.previousResponseId?new ba({conversationId:s.conversationId,previousResponseId:s.previousResponseId}):void 0;u&&a&&u.primeFromState({originalInput:i._originalInput,generatedItems:i._generatedItems,modelResponses:i._modelResponses});try{for(;;){const p=i._currentAgent.model!==void 0&&i._currentAgent.model!==""||this.config.model!==void 0&&this.config.model!=="";let f=xa(i._currentAgent.model,this.config.model);if(typeof f=="string"&&(f=await this.config.modelProvider.getModel(f)),i._currentStep=i._currentStep??{type:"next_step_run_again"},i._currentStep.type==="next_step_interruption"){if(E.debug("Continuing from interruption"),!i._lastTurnResponse||!i._lastProcessedResponse)throw new se("No model response found in previous state",i);const h=await ra(i._currentAgent,i._originalInput,i._generatedItems,i._lastTurnResponse,i._lastProcessedResponse,this,i);if(i._toolUseTracker.addToolUse(i._currentAgent,i._lastProcessedResponse.toolsUsed),i._originalInput=h.originalInput,i._generatedItems=h.generatedItems,i._currentStep=h.nextStep,h.nextStep.type==="next_step_interruption")return new Mr(i);continue}if(i._currentStep.type==="next_step_run_again"){const h=await i._currentAgent.getEnabledHandoffs(i._context);if(!i._currentAgentSpan){const ee=h.map(ve=>ve.agentName);i._currentAgentSpan=Xs({data:{name:i._currentAgent.name,handoffs:ee,output_type:i._currentAgent.outputSchemaName}}),i._currentAgentSpan.start(),er(i._currentAgentSpan)}const b=await i._currentAgent.getAllTools(i._context),y=b.map(ee=>Ks(ee)),w=h.map(ee=>Ys(ee));if(i._currentAgentSpan&&(i._currentAgentSpan.spanData.tools=b.map(ee=>ee.name)),i._currentTurn++,i._currentTurn>i._maxTurns)throw(l=i._currentAgentSpan)==null||l.setError({message:"Max turns exceeded",data:{max_turns:i._maxTurns}}),new xs(`Max turns (${i._maxTurns}) exceeded`,i);E.debug(`Running agent ${i._currentAgent.name} (turn ${i._currentTurn})`),i._currentTurn===1&&await F(this,ce,Vr).call(this,i);const O=u?u.prepareInput(i._originalInput,i._generatedItems):Xt(i._originalInput,i._generatedItems);i._noActiveAgentRun&&(i._currentAgent.emit("agent_start",i._context,i._currentAgent),this.emit("agent_start",i._context,i._currentAgent));let R={...this.config.modelSettings,...i._currentAgent.modelSettings};const U=i._currentAgent.modelSettings;R=Sa(p,U,f,R),R=na(i._currentAgent,i._toolUseTracker,R);const X=(u==null?void 0:u.previousResponseId)??s.previousResponseId,G=(u==null?void 0:u.conversationId)??s.conversationId;i._lastTurnResponse=await f.getResponse({systemInstructions:await i._currentAgent.getSystemPrompt(i._context),prompt:await i._currentAgent.getPrompt(i._context),...p?{overridePromptModel:!0}:{},input:O,previousResponseId:X,conversationId:G,modelSettings:R,tools:y,outputType:Ts(i._currentAgent.outputType),handoffs:w,tracing:wa(this.config.tracingDisabled,this.config.traceIncludeSensitiveData),signal:s.signal}),i._modelResponses.push(i._lastTurnResponse),i._context.usage.add(i._lastTurnResponse.usage),i._noActiveAgentRun=!1,u==null||u.trackServerItems(i._lastTurnResponse);const V=ta(i._lastTurnResponse,i._currentAgent,b,h);i._lastProcessedResponse=V;const K=await sa(i._currentAgent,i._originalInput,i._generatedItems,i._lastTurnResponse,i._lastProcessedResponse,this,i);i._toolUseTracker.addToolUse(i._currentAgent,i._lastProcessedResponse.toolsUsed),i._originalInput=K.originalInput,i._generatedItems=K.generatedItems,i._currentStep=K.nextStep}if(i._currentStep&&i._currentStep.type==="next_step_final_output")return await F(this,ce,Wr).call(this,i,i._currentStep.output),this.emit("agent_end",i._context,i._currentAgent,i._currentStep.output),i._currentAgent.emit("agent_end",i._context,i._currentStep.output),new Mr(i);if(i._currentStep&&i._currentStep.type==="next_step_handoff")i._currentAgent=i._currentStep.newAgent,i._currentAgentSpan&&(i._currentAgentSpan.end(),tn(),i._currentAgentSpan=void 0),i._noActiveAgentRun=!0,i._currentStep={type:"next_step_run_again"};else{if(i._currentStep&&i._currentStep.type==="next_step_interruption")return new Mr(i);E.debug("Running next loop")}}}catch(p){throw i._currentAgentSpan&&i._currentAgentSpan.setError({message:"Error in agent run",data:{error:String(p)}}),p}finally{i._currentAgentSpan&&(((c=i._currentStep)==null?void 0:c.type)!=="next_step_interruption"&&i._currentAgentSpan.end(),tn())}})},Vr=async function(t){const r=this.inputGuardrailDefs.concat(t._currentAgent.inputGuardrails.map(qs));if(r.length>0){const s={agent:t._currentAgent,input:t._originalInput,context:t._context};try{const a=await Promise.all(r.map(async i=>ea(async u=>{const l=await i.run(s);return u.spanData.triggered=l.output.tripwireTriggered,l},{data:{name:i.name}},t._currentAgentSpan)));for(const i of a)if(i.output.tripwireTriggered)throw t._currentAgentSpan&&t._currentAgentSpan.setError({message:"Guardrail tripwire triggered",data:{guardrail:i.guardrail.name}}),new Is(`Input guardrail triggered: ${JSON.stringify(i.output.outputInfo)}`,i,t)}catch(a){throw a instanceof Is?a:(t._currentTurn--,new Ss(`Input guardrail failed to complete: ${a}`,a,t))}}},Wr=async function(t,r){const s=this.outputGuardrailDefs.concat(t._currentAgent.outputGuardrails.map(Tr));if(s.length>0){const a=t._currentAgent.processFinalOutput(r),i={agent:t._currentAgent,agentOutput:a,context:t._context,details:{modelResponse:t._lastTurnResponse}};try{const u=await Promise.all(s.map(async l=>ea(async c=>{const p=await l.run(i);return c.spanData.triggered=p.output.tripwireTriggered,p},{data:{name:l.name}},t._currentAgentSpan)));for(const l of u)if(l.output.tripwireTriggered)throw t._currentAgentSpan&&t._currentAgentSpan.setError({message:"Guardrail tripwire triggered",data:{guardrail:l.guardrail.name}}),new Un(`Output guardrail triggered: ${JSON.stringify(l.output.outputInfo)}`,l,t)}catch(u){throw u instanceof Un?u:new Ss(`Output guardrail failed to complete: ${u}`,u,t)}}},ni=async function(t,r,s){var i,u,l;const a=r.conversationId||r.previousResponseId?new ba({conversationId:r.conversationId,previousResponseId:r.previousResponseId}):void 0;a&&s&&a.primeFromState({originalInput:t.state._originalInput,generatedItems:t.state._generatedItems,modelResponses:t.state._modelResponses});try{for(;;){const c=t.state._currentAgent,p=await c.getEnabledHandoffs(t.state._context),f=await c.getAllTools(t.state._context),h=f.map(y=>Ks(y)),b=p.map(y=>Ys(y));if(t.state._currentStep=t.state._currentStep??{type:"next_step_run_again"},t.state._currentStep.type==="next_step_interruption"){if(E.debug("Continuing from interruption"),!t.state._lastTurnResponse||!t.state._lastProcessedResponse)throw new se("No model response found in previous state",t.state);const y=await ra(t.state._currentAgent,t.state._originalInput,t.state._generatedItems,t.state._lastTurnResponse,t.state._lastProcessedResponse,this,t.state);if(ua(t,y),t.state._toolUseTracker.addToolUse(t.state._currentAgent,t.state._lastProcessedResponse.toolsUsed),t.state._originalInput=y.originalInput,t.state._generatedItems=y.generatedItems,t.state._currentStep=y.nextStep,y.nextStep.type==="next_step_interruption")return;continue}if(t.state._currentStep.type==="next_step_run_again"){if(!t.state._currentAgentSpan){const Ce=p.map(Ie=>Ie.agentName);t.state._currentAgentSpan=Xs({data:{name:c.name,handoffs:Ce,tools:f.map(Ie=>Ie.name),output_type:c.outputSchemaName}}),t.state._currentAgentSpan.start(),er(t.state._currentAgentSpan)}if(t.state._currentTurn++,t.state._currentTurn>t.state._maxTurns)throw(i=t.state._currentAgentSpan)==null||i.setError({message:"Max turns exceeded",data:{max_turns:t.state._maxTurns}}),new xs(`Max turns (${t.state._maxTurns}) exceeded`,t.state);E.debug(`Running agent ${c.name} (turn ${t.state._currentTurn})`);const y=c.model!==void 0&&c.model!==""||this.config.model!==void 0&&this.config.model!=="";let w=xa(c.model,this.config.model);typeof w=="string"&&(w=await this.config.modelProvider.getModel(w)),t.state._currentTurn===1&&await F(this,ce,Vr).call(this,t.state);let O={...this.config.modelSettings,...c.modelSettings};const R=c.modelSettings;O=Sa(y,R,w,O),O=na(c,t.state._toolUseTracker,O);const U=a?a.prepareInput(t.input,t.newItems):Xt(t.input,t.newItems);t.state._noActiveAgentRun&&(c.emit("agent_start",t.state._context,c),this.emit("agent_start",t.state._context,c));let X;const G=(a==null?void 0:a.previousResponseId)??r.previousResponseId,V=(a==null?void 0:a.conversationId)??r.conversationId;for await(const Ce of w.getStreamedResponse({systemInstructions:await c.getSystemPrompt(t.state._context),prompt:await c.getPrompt(t.state._context),...y?{overridePromptModel:!0}:{},input:U,previousResponseId:G,conversationId:V,modelSettings:O,tools:h,handoffs:b,outputType:Ts(c.outputType),tracing:wa(this.config.tracingDisabled,this.config.traceIncludeSensitiveData),signal:r.signal})){if(Ce.type==="response_done"){const Ie=Hs.parse(Ce);X={usage:new Wn(Ie.response.usage),output:Ie.response.output,responseId:Ie.response.id}}if(t.cancelled)return;t._addItem(new Cu(Ce))}if(t.state._noActiveAgentRun=!1,!X)throw new me("Model did not produce a final response!",t.state);t.state._lastTurnResponse=X,a==null||a.trackServerItems(X),t.state._modelResponses.push(t.state._lastTurnResponse);const K=ta(t.state._lastTurnResponse,c,f,p);t.state._lastProcessedResponse=K;const ee=new Set(K.newItems);ee.size>0&&ju(t,K.newItems);const ve=await sa(c,t.state._originalInput,t.state._generatedItems,t.state._lastTurnResponse,t.state._lastProcessedResponse,this,t.state);ua(t,ve,{skipItems:ee}),t.state._toolUseTracker.addToolUse(c,K.toolsUsed),t.state._originalInput=ve.originalInput,t.state._generatedItems=ve.generatedItems,t.state._currentStep=ve.nextStep}if(t.state._currentStep.type==="next_step_final_output"){await F(this,ce,Wr).call(this,t.state,t.state._currentStep.output),this.emit("agent_end",t.state._context,c,t.state._currentStep.output),c.emit("agent_end",t.state._context,t.state._currentStep.output);return}else{if(t.state._currentStep.type==="next_step_interruption")return;t.state._currentStep.type==="next_step_handoff"?(t.state._currentAgent=(u=t.state._currentStep)==null?void 0:u.newAgent,t.state._currentAgentSpan&&(t.state._currentAgentSpan.end(),tn()),t.state._currentAgentSpan=void 0,t._addItem(new Ou(t.state._currentAgent)),t.state._noActiveAgentRun=!0,t.state._currentStep={type:"next_step_run_again"}):E.debug("Running next loop")}}}catch(c){throw t.state._currentAgentSpan&&t.state._currentAgentSpan.setError({message:"Error in agent run",data:{error:String(c)}}),c}finally{t.state._currentAgentSpan&&(((l=t.state._currentStep)==null?void 0:l.type)!=="next_step_interruption"&&t.state._currentAgentSpan.end(),tn())}},Hr=async function(t,r,s){return s=s??{},jr(async()=>{const a=r instanceof pt,i=a?r:new pt(s.context instanceof At?s.context:new At(s.context),r,t,s.maxTurns??va),u=new Ta({signal:s.signal,state:i});u.maxTurns=s.maxTurns??i._maxTurns;const l=F(this,ce,ni).call(this,u,s,a).then(()=>{u._done()},c=>{u._raiseError(c)});return u._setStreamLoopPromise(l),u})};function xa(n,e){return typeof n=="string"&&n!==ut.DEFAULT_MODEL_PLACEHOLDER||n?n:e??n??ut.DEFAULT_MODEL_PLACEHOLDER}function Sa(n,e,t,r){var s,a,i,u,l,c,p,f;if(js()&&n&&(typeof t!="string"||!zn(t))&&((s=e.providerData)!=null&&s.reasoning||(i=(a=e.providerData)==null?void 0:a.text)!=null&&i.verbosity||(u=e.providerData)!=null&&u.reasoning_effort)){const h={...r};return(l=h.providerData)==null||delete l.reasoning,(p=(c=h.providerData)==null?void 0:c.text)==null||delete p.verbosity,(f=h.providerData)==null||delete f.reasoning_effort,h.reasoning&&(delete h.reasoning.effort,delete h.reasoning.summary),h.text&&delete h.text.verbosity,h}return r}class Ia{constructor(e){_(this,"state");this.state=e}get history(){return Xt(this.input,this.newItems)}get output(){return Xt([],this.newItems)}get input(){return this.state._originalInput}get newItems(){return this.state._generatedItems}get rawResponses(){return this.state._modelResponses}get lastResponseId(){const e=this.rawResponses;return e&&e.length>0?e[e.length-1].responseId:void 0}get lastAgent(){return this.state._currentAgent}get inputGuardrailResults(){return this.state._inputGuardrailResults}get outputGuardrailResults(){return this.state._outputGuardrailResults}get interruptions(){var e;return((e=this.state._currentStep)==null?void 0:e.type)==="next_step_interruption"?this.state._currentStep.data.interruptions:[]}get finalOutput(){var e;if(((e=this.state._currentStep)==null?void 0:e.type)==="next_step_final_output")return this.state._currentAgent.processFinalOutput(this.state._currentStep.output);E.warn("Accessed finalOutput before agent run is completed.")}}class Mr extends Ia{constructor(e){super(e)}}class Ta extends Ia{constructor(t={}){super(t.state);_(this,"currentTurn",0);_(this,"maxTurns");I(this,an,null);I(this,We);I(this,_e);I(this,Le);I(this,Pt);I(this,Mt);I(this,on);I(this,mt,!1);I(this,un);if(v(this,We,t.signal),v(this,Le,new Uo({start:r=>{v(this,_e,r)},cancel:()=>{v(this,mt,!0)}})),v(this,Pt,new Promise((r,s)=>{v(this,Mt,r),v(this,on,s)})),o(this,We)){const r=()=>{var a,i;if(o(this,mt))return;v(this,mt,!0);const s=o(this,_e);if(v(this,_e,void 0),o(this,Le).locked){if(s)try{s.close()}catch(u){E.debug(`Failed to close readable stream on abort: ${u}`)}}else o(this,Le).cancel((a=o(this,We))==null?void 0:a.reason).catch(u=>{E.debug(`Failed to cancel readable stream on abort: ${u}`)});(i=o(this,Mt))==null||i.call(this)};o(this,We).aborted?r():o(this,We).addEventListener("abort",r,{once:!0})}}get currentAgent(){return this.lastAgent}_addItem(t){var r;this.cancelled||(r=o(this,_e))==null||r.enqueue(t)}_done(){var t;!this.cancelled&&o(this,_e)&&(o(this,_e).close(),v(this,_e,void 0),(t=o(this,Mt))==null||t.call(this))}_raiseError(t){var r;!this.cancelled&&o(this,_e)&&(o(this,_e).error(t),v(this,_e,void 0)),v(this,an,t),(r=o(this,on))==null||r.call(this,t),o(this,Pt).catch(s=>{E.debug(`Resulted in an error: ${s}`)})}get cancelled(){return o(this,mt)}toStream(){return o(this,Le)}get completed(){return o(this,Pt)}get error(){return o(this,an)}toTextStream(t={}){const r=o(this,Le).pipeThrough(new qo({transform(s,a){if(s.type==="raw_model_stream_event"&&s.data.type==="output_text_delta"){const i=Ws.parse(s.data);a.enqueue(i.delta)}}}));return t.compatibleWithNodeStreams?Zo.fromWeb(r):r}[Symbol.asyncIterator](){return o(this,Le)[Symbol.asyncIterator]()}_setStreamLoopPromise(t){v(this,un,t)}_getStreamLoopPromise(){return o(this,un)}}an=new WeakMap,We=new WeakMap,_e=new WeakMap,Le=new WeakMap,Pt=new WeakMap,Mt=new WeakMap,on=new WeakMap,mt=new WeakMap,un=new WeakMap;let ka;function Ne(){return ka??(ka=new Jo),ka}function Qt(){const n=Ne().getStore();return n!=null&&n.trace?n.trace:null}function en(){const n=Ne().getStore();return n!=null&&n.span?n.span:null}function Aa(n){return async()=>{const e=Qt();if(!e)throw new Error("No trace found");await e.start();const t=await n(e);if(t instanceof Ta){const r=t._getStreamLoopPromise();if(r)return r.finally(()=>e.end()),t}return await e.end(),t}}async function Gu(n,e,t={}){const r=typeof n=="string"?De().createTrace({...t,name:n}):n;return Ne().run({trace:r},Aa(e))}async function zu(n,e={}){if(Qt())return await n();const r=De().createTrace(e);return Ne().run({trace:r},Aa(n))}function er(n){const e=Ne().getStore();if(!e)throw new Error("No existing trace found");e.span&&(e.span.previousSpan=e.previousSpan,e.previousSpan=e.span),e.span=n,Ne().enterWith(e)}function tn(){var e;const n=Ne().getStore();n&&(n.span=n.previousSpan,n.previousSpan=(e=n.previousSpan)==null?void 0:e.previousSpan,Ne().enterWith(n))}function Et(n){const e=en();e&&e.setError(n)}function Vu(n){var e,t,r;return{trace:(e=n.trace)==null?void 0:e.clone(),span:(t=n.span)==null?void 0:t.clone(),previousSpan:(r=n.previousSpan)==null?void 0:r.clone()}}function jr(n){const e=Ne().getStore();if(!e)throw new Error("No existing trace found");const t=Vu(e);return Ne().run(t,n)}class Wu{async export(e){if(Rs.disabled){E.debug("Tracing is disabled. Skipping export");return}for(const t of e)t.type==="trace"?console.log(`[Exporter] Export trace traceId=${t.traceId} name=${t.name}${t.groupId?` groupId=${t.groupId}`:""}`):console.log(`[Exporter] Export span: ${JSON.stringify(t)}`)}}class Hu{constructor(e,{maxQueueSize:t=1e3,maxBatchSize:r=100,scheduleDelay:s=5e3,exportTriggerRatio:a=.8}={}){I(this,pe);I(this,cn);I(this,jt);I(this,dn);I(this,ln);I(this,$t);I(this,de,[]);I(this,Ze);I(this,He,null);I(this,Ke,!1);I(this,Ft,null);v(this,cn,t),v(this,jt,r),v(this,dn,s),v(this,ln,t*a),v(this,$t,e),v(this,Ze,Go),E.debug("Automatic trace export loop is not supported in this environment. You need to manually call `getGlobalTraceProvider().forceFlush()` to export traces.")}start(){v(this,Ft,new AbortController),F(this,pe,Yr).call(this)}async onTraceStart(e){await F(this,pe,Kr).call(this,e)}async onTraceEnd(e){}async onSpanStart(e){}async onSpanEnd(e){await F(this,pe,Kr).call(this,e)}async shutdown(e){var t;for(e&&o(this,Ze).setTimeout(()=>{var r;(r=o(this,Ft))==null||r.abort()},e),E.debug("Shutting down gracefully");o(this,de).length>0;){if(E.debug(`Waiting for buffer to empty. Items left: ${o(this,de).length}`),o(this,Ke)||await F(this,pe,zt).call(this,!0),(t=o(this,Ft))!=null&&t.signal.aborted){E.debug("Timeout reached, force flushing"),await F(this,pe,zt).call(this,!0);break}await new Promise(r=>o(this,Ze).setTimeout(r,500))}E.debug("Buffer empty. Exiting"),o(this,Ze)&&o(this,He)&&o(this,Ze).clearTimeout(o(this,He))}async forceFlush(){o(this,de).length>0&&await F(this,pe,zt).call(this,!0)}}cn=new WeakMap,jt=new WeakMap,dn=new WeakMap,ln=new WeakMap,$t=new WeakMap,de=new WeakMap,Ze=new WeakMap,He=new WeakMap,Ke=new WeakMap,Ft=new WeakMap,pe=new WeakSet,Kr=async function(e){if(o(this,de).length+1>o(this,cn)){E.error("Dropping trace because buffer is full");return}o(this,de).push(e),o(this,de).length>o(this,ln)&&await F(this,pe,zt).call(this)},Yr=function(){v(this,He,o(this,Ze).setTimeout(async()=>{await F(this,pe,zt).call(this),F(this,pe,Yr).call(this)},o(this,dn))),typeof o(this,He).unref=="function"&&o(this,He).unref()},zt=async function(e=!1){if(o(this,de).length!==0){if(E.debug(`Exporting batches. Force: ${e}. Buffer size: ${o(this,de).length}`),e||o(this,de).length<o(this,jt)){const t=[...o(this,de)];v(this,de,[]),v(this,Ke,!0),await o(this,$t).export(t),v(this,Ke,!1)}else if(o(this,de).length>0){const t=o(this,de).splice(0,o(this,jt));v(this,Ke,!0),await o(this,$t).export(t),v(this,Ke,!1)}}};class Ku{constructor(){I(this,ye,[])}start(){for(const e of o(this,ye))e.start&&e.start()}addTraceProcessor(e){o(this,ye).push(e)}setProcessors(e){E.debug("Shutting down old processors");for(const t of o(this,ye))t.shutdown();v(this,ye,e)}async onTraceStart(e){for(const t of o(this,ye))await t.onTraceStart(e)}async onTraceEnd(e){for(const t of o(this,ye))await t.onTraceEnd(e)}async onSpanStart(e){for(const t of o(this,ye))await t.onSpanStart(e)}async onSpanEnd(e){for(const t of o(this,ye))await t.onSpanEnd(e)}async shutdown(e){for(const t of o(this,ye))await t.shutdown(e)}async forceFlush(){for(const e of o(this,ye))await e.forceFlush()}}ye=new WeakMap;let $r=null,Fr=null;function Yu(){return $r||($r=new Wu),$r}function Ca(){return Fr||(Fr=new Hu(Yu())),Fr}function Ea(){return new Date().toISOString()}function Oa(){return`trace_${Ms().replace(/-/g,"")}`}function Xu(){return`span_${Ms().replace(/-/g,"").slice(0,24)}`}function Qu(n){return Object.fromEntries(Object.entries(n).filter(([e])=>!e.startsWith("_")))}const qr=class qr{constructor(e,t){_(this,"type","trace.span");I(this,pn);I(this,fn);I(this,hn);I(this,mn);I(this,gt);I(this,Ye);I(this,Xe);I(this,_t);I(this,gn);v(this,fn,e.traceId),v(this,hn,e.spanId??Xu()),v(this,pn,e.data),v(this,gt,t),v(this,mn,e.parentId??null),v(this,_t,e.error??null),v(this,Ye,e.startedAt??null),v(this,Xe,e.endedAt??null)}get traceId(){return o(this,fn)}get spanData(){return o(this,pn)}get spanId(){return o(this,hn)}get parentId(){return o(this,mn)}get previousSpan(){return o(this,gn)}set previousSpan(e){v(this,gn,e)}start(){if(o(this,Ye)){E.warn("Span already started");return}v(this,Ye,Ea()),o(this,gt).onSpanStart(this)}end(){if(o(this,Xe)){E.debug("Span already finished",this.spanData);return}v(this,Xe,Ea()),o(this,gt).onSpanEnd(this)}setError(e){v(this,_t,e)}get error(){return o(this,_t)}get startedAt(){return o(this,Ye)}get endedAt(){return o(this,Xe)}clone(){var t;const e=new qr({traceId:this.traceId,spanId:this.spanId,parentId:this.parentId??void 0,data:this.spanData,startedAt:o(this,Ye)??void 0,endedAt:o(this,Xe)??void 0,error:o(this,_t)??void 0},o(this,gt));return e.previousSpan=(t=this.previousSpan)==null?void 0:t.clone(),e}toJSON(){return{object:this.type,id:this.spanId,trace_id:this.traceId,parent_id:this.parentId,started_at:this.startedAt,ended_at:this.endedAt,span_data:Qu(this.spanData),error:this.error}}};pn=new WeakMap,fn=new WeakMap,hn=new WeakMap,mn=new WeakMap,gt=new WeakMap,Ye=new WeakMap,Xe=new WeakMap,_t=new WeakMap,gn=new WeakMap;let nn=qr;class Ve extends nn{constructor(e,t){super({traceId:"no-op",spanId:"no-op",data:e},t)}start(){}end(){}setError(){}toJSON(){return null}}const Jr=class Jr{constructor(e,t){_(this,"type","trace");_(this,"traceId");_(this,"name");_(this,"groupId",null);_(this,"metadata");I(this,Lt);I(this,Ue);this.traceId=e.traceId??Oa(),this.name=e.name??"Agent workflow",this.groupId=e.groupId??null,this.metadata=e.metadata??{},v(this,Lt,t??Ca()),v(this,Ue,e.started??!1)}async start(){o(this,Ue)||(v(this,Ue,!0),await o(this,Lt).onTraceStart(this))}async end(){o(this,Ue)&&(v(this,Ue,!1),await o(this,Lt).onTraceEnd(this))}clone(){return new Jr({traceId:this.traceId,name:this.name,groupId:this.groupId??void 0,metadata:this.metadata,started:o(this,Ue)})}toJSON(){return{object:this.type,id:this.traceId,workflow_name:this.name,group_id:this.groupId,metadata:this.metadata}}};Lt=new WeakMap,Ue=new WeakMap;let rn=Jr;class Lr extends rn{constructor(){super({})}async start(){}async end(){}toJSON(){return null}}class ec{constructor(){I(this,nr);I(this,ue);I(this,yt);v(this,ue,new Ku),v(this,yt,Rs.disabled),F(this,nr,ri).call(this)}registerProcessor(e){o(this,ue).addTraceProcessor(e)}setProcessors(e){o(this,ue).setProcessors(e)}getCurrentTrace(){return Qt()}getCurrentSpan(){return en()}setDisabled(e){v(this,yt,e)}startExportLoop(){o(this,ue).start()}createTrace(e){if(o(this,yt))return E.debug("Tracing is disabled, Not creating trace %o",e),new Lr;const t=e.traceId??Oa(),r=e.name??"Agent workflow";return E.debug("Creating trace %s with name %s",t,r),new rn({...e,name:r,traceId:t},o(this,ue))}createSpan(e,t){if(o(this,yt)||e.disabled)return E.debug("Tracing is disabled, Not creating span %o",e),new Ve(e.data,o(this,ue));let r,s;if(t){if(t instanceof rn){if(t instanceof Lr)return E.debug("Parent trace is no-op, returning NoopSpan"),new Ve(e.data,o(this,ue));s=t.traceId}else if(t instanceof nn){if(t instanceof Ve)return E.debug("Parent span is no-op, returning NoopSpan"),new Ve(e.data,o(this,ue));r=t.spanId,s=t.traceId}}else{const a=Qt(),i=en();if(!a)return E.error("No active trace. Make sure to start a trace with `withTrace()` first. Returning NoopSpan."),new Ve(e.data,o(this,ue));if(i instanceof Ve||a instanceof Lr)return E.debug(`Parent ${i} or ${a} is no-op, returning NoopSpan`),new Ve(e.data,o(this,ue));s=a.traceId,i?(E.debug("Using parent span %s",i.spanId),r=i.spanId):E.debug("No parent span, using current trace %s",a.traceId)}return s?(E.debug(`Creating span ${JSON.stringify(e.data)} with id ${e.spanId??s}`),new nn({...e,traceId:s,parentId:r},o(this,ue))):(E.error("No traceId found. Make sure to start a trace with `withTrace()` first. Returning NoopSpan."),new Ve(e.data,o(this,ue)))}async shutdown(e){try{E.debug("Shutting down tracing provider"),await o(this,ue).shutdown(e)}catch(t){E.error("Error shutting down tracing provider %o",t)}}async forceFlush(){await o(this,ue).forceFlush()}}ue=new WeakMap,yt=new WeakMap,nr=new WeakSet,ri=function(){if(typeof process<"u"&&typeof process.on=="function"){const e=async()=>{const t=setTimeout(()=>{console.warn("Cleanup timeout, forcing exit"),process.exit(1)},5e3);try{await this.shutdown()}finally{clearTimeout(t)}};process.on("beforeExit",e),process.on("SIGINT",async()=>{await e(),Ra("SIGINT")||process.exit(130)}),process.on("SIGTERM",async()=>{await e(),Ra("SIGTERM")||process.exit(0)}),process.on("unhandledRejection",async(t,r)=>{E.error("Unhandled rejection",t,r),await e(),tc("unhandledRejection")||process.exit(1)})}};function Ra(n){return process.listeners(n).length>1}function tc(n){return process.listeners(n).length>1}let Zr;function De(){return Zr||(Zr=new ec),Zr}function nc(n){De().registerProcessor(n)}nc(Ca());function Na(n){const e=atob(n),t=e.length,r=new Uint8Array(t);for(let s=0;s<t;s++)r[s]=e.charCodeAt(s);return r.buffer}function Da(n){const e=String.fromCharCode(...new Uint8Array(n));return btoa(e)}function Pa(n){if(typeof n>"u"||n===null||typeof n!="object"||!("type"in n)||typeof n.type!="string"||!n.type||n.type!=="message"||!("content"in n)||!Array.isArray(n.content)||n.content.length<1)return;const e=n.content[n.content.length-1];if(!(!("type"in e)||typeof e.type!="string")){if(e.type==="output_text")return typeof e.text=="string"?e.text:void 0;if(e.type==="output_audio")return typeof e.transcript=="string"?e.transcript:void 0}}function rc(n,e){const t=n.filter(a=>!e.some(i=>i.itemId===a.itemId)),r=e.filter(a=>!n.some(i=>i.itemId===a.itemId)),s=e.filter(a=>n.some(i=>i.itemId===a.itemId&&JSON.stringify(i)!==JSON.stringify(a)));return{removals:t,additions:r,updates:s}}function sc(){return typeof window>"u"?!1:typeof window.RTCPeerConnection<"u"}function Ma(n){return n.role==="system"?n:n.role==="assistant"?{...n,content:n.content.map(e=>e.type==="output_audio"?{...e,audio:null}:e)}:n.role==="user"?{...n,content:n.content.map(e=>e.type==="input_audio"?{...e,audio:null}:e)}:n}function ja(n,e,t){if(e.type==="conversation.item.input_audio_transcription.completed")return n.map(a=>{if(a.itemId===e.item_id&&a.type==="message"&&"role"in a&&a.role==="user"){const i=a.content.map(u=>u.type==="input_audio"?{...u,transcript:e.transcript}:u);return{...a,content:i,status:"completed"}}return a});const r=!t&&e.type==="message"?Ma(e):e,s=n.findIndex(a=>a.itemId===e.itemId);if(s!==-1)return n.map((a,i)=>i===s?r:!t&&a.type==="message"?Ma(a):a);if(e.previousItemId){const a=n.findIndex(i=>i.itemId===e.previousItemId);return a!==-1?[...n.slice(0,a+1),r,...n.slice(a+1)]:[...n,r]}else return[...n,r]}const $a={"User-Agent":`Agents/JavaScript ${z.version}`,"X-OpenAI-Agents-SDK":`openai-agents-sdk.${z.version}`},ac=`openai-agents-sdk.${z.version}`;function ic(n,e){const{name:t,arguments:r,...s}=e;return new be({type:"hosted_tool_call",name:t,arguments:JSON.stringify(r),status:"in_progress",providerData:{...s}},n)}function Fa(n){const{name:e,arguments:t,providerData:r}=n.rawItem,{itemId:s,serverLabel:a,...i}=r??{};if(!s||!a)throw new Error("Invalid approval item for Realtime MCP approval request");return{type:"mcp_approval_request",itemId:s,serverLabel:a,...i,name:e,arguments:t?JSON.parse(t):{},approved:null}}class oc extends ut{constructor(t){super(t);_(this,"voice");this.voice=t.voice}}function uc(n){return{debounceTextLength:n.debounceTextLength??100}}function cc({policyHint:n,...e}){const t=Tr(e),r=n??t.name;return{...t,policyHint:r,run:async s=>{const a=await t.run(s);return{...a,guardrail:{...a.guardrail,policyHint:r}}}}}function dc(n){return`
⚠️ Your last answer was blocked. 
Failed Guardrail Reason: ${n.guardrail.policyHint}. 
Failure Details: ${JSON.stringify(n.output.outputInfo??{})}. 
Please respond again following policy. Apologize for not being able to answer the question (while avoiding the specific reason) and divert discussion back to an approved topic immediately and not invite more discussion.
`.trim()}function ft(n,e){return n in e&&typeof e[n]<"u"}function lc(n){return ft("modalities",n)||ft("inputAudioFormat",n)||ft("outputAudioFormat",n)||ft("inputAudioTranscription",n)||ft("turnDetection",n)||ft("inputAudioNoiseReduction",n)||ft("speed",n)}function pc(n){var e,t,r,s,a,i,u,l;if(!lc(n)){const c=(e=n.audio)!=null&&e.input?{format:tr(n.audio.input.format),noiseReduction:n.audio.input.noiseReduction??null,transcription:n.audio.input.transcription,turnDetection:n.audio.input.turnDetection}:void 0,p=((r=(t=n.audio)==null?void 0:t.output)==null?void 0:r.voice)??n.voice,f=(s=n.audio)!=null&&s.output||typeof p<"u"?{format:tr((i=(a=n.audio)==null?void 0:a.output)==null?void 0:i.format),voice:p,speed:(l=(u=n.audio)==null?void 0:u.output)==null?void 0:l.speed}:void 0;return{model:n.model,instructions:n.instructions,toolChoice:n.toolChoice,tools:n.tools,tracing:n.tracing,providerData:n.providerData,prompt:n.prompt,outputModalities:n.outputModalities,audio:c||f?{input:c,output:f}:void 0}}return{model:n.model,instructions:n.instructions,toolChoice:n.toolChoice,tools:n.tools,tracing:n.tracing,providerData:n.providerData,prompt:n.prompt,outputModalities:n.modalities,audio:{input:{format:tr(n.inputAudioFormat),noiseReduction:n.inputAudioNoiseReduction??null,transcription:n.inputAudioTranscription,turnDetection:n.turnDetection},output:{format:tr(n.outputAudioFormat),voice:n.voice,speed:n.speed}}}}function tr(n){if(!n)return;if(typeof n=="object")return n;const e=String(n);return e==="pcm16"?{type:"audio/pcm",rate:24e3}:e==="g711_ulaw"?{type:"audio/pcmu"}:e==="g711_alaw"?{type:"audio/pcma"}:{type:"audio/pcm",rate:24e3}}m({itemId:d()});const La=he("role",[m({itemId:d(),previousItemId:d().nullable().optional(),type:g("message"),role:g("system"),content:J(m({type:g("input_text"),text:d()}))}),m({itemId:d(),previousItemId:d().nullable().optional(),type:g("message"),role:g("user"),status:oe(["in_progress","completed"]),content:J(m({type:g("input_text"),text:d()}).or(m({type:g("input_audio"),audio:d().nullable().optional(),transcript:d().nullable()})))}),m({itemId:d(),previousItemId:d().nullable().optional(),type:g("message"),role:g("assistant"),status:oe(["in_progress","completed","incomplete"]),content:J(m({type:g("output_text"),text:d()}).or(m({type:g("output_audio"),audio:d().nullable().optional(),transcript:d().nullable().optional()})))})]),Za=m({itemId:d(),previousItemId:d().nullable().optional(),type:g("function_call"),status:oe(["in_progress","completed","incomplete"]),arguments:d(),name:d(),output:d().nullable()}),Ua=m({itemId:d(),previousItemId:d().nullable().optional(),type:oe(["mcp_call","mcp_tool_call"]),status:oe(["in_progress","completed","incomplete"]),arguments:d(),name:d(),output:d().nullable()}),fc=m({itemId:d(),type:g("mcp_approval_request"),serverLabel:d(),name:d(),arguments:re(d(),Z()),approved:at().optional().nullable()}),Se=Ds("openai-agents:realtime"),qa=m({id:d().optional().nullable(),conversation_id:d().optional().nullable(),max_output_tokens:A().or(g("inf")).optional().nullable(),metadata:re(d(),Z()).optional().nullable(),output_modalities:J(d()).optional().nullable(),object:g("realtime.response").optional().nullable(),output:J(Z()).optional().nullable(),audio:m({output:m({format:Z().optional().nullable(),voice:d().optional().nullable()}).optional().nullable()}).optional().nullable(),status:oe(["completed","incomplete","failed","cancelled","in_progress"]).optional().nullable(),status_details:re(d(),Z()).optional().nullable(),usage:m({input_tokens:A().optional(),input_token_details:re(d(),Z()).optional().nullable(),output_tokens:A().optional(),output_token_details:re(d(),Z()).optional().nullable()}).optional().nullable()}),hc=m({id:d().optional(),audio:d().nullable().optional(),text:d().nullable().optional(),transcript:d().nullable().optional(),type:ms([g("input_text"),g("input_audio"),g("item_reference"),g("output_text"),g("output_audio")])}),Ot=m({id:d().optional(),arguments:d().optional(),call_id:d().optional(),content:J(hc).optional(),name:d().optional(),output:d().nullable().optional(),role:oe(["user","assistant","system"]).optional(),status:oe(["completed","incomplete","in_progress"]).optional(),type:oe(["message","function_call","function_call_output","mcp_list_tools","mcp_tool_call","mcp_call","mcp_approval_request","mcp_approval_response"]).optional(),approval_request_id:d().nullable().optional(),approve:at().nullable().optional(),reason:d().nullable().optional(),server_label:d().optional(),error:Z().nullable().optional(),tools:J(m({name:d(),description:d(),input_schema:re(Z()).optional()}).passthrough()).optional()}).passthrough(),mc=m({type:g("conversation.created"),event_id:d(),conversation:m({id:d().optional(),object:g("realtime.conversation").optional()})}),gc=m({type:g("conversation.item.added"),event_id:d(),item:Ot,previous_item_id:d().nullable().optional()}),_c=m({type:g("conversation.item.done"),event_id:d(),item:Ot,previous_item_id:d().nullable().optional()}),yc=m({type:g("conversation.item.deleted"),event_id:d(),item_id:d()}),vc=m({type:g("conversation.item.input_audio_transcription.completed"),event_id:d(),item_id:d(),content_index:A(),transcript:d(),logprobs:J(Z()).nullable().optional()}),wc=m({type:g("conversation.item.input_audio_transcription.delta"),event_id:d(),item_id:d(),content_index:A().optional(),delta:d().optional(),logprobs:J(Z()).nullable().optional()}),bc=m({type:g("conversation.item.input_audio_transcription.failed"),event_id:d(),item_id:d(),content_index:A(),error:m({code:d().optional(),message:d().optional(),param:d().optional(),type:d().optional()})}),xc=m({type:g("conversation.item.retrieved"),event_id:d(),item:Ot}),Sc=m({type:g("conversation.item.truncated"),event_id:d(),item_id:d(),audio_end_ms:A(),content_index:A()}),Ic=m({type:g("conversation.item.create"),item:Ot,event_id:d().optional(),previous_item_id:d().nullable().optional()}),Tc=m({type:g("conversation.item.delete"),item_id:d(),event_id:d().optional()}),kc=m({type:g("conversation.item.retrieve"),item_id:d(),event_id:d().optional()}),Ac=m({type:g("conversation.item.truncate"),item_id:d(),audio_end_ms:A(),content_index:A(),event_id:d().optional()}),Cc=m({type:g("error"),event_id:d().optional(),error:Z().optional()}),Ec=m({type:g("input_audio_buffer.cleared"),event_id:d()}),Oc=m({type:g("input_audio_buffer.append"),audio:d(),event_id:d().optional()}),Rc=m({type:g("input_audio_buffer.clear"),event_id:d().optional()}),Nc=m({type:g("input_audio_buffer.commit"),event_id:d().optional()}),Dc=m({type:g("input_audio_buffer.committed"),event_id:d(),item_id:d(),previous_item_id:d().nullable().optional()}),Pc=m({type:g("input_audio_buffer.speech_started"),event_id:d(),item_id:d(),audio_start_ms:A()}),Mc=m({type:g("input_audio_buffer.speech_stopped"),event_id:d(),item_id:d(),audio_end_ms:A()}),jc=m({type:g("output_audio_buffer.started"),event_id:d()}).passthrough(),$c=m({type:g("output_audio_buffer.stopped"),event_id:d()}).passthrough(),Fc=m({type:g("output_audio_buffer.cleared"),event_id:d()}),Lc=m({type:g("rate_limits.updated"),event_id:d(),rate_limits:J(m({limit:A().optional(),name:oe(["requests","tokens"]).optional(),remaining:A().optional(),reset_seconds:A().optional()}))}),Zc=m({type:g("response.output_audio.delta"),event_id:d(),item_id:d(),content_index:A(),delta:d(),output_index:A(),response_id:d()}),Uc=m({type:g("response.output_audio.done"),event_id:d(),item_id:d(),content_index:A(),output_index:A(),response_id:d()}),qc=m({type:g("response.output_audio_transcript.delta"),event_id:d(),item_id:d(),content_index:A(),delta:d(),output_index:A(),response_id:d()}),Jc=m({type:g("response.output_audio_transcript.done"),event_id:d(),item_id:d(),content_index:A(),transcript:d(),output_index:A(),response_id:d()}),Bc=m({type:g("response.content_part.added"),event_id:d(),item_id:d(),content_index:A(),output_index:A(),response_id:d(),part:m({audio:d().optional(),text:d().optional(),transcript:d().optional(),type:oe(["text","audio"]).optional()})}),Gc=m({type:g("response.content_part.done"),event_id:d(),item_id:d(),content_index:A(),output_index:A(),response_id:d(),part:m({audio:d().optional(),text:d().optional(),transcript:d().optional(),type:oe(["text","audio"]).optional()})}),zc=m({type:g("response.created"),event_id:d(),response:qa}),Ja=m({type:g("response.done"),event_id:d(),response:qa}),Vc=m({type:g("response.function_call_arguments.delta"),event_id:d(),item_id:d(),call_id:d(),delta:d(),output_index:A(),response_id:d()}),Wc=m({type:g("response.function_call_arguments.done"),event_id:d(),item_id:d(),call_id:d(),arguments:d(),output_index:A(),response_id:d()}),Hc=m({type:g("response.output_item.added"),event_id:d(),item:Ot,output_index:A(),response_id:d()}),Kc=m({type:g("response.output_item.done"),event_id:d(),item:Ot,output_index:A(),response_id:d()}),Yc=m({type:g("response.output_text.delta"),event_id:d(),item_id:d(),content_index:A(),delta:d(),output_index:A(),response_id:d()}),Xc=m({type:g("response.output_text.done"),event_id:d(),item_id:d(),content_index:A(),text:d(),output_index:A(),response_id:d()}),Qc=m({type:g("session.created"),event_id:d(),session:Z()}),ed=m({type:g("session.updated"),event_id:d(),session:Z()}),td=m({type:g("response.cancel"),event_id:d().optional(),response_id:d().optional()}),nd=m({type:g("response.create"),event_id:d().optional(),response:Z().optional()}),rd=m({type:g("session.update"),event_id:d().optional(),session:Z()}),sd=m({type:g("mcp_list_tools.in_progress"),event_id:d().optional(),item_id:d().optional()}),ad=m({type:g("mcp_list_tools.completed"),event_id:d().optional(),item_id:d().optional()}),id=m({type:g("response.mcp_call_arguments.delta"),event_id:d(),response_id:d(),item_id:d(),output_index:A(),delta:d(),obfuscation:d()}),od=m({type:g("response.mcp_call_arguments.done"),event_id:d(),response_id:d(),item_id:d(),output_index:A(),arguments:d()}),ud=m({type:g("response.mcp_call.in_progress"),event_id:d(),output_index:A(),item_id:d()}),cd=m({type:g("response.mcp_call.completed"),event_id:d(),output_index:A(),item_id:d()}),dd=m({type:g("mcp_list_tools.failed"),event_id:d().optional(),item_id:d().optional()}),ld=m({type:d(),event_id:d().optional().nullable()}).passthrough(),pd=he("type",[mc,gc,_c,yc,vc,wc,bc,xc,Sc,Cc,Ec,Dc,Pc,Mc,jc,$c,Fc,Lc,Zc,Uc,qc,Jc,Bc,Gc,zc,Ja,Vc,Wc,Hc,Kc,Yc,Xc,Qc,ed,sd,ad,dd,id,od,ud,cd]);he("type",[Ic,Tc,kc,Ac,Oc,Rc,Nc,td,nd,rd]);function Ur(n){const e=JSON.parse(n.data.toString()),t=pd.safeParse(e);if(!t.success){const r=ld.safeParse(e);return r.success?{data:r.data,isGeneric:!0}:{data:null,isGeneric:!0}}return{data:t.data,isGeneric:!1}}const Ba="gpt-realtime",Ae={outputModalities:["audio"],audio:{input:{format:{type:"audio/pcm",rate:24e3},transcription:{model:"gpt-4o-mini-transcribe"},turnDetection:{type:"semantic_vad"},noiseReduction:null},output:{format:{type:"audio/pcm",rate:24e3},speed:1}}},Br=class Br extends Sr{constructor(t={}){super();I(this,vt);I(this,_n);I(this,fe,null);I(this,yn,null);_(this,"eventEmitter",new Gn);v(this,vt,t.model??Ba),v(this,_n,t.apiKey)}get currentModel(){return o(this,vt)}set currentModel(t){v(this,vt,t)}get _rawSessionConfig(){return o(this,yn)??null}async _getApiKey(t){const r=t.apiKey??o(this,_n);return typeof r=="function"?await r():r}_onMessage(t){var a,i,u,l,c,p;const{data:r,isGeneric:s}=Ur(t);if(r!==null&&(this.emit("*",r),!s)){if(r.type==="error"?this.emit("error",{type:"error",error:r}):this.emit(r.type,r),r.type==="response.created"){this.emit("turn_started",{type:"response_started",providerData:{...r}});return}if(r.type==="session.updated"&&v(this,yn,r.session),r.type==="response.done"){const f=Ja.safeParse(r);if(!f.success){Se.error("Error parsing response done event",f.error);return}const h=((a=f.data.response.usage)==null?void 0:a.input_tokens)??0,b=((i=f.data.response.usage)==null?void 0:i.output_tokens)??0,y=h+b,w=new Wn({inputTokens:h,inputTokensDetails:((u=f.data.response.usage)==null?void 0:u.input_token_details)??{},outputTokens:b,outputTokensDetails:((l=f.data.response.usage)==null?void 0:l.output_token_details)??{},totalTokens:y});this.emit("usage_update",w),this.emit("turn_done",{type:"response_done",response:{id:f.data.response.id??"",output:f.data.response.output??[],usage:{inputTokens:h,inputTokensDetails:((c=f.data.response.usage)==null?void 0:c.input_token_details)??{},outputTokens:b,outputTokensDetails:((p=f.data.response.usage)==null?void 0:p.output_token_details)??{},totalTokens:y}}});return}if(r.type==="response.output_audio.done"){this.emit("audio_done");return}if(r.type==="conversation.item.deleted"){this.emit("item_deleted",{itemId:r.item_id});return}if(r.type==="conversation.item.input_audio_transcription.completed"||r.type==="conversation.item.truncated"){this.sendEvent({type:"conversation.item.retrieve",item_id:r.item_id});return}if(r.type==="conversation.item.input_audio_transcription.delta"||r.type==="response.output_text.delta"||r.type==="response.output_audio_transcript.delta"||r.type==="response.function_call_arguments.delta"){r.type==="response.output_audio_transcript.delta"&&this.emit("audio_transcript_delta",{type:"transcript_delta",delta:r.delta,itemId:r.item_id,responseId:r.response_id});return}if(r.type==="conversation.item.added"||r.type==="conversation.item.done"||r.type==="conversation.item.retrieved"){if(r.item.type==="mcp_list_tools"&&r.type==="conversation.item.done"){const f=r.item.server_label??"",h=r.item.tools??[];try{this.emit("mcp_tools_listed",{serverLabel:f,tools:h})}catch(b){Se.error("Error emitting mcp_tools_listed",b,r.item)}return}if(r.item.type==="message"){const f=r.type==="conversation.item.added"||r.type==="conversation.item.done"?r.previous_item_id:null,h=La.parse({itemId:r.item.id,previousItemId:f,type:r.item.type,role:r.item.role,content:r.item.content,status:r.item.status});this.emit("item_update",h);return}if(r.item.type==="mcp_approval_request"&&r.type==="conversation.item.done"){const f=r.item,h=fc.parse({itemId:f.id,type:f.type,serverLabel:f.server_label,name:f.name,arguments:JSON.parse(f.arguments||"{}"),approved:f.approved});this.emit("item_update",h),this.emit("mcp_approval_request",h);return}if(r.item.type==="mcp_tool_call"||r.item.type==="mcp_call"){const f=r.type==="conversation.item.done"?"completed":"in_progress",h=Ua.parse({itemId:r.item.id,type:r.item.type,status:f,arguments:r.item.arguments,name:r.item.name,output:r.item.output});this.emit("item_update",h),r.type==="conversation.item.done"&&this.emit("mcp_tool_call_completed",h);return}}if(r.type==="response.mcp_call.in_progress"){const f=r;this.sendEvent({type:"conversation.item.retrieve",item_id:f.item_id});return}if(r.type==="mcp_list_tools.in_progress"){const f=r;f.item_id&&this.sendEvent({type:"conversation.item.retrieve",item_id:f.item_id});return}if(r.type==="response.output_item.done"||r.type==="response.output_item.added"){const f=r.item;if(f.type==="function_call"&&f.status==="completed"){const h=Za.parse({itemId:f.id,type:f.type,status:"in_progress",arguments:f.arguments,name:f.name,output:null});this.emit("item_update",h),this.emit("function_call",{id:f.id,type:"function_call",callId:f.call_id??"",arguments:f.arguments??"",name:f.name??""});return}if(f.type==="mcp_tool_call"||f.type==="mcp_call"){const h=Ua.parse({itemId:f.id,type:f.type,status:r.type==="response.output_item.done"?"completed":"in_progress",arguments:f.arguments,name:f.name,output:f.output});this.emit("item_update",h);return}if(f.type==="message"){const h=La.parse({itemId:r.item.id,type:r.item.type,role:r.item.role,content:r.item.content,status:r.type==="response.output_item.done"?f.status??"completed":f.status??"in_progress"});this.emit("item_update",h);return}}}}_onError(t){this.emit("error",{type:"error",error:t})}_onOpen(){this.emit("connected")}_onClose(){this.emit("disconnected")}sendMessage(t,r,{triggerResponse:s=!0}={}){const a=typeof t=="string"?[{type:"input_text",text:t}]:t.content.map(i=>i.type==="input_image"?{type:"input_image",image_url:i.image,...i.providerData??{}}:i);this.sendEvent({type:"conversation.item.create",item:{type:"message",role:"user",content:a},...r}),s&&this.sendEvent({type:"response.create"})}addImage(t,{triggerResponse:r=!0}={}){this.sendMessage({type:"message",role:"user",content:[{type:"input_image",image:t}]},{},{triggerResponse:r})}_getMergedSessionConfig(t){var a,i,u,l,c,p,f,h,b,y,w,O,R,U,X,G,V,K,ee,ve,Ce,Ie,Ha,Ka,Ya,Xa,Qa,ei;const r=pc(t),s={type:"realtime",instructions:r.instructions,model:r.model??o(this,vt),output_modalities:r.outputModalities??Ae.outputModalities,audio:{input:{format:((i=(a=r.audio)==null?void 0:a.input)==null?void 0:i.format)??((l=(u=Ae.audio)==null?void 0:u.input)==null?void 0:l.format),noise_reduction:((p=(c=r.audio)==null?void 0:c.input)==null?void 0:p.noiseReduction)??((h=(f=Ae.audio)==null?void 0:f.input)==null?void 0:h.noiseReduction),transcription:((y=(b=r.audio)==null?void 0:b.input)==null?void 0:y.transcription)??((O=(w=Ae.audio)==null?void 0:w.input)==null?void 0:O.transcription),turn_detection:Br.buildTurnDetectionConfig((U=(R=r.audio)==null?void 0:R.input)==null?void 0:U.turnDetection)??((G=(X=Ae.audio)==null?void 0:X.input)==null?void 0:G.turnDetection)},output:{format:((K=(V=r.audio)==null?void 0:V.output)==null?void 0:K.format)??((ve=(ee=Ae.audio)==null?void 0:ee.output)==null?void 0:ve.format),voice:((Ie=(Ce=r.audio)==null?void 0:Ce.output)==null?void 0:Ie.voice)??((Ka=(Ha=Ae.audio)==null?void 0:Ha.output)==null?void 0:Ka.voice),speed:((Xa=(Ya=r.audio)==null?void 0:Ya.output)==null?void 0:Xa.speed)??((ei=(Qa=Ae.audio)==null?void 0:Qa.output)==null?void 0:ei.speed)}},tool_choice:r.toolChoice??Ae.toolChoice,...r.providerData??{}};return r.prompt&&(s.prompt={id:r.prompt.promptId,version:r.prompt.version,variables:r.prompt.variables}),r.tools&&r.tools.length>0&&(s.tools=r.tools.map(wd=>({...wd,strict:void 0}))),s}static buildTurnDetectionConfig(t){if(typeof t>"u")return;const{type:r,createResponse:s,create_response:a,eagerness:i,interruptResponse:u,interrupt_response:l,prefixPaddingMs:c,prefix_padding_ms:p,silenceDurationMs:f,silence_duration_ms:h,threshold:b,idleTimeoutMs:y,idle_timeout_ms:w,...O}=t,R={type:r,create_response:s||a,eagerness:i,interrupt_response:u||l,prefix_padding_ms:c||p,silence_duration_ms:f||h,idle_timeout_ms:y||w,threshold:b,...O};return Object.keys(R).forEach(U=>{R[U]===void 0&&delete R[U]}),Object.keys(R).length>0?R:void 0}set _tracingConfig(t){v(this,fe,t)}_updateTracingConfig(t){var r,s,a;if(typeof o(this,fe)>"u"&&v(this,fe,null),t==="auto"){this.sendEvent({type:"session.update",session:{type:"realtime",tracing:"auto"}});return}if(o(this,fe)!==null&&typeof o(this,fe)!="string"&&typeof t!="string"){Se.warn("Tracing config is already set, skipping setting it again. This likely happens when you already set a tracing config on session creation.");return}if(t===null){Se.debug("Disabling tracing for this session. It cannot be turned on for this session from this point on."),this.sendEvent({type:"session.update",session:{type:"realtime",tracing:null}});return}if(o(this,fe)===null||typeof o(this,fe)=="string"){this.sendEvent({type:"session.update",session:{type:"realtime",tracing:t}});return}if((t==null?void 0:t.group_id)!==((r=o(this,fe))==null?void 0:r.group_id)||(t==null?void 0:t.metadata)!==((s=o(this,fe))==null?void 0:s.metadata)||(t==null?void 0:t.workflow_name)!==((a=o(this,fe))==null?void 0:a.workflow_name)){Se.warn("Mismatch in tracing config. Ignoring the new tracing config. This likely happens when you already set a tracing config on session creation. Current tracing config: %s, new tracing config: %s",JSON.stringify(o(this,fe)),JSON.stringify(t));return}this.sendEvent({type:"session.update",session:{type:"realtime",tracing:t}})}updateSessionConfig(t){const r=this._getMergedSessionConfig(t);this.sendEvent({type:"session.update",session:r})}sendFunctionCallOutput(t,r,s=!0){this.sendEvent({type:"conversation.item.create",item:{type:"function_call_output",output:r,call_id:t.callId}});try{const a=Za.parse({itemId:t.id,previousItemId:t.previousItemId,type:"function_call",status:"completed",arguments:t.arguments,name:t.name,output:r});this.emit("item_update",a)}catch(a){Se.error("Error parsing tool call item",a,t)}s&&this.sendEvent({type:"response.create"})}sendAudio(t,{commit:r=!1}={}){this.sendEvent({type:"input_audio_buffer.append",audio:Da(t)}),r&&this.sendEvent({type:"input_audio_buffer.commit"})}resetHistory(t,r){const{removals:s,additions:a,updates:i}=rc(t,r),u=new Set(s.map(c=>c.itemId));for(const c of i)u.add(c.itemId);if(u.size>0)for(const c of u)this.sendEvent({type:"conversation.item.delete",item_id:c});const l=[...a,...i];for(const c of l)if(c.type==="message"){const p={type:"message",role:c.role,content:c.content,id:c.itemId};c.role!=="system"&&c.status&&(p.status=c.status),this.sendEvent({type:"conversation.item.create",item:p})}else c.type==="function_call"&&Se.warn("Function calls cannot be manually added or updated at the moment. Ignoring.")}sendMcpResponse(t,r){this.sendEvent({type:"conversation.item.create",previous_item_id:t.itemId,item:{type:"mcp_approval_response",approval_request_id:t.itemId,approve:r}})}};vt=new WeakMap,_n=new WeakMap,fe=new WeakMap,yn=new WeakMap;let sn=Br;class Ga extends sn{constructor(t={}){if(typeof RTCPeerConnection>"u")throw new Error("WebRTC is not supported in this environment");super(t);_(this,"options");I(this,vn);I(this,H,{status:"disconnected",peerConnection:void 0,dataChannel:void 0,callId:void 0});I(this,wn);I(this,wt,!1);I(this,bn,!1);this.options=t,v(this,vn,t.baseUrl??"https://api.openai.com/v1/realtime/calls"),v(this,wn,t.useInsecureApiKey??!1)}get callId(){return o(this,H).callId}get status(){return o(this,H).status}get connectionState(){return o(this,H)}get muted(){return o(this,bn)}async connect(t){if(o(this,H).status==="connected")return;o(this,H).status==="connecting"&&Se.warn("Realtime connection already in progress. Please await original promise");const r=t.model??this.currentModel;this.currentModel=r;const s=t.url??o(this,vn),a=await this._getApiKey(t),i=typeof a=="string"&&a.startsWith("ek_");if(!o(this,wn)&&!i)throw new se("Using the WebRTC connection in a browser environment requires an ephemeral client key. If you need to use a regular API key, use the WebSocket transport or set the `useInsecureApiKey` option to true.");return new Promise(async(u,l)=>{var c,p;try{const f={...t.initialSessionConfig||{},model:this.currentModel},h=new URL(s);let b=new RTCPeerConnection;const y=b.createDataChannel("oai-events");let w;v(this,H,{status:"connecting",peerConnection:b,dataChannel:y,callId:w}),this.emit("connection_change",o(this,H).status),y.addEventListener("open",()=>{v(this,H,{status:"connected",peerConnection:b,dataChannel:y,callId:w}),this.updateSessionConfig(f),this.emit("connection_change",o(this,H).status),this._onOpen(),u()}),y.addEventListener("error",V=>{this.close(),this._onError(V),l(V)}),y.addEventListener("message",V=>{this._onMessage(V);const{data:K,isGeneric:ee}=Ur(V);!K||ee||(K.type==="response.created"?v(this,wt,!0):K.type==="response.done"&&v(this,wt,!1),K.type==="session.created"&&(this._tracingConfig=K.session.tracing,this._updateTracingConfig(f.tracing??"auto")))});const O=this.options.audioElement??document.createElement("audio");O.autoplay=!0,b.ontrack=V=>{O.srcObject=V.streams[0]};const R=this.options.mediaStream??await navigator.mediaDevices.getUserMedia({audio:!0});b.addTrack(R.getAudioTracks()[0]),this.options.changePeerConnection&&(b=await this.options.changePeerConnection(b),v(this,H,{...o(this,H),peerConnection:b}));const U=await b.createOffer();if(await b.setLocalDescription(U),!U.sdp)throw new Error("Failed to create offer");const X=await fetch(h,{method:"POST",body:U.sdp,headers:{"Content-Type":"application/sdp",Authorization:`Bearer ${a}`,"X-OpenAI-Agents-SDK":$a["X-OpenAI-Agents-SDK"]}});w=(p=(c=X.headers)==null?void 0:c.get("Location"))==null?void 0:p.split("/").pop(),v(this,H,{...o(this,H),callId:w});const G={type:"answer",sdp:await X.text()};await b.setRemoteDescription(G)}catch(f){this.close(),this._onError(f),l(f)}})}sendEvent(t){if(!o(this,H).dataChannel||o(this,H).dataChannel.readyState!=="open")throw new Error("WebRTC data channel is not connected. Make sure you call `connect()` before sending events.");o(this,H).dataChannel.send(JSON.stringify(t))}mute(t){v(this,bn,t),o(this,H).peerConnection&&o(this,H).peerConnection.getSenders().forEach(s=>{s.track&&(s.track.enabled=!t)})}close(){if(o(this,H).dataChannel&&o(this,H).dataChannel.close(),o(this,H).peerConnection){const t=o(this,H).peerConnection;t.getSenders().forEach(r=>{var s;(s=r.track)==null||s.stop()}),t.close()}o(this,H).status!=="disconnected"&&(v(this,H,{status:"disconnected",peerConnection:void 0,dataChannel:void 0,callId:void 0}),this.emit("connection_change",o(this,H).status),this._onClose())}interrupt(){o(this,wt)&&(this.sendEvent({type:"response.cancel"}),v(this,wt,!1)),this.sendEvent({type:"output_audio_buffer.clear"})}}vn=new WeakMap,H=new WeakMap,wn=new WeakMap,wt=new WeakMap,bn=new WeakMap;const fd=globalThis.WebSocket;class za extends sn{constructor(t={}){super(t);I(this,rr);I(this,Qe);I(this,et);I(this,ie,{status:"disconnected",websocket:void 0});I(this,xn);I(this,qe);I(this,bt);_(this,"_firstAudioTimestamp");_(this,"_audioLengthMs",0);I(this,xt,!1);I(this,Zt);I(this,Sn);v(this,et,t.url),v(this,xn,t.useInsecureApiKey??!1),v(this,Zt,t.createWebSocket),v(this,Sn,t.skipOpenEventListeners??!1)}getCommonRequestHeaders(){return $a}get status(){return o(this,ie).status}get connectionState(){return o(this,ie)}get muted(){return null}get currentItemId(){return o(this,qe)}_onAudio(t){this.emit("audio",t)}async connect(t){const r=t.model??this.currentModel;this.currentModel=r,v(this,Qe,await this._getApiKey(t));const s=t.url??o(this,et)??`wss://api.openai.com/v1/realtime?model=${this.currentModel}`;v(this,et,s);const a={...t.initialSessionConfig||{},model:this.currentModel};await new Promise((i,u)=>{F(this,rr,si).call(this,i,u,a).catch(u)}),await this.updateSessionConfig(a)}sendEvent(t){if(!o(this,ie).websocket)throw new Error("WebSocket is not connected. Make sure you call `connect()` before sending events.");o(this,ie).websocket.send(JSON.stringify(t))}close(){var t;(t=o(this,ie).websocket)==null||t.close(),v(this,qe,void 0),this._firstAudioTimestamp=void 0,this._audioLengthMs=0,v(this,bt,void 0)}mute(t){throw new Error("Mute is not supported for the WebSocket transport. You have to mute the audio input yourself.")}sendAudio(t,r={}){o(this,ie).status==="connected"&&super.sendAudio(t,r)}_cancelResponse(){o(this,xt)&&(this.sendEvent({type:"response.cancel"}),v(this,xt,!1))}_interrupt(t,r=!0){if(t<0)return;r&&this._cancelResponse();const s=this._audioLengthMs??Number.POSITIVE_INFINITY,a=Math.max(0,Math.floor(Math.min(t,s)));this.emit("audio_interrupted"),this.sendEvent({type:"conversation.item.truncate",item_id:o(this,qe),content_index:o(this,bt),audio_end_ms:a})}interrupt(t=!0){if(!o(this,qe)||typeof this._firstAudioTimestamp!="number")return;const r=Date.now()-this._firstAudioTimestamp;r>=0&&this._interrupt(r,t),v(this,qe,void 0),this._firstAudioTimestamp=void 0,this._audioLengthMs=0,v(this,bt,void 0)}}Qe=new WeakMap,et=new WeakMap,ie=new WeakMap,xn=new WeakMap,qe=new WeakMap,bt=new WeakMap,xt=new WeakMap,Zt=new WeakMap,Sn=new WeakMap,rr=new WeakSet,si=async function(t,r,s){if(o(this,ie).websocket){t();return}if(!o(this,Qe))throw new se("API key is not set. Please call `connect()` with an API key first.");if(!o(this,Qe).startsWith("ek_")&&!o(this,xn))throw new se("Using the WebSocket connection in a browser environment requires an ephemeral client key. If you have to use a regular API key, set the `useInsecureApiKey` option to true.");let a=null;if(o(this,Zt))a=await o(this,Zt).call(this,{url:o(this,et),apiKey:o(this,Qe)});else{const u=["realtime","openai-insecure-api-key."+o(this,Qe),ac];a=new fd(o(this,et),u)}v(this,ie,{status:"connecting",websocket:a}),this.emit("connection_change",o(this,ie).status);const i=()=>{v(this,ie,{status:"connected",websocket:a}),this.emit("connection_change",o(this,ie).status),this._onOpen(),t()};o(this,Sn)===!0?i():a.addEventListener("open",i),a.addEventListener("error",u=>{this._onError(u),v(this,ie,{status:"disconnected",websocket:void 0}),this.emit("connection_change",o(this,ie).status),r(u)}),a.addEventListener("message",u=>{var p,f,h,b,y,w,O;this._onMessage(u);const{data:l,isGeneric:c}=Ur(u);if(!(!l||c))if(l.type==="response.output_audio.delta"){v(this,bt,l.content_index),v(this,qe,l.item_id),this._firstAudioTimestamp===void 0&&(this._firstAudioTimestamp=Date.now(),this._audioLengthMs=0);const R=Na(l.delta),U=(h=(f=(p=this._rawSessionConfig)==null?void 0:p.audio)==null?void 0:f.output)==null?void 0:h.format;if(U&&typeof U=="object"){const G=U.type;if(G==="audio/pcmu"||G==="audio/pcma")this._audioLengthMs+=R.byteLength/8;else if(G==="audio/pcm"){const V=U.rate??24e3;this._audioLengthMs+=R.byteLength/2/V*1e3}else this._audioLengthMs+=R.byteLength/24/2}else typeof U=="string"?U.startsWith("g711_")?this._audioLengthMs+=R.byteLength/8:this._audioLengthMs+=R.byteLength/24/2:this._audioLengthMs+=R.byteLength/24/2;const X={type:"audio",data:R,responseId:l.response_id};this._onAudio(X)}else if(l.type==="input_audio_buffer.speech_started"){const R=((O=(w=(y=(b=this._rawSessionConfig)==null?void 0:b.audio)==null?void 0:y.input)==null?void 0:w.turn_detection)==null?void 0:O.interrupt_response)??!1;this.interrupt(!R)}else l.type==="response.created"?v(this,xt,!0):l.type==="response.done"?v(this,xt,!1):l.type==="session.created"&&(this._tracingConfig=l.session.tracing,this._updateTracingConfig(s.tracing??"auto"))}),a.addEventListener("close",()=>{v(this,ie,{status:"disconnected",websocket:void 0}),this.emit("connection_change",o(this,ie).status),this._onClose()})};const Va=Symbol("backgroundResult");function hd(n){return{[Va]:!0,content:n}}function Wa(n){return typeof n=="object"&&n!==null&&Va in n}function md(n){return n.type==="function"||n.type==="hosted_tool"&&n.name==="hosted_mcp"}function gd(n){if(n.type==="function")return n;if(n.type==="hosted_tool"&&n.name==="hosted_mcp"){const e=n.providerData.server_url&&n.providerData.server_url.length>0?n.providerData.server_url:void 0;return{type:"mcp",server_label:n.providerData.server_label,server_url:e,headers:n.providerData.headers,allowed_tools:n.providerData.allowed_tools,require_approval:n.providerData.require_approval}}throw new se(`Invalid tool type: ${n}`)}function _d(){return JSON.parse(JSON.stringify(Ae))}class yd extends Gn{constructor(t,r={}){super();I(this,Y);_(this,"initialAgent");_(this,"options");I(this,$);I(this,D);I(this,Ut);I(this,P);I(this,qt,[]);I(this,Jt);I(this,In,{});I(this,Q,[]);I(this,Bt);I(this,Gt,{});I(this,Pe,!1);I(this,Tn,new Map);I(this,St,[]);I(this,kn,_d());I(this,An,!0);this.initialAgent=t,this.options=r,typeof r.transport>"u"&&sc()||r.transport==="webrtc"?v(this,$,new Ga):r.transport==="websocket"||typeof r.transport>"u"?v(this,$,new za):v(this,$,r.transport),v(this,D,t),v(this,P,new At({...r.context??{},history:o(this,Q)})),v(this,qt,(r.outputGuardrails??[]).map(cc)),v(this,Jt,uc(r.outputGuardrailSettings??{})),v(this,Bt,r.historyStoreAudio??!1),v(this,An,r.automaticallyTriggerResponseForMcpToolCalls??!0)}get transport(){return o(this,$)}get currentAgent(){return o(this,D)}get usage(){return o(this,P).usage}get context(){return o(this,P)}get muted(){return o(this,$).muted}get history(){return o(this,Q)}get availableMcpTools(){return o(this,St)}async updateAgent(t){return o(this,D).emit("agent_handoff",o(this,P),t),this.emit("agent_handoff",o(this,P),o(this,D),t),await F(this,Y,sr).call(this,t),await o(this,$).updateSessionConfig(await F(this,Y,ar).call(this)),t}async connect(t){await F(this,Y,sr).call(this,this.initialAgent),F(this,Y,oi).call(this),await o(this,$).connect({apiKey:t.apiKey??this.options.apiKey,model:this.options.model,url:t.url,initialSessionConfig:await F(this,Y,ar).call(this,this.options.config)}),v(this,Q,[]),this.emit("history_updated",o(this,Q))}updateHistory(t){let r;typeof t=="function"?r=t(o(this,Q)):r=t,o(this,$).resetHistory(o(this,Q),r)}sendMessage(t,r={}){o(this,$).sendMessage(t,r)}addImage(t,{triggerResponse:r=!0}={}){o(this,$).addImage(t,{triggerResponse:r})}mute(t){o(this,$).mute(t)}close(){v(this,Gt,{}),o(this,$).close()}sendAudio(t,r={}){o(this,$).sendAudio(t,r)}interrupt(){o(this,$).interrupt()}async approve(t,r={alwaysApprove:!1}){o(this,P).approveTool(t,r);const s=o(this,D).tools.find(a=>a.name===t.rawItem.name);if(s&&s.type==="function"&&t.rawItem.type==="function_call")await F(this,Y,ir).call(this,t.rawItem,s);else if(t.rawItem.type==="hosted_tool_call"){r.alwaysApprove&&Se.warn("Always approving MCP tools is not supported. Use the allowed tools configuration instead.");const a=Fa(t);o(this,$).sendMcpResponse(a,!0)}else throw new me(`Tool ${t.rawItem.name} not found`)}async reject(t,r={alwaysReject:!1}){o(this,P).rejectTool(t,r);const s=o(this,D).tools.find(a=>a.name===t.rawItem.name);if(s&&s.type==="function"&&t.rawItem.type==="function_call")await F(this,Y,ir).call(this,t.rawItem,s);else if(t.rawItem.type==="hosted_tool_call"){r.alwaysReject&&Se.warn("Always rejecting MCP tools is not supported. Use the allowed tools configuration instead.");const a=Fa(t);o(this,$).sendMcpResponse(a,!1)}else throw new me(`Tool ${t.rawItem.name} not found`)}}$=new WeakMap,D=new WeakMap,Ut=new WeakMap,P=new WeakMap,qt=new WeakMap,Jt=new WeakMap,In=new WeakMap,Q=new WeakMap,Bt=new WeakMap,Gt=new WeakMap,Pe=new WeakMap,Tn=new WeakMap,St=new WeakMap,kn=new WeakMap,An=new WeakMap,Y=new WeakSet,sr=async function(t){v(this,D,t);const r=await o(this,D).getEnabledHandoffs(o(this,P)),s=r.map(l=>l.getHandoffAsFunctionTool()),a=(await o(this,D).getAllTools(o(this,P))).filter(md).map(gd),i=typeof o(this,D).tools<"u"||typeof o(this,D).mcpServers<"u",u=r.length>0;v(this,Ut,i||u?[...a,...s]:void 0),F(this,Y,Qr).call(this)},ar=async function(t={}){const r=await o(this,D).getSystemPrompt(o(this,P)),s=this.options.tracingDisabled?null:this.options.workflowName?{workflow_name:this.options.workflowName}:"auto";s!==null&&s!=="auto"?(this.options.groupId&&(s.group_id=this.options.groupId),this.options.traceMetadata&&(s.metadata=this.options.traceMetadata)):(this.options.groupId||this.options.traceMetadata)&&Se.warn("In order to set traceMetadata or a groupId you need to specify a workflowName.");const i={...{...o(this,kn)??{},...this.options.config??{},...t??{}},instructions:r,voice:o(this,D).voice,model:this.options.model,tools:o(this,Ut),tracing:s,prompt:typeof o(this,D).prompt=="function"?await o(this,D).prompt(o(this,P),o(this,D)):o(this,D).prompt};return v(this,kn,i),i},ai=async function(t,r){const s=await r.onInvokeHandoff(o(this,P),t.arguments);o(this,D).emit("agent_handoff",o(this,P),s),this.emit("agent_handoff",o(this,P),o(this,D),s),await F(this,Y,sr).call(this,s),await o(this,$).updateSessionConfig(await F(this,Y,ar).call(this));const a=Fs(s);return o(this,$).sendFunctionCallOutput(t,a,!0),s},ir=async function(t,r){o(this,P).context.history=JSON.parse(JSON.stringify(o(this,Q)));let s=t.arguments;if(r.parameters&&(ot(r.parameters)?s=r.parameters.parse(s):s=JSON.parse(s)),await r.needsApproval(o(this,P),s,t.callId)){const l=this.context.isToolApproved({toolName:r.name,callId:t.callId});if(l===!1){this.emit("agent_tool_start",o(this,P),o(this,D),r,{toolCall:t}),o(this,D).emit("agent_tool_start",o(this,P),r,{toolCall:t});const c="Tool execution was not approved.";o(this,$).sendFunctionCallOutput(t,c,!0),this.emit("agent_tool_end",o(this,P),o(this,D),r,c,{toolCall:t}),o(this,D).emit("agent_tool_end",o(this,P),r,c,{toolCall:t});return}else if(typeof l>"u"){this.emit("tool_approval_requested",o(this,P),o(this,D),{type:"function_approval",tool:r,approvalItem:new be(t,o(this,D))});return}}this.emit("agent_tool_start",o(this,P),o(this,D),r,{toolCall:t}),o(this,D).emit("agent_tool_start",o(this,P),r,{toolCall:t}),o(this,P).context.history=JSON.parse(JSON.stringify(o(this,Q)));const i=await r.invoke(o(this,P),t.arguments,{toolCall:t});let u;Wa(i)?(u=ze(i.content),o(this,$).sendFunctionCallOutput(t,u,!1)):(u=ze(i),o(this,$).sendFunctionCallOutput(t,u,!0)),this.emit("agent_tool_end",o(this,P),o(this,D),r,u,{toolCall:t}),o(this,D).emit("agent_tool_end",o(this,P),r,u,{toolCall:t})},ii=async function(t){const r=await o(this,D).getEnabledHandoffs(o(this,P)),s=new Map(r.map(l=>[l.toolName,l])),a=await o(this,D).getAllTools(o(this,P)),i=new Map(a.map(l=>[l.name,l])),u=s.get(t.name);if(u)await F(this,Y,ai).call(this,t,u);else{const l=i.get(t.name);if(l&&l.type==="function")await F(this,Y,ir).call(this,t,l);else throw new me(`Tool ${t.name} not found`)}},Xr=async function(t,r,s){if(o(this,qt).length===0)return;const a={agent:o(this,D),agentOutput:t,context:o(this,P)},u=(await Promise.all(o(this,qt).map(l=>l.run(a)))).find(l=>l.output.tripwireTriggered);if(u){if(o(this,Gt)[r])return;o(this,Gt)[r]=!0;const l=new Un(`Output guardrail triggered: ${JSON.stringify(u.output.outputInfo)}`,u);this.emit("guardrail_tripped",o(this,P),o(this,D),l,{itemId:s}),this.interrupt();const c=dc(u);this.sendMessage(c);return}},oi=function(){o(this,$).on("*",s=>{if(this.emit("transport_event",s),s.type==="conversation.item.input_audio_transcription.completed")try{const a=s;v(this,Q,ja(o(this,Q),a,o(this,Bt))),o(this,P).context.history=o(this,Q),this.emit("history_updated",o(this,Q))}catch(a){this.emit("error",{type:"error",error:a})}}),o(this,$).on("mcp_tools_listed",({serverLabel:s,tools:a})=>{try{o(this,Tn).set(s,a??[]),F(this,Y,Qr).call(this)}catch(i){this.emit("error",{type:"error",error:i})}}),o(this,$).on("audio",s=>{o(this,Pe)||(v(this,Pe,!0),this.emit("audio_start",o(this,P),o(this,D))),this.emit("audio",s)}),o(this,$).on("turn_started",()=>{v(this,Pe,!1),this.emit("agent_start",o(this,P),o(this,D)),o(this,D).emit("agent_start",o(this,P),o(this,D))}),o(this,$).on("turn_done",s=>{const a=s.response.output[s.response.output.length-1],i=Pa(a)??"",u=(a==null?void 0:a.id)??"";this.emit("agent_end",o(this,P),o(this,D),i),o(this,D).emit("agent_end",o(this,P),i),F(this,Y,Xr).call(this,i,s.response.id,u)}),o(this,$).on("audio_done",()=>{o(this,Pe)&&v(this,Pe,!1),this.emit("audio_stopped",o(this,P),o(this,D))});let t=0,r;o(this,$).on("audio_transcript_delta",s=>{try{const a=s.delta,i=s.itemId,u=s.responseId;r!==i&&(r=i,t=0);const c=(o(this,In)[i]??"")+a;if(o(this,In)[i]=c,o(this,Jt).debounceTextLength<0)return;const p=Math.floor(c.length/o(this,Jt).debounceTextLength);p>t&&(t=p,F(this,Y,Xr).call(this,c,u,i))}catch(a){this.emit("error",{type:"error",error:a})}}),o(this,$).on("item_update",s=>{try{const a=!o(this,Q).some(i=>i.itemId===s.itemId);if(v(this,Q,ja(o(this,Q),s,o(this,Bt))),o(this,P).context.history=o(this,Q),a){const i=o(this,Q).find(u=>u.itemId===s.itemId);i&&this.emit("history_added",i)}this.emit("history_updated",o(this,Q))}catch(a){this.emit("error",{type:"error",error:a})}}),o(this,$).on("item_deleted",s=>{try{v(this,Q,o(this,Q).filter(a=>a.itemId!==s.itemId)),o(this,P).context.history=o(this,Q),this.emit("history_updated",o(this,Q))}catch(a){this.emit("error",{type:"error",error:a})}}),o(this,$).on("function_call",async s=>{try{await F(this,Y,ii).call(this,s)}catch(a){Se.error("Error handling function call",a),this.emit("error",{type:"error",error:a})}}),o(this,$).on("usage_update",s=>{o(this,P).usage.add(s)}),o(this,$).on("audio_interrupted",()=>{o(this,Pe)&&v(this,Pe,!1),this.emit("audio_interrupted",o(this,P),o(this,D))}),o(this,$).on("error",s=>{this.emit("error",s)}),o(this,$).on("mcp_tool_call_completed",s=>{this.emit("mcp_tool_call_completed",o(this,P),o(this,D),s),o(this,An)&&o(this,$).sendEvent({type:"response.create"})}),o(this,$).on("mcp_approval_request",s=>{this.emit("tool_approval_requested",o(this,P),o(this,D),{type:"mcp_approval_request",approvalItem:ic(o(this,D),s)})})},Qr=function(){var l;const t=(l=o(this,Ut))==null?void 0:l.filter(c=>c.type==="mcp"),r=c=>{const p=c.allowed_tools;if(p){if(Array.isArray(p))return p;if(p&&Array.isArray(p.tool_names))return p.tool_names}},s=new Map;for(const c of t){const p=o(this,Tn).get(c.server_label)??[],f=r(c);for(const h of p)f&&!f.includes(h.name)||s.has(h.name)||s.set(h.name,h)}const a=Array.from(s.values()),i=o(this,St);(i.length!==a.length||JSON.stringify(i.map(c=>c.name).sort())!==JSON.stringify(a.map(c=>c.name).sort()))&&(v(this,St,a),this.emit("mcp_tools_changed",o(this,St)))};const vd={base64ToArrayBuffer:Na,arrayBufferToBase64:Da,getLastTextFromAudioOutputMessage:Pa};M.DEFAULT_OPENAI_REALTIME_MODEL=Ba,M.DEFAULT_OPENAI_REALTIME_SESSION_CONFIG=Ae,M.ModelBehaviorError=me,M.OpenAIRealtimeBase=sn,M.OpenAIRealtimeWebRTC=Ga,M.OpenAIRealtimeWebSocket=za,M.OutputGuardrailTripwireTriggered=Un,M.RealtimeAgent=oc,M.RealtimeSession=yd,M.UserError=se,M.backgroundResult=hd,M.isBackgroundResult=Wa,M.tool=Bn,M.utils=vd,Object.defineProperty(M,Symbol.toStringTag,{value:"Module"})}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3BlbmFpLXJlYWx0aW1lLWFnZW50cy51bWQuanMiLCJzb3VyY2VzIjpbIi4uL21ldGFkYXRhLm1qcyIsIi4uLy4uLy4uL2FnZW50cy1jb3JlL2Rpc3QvdXRpbHMvc2FmZUV4ZWN1dGUubWpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL29wZW5haS9saWIvcGFyc2VyLm1qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9vcGVuYWkvX3ZlbmRvci96b2QtdG8tanNvbi1zY2hlbWEvT3B0aW9ucy5tanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvb3BlbmFpL192ZW5kb3Ivem9kLXRvLWpzb24tc2NoZW1hL3V0aWwubWpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL29wZW5haS9fdmVuZG9yL3pvZC10by1qc29uLXNjaGVtYS9SZWZzLm1qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9vcGVuYWkvX3ZlbmRvci96b2QtdG8tanNvbi1zY2hlbWEvZXJyb3JNZXNzYWdlcy5tanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvem9kL2Rpc3QvZXNtL3YzL2hlbHBlcnMvdXRpbC5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy96b2QvZGlzdC9lc20vdjMvWm9kRXJyb3IuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvem9kL2Rpc3QvZXNtL3YzL2xvY2FsZXMvZW4uanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvem9kL2Rpc3QvZXNtL3YzL2Vycm9ycy5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy96b2QvZGlzdC9lc20vdjMvaGVscGVycy9wYXJzZVV0aWwuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvem9kL2Rpc3QvZXNtL3YzL2hlbHBlcnMvZXJyb3JVdGlsLmpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3pvZC9kaXN0L2VzbS92My90eXBlcy5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9vcGVuYWkvX3ZlbmRvci96b2QtdG8tanNvbi1zY2hlbWEvcGFyc2Vycy9hbnkubWpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL29wZW5haS9fdmVuZG9yL3pvZC10by1qc29uLXNjaGVtYS9wYXJzZXJzL2FycmF5Lm1qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9vcGVuYWkvX3ZlbmRvci96b2QtdG8tanNvbi1zY2hlbWEvcGFyc2Vycy9iaWdpbnQubWpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL29wZW5haS9fdmVuZG9yL3pvZC10by1qc29uLXNjaGVtYS9wYXJzZXJzL2Jvb2xlYW4ubWpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL29wZW5haS9fdmVuZG9yL3pvZC10by1qc29uLXNjaGVtYS9wYXJzZXJzL2JyYW5kZWQubWpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL29wZW5haS9fdmVuZG9yL3pvZC10by1qc29uLXNjaGVtYS9wYXJzZXJzL2NhdGNoLm1qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9vcGVuYWkvX3ZlbmRvci96b2QtdG8tanNvbi1zY2hlbWEvcGFyc2Vycy9kYXRlLm1qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9vcGVuYWkvX3ZlbmRvci96b2QtdG8tanNvbi1zY2hlbWEvcGFyc2Vycy9kZWZhdWx0Lm1qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9vcGVuYWkvX3ZlbmRvci96b2QtdG8tanNvbi1zY2hlbWEvcGFyc2Vycy9lZmZlY3RzLm1qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9vcGVuYWkvX3ZlbmRvci96b2QtdG8tanNvbi1zY2hlbWEvcGFyc2Vycy9lbnVtLm1qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9vcGVuYWkvX3ZlbmRvci96b2QtdG8tanNvbi1zY2hlbWEvcGFyc2Vycy9pbnRlcnNlY3Rpb24ubWpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL29wZW5haS9fdmVuZG9yL3pvZC10by1qc29uLXNjaGVtYS9wYXJzZXJzL2xpdGVyYWwubWpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL29wZW5haS9fdmVuZG9yL3pvZC10by1qc29uLXNjaGVtYS9wYXJzZXJzL3N0cmluZy5tanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvb3BlbmFpL192ZW5kb3Ivem9kLXRvLWpzb24tc2NoZW1hL3BhcnNlcnMvcmVjb3JkLm1qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9vcGVuYWkvX3ZlbmRvci96b2QtdG8tanNvbi1zY2hlbWEvcGFyc2Vycy9tYXAubWpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL29wZW5haS9fdmVuZG9yL3pvZC10by1qc29uLXNjaGVtYS9wYXJzZXJzL25hdGl2ZUVudW0ubWpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL29wZW5haS9fdmVuZG9yL3pvZC10by1qc29uLXNjaGVtYS9wYXJzZXJzL25ldmVyLm1qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9vcGVuYWkvX3ZlbmRvci96b2QtdG8tanNvbi1zY2hlbWEvcGFyc2Vycy9udWxsLm1qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9vcGVuYWkvX3ZlbmRvci96b2QtdG8tanNvbi1zY2hlbWEvcGFyc2Vycy91bmlvbi5tanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvb3BlbmFpL192ZW5kb3Ivem9kLXRvLWpzb24tc2NoZW1hL3BhcnNlcnMvbnVsbGFibGUubWpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL29wZW5haS9fdmVuZG9yL3pvZC10by1qc29uLXNjaGVtYS9wYXJzZXJzL251bWJlci5tanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvb3BlbmFpL192ZW5kb3Ivem9kLXRvLWpzb24tc2NoZW1hL3BhcnNlcnMvb2JqZWN0Lm1qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9vcGVuYWkvX3ZlbmRvci96b2QtdG8tanNvbi1zY2hlbWEvcGFyc2Vycy9vcHRpb25hbC5tanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvb3BlbmFpL192ZW5kb3Ivem9kLXRvLWpzb24tc2NoZW1hL3BhcnNlcnMvcGlwZWxpbmUubWpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL29wZW5haS9fdmVuZG9yL3pvZC10by1qc29uLXNjaGVtYS9wYXJzZXJzL3Byb21pc2UubWpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL29wZW5haS9fdmVuZG9yL3pvZC10by1qc29uLXNjaGVtYS9wYXJzZXJzL3NldC5tanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvb3BlbmFpL192ZW5kb3Ivem9kLXRvLWpzb24tc2NoZW1hL3BhcnNlcnMvdHVwbGUubWpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL29wZW5haS9fdmVuZG9yL3pvZC10by1qc29uLXNjaGVtYS9wYXJzZXJzL3VuZGVmaW5lZC5tanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvb3BlbmFpL192ZW5kb3Ivem9kLXRvLWpzb24tc2NoZW1hL3BhcnNlcnMvdW5rbm93bi5tanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvb3BlbmFpL192ZW5kb3Ivem9kLXRvLWpzb24tc2NoZW1hL3BhcnNlcnMvcmVhZG9ubHkubWpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL29wZW5haS9fdmVuZG9yL3pvZC10by1qc29uLXNjaGVtYS9wYXJzZURlZi5tanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvb3BlbmFpL192ZW5kb3Ivem9kLXRvLWpzb24tc2NoZW1hL3pvZFRvSnNvblNjaGVtYS5tanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvb3BlbmFpL2xpYi9SZXNwb25zZXNQYXJzZXIubWpzIiwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL29wZW5haS9oZWxwZXJzL3pvZC5tanMiLCIuLi8uLi8uLi9hZ2VudHMtY29yZS9kaXN0L2Vycm9ycy5tanMiLCIuLi8uLi8uLi9hZ2VudHMtY29yZS9kaXN0L3V0aWxzL3R5cGVHdWFyZHMubWpzIiwiLi4vLi4vLi4vYWdlbnRzLWNvcmUvZGlzdC91dGlscy90b29scy5tanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbXMvaW5kZXguanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2NvbW1vbi5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9kZWJ1Zy9zcmMvYnJvd3Nlci5qcyIsIi4uLy4uLy4uL2FnZW50cy1jb3JlL2Rpc3QvY29uZmlnLm1qcyIsIi4uLy4uLy4uL2FnZW50cy1jb3JlL2Rpc3QvbG9nZ2VyLm1qcyIsIi4uLy4uLy4uL2FnZW50cy1jb3JlL2Rpc3QvdXRpbHMvc21hcnRTdHJpbmcubWpzIiwiLi4vLi4vLi4vYWdlbnRzLWNvcmUvZGlzdC90b29sLm1qcyIsIi4uLy4uLy4uL2FnZW50cy1jb3JlL2Rpc3QvbWNwLm1qcyIsIi4uLy4uLy4uL2FnZW50cy1jb3JlL2Rpc3Qvc2hpbXMvc2hpbXMtYnJvd3Nlci5tanMiLCIuLi8uLi8uLi9hZ2VudHMtY29yZS9kaXN0L2xpZmVjeWNsZS5tanMiLCIuLi8uLi8uLi9hZ2VudHMtY29yZS9kaXN0L2RlZmF1bHRNb2RlbC5tanMiLCIuLi8uLi8uLi9hZ2VudHMtY29yZS9kaXN0L2hhbmRvZmYubWpzIiwiLi4vLi4vLi4vYWdlbnRzLWNvcmUvZGlzdC91dGlscy9tZXNzYWdlcy5tanMiLCIuLi8uLi8uLi9hZ2VudHMtY29yZS9kaXN0L2FnZW50Lm1qcyIsIi4uLy4uLy4uL2FnZW50cy1jb3JlL2Rpc3QvZ3VhcmRyYWlsLm1qcyIsIi4uLy4uLy4uL2FnZW50cy1jb3JlL2Rpc3QvcHJvdmlkZXJzLm1qcyIsIi4uLy4uLy4uL2FnZW50cy1jb3JlL2Rpc3QvdHlwZXMvcHJvdG9jb2wubWpzIiwiLi4vLi4vLi4vYWdlbnRzLWNvcmUvZGlzdC91c2FnZS5tanMiLCIuLi8uLi8uLi9hZ2VudHMtY29yZS9kaXN0L3J1bkNvbnRleHQubWpzIiwiLi4vLi4vLi4vYWdlbnRzLWNvcmUvZGlzdC91dGlscy9zZXJpYWxpemUubWpzIiwiLi4vLi4vLi4vYWdlbnRzLWNvcmUvZGlzdC9pdGVtcy5tanMiLCIuLi8uLi8uLi9hZ2VudHMtY29yZS9kaXN0L3RyYWNpbmcvY3JlYXRlU3BhbnMubWpzIiwiLi4vLi4vLi4vYWdlbnRzLWNvcmUvZGlzdC9ldmVudHMubWpzIiwiLi4vLi4vLi4vYWdlbnRzLWNvcmUvZGlzdC9ydW5JbXBsZW1lbnRhdGlvbi5tanMiLCIuLi8uLi8uLi9hZ2VudHMtY29yZS9kaXN0L3J1blN0YXRlLm1qcyIsIi4uLy4uLy4uL2FnZW50cy1jb3JlL2Rpc3QvcnVuLm1qcyIsIi4uLy4uLy4uL2FnZW50cy1jb3JlL2Rpc3QvcmVzdWx0Lm1qcyIsIi4uLy4uLy4uL2FnZW50cy1jb3JlL2Rpc3QvdHJhY2luZy9jb250ZXh0Lm1qcyIsIi4uLy4uLy4uL2FnZW50cy1jb3JlL2Rpc3QvdHJhY2luZy9wcm9jZXNzb3IubWpzIiwiLi4vLi4vLi4vYWdlbnRzLWNvcmUvZGlzdC90cmFjaW5nL3V0aWxzLm1qcyIsIi4uLy4uLy4uL2FnZW50cy1jb3JlL2Rpc3QvdHJhY2luZy9zcGFucy5tanMiLCIuLi8uLi8uLi9hZ2VudHMtY29yZS9kaXN0L3RyYWNpbmcvdHJhY2VzLm1qcyIsIi4uLy4uLy4uL2FnZW50cy1jb3JlL2Rpc3QvdHJhY2luZy9wcm92aWRlci5tanMiLCIuLi8uLi8uLi9hZ2VudHMtY29yZS9kaXN0L3RyYWNpbmcvaW5kZXgubWpzIiwiLi4vLi4vLi4vYWdlbnRzLWNvcmUvZGlzdC9pbmRleC5tanMiLCIuLi91dGlscy5tanMiLCIuLi9yZWFsdGltZUFnZW50Lm1qcyIsIi4uL2d1YXJkcmFpbC5tanMiLCIuLi9jbGllbnRNZXNzYWdlcy5tanMiLCIuLi9pdGVtcy5tanMiLCIuLi9sb2dnZXIubWpzIiwiLi4vb3BlbmFpUmVhbHRpbWVFdmVudHMubWpzIiwiLi4vb3BlbmFpUmVhbHRpbWVCYXNlLm1qcyIsIi4uL29wZW5haVJlYWx0aW1lV2ViUnRjLm1qcyIsIi4uL3NoaW1zL3NoaW1zLWJyb3dzZXIubWpzIiwiLi4vb3BlbmFpUmVhbHRpbWVXZWJzb2NrZXQubWpzIiwiLi4vdG9vbC5tanMiLCIuLi9yZWFsdGltZVNlc3Npb24ubWpzIiwiLi4vaW5kZXgubWpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRoaXMgZmlsZSBpcyBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZFxuZXhwb3J0IGNvbnN0IE1FVEFEQVRBID0ge1xuICAgIFwibmFtZVwiOiBcIkBvcGVuYWkvYWdlbnRzLXJlYWx0aW1lXCIsXG4gICAgXCJ2ZXJzaW9uXCI6IFwiMC4xLjEwXCIsXG4gICAgXCJ2ZXJzaW9uc1wiOiB7XG4gICAgICAgIFwiQG9wZW5haS9hZ2VudHMtcmVhbHRpbWVcIjogXCIwLjEuMTBcIixcbiAgICAgICAgXCJAb3BlbmFpL2FnZW50cy1jb3JlXCI6IFwid29ya3NwYWNlOipcIlxuICAgIH1cbn07XG5leHBvcnQgZGVmYXVsdCBNRVRBREFUQTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1ldGFkYXRhLm1qcy5tYXAiLCJleHBvcnQgYXN5bmMgZnVuY3Rpb24gc2FmZUV4ZWN1dGUoZm4pIHtcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gW251bGwsIGF3YWl0IGZuKCldO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIFtlcnJvciwgbnVsbF07XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2FmZUV4ZWN1dGUubWpzLm1hcCIsImltcG9ydCB7IENvbnRlbnRGaWx0ZXJGaW5pc2hSZWFzb25FcnJvciwgTGVuZ3RoRmluaXNoUmVhc29uRXJyb3IsIE9wZW5BSUVycm9yIH0gZnJvbSBcIi4uL2Vycm9yLm1qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIGlzQ2hhdENvbXBsZXRpb25GdW5jdGlvblRvb2wodG9vbCkge1xuICAgIHJldHVybiB0b29sICE9PSB1bmRlZmluZWQgJiYgJ2Z1bmN0aW9uJyBpbiB0b29sICYmIHRvb2wuZnVuY3Rpb24gIT09IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBtYWtlUGFyc2VhYmxlUmVzcG9uc2VGb3JtYXQocmVzcG9uc2VfZm9ybWF0LCBwYXJzZXIpIHtcbiAgICBjb25zdCBvYmogPSB7IC4uLnJlc3BvbnNlX2Zvcm1hdCB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKG9iaiwge1xuICAgICAgICAkYnJhbmQ6IHtcbiAgICAgICAgICAgIHZhbHVlOiAnYXV0by1wYXJzZWFibGUtcmVzcG9uc2UtZm9ybWF0JyxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB9LFxuICAgICAgICAkcGFyc2VSYXc6IHtcbiAgICAgICAgICAgIHZhbHVlOiBwYXJzZXIsXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgfSxcbiAgICB9KTtcbiAgICByZXR1cm4gb2JqO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VQYXJzZWFibGVUZXh0Rm9ybWF0KHJlc3BvbnNlX2Zvcm1hdCwgcGFyc2VyKSB7XG4gICAgY29uc3Qgb2JqID0geyAuLi5yZXNwb25zZV9mb3JtYXQgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhvYmosIHtcbiAgICAgICAgJGJyYW5kOiB7XG4gICAgICAgICAgICB2YWx1ZTogJ2F1dG8tcGFyc2VhYmxlLXJlc3BvbnNlLWZvcm1hdCcsXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgfSxcbiAgICAgICAgJHBhcnNlUmF3OiB7XG4gICAgICAgICAgICB2YWx1ZTogcGFyc2VyLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIH0sXG4gICAgfSk7XG4gICAgcmV0dXJuIG9iajtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0F1dG9QYXJzYWJsZVJlc3BvbnNlRm9ybWF0KHJlc3BvbnNlX2Zvcm1hdCkge1xuICAgIHJldHVybiByZXNwb25zZV9mb3JtYXQ/LlsnJGJyYW5kJ10gPT09ICdhdXRvLXBhcnNlYWJsZS1yZXNwb25zZS1mb3JtYXQnO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VQYXJzZWFibGVUb29sKHRvb2wsIHsgcGFyc2VyLCBjYWxsYmFjaywgfSkge1xuICAgIGNvbnN0IG9iaiA9IHsgLi4udG9vbCB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKG9iaiwge1xuICAgICAgICAkYnJhbmQ6IHtcbiAgICAgICAgICAgIHZhbHVlOiAnYXV0by1wYXJzZWFibGUtdG9vbCcsXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgfSxcbiAgICAgICAgJHBhcnNlUmF3OiB7XG4gICAgICAgICAgICB2YWx1ZTogcGFyc2VyLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIH0sXG4gICAgICAgICRjYWxsYmFjazoge1xuICAgICAgICAgICAgdmFsdWU6IGNhbGxiYWNrLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIH0sXG4gICAgfSk7XG4gICAgcmV0dXJuIG9iajtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0F1dG9QYXJzYWJsZVRvb2wodG9vbCkge1xuICAgIHJldHVybiB0b29sPy5bJyRicmFuZCddID09PSAnYXV0by1wYXJzZWFibGUtdG9vbCc7XG59XG5leHBvcnQgZnVuY3Rpb24gbWF5YmVQYXJzZUNoYXRDb21wbGV0aW9uKGNvbXBsZXRpb24sIHBhcmFtcykge1xuICAgIGlmICghcGFyYW1zIHx8ICFoYXNBdXRvUGFyc2VhYmxlSW5wdXQocGFyYW1zKSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4uY29tcGxldGlvbixcbiAgICAgICAgICAgIGNob2ljZXM6IGNvbXBsZXRpb24uY2hvaWNlcy5tYXAoKGNob2ljZSkgPT4ge1xuICAgICAgICAgICAgICAgIGFzc2VydFRvb2xDYWxsc0FyZUNoYXRDb21wbGV0aW9uRnVuY3Rpb25Ub29sQ2FsbHMoY2hvaWNlLm1lc3NhZ2UudG9vbF9jYWxscyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgLi4uY2hvaWNlLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5jaG9pY2UubWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlZDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLihjaG9pY2UubWVzc2FnZS50b29sX2NhbGxzID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvb2xfY2FsbHM6IGNob2ljZS5tZXNzYWdlLnRvb2xfY2FsbHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkKSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSksXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBwYXJzZUNoYXRDb21wbGV0aW9uKGNvbXBsZXRpb24sIHBhcmFtcyk7XG59XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VDaGF0Q29tcGxldGlvbihjb21wbGV0aW9uLCBwYXJhbXMpIHtcbiAgICBjb25zdCBjaG9pY2VzID0gY29tcGxldGlvbi5jaG9pY2VzLm1hcCgoY2hvaWNlKSA9PiB7XG4gICAgICAgIGlmIChjaG9pY2UuZmluaXNoX3JlYXNvbiA9PT0gJ2xlbmd0aCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBMZW5ndGhGaW5pc2hSZWFzb25FcnJvcigpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjaG9pY2UuZmluaXNoX3JlYXNvbiA9PT0gJ2NvbnRlbnRfZmlsdGVyJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IENvbnRlbnRGaWx0ZXJGaW5pc2hSZWFzb25FcnJvcigpO1xuICAgICAgICB9XG4gICAgICAgIGFzc2VydFRvb2xDYWxsc0FyZUNoYXRDb21wbGV0aW9uRnVuY3Rpb25Ub29sQ2FsbHMoY2hvaWNlLm1lc3NhZ2UudG9vbF9jYWxscyk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5jaG9pY2UsXG4gICAgICAgICAgICBtZXNzYWdlOiB7XG4gICAgICAgICAgICAgICAgLi4uY2hvaWNlLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgLi4uKGNob2ljZS5tZXNzYWdlLnRvb2xfY2FsbHMgP1xuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b29sX2NhbGxzOiBjaG9pY2UubWVzc2FnZS50b29sX2NhbGxzPy5tYXAoKHRvb2xDYWxsKSA9PiBwYXJzZVRvb2xDYWxsKHBhcmFtcywgdG9vbENhbGwpKSA/PyB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgOiB1bmRlZmluZWQpLFxuICAgICAgICAgICAgICAgIHBhcnNlZDogY2hvaWNlLm1lc3NhZ2UuY29udGVudCAmJiAhY2hvaWNlLm1lc3NhZ2UucmVmdXNhbCA/XG4gICAgICAgICAgICAgICAgICAgIHBhcnNlUmVzcG9uc2VGb3JtYXQocGFyYW1zLCBjaG9pY2UubWVzc2FnZS5jb250ZW50KVxuICAgICAgICAgICAgICAgICAgICA6IG51bGwsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH0pO1xuICAgIHJldHVybiB7IC4uLmNvbXBsZXRpb24sIGNob2ljZXMgfTtcbn1cbmZ1bmN0aW9uIHBhcnNlUmVzcG9uc2VGb3JtYXQocGFyYW1zLCBjb250ZW50KSB7XG4gICAgaWYgKHBhcmFtcy5yZXNwb25zZV9mb3JtYXQ/LnR5cGUgIT09ICdqc29uX3NjaGVtYScpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmIChwYXJhbXMucmVzcG9uc2VfZm9ybWF0Py50eXBlID09PSAnanNvbl9zY2hlbWEnKSB7XG4gICAgICAgIGlmICgnJHBhcnNlUmF3JyBpbiBwYXJhbXMucmVzcG9uc2VfZm9ybWF0KSB7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZV9mb3JtYXQgPSBwYXJhbXMucmVzcG9uc2VfZm9ybWF0O1xuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlX2Zvcm1hdC4kcGFyc2VSYXcoY29udGVudCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoY29udGVudCk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gcGFyc2VUb29sQ2FsbChwYXJhbXMsIHRvb2xDYWxsKSB7XG4gICAgY29uc3QgaW5wdXRUb29sID0gcGFyYW1zLnRvb2xzPy5maW5kKChpbnB1dFRvb2wpID0+IGlzQ2hhdENvbXBsZXRpb25GdW5jdGlvblRvb2woaW5wdXRUb29sKSAmJiBpbnB1dFRvb2wuZnVuY3Rpb24/Lm5hbWUgPT09IHRvb2xDYWxsLmZ1bmN0aW9uLm5hbWUpOyAvLyBUUyBkb2Vzbid0IG5hcnJvdyBiYXNlZCBvbiBpc0NoYXRDb21wbGV0aW9uVG9vbFxuICAgIHJldHVybiB7XG4gICAgICAgIC4uLnRvb2xDYWxsLFxuICAgICAgICBmdW5jdGlvbjoge1xuICAgICAgICAgICAgLi4udG9vbENhbGwuZnVuY3Rpb24sXG4gICAgICAgICAgICBwYXJzZWRfYXJndW1lbnRzOiBpc0F1dG9QYXJzYWJsZVRvb2woaW5wdXRUb29sKSA/IGlucHV0VG9vbC4kcGFyc2VSYXcodG9vbENhbGwuZnVuY3Rpb24uYXJndW1lbnRzKVxuICAgICAgICAgICAgICAgIDogaW5wdXRUb29sPy5mdW5jdGlvbi5zdHJpY3QgPyBKU09OLnBhcnNlKHRvb2xDYWxsLmZ1bmN0aW9uLmFyZ3VtZW50cylcbiAgICAgICAgICAgICAgICAgICAgOiBudWxsLFxuICAgICAgICB9LFxuICAgIH07XG59XG5leHBvcnQgZnVuY3Rpb24gc2hvdWxkUGFyc2VUb29sQ2FsbChwYXJhbXMsIHRvb2xDYWxsKSB7XG4gICAgaWYgKCFwYXJhbXMgfHwgISgndG9vbHMnIGluIHBhcmFtcykgfHwgIXBhcmFtcy50b29scykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IGlucHV0VG9vbCA9IHBhcmFtcy50b29scz8uZmluZCgoaW5wdXRUb29sKSA9PiBpc0NoYXRDb21wbGV0aW9uRnVuY3Rpb25Ub29sKGlucHV0VG9vbCkgJiYgaW5wdXRUb29sLmZ1bmN0aW9uPy5uYW1lID09PSB0b29sQ2FsbC5mdW5jdGlvbi5uYW1lKTtcbiAgICByZXR1cm4gKGlzQ2hhdENvbXBsZXRpb25GdW5jdGlvblRvb2woaW5wdXRUb29sKSAmJlxuICAgICAgICAoaXNBdXRvUGFyc2FibGVUb29sKGlucHV0VG9vbCkgfHwgaW5wdXRUb29sPy5mdW5jdGlvbi5zdHJpY3QgfHwgZmFsc2UpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBoYXNBdXRvUGFyc2VhYmxlSW5wdXQocGFyYW1zKSB7XG4gICAgaWYgKGlzQXV0b1BhcnNhYmxlUmVzcG9uc2VGb3JtYXQocGFyYW1zLnJlc3BvbnNlX2Zvcm1hdCkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiAocGFyYW1zLnRvb2xzPy5zb21lKCh0KSA9PiBpc0F1dG9QYXJzYWJsZVRvb2wodCkgfHwgKHQudHlwZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0LmZ1bmN0aW9uLnN0cmljdCA9PT0gdHJ1ZSkpID8/IGZhbHNlKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRUb29sQ2FsbHNBcmVDaGF0Q29tcGxldGlvbkZ1bmN0aW9uVG9vbENhbGxzKHRvb2xDYWxscykge1xuICAgIGZvciAoY29uc3QgdG9vbENhbGwgb2YgdG9vbENhbGxzIHx8IFtdKSB7XG4gICAgICAgIGlmICh0b29sQ2FsbC50eXBlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgT3BlbkFJRXJyb3IoYEN1cnJlbnRseSBvbmx5IFxcYGZ1bmN0aW9uXFxgIHRvb2wgY2FsbHMgYXJlIHN1cHBvcnRlZDsgUmVjZWl2ZWQgXFxgJHt0b29sQ2FsbC50eXBlfVxcYGApO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlSW5wdXRUb29scyh0b29scykge1xuICAgIGZvciAoY29uc3QgdG9vbCBvZiB0b29scyA/PyBbXSkge1xuICAgICAgICBpZiAodG9vbC50eXBlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgT3BlbkFJRXJyb3IoYEN1cnJlbnRseSBvbmx5IFxcYGZ1bmN0aW9uXFxgIHRvb2wgdHlwZXMgc3VwcG9ydCBhdXRvLXBhcnNpbmc7IFJlY2VpdmVkIFxcYCR7dG9vbC50eXBlfVxcYGApO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0b29sLmZ1bmN0aW9uLnN0cmljdCAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE9wZW5BSUVycm9yKGBUaGUgXFxgJHt0b29sLmZ1bmN0aW9uLm5hbWV9XFxgIHRvb2wgaXMgbm90IG1hcmtlZCB3aXRoIFxcYHN0cmljdDogdHJ1ZVxcYC4gT25seSBzdHJpY3QgZnVuY3Rpb24gdG9vbHMgY2FuIGJlIGF1dG8tcGFyc2VkYCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXJzZXIubWpzLm1hcCIsImV4cG9ydCBjb25zdCBpZ25vcmVPdmVycmlkZSA9IFN5bWJvbCgnTGV0IHpvZFRvSnNvblNjaGVtYSBkZWNpZGUgb24gd2hpY2ggcGFyc2VyIHRvIHVzZScpO1xuY29uc3QgZGVmYXVsdE9wdGlvbnMgPSB7XG4gICAgbmFtZTogdW5kZWZpbmVkLFxuICAgICRyZWZTdHJhdGVneTogJ3Jvb3QnLFxuICAgIGVmZmVjdFN0cmF0ZWd5OiAnaW5wdXQnLFxuICAgIHBpcGVTdHJhdGVneTogJ2FsbCcsXG4gICAgZGF0ZVN0cmF0ZWd5OiAnZm9ybWF0OmRhdGUtdGltZScsXG4gICAgbWFwU3RyYXRlZ3k6ICdlbnRyaWVzJyxcbiAgICBudWxsYWJsZVN0cmF0ZWd5OiAnZnJvbS10YXJnZXQnLFxuICAgIHJlbW92ZUFkZGl0aW9uYWxTdHJhdGVneTogJ3Bhc3N0aHJvdWdoJyxcbiAgICBkZWZpbml0aW9uUGF0aDogJ2RlZmluaXRpb25zJyxcbiAgICB0YXJnZXQ6ICdqc29uU2NoZW1hNycsXG4gICAgc3RyaWN0VW5pb25zOiBmYWxzZSxcbiAgICBlcnJvck1lc3NhZ2VzOiBmYWxzZSxcbiAgICBtYXJrZG93bkRlc2NyaXB0aW9uOiBmYWxzZSxcbiAgICBwYXR0ZXJuU3RyYXRlZ3k6ICdlc2NhcGUnLFxuICAgIGFwcGx5UmVnZXhGbGFnczogZmFsc2UsXG4gICAgZW1haWxTdHJhdGVneTogJ2Zvcm1hdDplbWFpbCcsXG4gICAgYmFzZTY0U3RyYXRlZ3k6ICdjb250ZW50RW5jb2Rpbmc6YmFzZTY0JyxcbiAgICBuYW1lU3RyYXRlZ3k6ICdyZWYnLFxufTtcbmV4cG9ydCBjb25zdCBnZXREZWZhdWx0T3B0aW9ucyA9IChvcHRpb25zKSA9PiB7XG4gICAgLy8gV2UgbmVlZCB0byBhZGQgYGRlZmluaXRpb25zYCBoZXJlIGFzIHdlIG1heSBtdXRhdGUgaXRcbiAgICByZXR1cm4gKHR5cGVvZiBvcHRpb25zID09PSAnc3RyaW5nJyA/XG4gICAgICAgIHtcbiAgICAgICAgICAgIC4uLmRlZmF1bHRPcHRpb25zLFxuICAgICAgICAgICAgYmFzZVBhdGg6IFsnIyddLFxuICAgICAgICAgICAgZGVmaW5pdGlvbnM6IHt9LFxuICAgICAgICAgICAgbmFtZTogb3B0aW9ucyxcbiAgICAgICAgfVxuICAgICAgICA6IHtcbiAgICAgICAgICAgIC4uLmRlZmF1bHRPcHRpb25zLFxuICAgICAgICAgICAgYmFzZVBhdGg6IFsnIyddLFxuICAgICAgICAgICAgZGVmaW5pdGlvbnM6IHt9LFxuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgfSk7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9T3B0aW9ucy5tanMubWFwIiwiZXhwb3J0IGNvbnN0IHpvZERlZiA9ICh6b2RTY2hlbWEpID0+IHtcbiAgICByZXR1cm4gJ19kZWYnIGluIHpvZFNjaGVtYSA/IHpvZFNjaGVtYS5fZGVmIDogem9kU2NoZW1hO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBpc0VtcHR5T2JqKG9iaikge1xuICAgIGlmICghb2JqKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICBmb3IgKGNvbnN0IF9rIGluIG9iailcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0cnVlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbC5tanMubWFwIiwiaW1wb3J0IHsgZ2V0RGVmYXVsdE9wdGlvbnMgfSBmcm9tIFwiLi9PcHRpb25zLm1qc1wiO1xuaW1wb3J0IHsgem9kRGVmIH0gZnJvbSBcIi4vdXRpbC5tanNcIjtcbmV4cG9ydCBjb25zdCBnZXRSZWZzID0gKG9wdGlvbnMpID0+IHtcbiAgICBjb25zdCBfb3B0aW9ucyA9IGdldERlZmF1bHRPcHRpb25zKG9wdGlvbnMpO1xuICAgIGNvbnN0IGN1cnJlbnRQYXRoID0gX29wdGlvbnMubmFtZSAhPT0gdW5kZWZpbmVkID9cbiAgICAgICAgWy4uLl9vcHRpb25zLmJhc2VQYXRoLCBfb3B0aW9ucy5kZWZpbml0aW9uUGF0aCwgX29wdGlvbnMubmFtZV1cbiAgICAgICAgOiBfb3B0aW9ucy5iYXNlUGF0aDtcbiAgICByZXR1cm4ge1xuICAgICAgICAuLi5fb3B0aW9ucyxcbiAgICAgICAgY3VycmVudFBhdGg6IGN1cnJlbnRQYXRoLFxuICAgICAgICBwcm9wZXJ0eVBhdGg6IHVuZGVmaW5lZCxcbiAgICAgICAgc2VlblJlZnM6IG5ldyBTZXQoKSxcbiAgICAgICAgc2VlbjogbmV3IE1hcChPYmplY3QuZW50cmllcyhfb3B0aW9ucy5kZWZpbml0aW9ucykubWFwKChbbmFtZSwgZGVmXSkgPT4gW1xuICAgICAgICAgICAgem9kRGVmKGRlZiksXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZGVmOiB6b2REZWYoZGVmKSxcbiAgICAgICAgICAgICAgICBwYXRoOiBbLi4uX29wdGlvbnMuYmFzZVBhdGgsIF9vcHRpb25zLmRlZmluaXRpb25QYXRoLCBuYW1lXSxcbiAgICAgICAgICAgICAgICAvLyBSZXNvbHV0aW9uIG9mIHJlZmVyZW5jZXMgd2lsbCBiZSBmb3JjZWQgZXZlbiB0aG91Z2ggc2Vlbiwgc28gaXQncyBvayB0aGF0IHRoZSBzY2hlbWEgaXMgdW5kZWZpbmVkIGhlcmUgZm9yIG5vdy5cbiAgICAgICAgICAgICAgICBqc29uU2NoZW1hOiB1bmRlZmluZWQsXG4gICAgICAgICAgICB9LFxuICAgICAgICBdKSksXG4gICAgfTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1SZWZzLm1qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gYWRkRXJyb3JNZXNzYWdlKHJlcywga2V5LCBlcnJvck1lc3NhZ2UsIHJlZnMpIHtcbiAgICBpZiAoIXJlZnM/LmVycm9yTWVzc2FnZXMpXG4gICAgICAgIHJldHVybjtcbiAgICBpZiAoZXJyb3JNZXNzYWdlKSB7XG4gICAgICAgIHJlcy5lcnJvck1lc3NhZ2UgPSB7XG4gICAgICAgICAgICAuLi5yZXMuZXJyb3JNZXNzYWdlLFxuICAgICAgICAgICAgW2tleV06IGVycm9yTWVzc2FnZSxcbiAgICAgICAgfTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gc2V0UmVzcG9uc2VWYWx1ZUFuZEVycm9ycyhyZXMsIGtleSwgdmFsdWUsIGVycm9yTWVzc2FnZSwgcmVmcykge1xuICAgIHJlc1trZXldID0gdmFsdWU7XG4gICAgYWRkRXJyb3JNZXNzYWdlKHJlcywga2V5LCBlcnJvck1lc3NhZ2UsIHJlZnMpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJyb3JNZXNzYWdlcy5tanMubWFwIiwiZXhwb3J0IHZhciB1dGlsO1xuKGZ1bmN0aW9uICh1dGlsKSB7XG4gICAgdXRpbC5hc3NlcnRFcXVhbCA9IChfKSA9PiB7IH07XG4gICAgZnVuY3Rpb24gYXNzZXJ0SXMoX2FyZykgeyB9XG4gICAgdXRpbC5hc3NlcnRJcyA9IGFzc2VydElzO1xuICAgIGZ1bmN0aW9uIGFzc2VydE5ldmVyKF94KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigpO1xuICAgIH1cbiAgICB1dGlsLmFzc2VydE5ldmVyID0gYXNzZXJ0TmV2ZXI7XG4gICAgdXRpbC5hcnJheVRvRW51bSA9IChpdGVtcykgPT4ge1xuICAgICAgICBjb25zdCBvYmogPSB7fTtcbiAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIGl0ZW1zKSB7XG4gICAgICAgICAgICBvYmpbaXRlbV0gPSBpdGVtO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfTtcbiAgICB1dGlsLmdldFZhbGlkRW51bVZhbHVlcyA9IChvYmopID0+IHtcbiAgICAgICAgY29uc3QgdmFsaWRLZXlzID0gdXRpbC5vYmplY3RLZXlzKG9iaikuZmlsdGVyKChrKSA9PiB0eXBlb2Ygb2JqW29ialtrXV0gIT09IFwibnVtYmVyXCIpO1xuICAgICAgICBjb25zdCBmaWx0ZXJlZCA9IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IGsgb2YgdmFsaWRLZXlzKSB7XG4gICAgICAgICAgICBmaWx0ZXJlZFtrXSA9IG9ialtrXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdXRpbC5vYmplY3RWYWx1ZXMoZmlsdGVyZWQpO1xuICAgIH07XG4gICAgdXRpbC5vYmplY3RWYWx1ZXMgPSAob2JqKSA9PiB7XG4gICAgICAgIHJldHVybiB1dGlsLm9iamVjdEtleXMob2JqKS5tYXAoZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBvYmpbZV07XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgdXRpbC5vYmplY3RLZXlzID0gdHlwZW9mIE9iamVjdC5rZXlzID09PSBcImZ1bmN0aW9uXCIgLy8gZXNsaW50LWRpc2FibGUtbGluZSBiYW4vYmFuXG4gICAgICAgID8gKG9iaikgPT4gT2JqZWN0LmtleXMob2JqKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGJhbi9iYW5cbiAgICAgICAgOiAob2JqZWN0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBrZXlzID0gW107XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkge1xuICAgICAgICAgICAgICAgICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ga2V5cztcbiAgICAgICAgfTtcbiAgICB1dGlsLmZpbmQgPSAoYXJyLCBjaGVja2VyKSA9PiB7XG4gICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBhcnIpIHtcbiAgICAgICAgICAgIGlmIChjaGVja2VyKGl0ZW0pKVxuICAgICAgICAgICAgICAgIHJldHVybiBpdGVtO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfTtcbiAgICB1dGlsLmlzSW50ZWdlciA9IHR5cGVvZiBOdW1iZXIuaXNJbnRlZ2VyID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgPyAodmFsKSA9PiBOdW1iZXIuaXNJbnRlZ2VyKHZhbCkgLy8gZXNsaW50LWRpc2FibGUtbGluZSBiYW4vYmFuXG4gICAgICAgIDogKHZhbCkgPT4gdHlwZW9mIHZhbCA9PT0gXCJudW1iZXJcIiAmJiBOdW1iZXIuaXNGaW5pdGUodmFsKSAmJiBNYXRoLmZsb29yKHZhbCkgPT09IHZhbDtcbiAgICBmdW5jdGlvbiBqb2luVmFsdWVzKGFycmF5LCBzZXBhcmF0b3IgPSBcIiB8IFwiKSB7XG4gICAgICAgIHJldHVybiBhcnJheS5tYXAoKHZhbCkgPT4gKHR5cGVvZiB2YWwgPT09IFwic3RyaW5nXCIgPyBgJyR7dmFsfSdgIDogdmFsKSkuam9pbihzZXBhcmF0b3IpO1xuICAgIH1cbiAgICB1dGlsLmpvaW5WYWx1ZXMgPSBqb2luVmFsdWVzO1xuICAgIHV0aWwuanNvblN0cmluZ2lmeVJlcGxhY2VyID0gKF8sIHZhbHVlKSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwiYmlnaW50XCIpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS50b1N0cmluZygpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9O1xufSkodXRpbCB8fCAodXRpbCA9IHt9KSk7XG5leHBvcnQgdmFyIG9iamVjdFV0aWw7XG4oZnVuY3Rpb24gKG9iamVjdFV0aWwpIHtcbiAgICBvYmplY3RVdGlsLm1lcmdlU2hhcGVzID0gKGZpcnN0LCBzZWNvbmQpID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLmZpcnN0LFxuICAgICAgICAgICAgLi4uc2Vjb25kLCAvLyBzZWNvbmQgb3ZlcndyaXRlcyBmaXJzdFxuICAgICAgICB9O1xuICAgIH07XG59KShvYmplY3RVdGlsIHx8IChvYmplY3RVdGlsID0ge30pKTtcbmV4cG9ydCBjb25zdCBab2RQYXJzZWRUeXBlID0gdXRpbC5hcnJheVRvRW51bShbXG4gICAgXCJzdHJpbmdcIixcbiAgICBcIm5hblwiLFxuICAgIFwibnVtYmVyXCIsXG4gICAgXCJpbnRlZ2VyXCIsXG4gICAgXCJmbG9hdFwiLFxuICAgIFwiYm9vbGVhblwiLFxuICAgIFwiZGF0ZVwiLFxuICAgIFwiYmlnaW50XCIsXG4gICAgXCJzeW1ib2xcIixcbiAgICBcImZ1bmN0aW9uXCIsXG4gICAgXCJ1bmRlZmluZWRcIixcbiAgICBcIm51bGxcIixcbiAgICBcImFycmF5XCIsXG4gICAgXCJvYmplY3RcIixcbiAgICBcInVua25vd25cIixcbiAgICBcInByb21pc2VcIixcbiAgICBcInZvaWRcIixcbiAgICBcIm5ldmVyXCIsXG4gICAgXCJtYXBcIixcbiAgICBcInNldFwiLFxuXSk7XG5leHBvcnQgY29uc3QgZ2V0UGFyc2VkVHlwZSA9IChkYXRhKSA9PiB7XG4gICAgY29uc3QgdCA9IHR5cGVvZiBkYXRhO1xuICAgIHN3aXRjaCAodCkge1xuICAgICAgICBjYXNlIFwidW5kZWZpbmVkXCI6XG4gICAgICAgICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZS51bmRlZmluZWQ7XG4gICAgICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICAgICAgICAgIHJldHVybiBab2RQYXJzZWRUeXBlLnN0cmluZztcbiAgICAgICAgY2FzZSBcIm51bWJlclwiOlxuICAgICAgICAgICAgcmV0dXJuIE51bWJlci5pc05hTihkYXRhKSA/IFpvZFBhcnNlZFR5cGUubmFuIDogWm9kUGFyc2VkVHlwZS5udW1iZXI7XG4gICAgICAgIGNhc2UgXCJib29sZWFuXCI6XG4gICAgICAgICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZS5ib29sZWFuO1xuICAgICAgICBjYXNlIFwiZnVuY3Rpb25cIjpcbiAgICAgICAgICAgIHJldHVybiBab2RQYXJzZWRUeXBlLmZ1bmN0aW9uO1xuICAgICAgICBjYXNlIFwiYmlnaW50XCI6XG4gICAgICAgICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZS5iaWdpbnQ7XG4gICAgICAgIGNhc2UgXCJzeW1ib2xcIjpcbiAgICAgICAgICAgIHJldHVybiBab2RQYXJzZWRUeXBlLnN5bWJvbDtcbiAgICAgICAgY2FzZSBcIm9iamVjdFwiOlxuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZS5hcnJheTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkYXRhID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUubnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkYXRhLnRoZW4gJiYgdHlwZW9mIGRhdGEudGhlbiA9PT0gXCJmdW5jdGlvblwiICYmIGRhdGEuY2F0Y2ggJiYgdHlwZW9mIGRhdGEuY2F0Y2ggPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgIHJldHVybiBab2RQYXJzZWRUeXBlLnByb21pc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIE1hcCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkYXRhIGluc3RhbmNlb2YgTWFwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUubWFwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBTZXQgIT09IFwidW5kZWZpbmVkXCIgJiYgZGF0YSBpbnN0YW5jZW9mIFNldCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBab2RQYXJzZWRUeXBlLnNldDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgRGF0ZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkYXRhIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBab2RQYXJzZWRUeXBlLmRhdGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZS5vYmplY3Q7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZS51bmtub3duO1xuICAgIH1cbn07XG4iLCJpbXBvcnQgeyB1dGlsIH0gZnJvbSBcIi4vaGVscGVycy91dGlsLmpzXCI7XG5leHBvcnQgY29uc3QgWm9kSXNzdWVDb2RlID0gdXRpbC5hcnJheVRvRW51bShbXG4gICAgXCJpbnZhbGlkX3R5cGVcIixcbiAgICBcImludmFsaWRfbGl0ZXJhbFwiLFxuICAgIFwiY3VzdG9tXCIsXG4gICAgXCJpbnZhbGlkX3VuaW9uXCIsXG4gICAgXCJpbnZhbGlkX3VuaW9uX2Rpc2NyaW1pbmF0b3JcIixcbiAgICBcImludmFsaWRfZW51bV92YWx1ZVwiLFxuICAgIFwidW5yZWNvZ25pemVkX2tleXNcIixcbiAgICBcImludmFsaWRfYXJndW1lbnRzXCIsXG4gICAgXCJpbnZhbGlkX3JldHVybl90eXBlXCIsXG4gICAgXCJpbnZhbGlkX2RhdGVcIixcbiAgICBcImludmFsaWRfc3RyaW5nXCIsXG4gICAgXCJ0b29fc21hbGxcIixcbiAgICBcInRvb19iaWdcIixcbiAgICBcImludmFsaWRfaW50ZXJzZWN0aW9uX3R5cGVzXCIsXG4gICAgXCJub3RfbXVsdGlwbGVfb2ZcIixcbiAgICBcIm5vdF9maW5pdGVcIixcbl0pO1xuZXhwb3J0IGNvbnN0IHF1b3RlbGVzc0pzb24gPSAob2JqKSA9PiB7XG4gICAgY29uc3QganNvbiA9IEpTT04uc3RyaW5naWZ5KG9iaiwgbnVsbCwgMik7XG4gICAgcmV0dXJuIGpzb24ucmVwbGFjZSgvXCIoW15cIl0rKVwiOi9nLCBcIiQxOlwiKTtcbn07XG5leHBvcnQgY2xhc3MgWm9kRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgZ2V0IGVycm9ycygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNzdWVzO1xuICAgIH1cbiAgICBjb25zdHJ1Y3Rvcihpc3N1ZXMpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5pc3N1ZXMgPSBbXTtcbiAgICAgICAgdGhpcy5hZGRJc3N1ZSA9IChzdWIpID0+IHtcbiAgICAgICAgICAgIHRoaXMuaXNzdWVzID0gWy4uLnRoaXMuaXNzdWVzLCBzdWJdO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmFkZElzc3VlcyA9IChzdWJzID0gW10pID0+IHtcbiAgICAgICAgICAgIHRoaXMuaXNzdWVzID0gWy4uLnRoaXMuaXNzdWVzLCAuLi5zdWJzXTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgYWN0dWFsUHJvdG8gPSBuZXcudGFyZ2V0LnByb3RvdHlwZTtcbiAgICAgICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGJhbi9iYW5cbiAgICAgICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBhY3R1YWxQcm90byk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9fcHJvdG9fXyA9IGFjdHVhbFByb3RvO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubmFtZSA9IFwiWm9kRXJyb3JcIjtcbiAgICAgICAgdGhpcy5pc3N1ZXMgPSBpc3N1ZXM7XG4gICAgfVxuICAgIGZvcm1hdChfbWFwcGVyKSB7XG4gICAgICAgIGNvbnN0IG1hcHBlciA9IF9tYXBwZXIgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChpc3N1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc3N1ZS5tZXNzYWdlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgY29uc3QgZmllbGRFcnJvcnMgPSB7IF9lcnJvcnM6IFtdIH07XG4gICAgICAgIGNvbnN0IHByb2Nlc3NFcnJvciA9IChlcnJvcikgPT4ge1xuICAgICAgICAgICAgZm9yIChjb25zdCBpc3N1ZSBvZiBlcnJvci5pc3N1ZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNzdWUuY29kZSA9PT0gXCJpbnZhbGlkX3VuaW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgaXNzdWUudW5pb25FcnJvcnMubWFwKHByb2Nlc3NFcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGlzc3VlLmNvZGUgPT09IFwiaW52YWxpZF9yZXR1cm5fdHlwZVwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3NFcnJvcihpc3N1ZS5yZXR1cm5UeXBlRXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpc3N1ZS5jb2RlID09PSBcImludmFsaWRfYXJndW1lbnRzXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc0Vycm9yKGlzc3VlLmFyZ3VtZW50c0Vycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaXNzdWUucGF0aC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZmllbGRFcnJvcnMuX2Vycm9ycy5wdXNoKG1hcHBlcihpc3N1ZSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGN1cnIgPSBmaWVsZEVycm9ycztcbiAgICAgICAgICAgICAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoaSA8IGlzc3VlLnBhdGgubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlbCA9IGlzc3VlLnBhdGhbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZXJtaW5hbCA9IGkgPT09IGlzc3VlLnBhdGgubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGVybWluYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyW2VsXSA9IGN1cnJbZWxdIHx8IHsgX2Vycm9yczogW10gfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiAodHlwZW9mIGVsID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICBjdXJyW2VsXSA9IGN1cnJbZWxdIHx8IHsgX2Vycm9yczogW10gfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB9IGVsc2UgaWYgKHR5cGVvZiBlbCA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgY29uc3QgZXJyb3JBcnJheTogYW55ID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICBlcnJvckFycmF5Ll9lcnJvcnMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgIGN1cnJbZWxdID0gY3VycltlbF0gfHwgZXJyb3JBcnJheTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyW2VsXSA9IGN1cnJbZWxdIHx8IHsgX2Vycm9yczogW10gfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyW2VsXS5fZXJyb3JzLnB1c2gobWFwcGVyKGlzc3VlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyID0gY3VycltlbF07XG4gICAgICAgICAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHByb2Nlc3NFcnJvcih0aGlzKTtcbiAgICAgICAgcmV0dXJuIGZpZWxkRXJyb3JzO1xuICAgIH1cbiAgICBzdGF0aWMgYXNzZXJ0KHZhbHVlKSB7XG4gICAgICAgIGlmICghKHZhbHVlIGluc3RhbmNlb2YgWm9kRXJyb3IpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vdCBhIFpvZEVycm9yOiAke3ZhbHVlfWApO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tZXNzYWdlO1xuICAgIH1cbiAgICBnZXQgbWVzc2FnZSgpIHtcbiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMuaXNzdWVzLCB1dGlsLmpzb25TdHJpbmdpZnlSZXBsYWNlciwgMik7XG4gICAgfVxuICAgIGdldCBpc0VtcHR5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc3N1ZXMubGVuZ3RoID09PSAwO1xuICAgIH1cbiAgICBmbGF0dGVuKG1hcHBlciA9IChpc3N1ZSkgPT4gaXNzdWUubWVzc2FnZSkge1xuICAgICAgICBjb25zdCBmaWVsZEVycm9ycyA9IHt9O1xuICAgICAgICBjb25zdCBmb3JtRXJyb3JzID0gW107XG4gICAgICAgIGZvciAoY29uc3Qgc3ViIG9mIHRoaXMuaXNzdWVzKSB7XG4gICAgICAgICAgICBpZiAoc3ViLnBhdGgubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGZpZWxkRXJyb3JzW3N1Yi5wYXRoWzBdXSA9IGZpZWxkRXJyb3JzW3N1Yi5wYXRoWzBdXSB8fCBbXTtcbiAgICAgICAgICAgICAgICBmaWVsZEVycm9yc1tzdWIucGF0aFswXV0ucHVzaChtYXBwZXIoc3ViKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBmb3JtRXJyb3JzLnB1c2gobWFwcGVyKHN1YikpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IGZvcm1FcnJvcnMsIGZpZWxkRXJyb3JzIH07XG4gICAgfVxuICAgIGdldCBmb3JtRXJyb3JzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5mbGF0dGVuKCk7XG4gICAgfVxufVxuWm9kRXJyb3IuY3JlYXRlID0gKGlzc3VlcykgPT4ge1xuICAgIGNvbnN0IGVycm9yID0gbmV3IFpvZEVycm9yKGlzc3Vlcyk7XG4gICAgcmV0dXJuIGVycm9yO1xufTtcbiIsImltcG9ydCB7IFpvZElzc3VlQ29kZSB9IGZyb20gXCIuLi9ab2RFcnJvci5qc1wiO1xuaW1wb3J0IHsgdXRpbCwgWm9kUGFyc2VkVHlwZSB9IGZyb20gXCIuLi9oZWxwZXJzL3V0aWwuanNcIjtcbmNvbnN0IGVycm9yTWFwID0gKGlzc3VlLCBfY3R4KSA9PiB7XG4gICAgbGV0IG1lc3NhZ2U7XG4gICAgc3dpdGNoIChpc3N1ZS5jb2RlKSB7XG4gICAgICAgIGNhc2UgWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZTpcbiAgICAgICAgICAgIGlmIChpc3N1ZS5yZWNlaXZlZCA9PT0gWm9kUGFyc2VkVHlwZS51bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlID0gXCJSZXF1aXJlZFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9IGBFeHBlY3RlZCAke2lzc3VlLmV4cGVjdGVkfSwgcmVjZWl2ZWQgJHtpc3N1ZS5yZWNlaXZlZH1gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgWm9kSXNzdWVDb2RlLmludmFsaWRfbGl0ZXJhbDpcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBgSW52YWxpZCBsaXRlcmFsIHZhbHVlLCBleHBlY3RlZCAke0pTT04uc3RyaW5naWZ5KGlzc3VlLmV4cGVjdGVkLCB1dGlsLmpzb25TdHJpbmdpZnlSZXBsYWNlcil9YDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFpvZElzc3VlQ29kZS51bnJlY29nbml6ZWRfa2V5czpcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBgVW5yZWNvZ25pemVkIGtleShzKSBpbiBvYmplY3Q6ICR7dXRpbC5qb2luVmFsdWVzKGlzc3VlLmtleXMsIFwiLCBcIil9YDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFpvZElzc3VlQ29kZS5pbnZhbGlkX3VuaW9uOlxuICAgICAgICAgICAgbWVzc2FnZSA9IGBJbnZhbGlkIGlucHV0YDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFpvZElzc3VlQ29kZS5pbnZhbGlkX3VuaW9uX2Rpc2NyaW1pbmF0b3I6XG4gICAgICAgICAgICBtZXNzYWdlID0gYEludmFsaWQgZGlzY3JpbWluYXRvciB2YWx1ZS4gRXhwZWN0ZWQgJHt1dGlsLmpvaW5WYWx1ZXMoaXNzdWUub3B0aW9ucyl9YDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFpvZElzc3VlQ29kZS5pbnZhbGlkX2VudW1fdmFsdWU6XG4gICAgICAgICAgICBtZXNzYWdlID0gYEludmFsaWQgZW51bSB2YWx1ZS4gRXhwZWN0ZWQgJHt1dGlsLmpvaW5WYWx1ZXMoaXNzdWUub3B0aW9ucyl9LCByZWNlaXZlZCAnJHtpc3N1ZS5yZWNlaXZlZH0nYDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFpvZElzc3VlQ29kZS5pbnZhbGlkX2FyZ3VtZW50czpcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBgSW52YWxpZCBmdW5jdGlvbiBhcmd1bWVudHNgO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgWm9kSXNzdWVDb2RlLmludmFsaWRfcmV0dXJuX3R5cGU6XG4gICAgICAgICAgICBtZXNzYWdlID0gYEludmFsaWQgZnVuY3Rpb24gcmV0dXJuIHR5cGVgO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgWm9kSXNzdWVDb2RlLmludmFsaWRfZGF0ZTpcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBgSW52YWxpZCBkYXRlYDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFpvZElzc3VlQ29kZS5pbnZhbGlkX3N0cmluZzpcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaXNzdWUudmFsaWRhdGlvbiA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgICAgIGlmIChcImluY2x1ZGVzXCIgaW4gaXNzdWUudmFsaWRhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlID0gYEludmFsaWQgaW5wdXQ6IG11c3QgaW5jbHVkZSBcIiR7aXNzdWUudmFsaWRhdGlvbi5pbmNsdWRlc31cImA7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgaXNzdWUudmFsaWRhdGlvbi5wb3NpdGlvbiA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9IGAke21lc3NhZ2V9IGF0IG9uZSBvciBtb3JlIHBvc2l0aW9ucyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gJHtpc3N1ZS52YWxpZGF0aW9uLnBvc2l0aW9ufWA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoXCJzdGFydHNXaXRoXCIgaW4gaXNzdWUudmFsaWRhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlID0gYEludmFsaWQgaW5wdXQ6IG11c3Qgc3RhcnQgd2l0aCBcIiR7aXNzdWUudmFsaWRhdGlvbi5zdGFydHNXaXRofVwiYDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoXCJlbmRzV2l0aFwiIGluIGlzc3VlLnZhbGlkYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9IGBJbnZhbGlkIGlucHV0OiBtdXN0IGVuZCB3aXRoIFwiJHtpc3N1ZS52YWxpZGF0aW9uLmVuZHNXaXRofVwiYDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHV0aWwuYXNzZXJ0TmV2ZXIoaXNzdWUudmFsaWRhdGlvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaXNzdWUudmFsaWRhdGlvbiAhPT0gXCJyZWdleFwiKSB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9IGBJbnZhbGlkICR7aXNzdWUudmFsaWRhdGlvbn1gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9IFwiSW52YWxpZFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgWm9kSXNzdWVDb2RlLnRvb19zbWFsbDpcbiAgICAgICAgICAgIGlmIChpc3N1ZS50eXBlID09PSBcImFycmF5XCIpXG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9IGBBcnJheSBtdXN0IGNvbnRhaW4gJHtpc3N1ZS5leGFjdCA/IFwiZXhhY3RseVwiIDogaXNzdWUuaW5jbHVzaXZlID8gYGF0IGxlYXN0YCA6IGBtb3JlIHRoYW5gfSAke2lzc3VlLm1pbmltdW19IGVsZW1lbnQocylgO1xuICAgICAgICAgICAgZWxzZSBpZiAoaXNzdWUudHlwZSA9PT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgICAgICBtZXNzYWdlID0gYFN0cmluZyBtdXN0IGNvbnRhaW4gJHtpc3N1ZS5leGFjdCA/IFwiZXhhY3RseVwiIDogaXNzdWUuaW5jbHVzaXZlID8gYGF0IGxlYXN0YCA6IGBvdmVyYH0gJHtpc3N1ZS5taW5pbXVtfSBjaGFyYWN0ZXIocylgO1xuICAgICAgICAgICAgZWxzZSBpZiAoaXNzdWUudHlwZSA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICBtZXNzYWdlID0gYE51bWJlciBtdXN0IGJlICR7aXNzdWUuZXhhY3QgPyBgZXhhY3RseSBlcXVhbCB0byBgIDogaXNzdWUuaW5jbHVzaXZlID8gYGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byBgIDogYGdyZWF0ZXIgdGhhbiBgfSR7aXNzdWUubWluaW11bX1gO1xuICAgICAgICAgICAgZWxzZSBpZiAoaXNzdWUudHlwZSA9PT0gXCJkYXRlXCIpXG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9IGBEYXRlIG11c3QgYmUgJHtpc3N1ZS5leGFjdCA/IGBleGFjdGx5IGVxdWFsIHRvIGAgOiBpc3N1ZS5pbmNsdXNpdmUgPyBgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIGAgOiBgZ3JlYXRlciB0aGFuIGB9JHtuZXcgRGF0ZShOdW1iZXIoaXNzdWUubWluaW11bSkpfWA7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9IFwiSW52YWxpZCBpbnB1dFwiO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgWm9kSXNzdWVDb2RlLnRvb19iaWc6XG4gICAgICAgICAgICBpZiAoaXNzdWUudHlwZSA9PT0gXCJhcnJheVwiKVxuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBgQXJyYXkgbXVzdCBjb250YWluICR7aXNzdWUuZXhhY3QgPyBgZXhhY3RseWAgOiBpc3N1ZS5pbmNsdXNpdmUgPyBgYXQgbW9zdGAgOiBgbGVzcyB0aGFuYH0gJHtpc3N1ZS5tYXhpbXVtfSBlbGVtZW50KHMpYDtcbiAgICAgICAgICAgIGVsc2UgaWYgKGlzc3VlLnR5cGUgPT09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9IGBTdHJpbmcgbXVzdCBjb250YWluICR7aXNzdWUuZXhhY3QgPyBgZXhhY3RseWAgOiBpc3N1ZS5pbmNsdXNpdmUgPyBgYXQgbW9zdGAgOiBgdW5kZXJgfSAke2lzc3VlLm1heGltdW19IGNoYXJhY3RlcihzKWA7XG4gICAgICAgICAgICBlbHNlIGlmIChpc3N1ZS50eXBlID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBgTnVtYmVyIG11c3QgYmUgJHtpc3N1ZS5leGFjdCA/IGBleGFjdGx5YCA6IGlzc3VlLmluY2x1c2l2ZSA/IGBsZXNzIHRoYW4gb3IgZXF1YWwgdG9gIDogYGxlc3MgdGhhbmB9ICR7aXNzdWUubWF4aW11bX1gO1xuICAgICAgICAgICAgZWxzZSBpZiAoaXNzdWUudHlwZSA9PT0gXCJiaWdpbnRcIilcbiAgICAgICAgICAgICAgICBtZXNzYWdlID0gYEJpZ0ludCBtdXN0IGJlICR7aXNzdWUuZXhhY3QgPyBgZXhhY3RseWAgOiBpc3N1ZS5pbmNsdXNpdmUgPyBgbGVzcyB0aGFuIG9yIGVxdWFsIHRvYCA6IGBsZXNzIHRoYW5gfSAke2lzc3VlLm1heGltdW19YDtcbiAgICAgICAgICAgIGVsc2UgaWYgKGlzc3VlLnR5cGUgPT09IFwiZGF0ZVwiKVxuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBgRGF0ZSBtdXN0IGJlICR7aXNzdWUuZXhhY3QgPyBgZXhhY3RseWAgOiBpc3N1ZS5pbmNsdXNpdmUgPyBgc21hbGxlciB0aGFuIG9yIGVxdWFsIHRvYCA6IGBzbWFsbGVyIHRoYW5gfSAke25ldyBEYXRlKE51bWJlcihpc3N1ZS5tYXhpbXVtKSl9YDtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBtZXNzYWdlID0gXCJJbnZhbGlkIGlucHV0XCI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBab2RJc3N1ZUNvZGUuY3VzdG9tOlxuICAgICAgICAgICAgbWVzc2FnZSA9IGBJbnZhbGlkIGlucHV0YDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFpvZElzc3VlQ29kZS5pbnZhbGlkX2ludGVyc2VjdGlvbl90eXBlczpcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBgSW50ZXJzZWN0aW9uIHJlc3VsdHMgY291bGQgbm90IGJlIG1lcmdlZGA7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBab2RJc3N1ZUNvZGUubm90X211bHRpcGxlX29mOlxuICAgICAgICAgICAgbWVzc2FnZSA9IGBOdW1iZXIgbXVzdCBiZSBhIG11bHRpcGxlIG9mICR7aXNzdWUubXVsdGlwbGVPZn1gO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgWm9kSXNzdWVDb2RlLm5vdF9maW5pdGU6XG4gICAgICAgICAgICBtZXNzYWdlID0gXCJOdW1iZXIgbXVzdCBiZSBmaW5pdGVcIjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgbWVzc2FnZSA9IF9jdHguZGVmYXVsdEVycm9yO1xuICAgICAgICAgICAgdXRpbC5hc3NlcnROZXZlcihpc3N1ZSk7XG4gICAgfVxuICAgIHJldHVybiB7IG1lc3NhZ2UgfTtcbn07XG5leHBvcnQgZGVmYXVsdCBlcnJvck1hcDtcbiIsImltcG9ydCBkZWZhdWx0RXJyb3JNYXAgZnJvbSBcIi4vbG9jYWxlcy9lbi5qc1wiO1xubGV0IG92ZXJyaWRlRXJyb3JNYXAgPSBkZWZhdWx0RXJyb3JNYXA7XG5leHBvcnQgeyBkZWZhdWx0RXJyb3JNYXAgfTtcbmV4cG9ydCBmdW5jdGlvbiBzZXRFcnJvck1hcChtYXApIHtcbiAgICBvdmVycmlkZUVycm9yTWFwID0gbWFwO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldEVycm9yTWFwKCkge1xuICAgIHJldHVybiBvdmVycmlkZUVycm9yTWFwO1xufVxuIiwiaW1wb3J0IHsgZ2V0RXJyb3JNYXAgfSBmcm9tIFwiLi4vZXJyb3JzLmpzXCI7XG5pbXBvcnQgZGVmYXVsdEVycm9yTWFwIGZyb20gXCIuLi9sb2NhbGVzL2VuLmpzXCI7XG5leHBvcnQgY29uc3QgbWFrZUlzc3VlID0gKHBhcmFtcykgPT4ge1xuICAgIGNvbnN0IHsgZGF0YSwgcGF0aCwgZXJyb3JNYXBzLCBpc3N1ZURhdGEgfSA9IHBhcmFtcztcbiAgICBjb25zdCBmdWxsUGF0aCA9IFsuLi5wYXRoLCAuLi4oaXNzdWVEYXRhLnBhdGggfHwgW10pXTtcbiAgICBjb25zdCBmdWxsSXNzdWUgPSB7XG4gICAgICAgIC4uLmlzc3VlRGF0YSxcbiAgICAgICAgcGF0aDogZnVsbFBhdGgsXG4gICAgfTtcbiAgICBpZiAoaXNzdWVEYXRhLm1lc3NhZ2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4uaXNzdWVEYXRhLFxuICAgICAgICAgICAgcGF0aDogZnVsbFBhdGgsXG4gICAgICAgICAgICBtZXNzYWdlOiBpc3N1ZURhdGEubWVzc2FnZSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgbGV0IGVycm9yTWVzc2FnZSA9IFwiXCI7XG4gICAgY29uc3QgbWFwcyA9IGVycm9yTWFwc1xuICAgICAgICAuZmlsdGVyKChtKSA9PiAhIW0pXG4gICAgICAgIC5zbGljZSgpXG4gICAgICAgIC5yZXZlcnNlKCk7XG4gICAgZm9yIChjb25zdCBtYXAgb2YgbWFwcykge1xuICAgICAgICBlcnJvck1lc3NhZ2UgPSBtYXAoZnVsbElzc3VlLCB7IGRhdGEsIGRlZmF1bHRFcnJvcjogZXJyb3JNZXNzYWdlIH0pLm1lc3NhZ2U7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIC4uLmlzc3VlRGF0YSxcbiAgICAgICAgcGF0aDogZnVsbFBhdGgsXG4gICAgICAgIG1lc3NhZ2U6IGVycm9yTWVzc2FnZSxcbiAgICB9O1xufTtcbmV4cG9ydCBjb25zdCBFTVBUWV9QQVRIID0gW107XG5leHBvcnQgZnVuY3Rpb24gYWRkSXNzdWVUb0NvbnRleHQoY3R4LCBpc3N1ZURhdGEpIHtcbiAgICBjb25zdCBvdmVycmlkZU1hcCA9IGdldEVycm9yTWFwKCk7XG4gICAgY29uc3QgaXNzdWUgPSBtYWtlSXNzdWUoe1xuICAgICAgICBpc3N1ZURhdGE6IGlzc3VlRGF0YSxcbiAgICAgICAgZGF0YTogY3R4LmRhdGEsXG4gICAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgICBlcnJvck1hcHM6IFtcbiAgICAgICAgICAgIGN0eC5jb21tb24uY29udGV4dHVhbEVycm9yTWFwLCAvLyBjb250ZXh0dWFsIGVycm9yIG1hcCBpcyBmaXJzdCBwcmlvcml0eVxuICAgICAgICAgICAgY3R4LnNjaGVtYUVycm9yTWFwLCAvLyB0aGVuIHNjaGVtYS1ib3VuZCBtYXAgaWYgYXZhaWxhYmxlXG4gICAgICAgICAgICBvdmVycmlkZU1hcCwgLy8gdGhlbiBnbG9iYWwgb3ZlcnJpZGUgbWFwXG4gICAgICAgICAgICBvdmVycmlkZU1hcCA9PT0gZGVmYXVsdEVycm9yTWFwID8gdW5kZWZpbmVkIDogZGVmYXVsdEVycm9yTWFwLCAvLyB0aGVuIGdsb2JhbCBkZWZhdWx0IG1hcFxuICAgICAgICBdLmZpbHRlcigoeCkgPT4gISF4KSxcbiAgICB9KTtcbiAgICBjdHguY29tbW9uLmlzc3Vlcy5wdXNoKGlzc3VlKTtcbn1cbmV4cG9ydCBjbGFzcyBQYXJzZVN0YXR1cyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSBcInZhbGlkXCI7XG4gICAgfVxuICAgIGRpcnR5KCkge1xuICAgICAgICBpZiAodGhpcy52YWx1ZSA9PT0gXCJ2YWxpZFwiKVxuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IFwiZGlydHlcIjtcbiAgICB9XG4gICAgYWJvcnQoKSB7XG4gICAgICAgIGlmICh0aGlzLnZhbHVlICE9PSBcImFib3J0ZWRcIilcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSBcImFib3J0ZWRcIjtcbiAgICB9XG4gICAgc3RhdGljIG1lcmdlQXJyYXkoc3RhdHVzLCByZXN1bHRzKSB7XG4gICAgICAgIGNvbnN0IGFycmF5VmFsdWUgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBzIG9mIHJlc3VsdHMpIHtcbiAgICAgICAgICAgIGlmIChzLnN0YXR1cyA9PT0gXCJhYm9ydGVkXCIpXG4gICAgICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgICAgICBpZiAocy5zdGF0dXMgPT09IFwiZGlydHlcIilcbiAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgIGFycmF5VmFsdWUucHVzaChzLnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBzdGF0dXM6IHN0YXR1cy52YWx1ZSwgdmFsdWU6IGFycmF5VmFsdWUgfTtcbiAgICB9XG4gICAgc3RhdGljIGFzeW5jIG1lcmdlT2JqZWN0QXN5bmMoc3RhdHVzLCBwYWlycykge1xuICAgICAgICBjb25zdCBzeW5jUGFpcnMgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBwYWlyIG9mIHBhaXJzKSB7XG4gICAgICAgICAgICBjb25zdCBrZXkgPSBhd2FpdCBwYWlyLmtleTtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gYXdhaXQgcGFpci52YWx1ZTtcbiAgICAgICAgICAgIHN5bmNQYWlycy5wdXNoKHtcbiAgICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUGFyc2VTdGF0dXMubWVyZ2VPYmplY3RTeW5jKHN0YXR1cywgc3luY1BhaXJzKTtcbiAgICB9XG4gICAgc3RhdGljIG1lcmdlT2JqZWN0U3luYyhzdGF0dXMsIHBhaXJzKSB7XG4gICAgICAgIGNvbnN0IGZpbmFsT2JqZWN0ID0ge307XG4gICAgICAgIGZvciAoY29uc3QgcGFpciBvZiBwYWlycykge1xuICAgICAgICAgICAgY29uc3QgeyBrZXksIHZhbHVlIH0gPSBwYWlyO1xuICAgICAgICAgICAgaWYgKGtleS5zdGF0dXMgPT09IFwiYWJvcnRlZFwiKVxuICAgICAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICAgICAgaWYgKHZhbHVlLnN0YXR1cyA9PT0gXCJhYm9ydGVkXCIpXG4gICAgICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgICAgICBpZiAoa2V5LnN0YXR1cyA9PT0gXCJkaXJ0eVwiKVxuICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgaWYgKHZhbHVlLnN0YXR1cyA9PT0gXCJkaXJ0eVwiKVxuICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgaWYgKGtleS52YWx1ZSAhPT0gXCJfX3Byb3RvX19cIiAmJiAodHlwZW9mIHZhbHVlLnZhbHVlICE9PSBcInVuZGVmaW5lZFwiIHx8IHBhaXIuYWx3YXlzU2V0KSkge1xuICAgICAgICAgICAgICAgIGZpbmFsT2JqZWN0W2tleS52YWx1ZV0gPSB2YWx1ZS52YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBzdGF0dXM6IHN0YXR1cy52YWx1ZSwgdmFsdWU6IGZpbmFsT2JqZWN0IH07XG4gICAgfVxufVxuZXhwb3J0IGNvbnN0IElOVkFMSUQgPSBPYmplY3QuZnJlZXplKHtcbiAgICBzdGF0dXM6IFwiYWJvcnRlZFwiLFxufSk7XG5leHBvcnQgY29uc3QgRElSVFkgPSAodmFsdWUpID0+ICh7IHN0YXR1czogXCJkaXJ0eVwiLCB2YWx1ZSB9KTtcbmV4cG9ydCBjb25zdCBPSyA9ICh2YWx1ZSkgPT4gKHsgc3RhdHVzOiBcInZhbGlkXCIsIHZhbHVlIH0pO1xuZXhwb3J0IGNvbnN0IGlzQWJvcnRlZCA9ICh4KSA9PiB4LnN0YXR1cyA9PT0gXCJhYm9ydGVkXCI7XG5leHBvcnQgY29uc3QgaXNEaXJ0eSA9ICh4KSA9PiB4LnN0YXR1cyA9PT0gXCJkaXJ0eVwiO1xuZXhwb3J0IGNvbnN0IGlzVmFsaWQgPSAoeCkgPT4geC5zdGF0dXMgPT09IFwidmFsaWRcIjtcbmV4cG9ydCBjb25zdCBpc0FzeW5jID0gKHgpID0+IHR5cGVvZiBQcm9taXNlICE9PSBcInVuZGVmaW5lZFwiICYmIHggaW5zdGFuY2VvZiBQcm9taXNlO1xuIiwiZXhwb3J0IHZhciBlcnJvclV0aWw7XG4oZnVuY3Rpb24gKGVycm9yVXRpbCkge1xuICAgIGVycm9yVXRpbC5lcnJUb09iaiA9IChtZXNzYWdlKSA9PiB0eXBlb2YgbWVzc2FnZSA9PT0gXCJzdHJpbmdcIiA/IHsgbWVzc2FnZSB9IDogbWVzc2FnZSB8fCB7fTtcbiAgICAvLyBiaW9tZS1pZ25vcmUgbGludDpcbiAgICBlcnJvclV0aWwudG9TdHJpbmcgPSAobWVzc2FnZSkgPT4gdHlwZW9mIG1lc3NhZ2UgPT09IFwic3RyaW5nXCIgPyBtZXNzYWdlIDogbWVzc2FnZT8ubWVzc2FnZTtcbn0pKGVycm9yVXRpbCB8fCAoZXJyb3JVdGlsID0ge30pKTtcbiIsImltcG9ydCB7IFpvZEVycm9yLCBab2RJc3N1ZUNvZGUsIH0gZnJvbSBcIi4vWm9kRXJyb3IuanNcIjtcbmltcG9ydCB7IGRlZmF1bHRFcnJvck1hcCwgZ2V0RXJyb3JNYXAgfSBmcm9tIFwiLi9lcnJvcnMuanNcIjtcbmltcG9ydCB7IGVycm9yVXRpbCB9IGZyb20gXCIuL2hlbHBlcnMvZXJyb3JVdGlsLmpzXCI7XG5pbXBvcnQgeyBESVJUWSwgSU5WQUxJRCwgT0ssIFBhcnNlU3RhdHVzLCBhZGRJc3N1ZVRvQ29udGV4dCwgaXNBYm9ydGVkLCBpc0FzeW5jLCBpc0RpcnR5LCBpc1ZhbGlkLCBtYWtlSXNzdWUsIH0gZnJvbSBcIi4vaGVscGVycy9wYXJzZVV0aWwuanNcIjtcbmltcG9ydCB7IHV0aWwsIFpvZFBhcnNlZFR5cGUsIGdldFBhcnNlZFR5cGUgfSBmcm9tIFwiLi9oZWxwZXJzL3V0aWwuanNcIjtcbmNsYXNzIFBhcnNlSW5wdXRMYXp5UGF0aCB7XG4gICAgY29uc3RydWN0b3IocGFyZW50LCB2YWx1ZSwgcGF0aCwga2V5KSB7XG4gICAgICAgIHRoaXMuX2NhY2hlZFBhdGggPSBbXTtcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICAgIHRoaXMuZGF0YSA9IHZhbHVlO1xuICAgICAgICB0aGlzLl9wYXRoID0gcGF0aDtcbiAgICAgICAgdGhpcy5fa2V5ID0ga2V5O1xuICAgIH1cbiAgICBnZXQgcGF0aCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9jYWNoZWRQYXRoLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5fa2V5KSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NhY2hlZFBhdGgucHVzaCguLi50aGlzLl9wYXRoLCAuLi50aGlzLl9rZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2FjaGVkUGF0aC5wdXNoKC4uLnRoaXMuX3BhdGgsIHRoaXMuX2tleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlZFBhdGg7XG4gICAgfVxufVxuY29uc3QgaGFuZGxlUmVzdWx0ID0gKGN0eCwgcmVzdWx0KSA9PiB7XG4gICAgaWYgKGlzVmFsaWQocmVzdWx0KSkge1xuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlLCBkYXRhOiByZXN1bHQudmFsdWUgfTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGlmICghY3R4LmNvbW1vbi5pc3N1ZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJWYWxpZGF0aW9uIGZhaWxlZCBidXQgbm8gaXNzdWVzIGRldGVjdGVkLlwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICBnZXQgZXJyb3IoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2Vycm9yKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZXJyb3I7XG4gICAgICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgWm9kRXJyb3IoY3R4LmNvbW1vbi5pc3N1ZXMpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2Vycm9yID0gZXJyb3I7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Vycm9yO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9XG59O1xuZnVuY3Rpb24gcHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpIHtcbiAgICBpZiAoIXBhcmFtcylcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgIGNvbnN0IHsgZXJyb3JNYXAsIGludmFsaWRfdHlwZV9lcnJvciwgcmVxdWlyZWRfZXJyb3IsIGRlc2NyaXB0aW9uIH0gPSBwYXJhbXM7XG4gICAgaWYgKGVycm9yTWFwICYmIChpbnZhbGlkX3R5cGVfZXJyb3IgfHwgcmVxdWlyZWRfZXJyb3IpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2FuJ3QgdXNlIFwiaW52YWxpZF90eXBlX2Vycm9yXCIgb3IgXCJyZXF1aXJlZF9lcnJvclwiIGluIGNvbmp1bmN0aW9uIHdpdGggY3VzdG9tIGVycm9yIG1hcC5gKTtcbiAgICB9XG4gICAgaWYgKGVycm9yTWFwKVxuICAgICAgICByZXR1cm4geyBlcnJvck1hcDogZXJyb3JNYXAsIGRlc2NyaXB0aW9uIH07XG4gICAgY29uc3QgY3VzdG9tTWFwID0gKGlzcywgY3R4KSA9PiB7XG4gICAgICAgIGNvbnN0IHsgbWVzc2FnZSB9ID0gcGFyYW1zO1xuICAgICAgICBpZiAoaXNzLmNvZGUgPT09IFwiaW52YWxpZF9lbnVtX3ZhbHVlXCIpIHtcbiAgICAgICAgICAgIHJldHVybiB7IG1lc3NhZ2U6IG1lc3NhZ2UgPz8gY3R4LmRlZmF1bHRFcnJvciB9O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgY3R4LmRhdGEgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgIHJldHVybiB7IG1lc3NhZ2U6IG1lc3NhZ2UgPz8gcmVxdWlyZWRfZXJyb3IgPz8gY3R4LmRlZmF1bHRFcnJvciB9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc3MuY29kZSAhPT0gXCJpbnZhbGlkX3R5cGVcIilcbiAgICAgICAgICAgIHJldHVybiB7IG1lc3NhZ2U6IGN0eC5kZWZhdWx0RXJyb3IgfTtcbiAgICAgICAgcmV0dXJuIHsgbWVzc2FnZTogbWVzc2FnZSA/PyBpbnZhbGlkX3R5cGVfZXJyb3IgPz8gY3R4LmRlZmF1bHRFcnJvciB9O1xuICAgIH07XG4gICAgcmV0dXJuIHsgZXJyb3JNYXA6IGN1c3RvbU1hcCwgZGVzY3JpcHRpb24gfTtcbn1cbmV4cG9ydCBjbGFzcyBab2RUeXBlIHtcbiAgICBnZXQgZGVzY3JpcHRpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYuZGVzY3JpcHRpb247XG4gICAgfVxuICAgIF9nZXRUeXBlKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBnZXRQYXJzZWRUeXBlKGlucHV0LmRhdGEpO1xuICAgIH1cbiAgICBfZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCkge1xuICAgICAgICByZXR1cm4gKGN0eCB8fCB7XG4gICAgICAgICAgICBjb21tb246IGlucHV0LnBhcmVudC5jb21tb24sXG4gICAgICAgICAgICBkYXRhOiBpbnB1dC5kYXRhLFxuICAgICAgICAgICAgcGFyc2VkVHlwZTogZ2V0UGFyc2VkVHlwZShpbnB1dC5kYXRhKSxcbiAgICAgICAgICAgIHNjaGVtYUVycm9yTWFwOiB0aGlzLl9kZWYuZXJyb3JNYXAsXG4gICAgICAgICAgICBwYXRoOiBpbnB1dC5wYXRoLFxuICAgICAgICAgICAgcGFyZW50OiBpbnB1dC5wYXJlbnQsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfcHJvY2Vzc0lucHV0UGFyYW1zKGlucHV0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdGF0dXM6IG5ldyBQYXJzZVN0YXR1cygpLFxuICAgICAgICAgICAgY3R4OiB7XG4gICAgICAgICAgICAgICAgY29tbW9uOiBpbnB1dC5wYXJlbnQuY29tbW9uLFxuICAgICAgICAgICAgICAgIGRhdGE6IGlucHV0LmRhdGEsXG4gICAgICAgICAgICAgICAgcGFyc2VkVHlwZTogZ2V0UGFyc2VkVHlwZShpbnB1dC5kYXRhKSxcbiAgICAgICAgICAgICAgICBzY2hlbWFFcnJvck1hcDogdGhpcy5fZGVmLmVycm9yTWFwLFxuICAgICAgICAgICAgICAgIHBhdGg6IGlucHV0LnBhdGgsXG4gICAgICAgICAgICAgICAgcGFyZW50OiBpbnB1dC5wYXJlbnQsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH1cbiAgICBfcGFyc2VTeW5jKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuX3BhcnNlKGlucHV0KTtcbiAgICAgICAgaWYgKGlzQXN5bmMocmVzdWx0KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU3luY2hyb25vdXMgcGFyc2UgZW5jb3VudGVyZWQgcHJvbWlzZS5cIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgX3BhcnNlQXN5bmMoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5fcGFyc2UoaW5wdXQpO1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlc3VsdCk7XG4gICAgfVxuICAgIHBhcnNlKGRhdGEsIHBhcmFtcykge1xuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLnNhZmVQYXJzZShkYXRhLCBwYXJhbXMpO1xuICAgICAgICBpZiAocmVzdWx0LnN1Y2Nlc3MpXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0LmRhdGE7XG4gICAgICAgIHRocm93IHJlc3VsdC5lcnJvcjtcbiAgICB9XG4gICAgc2FmZVBhcnNlKGRhdGEsIHBhcmFtcykge1xuICAgICAgICBjb25zdCBjdHggPSB7XG4gICAgICAgICAgICBjb21tb246IHtcbiAgICAgICAgICAgICAgICBpc3N1ZXM6IFtdLFxuICAgICAgICAgICAgICAgIGFzeW5jOiBwYXJhbXM/LmFzeW5jID8/IGZhbHNlLFxuICAgICAgICAgICAgICAgIGNvbnRleHR1YWxFcnJvck1hcDogcGFyYW1zPy5lcnJvck1hcCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwYXRoOiBwYXJhbXM/LnBhdGggfHwgW10sXG4gICAgICAgICAgICBzY2hlbWFFcnJvck1hcDogdGhpcy5fZGVmLmVycm9yTWFwLFxuICAgICAgICAgICAgcGFyZW50OiBudWxsLFxuICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgICAgIHBhcnNlZFR5cGU6IGdldFBhcnNlZFR5cGUoZGF0YSksXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuX3BhcnNlU3luYyh7IGRhdGEsIHBhdGg6IGN0eC5wYXRoLCBwYXJlbnQ6IGN0eCB9KTtcbiAgICAgICAgcmV0dXJuIGhhbmRsZVJlc3VsdChjdHgsIHJlc3VsdCk7XG4gICAgfVxuICAgIFwifnZhbGlkYXRlXCIoZGF0YSkge1xuICAgICAgICBjb25zdCBjdHggPSB7XG4gICAgICAgICAgICBjb21tb246IHtcbiAgICAgICAgICAgICAgICBpc3N1ZXM6IFtdLFxuICAgICAgICAgICAgICAgIGFzeW5jOiAhIXRoaXNbXCJ+c3RhbmRhcmRcIl0uYXN5bmMsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGF0aDogW10sXG4gICAgICAgICAgICBzY2hlbWFFcnJvck1hcDogdGhpcy5fZGVmLmVycm9yTWFwLFxuICAgICAgICAgICAgcGFyZW50OiBudWxsLFxuICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgICAgIHBhcnNlZFR5cGU6IGdldFBhcnNlZFR5cGUoZGF0YSksXG4gICAgICAgIH07XG4gICAgICAgIGlmICghdGhpc1tcIn5zdGFuZGFyZFwiXS5hc3luYykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLl9wYXJzZVN5bmMoeyBkYXRhLCBwYXRoOiBbXSwgcGFyZW50OiBjdHggfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzVmFsaWQocmVzdWx0KVxuICAgICAgICAgICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiByZXN1bHQudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpc3N1ZXM6IGN0eC5jb21tb24uaXNzdWVzLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIGlmIChlcnI/Lm1lc3NhZ2U/LnRvTG93ZXJDYXNlKCk/LmluY2x1ZGVzKFwiZW5jb3VudGVyZWRcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpc1tcIn5zdGFuZGFyZFwiXS5hc3luYyA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGN0eC5jb21tb24gPSB7XG4gICAgICAgICAgICAgICAgICAgIGlzc3VlczogW10sXG4gICAgICAgICAgICAgICAgICAgIGFzeW5jOiB0cnVlLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3BhcnNlQXN5bmMoeyBkYXRhLCBwYXRoOiBbXSwgcGFyZW50OiBjdHggfSkudGhlbigocmVzdWx0KSA9PiBpc1ZhbGlkKHJlc3VsdClcbiAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgIHZhbHVlOiByZXN1bHQudmFsdWUsXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICA6IHtcbiAgICAgICAgICAgICAgICBpc3N1ZXM6IGN0eC5jb21tb24uaXNzdWVzLFxuICAgICAgICAgICAgfSk7XG4gICAgfVxuICAgIGFzeW5jIHBhcnNlQXN5bmMoZGF0YSwgcGFyYW1zKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuc2FmZVBhcnNlQXN5bmMoZGF0YSwgcGFyYW1zKTtcbiAgICAgICAgaWYgKHJlc3VsdC5zdWNjZXNzKVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC5kYXRhO1xuICAgICAgICB0aHJvdyByZXN1bHQuZXJyb3I7XG4gICAgfVxuICAgIGFzeW5jIHNhZmVQYXJzZUFzeW5jKGRhdGEsIHBhcmFtcykge1xuICAgICAgICBjb25zdCBjdHggPSB7XG4gICAgICAgICAgICBjb21tb246IHtcbiAgICAgICAgICAgICAgICBpc3N1ZXM6IFtdLFxuICAgICAgICAgICAgICAgIGNvbnRleHR1YWxFcnJvck1hcDogcGFyYW1zPy5lcnJvck1hcCxcbiAgICAgICAgICAgICAgICBhc3luYzogdHJ1ZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwYXRoOiBwYXJhbXM/LnBhdGggfHwgW10sXG4gICAgICAgICAgICBzY2hlbWFFcnJvck1hcDogdGhpcy5fZGVmLmVycm9yTWFwLFxuICAgICAgICAgICAgcGFyZW50OiBudWxsLFxuICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgICAgIHBhcnNlZFR5cGU6IGdldFBhcnNlZFR5cGUoZGF0YSksXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IG1heWJlQXN5bmNSZXN1bHQgPSB0aGlzLl9wYXJzZSh7IGRhdGEsIHBhdGg6IGN0eC5wYXRoLCBwYXJlbnQ6IGN0eCB9KTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgKGlzQXN5bmMobWF5YmVBc3luY1Jlc3VsdCkgPyBtYXliZUFzeW5jUmVzdWx0IDogUHJvbWlzZS5yZXNvbHZlKG1heWJlQXN5bmNSZXN1bHQpKTtcbiAgICAgICAgcmV0dXJuIGhhbmRsZVJlc3VsdChjdHgsIHJlc3VsdCk7XG4gICAgfVxuICAgIHJlZmluZShjaGVjaywgbWVzc2FnZSkge1xuICAgICAgICBjb25zdCBnZXRJc3N1ZVByb3BlcnRpZXMgPSAodmFsKSA9PiB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG1lc3NhZ2UgPT09IFwic3RyaW5nXCIgfHwgdHlwZW9mIG1lc3NhZ2UgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBtZXNzYWdlIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgbWVzc2FnZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1lc3NhZ2UodmFsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVmaW5lbWVudCgodmFsLCBjdHgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGNoZWNrKHZhbCk7XG4gICAgICAgICAgICBjb25zdCBzZXRFcnJvciA9ICgpID0+IGN0eC5hZGRJc3N1ZSh7XG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmN1c3RvbSxcbiAgICAgICAgICAgICAgICAuLi5nZXRJc3N1ZVByb3BlcnRpZXModmFsKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBQcm9taXNlICE9PSBcInVuZGVmaW5lZFwiICYmIHJlc3VsdCBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0LnRoZW4oKGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRFcnJvcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgc2V0RXJyb3IoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJlZmluZW1lbnQoY2hlY2ssIHJlZmluZW1lbnREYXRhKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZWZpbmVtZW50KCh2YWwsIGN0eCkgPT4ge1xuICAgICAgICAgICAgaWYgKCFjaGVjayh2YWwpKSB7XG4gICAgICAgICAgICAgICAgY3R4LmFkZElzc3VlKHR5cGVvZiByZWZpbmVtZW50RGF0YSA9PT0gXCJmdW5jdGlvblwiID8gcmVmaW5lbWVudERhdGEodmFsLCBjdHgpIDogcmVmaW5lbWVudERhdGEpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgX3JlZmluZW1lbnQocmVmaW5lbWVudCkge1xuICAgICAgICByZXR1cm4gbmV3IFpvZEVmZmVjdHMoe1xuICAgICAgICAgICAgc2NoZW1hOiB0aGlzLFxuICAgICAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RFZmZlY3RzLFxuICAgICAgICAgICAgZWZmZWN0OiB7IHR5cGU6IFwicmVmaW5lbWVudFwiLCByZWZpbmVtZW50IH0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzdXBlclJlZmluZShyZWZpbmVtZW50KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZWZpbmVtZW50KHJlZmluZW1lbnQpO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihkZWYpIHtcbiAgICAgICAgLyoqIEFsaWFzIG9mIHNhZmVQYXJzZUFzeW5jICovXG4gICAgICAgIHRoaXMuc3BhID0gdGhpcy5zYWZlUGFyc2VBc3luYztcbiAgICAgICAgdGhpcy5fZGVmID0gZGVmO1xuICAgICAgICB0aGlzLnBhcnNlID0gdGhpcy5wYXJzZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnNhZmVQYXJzZSA9IHRoaXMuc2FmZVBhcnNlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMucGFyc2VBc3luYyA9IHRoaXMucGFyc2VBc3luYy5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnNhZmVQYXJzZUFzeW5jID0gdGhpcy5zYWZlUGFyc2VBc3luYy5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnNwYSA9IHRoaXMuc3BhLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMucmVmaW5lID0gdGhpcy5yZWZpbmUuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5yZWZpbmVtZW50ID0gdGhpcy5yZWZpbmVtZW50LmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuc3VwZXJSZWZpbmUgPSB0aGlzLnN1cGVyUmVmaW5lLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMub3B0aW9uYWwgPSB0aGlzLm9wdGlvbmFsLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMubnVsbGFibGUgPSB0aGlzLm51bGxhYmxlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMubnVsbGlzaCA9IHRoaXMubnVsbGlzaC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmFycmF5ID0gdGhpcy5hcnJheS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnByb21pc2UgPSB0aGlzLnByb21pc2UuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5vciA9IHRoaXMub3IuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5hbmQgPSB0aGlzLmFuZC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnRyYW5zZm9ybSA9IHRoaXMudHJhbnNmb3JtLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuYnJhbmQgPSB0aGlzLmJyYW5kLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuZGVmYXVsdCA9IHRoaXMuZGVmYXVsdC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmNhdGNoID0gdGhpcy5jYXRjaC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmRlc2NyaWJlID0gdGhpcy5kZXNjcmliZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnBpcGUgPSB0aGlzLnBpcGUuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5yZWFkb25seSA9IHRoaXMucmVhZG9ubHkuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5pc051bGxhYmxlID0gdGhpcy5pc051bGxhYmxlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuaXNPcHRpb25hbCA9IHRoaXMuaXNPcHRpb25hbC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzW1wifnN0YW5kYXJkXCJdID0ge1xuICAgICAgICAgICAgdmVyc2lvbjogMSxcbiAgICAgICAgICAgIHZlbmRvcjogXCJ6b2RcIixcbiAgICAgICAgICAgIHZhbGlkYXRlOiAoZGF0YSkgPT4gdGhpc1tcIn52YWxpZGF0ZVwiXShkYXRhKSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgb3B0aW9uYWwoKSB7XG4gICAgICAgIHJldHVybiBab2RPcHRpb25hbC5jcmVhdGUodGhpcywgdGhpcy5fZGVmKTtcbiAgICB9XG4gICAgbnVsbGFibGUoKSB7XG4gICAgICAgIHJldHVybiBab2ROdWxsYWJsZS5jcmVhdGUodGhpcywgdGhpcy5fZGVmKTtcbiAgICB9XG4gICAgbnVsbGlzaCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubnVsbGFibGUoKS5vcHRpb25hbCgpO1xuICAgIH1cbiAgICBhcnJheSgpIHtcbiAgICAgICAgcmV0dXJuIFpvZEFycmF5LmNyZWF0ZSh0aGlzKTtcbiAgICB9XG4gICAgcHJvbWlzZSgpIHtcbiAgICAgICAgcmV0dXJuIFpvZFByb21pc2UuY3JlYXRlKHRoaXMsIHRoaXMuX2RlZik7XG4gICAgfVxuICAgIG9yKG9wdGlvbikge1xuICAgICAgICByZXR1cm4gWm9kVW5pb24uY3JlYXRlKFt0aGlzLCBvcHRpb25dLCB0aGlzLl9kZWYpO1xuICAgIH1cbiAgICBhbmQoaW5jb21pbmcpIHtcbiAgICAgICAgcmV0dXJuIFpvZEludGVyc2VjdGlvbi5jcmVhdGUodGhpcywgaW5jb21pbmcsIHRoaXMuX2RlZik7XG4gICAgfVxuICAgIHRyYW5zZm9ybSh0cmFuc2Zvcm0pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBab2RFZmZlY3RzKHtcbiAgICAgICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXModGhpcy5fZGVmKSxcbiAgICAgICAgICAgIHNjaGVtYTogdGhpcyxcbiAgICAgICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kRWZmZWN0cyxcbiAgICAgICAgICAgIGVmZmVjdDogeyB0eXBlOiBcInRyYW5zZm9ybVwiLCB0cmFuc2Zvcm0gfSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGRlZmF1bHQoZGVmKSB7XG4gICAgICAgIGNvbnN0IGRlZmF1bHRWYWx1ZUZ1bmMgPSB0eXBlb2YgZGVmID09PSBcImZ1bmN0aW9uXCIgPyBkZWYgOiAoKSA9PiBkZWY7XG4gICAgICAgIHJldHVybiBuZXcgWm9kRGVmYXVsdCh7XG4gICAgICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHRoaXMuX2RlZiksXG4gICAgICAgICAgICBpbm5lclR5cGU6IHRoaXMsXG4gICAgICAgICAgICBkZWZhdWx0VmFsdWU6IGRlZmF1bHRWYWx1ZUZ1bmMsXG4gICAgICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZERlZmF1bHQsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBicmFuZCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBab2RCcmFuZGVkKHtcbiAgICAgICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kQnJhbmRlZCxcbiAgICAgICAgICAgIHR5cGU6IHRoaXMsXG4gICAgICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHRoaXMuX2RlZiksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjYXRjaChkZWYpIHtcbiAgICAgICAgY29uc3QgY2F0Y2hWYWx1ZUZ1bmMgPSB0eXBlb2YgZGVmID09PSBcImZ1bmN0aW9uXCIgPyBkZWYgOiAoKSA9PiBkZWY7XG4gICAgICAgIHJldHVybiBuZXcgWm9kQ2F0Y2goe1xuICAgICAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyh0aGlzLl9kZWYpLFxuICAgICAgICAgICAgaW5uZXJUeXBlOiB0aGlzLFxuICAgICAgICAgICAgY2F0Y2hWYWx1ZTogY2F0Y2hWYWx1ZUZ1bmMsXG4gICAgICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZENhdGNoLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZGVzY3JpYmUoZGVzY3JpcHRpb24pIHtcbiAgICAgICAgY29uc3QgVGhpcyA9IHRoaXMuY29uc3RydWN0b3I7XG4gICAgICAgIHJldHVybiBuZXcgVGhpcyh7XG4gICAgICAgICAgICAuLi50aGlzLl9kZWYsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbixcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHBpcGUodGFyZ2V0KSB7XG4gICAgICAgIHJldHVybiBab2RQaXBlbGluZS5jcmVhdGUodGhpcywgdGFyZ2V0KTtcbiAgICB9XG4gICAgcmVhZG9ubHkoKSB7XG4gICAgICAgIHJldHVybiBab2RSZWFkb25seS5jcmVhdGUodGhpcyk7XG4gICAgfVxuICAgIGlzT3B0aW9uYWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNhZmVQYXJzZSh1bmRlZmluZWQpLnN1Y2Nlc3M7XG4gICAgfVxuICAgIGlzTnVsbGFibGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNhZmVQYXJzZShudWxsKS5zdWNjZXNzO1xuICAgIH1cbn1cbmNvbnN0IGN1aWRSZWdleCA9IC9eY1teXFxzLV17OCx9JC9pO1xuY29uc3QgY3VpZDJSZWdleCA9IC9eWzAtOWEtel0rJC87XG5jb25zdCB1bGlkUmVnZXggPSAvXlswLTlBLUhKS01OUC1UVi1aXXsyNn0kL2k7XG4vLyBjb25zdCB1dWlkUmVnZXggPVxuLy8gICAvXihbYS1mMC05XXs4fS1bYS1mMC05XXs0fS1bMS01XVthLWYwLTldezN9LVthLWYwLTldezR9LVthLWYwLTldezEyfXwwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDApJC9pO1xuY29uc3QgdXVpZFJlZ2V4ID0gL15bMC05YS1mQS1GXXs4fVxcYi1bMC05YS1mQS1GXXs0fVxcYi1bMC05YS1mQS1GXXs0fVxcYi1bMC05YS1mQS1GXXs0fVxcYi1bMC05YS1mQS1GXXsxMn0kL2k7XG5jb25zdCBuYW5vaWRSZWdleCA9IC9eW2EtejAtOV8tXXsyMX0kL2k7XG5jb25zdCBqd3RSZWdleCA9IC9eW0EtWmEtejAtOS1fXStcXC5bQS1aYS16MC05LV9dK1xcLltBLVphLXowLTktX10qJC87XG5jb25zdCBkdXJhdGlvblJlZ2V4ID0gL15bLStdP1AoPyEkKSg/Oig/OlstK10/XFxkK1kpfCg/OlstK10/XFxkK1suLF1cXGQrWSQpKT8oPzooPzpbLStdP1xcZCtNKXwoPzpbLStdP1xcZCtbLixdXFxkK00kKSk/KD86KD86Wy0rXT9cXGQrVyl8KD86Wy0rXT9cXGQrWy4sXVxcZCtXJCkpPyg/Oig/OlstK10/XFxkK0QpfCg/OlstK10/XFxkK1suLF1cXGQrRCQpKT8oPzpUKD89W1xcZCstXSkoPzooPzpbLStdP1xcZCtIKXwoPzpbLStdP1xcZCtbLixdXFxkK0gkKSk/KD86KD86Wy0rXT9cXGQrTSl8KD86Wy0rXT9cXGQrWy4sXVxcZCtNJCkpPyg/OlstK10/XFxkKyg/OlsuLF1cXGQrKT9TKT8pPz8kLztcbi8vIGZyb20gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzQ2MTgxLzE1NTAxNTVcbi8vIG9sZCB2ZXJzaW9uOiB0b28gc2xvdywgZGlkbid0IHN1cHBvcnQgdW5pY29kZVxuLy8gY29uc3QgZW1haWxSZWdleCA9IC9eKCgoW2Etel18XFxkfFshI1xcJCUmJ1xcKlxcK1xcLVxcLz1cXD9cXF5fYHtcXHx9fl18W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKyhcXC4oW2Etel18XFxkfFshI1xcJCUmJ1xcKlxcK1xcLVxcLz1cXD9cXF5fYHtcXHx9fl18W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKykqKXwoKFxceDIyKSgoKChcXHgyMHxcXHgwOSkqKFxceDBkXFx4MGEpKT8oXFx4MjB8XFx4MDkpKyk/KChbXFx4MDEtXFx4MDhcXHgwYlxceDBjXFx4MGUtXFx4MWZcXHg3Zl18XFx4MjF8W1xceDIzLVxceDViXXxbXFx4NWQtXFx4N2VdfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKXwoXFxcXChbXFx4MDEtXFx4MDlcXHgwYlxceDBjXFx4MGQtXFx4N2ZdfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSkpKSooKChcXHgyMHxcXHgwOSkqKFxceDBkXFx4MGEpKT8oXFx4MjB8XFx4MDkpKyk/KFxceDIyKSkpQCgoKFthLXpdfFxcZHxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSl8KChbYS16XXxcXGR8W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKFthLXpdfFxcZHwtfFxcLnxffH58W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKihbYS16XXxcXGR8W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKSlcXC4pKygoW2Etel18W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pfCgoW2Etel18W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKFthLXpdfFxcZHwtfFxcLnxffH58W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKihbYS16XXxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSkpKSQvaTtcbi8vb2xkIGVtYWlsIHJlZ2V4XG4vLyBjb25zdCBlbWFpbFJlZ2V4ID0gL14oKFtePD4oKVtcXF0uLDs6XFxzQFwiXSsoXFwuW148PigpW1xcXS4sOzpcXHNAXCJdKykqKXwoXCIuK1wiKSlAKCg/IS0pKFtePD4oKVtcXF0uLDs6XFxzQFwiXStcXC4pK1tePD4oKVtcXF0uLDs6XFxzQFwiXXsxLH0pW14tPD4oKVtcXF0uLDs6XFxzQFwiXSQvaTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuLy8gY29uc3QgZW1haWxSZWdleCA9XG4vLyAgIC9eKChbXjw+KClbXFxdXFxcXC4sOzpcXHNAXFxcIl0rKFxcLltePD4oKVtcXF1cXFxcLiw7Olxcc0BcXFwiXSspKil8KFxcXCIuK1xcXCIpKUAoKFxcWygoKDI1WzAtNV0pfCgyWzAtNF1bMC05XSl8KDFbMC05XXsyfSl8KFswLTldezEsMn0pKVxcLil7M30oKDI1WzAtNV0pfCgyWzAtNF1bMC05XSl8KDFbMC05XXsyfSl8KFswLTldezEsMn0pKVxcXSl8KFxcW0lQdjY6KChbYS1mMC05XXsxLDR9Oil7N318OjooW2EtZjAtOV17MSw0fTopezAsNn18KFthLWYwLTldezEsNH06KXsxfTooW2EtZjAtOV17MSw0fTopezAsNX18KFthLWYwLTldezEsNH06KXsyfTooW2EtZjAtOV17MSw0fTopezAsNH18KFthLWYwLTldezEsNH06KXszfTooW2EtZjAtOV17MSw0fTopezAsM318KFthLWYwLTldezEsNH06KXs0fTooW2EtZjAtOV17MSw0fTopezAsMn18KFthLWYwLTldezEsNH06KXs1fTooW2EtZjAtOV17MSw0fTopezAsMX0pKFthLWYwLTldezEsNH18KCgoMjVbMC01XSl8KDJbMC00XVswLTldKXwoMVswLTldezJ9KXwoWzAtOV17MSwyfSkpXFwuKXszfSgoMjVbMC01XSl8KDJbMC00XVswLTldKXwoMVswLTldezJ9KXwoWzAtOV17MSwyfSkpKVxcXSl8KFtBLVphLXowLTldKFtBLVphLXowLTktXSpbQS1aYS16MC05XSkqKFxcLltBLVphLXpdezIsfSkrKSkkLztcbi8vIGNvbnN0IGVtYWlsUmVnZXggPVxuLy8gICAvXlthLXpBLVowLTlcXC5cXCFcXCNcXCRcXCVcXCZcXCdcXCpcXCtcXC9cXD1cXD9cXF5cXF9cXGBcXHtcXHxcXH1cXH5cXC1dK0BbYS16QS1aMC05XSg/OlthLXpBLVowLTktXXswLDYxfVthLXpBLVowLTldKT8oPzpcXC5bYS16QS1aMC05XSg/OlthLXpBLVowLTktXXswLDYxfVthLXpBLVowLTldKT8pKiQvO1xuLy8gY29uc3QgZW1haWxSZWdleCA9XG4vLyAgIC9eKD86W2EtejAtOSEjJCUmJyorLz0/Xl9ge3x9fi1dKyg/OlxcLlthLXowLTkhIyQlJicqKy89P15fYHt8fX4tXSspKnxcIig/OltcXHgwMS1cXHgwOFxceDBiXFx4MGNcXHgwZS1cXHgxZlxceDIxXFx4MjMtXFx4NWJcXHg1ZC1cXHg3Zl18XFxcXFtcXHgwMS1cXHgwOVxceDBiXFx4MGNcXHgwZS1cXHg3Zl0pKlwiKUAoPzooPzpbYS16MC05XSg/OlthLXowLTktXSpbYS16MC05XSk/XFwuKStbYS16MC05XSg/OlthLXowLTktXSpbYS16MC05XSk/fFxcWyg/Oig/OjI1WzAtNV18MlswLTRdWzAtOV18WzAxXT9bMC05XVswLTldPylcXC4pezN9KD86MjVbMC01XXwyWzAtNF1bMC05XXxbMDFdP1swLTldWzAtOV0/fFthLXowLTktXSpbYS16MC05XTooPzpbXFx4MDEtXFx4MDhcXHgwYlxceDBjXFx4MGUtXFx4MWZcXHgyMS1cXHg1YVxceDUzLVxceDdmXXxcXFxcW1xceDAxLVxceDA5XFx4MGJcXHgwY1xceDBlLVxceDdmXSkrKVxcXSkkL2k7XG5jb25zdCBlbWFpbFJlZ2V4ID0gL14oPyFcXC4pKD8hLipcXC5cXC4pKFtBLVowLTlfJytcXC1cXC5dKilbQS1aMC05XystXUAoW0EtWjAtOV1bQS1aMC05XFwtXSpcXC4pK1tBLVpdezIsfSQvaTtcbi8vIGNvbnN0IGVtYWlsUmVnZXggPVxuLy8gICAvXlthLXowLTkuISMkJSbigJkqKy89P15fYHt8fX4tXStAW2EtejAtOS1dKyg/OlxcLlthLXowLTlcXC1dKykqJC9pO1xuLy8gZnJvbSBodHRwczovL3RoZWtldmluc2NvdHQuY29tL2Vtb2ppcy1pbi1qYXZhc2NyaXB0LyN3cml0aW5nLWEtcmVndWxhci1leHByZXNzaW9uXG5jb25zdCBfZW1vamlSZWdleCA9IGBeKFxcXFxwe0V4dGVuZGVkX1BpY3RvZ3JhcGhpY318XFxcXHB7RW1vamlfQ29tcG9uZW50fSkrJGA7XG5sZXQgZW1vamlSZWdleDtcbi8vIGZhc3Rlciwgc2ltcGxlciwgc2FmZXJcbmNvbnN0IGlwdjRSZWdleCA9IC9eKD86KD86MjVbMC01XXwyWzAtNF1bMC05XXwxWzAtOV1bMC05XXxbMS05XVswLTldfFswLTldKVxcLil7M30oPzoyNVswLTVdfDJbMC00XVswLTldfDFbMC05XVswLTldfFsxLTldWzAtOV18WzAtOV0pJC87XG5jb25zdCBpcHY0Q2lkclJlZ2V4ID0gL14oPzooPzoyNVswLTVdfDJbMC00XVswLTldfDFbMC05XVswLTldfFsxLTldWzAtOV18WzAtOV0pXFwuKXszfSg/OjI1WzAtNV18MlswLTRdWzAtOV18MVswLTldWzAtOV18WzEtOV1bMC05XXxbMC05XSlcXC8oM1swLTJdfFsxMl0/WzAtOV0pJC87XG4vLyBjb25zdCBpcHY2UmVnZXggPVxuLy8gL14oKFthLWYwLTldezEsNH06KXs3fXw6OihbYS1mMC05XXsxLDR9Oil7MCw2fXwoW2EtZjAtOV17MSw0fTopezF9OihbYS1mMC05XXsxLDR9Oil7MCw1fXwoW2EtZjAtOV17MSw0fTopezJ9OihbYS1mMC05XXsxLDR9Oil7MCw0fXwoW2EtZjAtOV17MSw0fTopezN9OihbYS1mMC05XXsxLDR9Oil7MCwzfXwoW2EtZjAtOV17MSw0fTopezR9OihbYS1mMC05XXsxLDR9Oil7MCwyfXwoW2EtZjAtOV17MSw0fTopezV9OihbYS1mMC05XXsxLDR9Oil7MCwxfSkoW2EtZjAtOV17MSw0fXwoKCgyNVswLTVdKXwoMlswLTRdWzAtOV0pfCgxWzAtOV17Mn0pfChbMC05XXsxLDJ9KSlcXC4pezN9KCgyNVswLTVdKXwoMlswLTRdWzAtOV0pfCgxWzAtOV17Mn0pfChbMC05XXsxLDJ9KSkpJC87XG5jb25zdCBpcHY2UmVnZXggPSAvXigoWzAtOWEtZkEtRl17MSw0fTopezcsN31bMC05YS1mQS1GXXsxLDR9fChbMC05YS1mQS1GXXsxLDR9Oil7MSw3fTp8KFswLTlhLWZBLUZdezEsNH06KXsxLDZ9OlswLTlhLWZBLUZdezEsNH18KFswLTlhLWZBLUZdezEsNH06KXsxLDV9KDpbMC05YS1mQS1GXXsxLDR9KXsxLDJ9fChbMC05YS1mQS1GXXsxLDR9Oil7MSw0fSg6WzAtOWEtZkEtRl17MSw0fSl7MSwzfXwoWzAtOWEtZkEtRl17MSw0fTopezEsM30oOlswLTlhLWZBLUZdezEsNH0pezEsNH18KFswLTlhLWZBLUZdezEsNH06KXsxLDJ9KDpbMC05YS1mQS1GXXsxLDR9KXsxLDV9fFswLTlhLWZBLUZdezEsNH06KCg6WzAtOWEtZkEtRl17MSw0fSl7MSw2fSl8OigoOlswLTlhLWZBLUZdezEsNH0pezEsN318Oil8ZmU4MDooOlswLTlhLWZBLUZdezAsNH0pezAsNH0lWzAtOWEtekEtWl17MSx9fDo6KGZmZmYoOjB7MSw0fSl7MCwxfTopezAsMX0oKDI1WzAtNV18KDJbMC00XXwxezAsMX1bMC05XSl7MCwxfVswLTldKVxcLil7MywzfSgyNVswLTVdfCgyWzAtNF18MXswLDF9WzAtOV0pezAsMX1bMC05XSl8KFswLTlhLWZBLUZdezEsNH06KXsxLDR9OigoMjVbMC01XXwoMlswLTRdfDF7MCwxfVswLTldKXswLDF9WzAtOV0pXFwuKXszLDN9KDI1WzAtNV18KDJbMC00XXwxezAsMX1bMC05XSl7MCwxfVswLTldKSkkLztcbmNvbnN0IGlwdjZDaWRyUmVnZXggPSAvXigoWzAtOWEtZkEtRl17MSw0fTopezcsN31bMC05YS1mQS1GXXsxLDR9fChbMC05YS1mQS1GXXsxLDR9Oil7MSw3fTp8KFswLTlhLWZBLUZdezEsNH06KXsxLDZ9OlswLTlhLWZBLUZdezEsNH18KFswLTlhLWZBLUZdezEsNH06KXsxLDV9KDpbMC05YS1mQS1GXXsxLDR9KXsxLDJ9fChbMC05YS1mQS1GXXsxLDR9Oil7MSw0fSg6WzAtOWEtZkEtRl17MSw0fSl7MSwzfXwoWzAtOWEtZkEtRl17MSw0fTopezEsM30oOlswLTlhLWZBLUZdezEsNH0pezEsNH18KFswLTlhLWZBLUZdezEsNH06KXsxLDJ9KDpbMC05YS1mQS1GXXsxLDR9KXsxLDV9fFswLTlhLWZBLUZdezEsNH06KCg6WzAtOWEtZkEtRl17MSw0fSl7MSw2fSl8OigoOlswLTlhLWZBLUZdezEsNH0pezEsN318Oil8ZmU4MDooOlswLTlhLWZBLUZdezAsNH0pezAsNH0lWzAtOWEtekEtWl17MSx9fDo6KGZmZmYoOjB7MSw0fSl7MCwxfTopezAsMX0oKDI1WzAtNV18KDJbMC00XXwxezAsMX1bMC05XSl7MCwxfVswLTldKVxcLil7MywzfSgyNVswLTVdfCgyWzAtNF18MXswLDF9WzAtOV0pezAsMX1bMC05XSl8KFswLTlhLWZBLUZdezEsNH06KXsxLDR9OigoMjVbMC01XXwoMlswLTRdfDF7MCwxfVswLTldKXswLDF9WzAtOV0pXFwuKXszLDN9KDI1WzAtNV18KDJbMC00XXwxezAsMX1bMC05XSl7MCwxfVswLTldKSlcXC8oMTJbMC04XXwxWzAxXVswLTldfFsxLTldP1swLTldKSQvO1xuLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNzg2MDM5Mi9kZXRlcm1pbmUtaWYtc3RyaW5nLWlzLWluLWJhc2U2NC11c2luZy1qYXZhc2NyaXB0XG5jb25zdCBiYXNlNjRSZWdleCA9IC9eKFswLTlhLXpBLVorL117NH0pKigoWzAtOWEtekEtWisvXXsyfT09KXwoWzAtOWEtekEtWisvXXszfT0pKT8kLztcbi8vIGh0dHBzOi8vYmFzZTY0Lmd1cnUvc3RhbmRhcmRzL2Jhc2U2NHVybFxuY29uc3QgYmFzZTY0dXJsUmVnZXggPSAvXihbMC05YS16QS1aLV9dezR9KSooKFswLTlhLXpBLVotX117Mn0oPT0pPyl8KFswLTlhLXpBLVotX117M30oPSk/KSk/JC87XG4vLyBzaW1wbGVcbi8vIGNvbnN0IGRhdGVSZWdleFNvdXJjZSA9IGBcXFxcZHs0fS1cXFxcZHsyfS1cXFxcZHsyfWA7XG4vLyBubyBsZWFwIHllYXIgdmFsaWRhdGlvblxuLy8gY29uc3QgZGF0ZVJlZ2V4U291cmNlID0gYFxcXFxkezR9LSgoMFsxMzU3OF18MTB8MTIpLTMxfCgwWzEzLTldfDFbMC0yXSktMzB8KDBbMS05XXwxWzAtMl0pLSgwWzEtOV18MVxcXFxkfDJcXFxcZCkpYDtcbi8vIHdpdGggbGVhcCB5ZWFyIHZhbGlkYXRpb25cbmNvbnN0IGRhdGVSZWdleFNvdXJjZSA9IGAoKFxcXFxkXFxcXGRbMjQ2OF1bMDQ4XXxcXFxcZFxcXFxkWzEzNTc5XVsyNl18XFxcXGRcXFxcZDBbNDhdfFswMjQ2OF1bMDQ4XTAwfFsxMzU3OV1bMjZdMDApLTAyLTI5fFxcXFxkezR9LSgoMFsxMzU3OF18MVswMl0pLSgwWzEtOV18WzEyXVxcXFxkfDNbMDFdKXwoMFs0NjldfDExKS0oMFsxLTldfFsxMl1cXFxcZHwzMCl8KDAyKS0oMFsxLTldfDFcXFxcZHwyWzAtOF0pKSlgO1xuY29uc3QgZGF0ZVJlZ2V4ID0gbmV3IFJlZ0V4cChgXiR7ZGF0ZVJlZ2V4U291cmNlfSRgKTtcbmZ1bmN0aW9uIHRpbWVSZWdleFNvdXJjZShhcmdzKSB7XG4gICAgbGV0IHNlY29uZHNSZWdleFNvdXJjZSA9IGBbMC01XVxcXFxkYDtcbiAgICBpZiAoYXJncy5wcmVjaXNpb24pIHtcbiAgICAgICAgc2Vjb25kc1JlZ2V4U291cmNlID0gYCR7c2Vjb25kc1JlZ2V4U291cmNlfVxcXFwuXFxcXGR7JHthcmdzLnByZWNpc2lvbn19YDtcbiAgICB9XG4gICAgZWxzZSBpZiAoYXJncy5wcmVjaXNpb24gPT0gbnVsbCkge1xuICAgICAgICBzZWNvbmRzUmVnZXhTb3VyY2UgPSBgJHtzZWNvbmRzUmVnZXhTb3VyY2V9KFxcXFwuXFxcXGQrKT9gO1xuICAgIH1cbiAgICBjb25zdCBzZWNvbmRzUXVhbnRpZmllciA9IGFyZ3MucHJlY2lzaW9uID8gXCIrXCIgOiBcIj9cIjsgLy8gcmVxdWlyZSBzZWNvbmRzIGlmIHByZWNpc2lvbiBpcyBub256ZXJvXG4gICAgcmV0dXJuIGAoWzAxXVxcXFxkfDJbMC0zXSk6WzAtNV1cXFxcZCg6JHtzZWNvbmRzUmVnZXhTb3VyY2V9KSR7c2Vjb25kc1F1YW50aWZpZXJ9YDtcbn1cbmZ1bmN0aW9uIHRpbWVSZWdleChhcmdzKSB7XG4gICAgcmV0dXJuIG5ldyBSZWdFeHAoYF4ke3RpbWVSZWdleFNvdXJjZShhcmdzKX0kYCk7XG59XG4vLyBBZGFwdGVkIGZyb20gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzMxNDMyMzFcbmV4cG9ydCBmdW5jdGlvbiBkYXRldGltZVJlZ2V4KGFyZ3MpIHtcbiAgICBsZXQgcmVnZXggPSBgJHtkYXRlUmVnZXhTb3VyY2V9VCR7dGltZVJlZ2V4U291cmNlKGFyZ3MpfWA7XG4gICAgY29uc3Qgb3B0cyA9IFtdO1xuICAgIG9wdHMucHVzaChhcmdzLmxvY2FsID8gYFo/YCA6IGBaYCk7XG4gICAgaWYgKGFyZ3Mub2Zmc2V0KVxuICAgICAgICBvcHRzLnB1c2goYChbKy1dXFxcXGR7Mn06P1xcXFxkezJ9KWApO1xuICAgIHJlZ2V4ID0gYCR7cmVnZXh9KCR7b3B0cy5qb2luKFwifFwiKX0pYDtcbiAgICByZXR1cm4gbmV3IFJlZ0V4cChgXiR7cmVnZXh9JGApO1xufVxuZnVuY3Rpb24gaXNWYWxpZElQKGlwLCB2ZXJzaW9uKSB7XG4gICAgaWYgKCh2ZXJzaW9uID09PSBcInY0XCIgfHwgIXZlcnNpb24pICYmIGlwdjRSZWdleC50ZXN0KGlwKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKCh2ZXJzaW9uID09PSBcInY2XCIgfHwgIXZlcnNpb24pICYmIGlwdjZSZWdleC50ZXN0KGlwKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gaXNWYWxpZEpXVChqd3QsIGFsZykge1xuICAgIGlmICghand0UmVnZXgudGVzdChqd3QpKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgW2hlYWRlcl0gPSBqd3Quc3BsaXQoXCIuXCIpO1xuICAgICAgICAvLyBDb252ZXJ0IGJhc2U2NHVybCB0byBiYXNlNjRcbiAgICAgICAgY29uc3QgYmFzZTY0ID0gaGVhZGVyXG4gICAgICAgICAgICAucmVwbGFjZSgvLS9nLCBcIitcIilcbiAgICAgICAgICAgIC5yZXBsYWNlKC9fL2csIFwiL1wiKVxuICAgICAgICAgICAgLnBhZEVuZChoZWFkZXIubGVuZ3RoICsgKCg0IC0gKGhlYWRlci5sZW5ndGggJSA0KSkgJSA0KSwgXCI9XCIpO1xuICAgICAgICBjb25zdCBkZWNvZGVkID0gSlNPTi5wYXJzZShhdG9iKGJhc2U2NCkpO1xuICAgICAgICBpZiAodHlwZW9mIGRlY29kZWQgIT09IFwib2JqZWN0XCIgfHwgZGVjb2RlZCA9PT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgaWYgKFwidHlwXCIgaW4gZGVjb2RlZCAmJiBkZWNvZGVkPy50eXAgIT09IFwiSldUXCIpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmICghZGVjb2RlZC5hbGcpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmIChhbGcgJiYgZGVjb2RlZC5hbGcgIT09IGFsZylcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGNhdGNoIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGlzVmFsaWRDaWRyKGlwLCB2ZXJzaW9uKSB7XG4gICAgaWYgKCh2ZXJzaW9uID09PSBcInY0XCIgfHwgIXZlcnNpb24pICYmIGlwdjRDaWRyUmVnZXgudGVzdChpcCkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmICgodmVyc2lvbiA9PT0gXCJ2NlwiIHx8ICF2ZXJzaW9uKSAmJiBpcHY2Q2lkclJlZ2V4LnRlc3QoaXApKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5leHBvcnQgY2xhc3MgWm9kU3RyaW5nIGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGlmICh0aGlzLl9kZWYuY29lcmNlKSB7XG4gICAgICAgICAgICBpbnB1dC5kYXRhID0gU3RyaW5nKGlucHV0LmRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhcnNlZFR5cGUgPSB0aGlzLl9nZXRUeXBlKGlucHV0KTtcbiAgICAgICAgaWYgKHBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUuc3RyaW5nKSB7XG4gICAgICAgICAgICBjb25zdCBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCk7XG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlLnN0cmluZyxcbiAgICAgICAgICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHN0YXR1cyA9IG5ldyBQYXJzZVN0YXR1cygpO1xuICAgICAgICBsZXQgY3R4ID0gdW5kZWZpbmVkO1xuICAgICAgICBmb3IgKGNvbnN0IGNoZWNrIG9mIHRoaXMuX2RlZi5jaGVja3MpIHtcbiAgICAgICAgICAgIGlmIChjaGVjay5raW5kID09PSBcIm1pblwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlucHV0LmRhdGEubGVuZ3RoIDwgY2hlY2sudmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLnRvb19zbWFsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbmltdW06IGNoZWNrLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4YWN0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcIm1heFwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlucHV0LmRhdGEubGVuZ3RoID4gY2hlY2sudmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLnRvb19iaWcsXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXhpbXVtOiBjaGVjay52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmNsdXNpdmU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBleGFjdDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJsZW5ndGhcIikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRvb0JpZyA9IGlucHV0LmRhdGEubGVuZ3RoID4gY2hlY2sudmFsdWU7XG4gICAgICAgICAgICAgICAgY29uc3QgdG9vU21hbGwgPSBpbnB1dC5kYXRhLmxlbmd0aCA8IGNoZWNrLnZhbHVlO1xuICAgICAgICAgICAgICAgIGlmICh0b29CaWcgfHwgdG9vU21hbGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0b29CaWcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS50b29fYmlnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heGltdW06IGNoZWNrLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5jbHVzaXZlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4YWN0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0b29TbWFsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLnRvb19zbWFsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW5pbXVtOiBjaGVjay52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGFjdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJlbWFpbFwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFlbWFpbFJlZ2V4LnRlc3QoaW5wdXQuZGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvbjogXCJlbWFpbFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwiZW1vamlcIikge1xuICAgICAgICAgICAgICAgIGlmICghZW1vamlSZWdleCkge1xuICAgICAgICAgICAgICAgICAgICBlbW9qaVJlZ2V4ID0gbmV3IFJlZ0V4cChfZW1vamlSZWdleCwgXCJ1XCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIWVtb2ppUmVnZXgudGVzdChpbnB1dC5kYXRhKSkge1xuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uOiBcImVtb2ppXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJ1dWlkXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXV1aWRSZWdleC50ZXN0KGlucHV0LmRhdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRpb246IFwidXVpZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwibmFub2lkXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoIW5hbm9pZFJlZ2V4LnRlc3QoaW5wdXQuZGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvbjogXCJuYW5vaWRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3N0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcImN1aWRcIikge1xuICAgICAgICAgICAgICAgIGlmICghY3VpZFJlZ2V4LnRlc3QoaW5wdXQuZGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvbjogXCJjdWlkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJjdWlkMlwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFjdWlkMlJlZ2V4LnRlc3QoaW5wdXQuZGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvbjogXCJjdWlkMlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwidWxpZFwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF1bGlkUmVnZXgudGVzdChpbnB1dC5kYXRhKSkge1xuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uOiBcInVsaWRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3N0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcInVybFwiKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgbmV3IFVSTChpbnB1dC5kYXRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2gge1xuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uOiBcInVybFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwicmVnZXhcIikge1xuICAgICAgICAgICAgICAgIGNoZWNrLnJlZ2V4Lmxhc3RJbmRleCA9IDA7XG4gICAgICAgICAgICAgICAgY29uc3QgdGVzdFJlc3VsdCA9IGNoZWNrLnJlZ2V4LnRlc3QoaW5wdXQuZGF0YSk7XG4gICAgICAgICAgICAgICAgaWYgKCF0ZXN0UmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRpb246IFwicmVnZXhcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3N0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcInRyaW1cIikge1xuICAgICAgICAgICAgICAgIGlucHV0LmRhdGEgPSBpbnB1dC5kYXRhLnRyaW0oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwiaW5jbHVkZXNcIikge1xuICAgICAgICAgICAgICAgIGlmICghaW5wdXQuZGF0YS5pbmNsdWRlcyhjaGVjay52YWx1ZSwgY2hlY2sucG9zaXRpb24pKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3N0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRpb246IHsgaW5jbHVkZXM6IGNoZWNrLnZhbHVlLCBwb3NpdGlvbjogY2hlY2sucG9zaXRpb24gfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcInRvTG93ZXJDYXNlXCIpIHtcbiAgICAgICAgICAgICAgICBpbnB1dC5kYXRhID0gaW5wdXQuZGF0YS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJ0b1VwcGVyQ2FzZVwiKSB7XG4gICAgICAgICAgICAgICAgaW5wdXQuZGF0YSA9IGlucHV0LmRhdGEudG9VcHBlckNhc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwic3RhcnRzV2l0aFwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFpbnB1dC5kYXRhLnN0YXJ0c1dpdGgoY2hlY2sudmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3N0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRpb246IHsgc3RhcnRzV2l0aDogY2hlY2sudmFsdWUgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcImVuZHNXaXRoXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWlucHV0LmRhdGEuZW5kc1dpdGgoY2hlY2sudmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3N0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRpb246IHsgZW5kc1dpdGg6IGNoZWNrLnZhbHVlIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJkYXRldGltZVwiKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVnZXggPSBkYXRldGltZVJlZ2V4KGNoZWNrKTtcbiAgICAgICAgICAgICAgICBpZiAoIXJlZ2V4LnRlc3QoaW5wdXQuZGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvbjogXCJkYXRldGltZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwiZGF0ZVwiKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVnZXggPSBkYXRlUmVnZXg7XG4gICAgICAgICAgICAgICAgaWYgKCFyZWdleC50ZXN0KGlucHV0LmRhdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3N0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRpb246IFwiZGF0ZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwidGltZVwiKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVnZXggPSB0aW1lUmVnZXgoY2hlY2spO1xuICAgICAgICAgICAgICAgIGlmICghcmVnZXgudGVzdChpbnB1dC5kYXRhKSkge1xuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uOiBcInRpbWVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcImR1cmF0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWR1cmF0aW9uUmVnZXgudGVzdChpbnB1dC5kYXRhKSkge1xuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uOiBcImR1cmF0aW9uXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJpcFwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFpc1ZhbGlkSVAoaW5wdXQuZGF0YSwgY2hlY2sudmVyc2lvbikpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvbjogXCJpcFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwiand0XCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWlzVmFsaWRKV1QoaW5wdXQuZGF0YSwgY2hlY2suYWxnKSkge1xuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uOiBcImp3dFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwiY2lkclwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFpc1ZhbGlkQ2lkcihpbnB1dC5kYXRhLCBjaGVjay52ZXJzaW9uKSkge1xuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uOiBcImNpZHJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3N0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcImJhc2U2NFwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFiYXNlNjRSZWdleC50ZXN0KGlucHV0LmRhdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRpb246IFwiYmFzZTY0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJiYXNlNjR1cmxcIikge1xuICAgICAgICAgICAgICAgIGlmICghYmFzZTY0dXJsUmVnZXgudGVzdChpbnB1dC5kYXRhKSkge1xuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uOiBcImJhc2U2NHVybFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHV0aWwuYXNzZXJ0TmV2ZXIoY2hlY2spO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHN0YXR1czogc3RhdHVzLnZhbHVlLCB2YWx1ZTogaW5wdXQuZGF0YSB9O1xuICAgIH1cbiAgICBfcmVnZXgocmVnZXgsIHZhbGlkYXRpb24sIG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVmaW5lbWVudCgoZGF0YSkgPT4gcmVnZXgudGVzdChkYXRhKSwge1xuICAgICAgICAgICAgdmFsaWRhdGlvbixcbiAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3N0cmluZyxcbiAgICAgICAgICAgIC4uLmVycm9yVXRpbC5lcnJUb09iaihtZXNzYWdlKSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIF9hZGRDaGVjayhjaGVjaykge1xuICAgICAgICByZXR1cm4gbmV3IFpvZFN0cmluZyh7XG4gICAgICAgICAgICAuLi50aGlzLl9kZWYsXG4gICAgICAgICAgICBjaGVja3M6IFsuLi50aGlzLl9kZWYuY2hlY2tzLCBjaGVja10sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbWFpbChtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7IGtpbmQ6IFwiZW1haWxcIiwgLi4uZXJyb3JVdGlsLmVyclRvT2JqKG1lc3NhZ2UpIH0pO1xuICAgIH1cbiAgICB1cmwobWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soeyBraW5kOiBcInVybFwiLCAuLi5lcnJvclV0aWwuZXJyVG9PYmoobWVzc2FnZSkgfSk7XG4gICAgfVxuICAgIGVtb2ppKG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHsga2luZDogXCJlbW9qaVwiLCAuLi5lcnJvclV0aWwuZXJyVG9PYmoobWVzc2FnZSkgfSk7XG4gICAgfVxuICAgIHV1aWQobWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soeyBraW5kOiBcInV1aWRcIiwgLi4uZXJyb3JVdGlsLmVyclRvT2JqKG1lc3NhZ2UpIH0pO1xuICAgIH1cbiAgICBuYW5vaWQobWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soeyBraW5kOiBcIm5hbm9pZFwiLCAuLi5lcnJvclV0aWwuZXJyVG9PYmoobWVzc2FnZSkgfSk7XG4gICAgfVxuICAgIGN1aWQobWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soeyBraW5kOiBcImN1aWRcIiwgLi4uZXJyb3JVdGlsLmVyclRvT2JqKG1lc3NhZ2UpIH0pO1xuICAgIH1cbiAgICBjdWlkMihtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7IGtpbmQ6IFwiY3VpZDJcIiwgLi4uZXJyb3JVdGlsLmVyclRvT2JqKG1lc3NhZ2UpIH0pO1xuICAgIH1cbiAgICB1bGlkKG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHsga2luZDogXCJ1bGlkXCIsIC4uLmVycm9yVXRpbC5lcnJUb09iaihtZXNzYWdlKSB9KTtcbiAgICB9XG4gICAgYmFzZTY0KG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHsga2luZDogXCJiYXNlNjRcIiwgLi4uZXJyb3JVdGlsLmVyclRvT2JqKG1lc3NhZ2UpIH0pO1xuICAgIH1cbiAgICBiYXNlNjR1cmwobWVzc2FnZSkge1xuICAgICAgICAvLyBiYXNlNjR1cmwgZW5jb2RpbmcgaXMgYSBtb2RpZmljYXRpb24gb2YgYmFzZTY0IHRoYXQgY2FuIHNhZmVseSBiZSB1c2VkIGluIFVSTHMgYW5kIGZpbGVuYW1lc1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAgICAgICAga2luZDogXCJiYXNlNjR1cmxcIixcbiAgICAgICAgICAgIC4uLmVycm9yVXRpbC5lcnJUb09iaihtZXNzYWdlKSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGp3dChvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7IGtpbmQ6IFwiand0XCIsIC4uLmVycm9yVXRpbC5lcnJUb09iaihvcHRpb25zKSB9KTtcbiAgICB9XG4gICAgaXAob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soeyBraW5kOiBcImlwXCIsIC4uLmVycm9yVXRpbC5lcnJUb09iaihvcHRpb25zKSB9KTtcbiAgICB9XG4gICAgY2lkcihvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7IGtpbmQ6IFwiY2lkclwiLCAuLi5lcnJvclV0aWwuZXJyVG9PYmoob3B0aW9ucykgfSk7XG4gICAgfVxuICAgIGRhdGV0aW1lKG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAgICAgICAgICAgIGtpbmQ6IFwiZGF0ZXRpbWVcIixcbiAgICAgICAgICAgICAgICBwcmVjaXNpb246IG51bGwsXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICBsb2NhbDogZmFsc2UsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogb3B0aW9ucyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICAgICAgICBraW5kOiBcImRhdGV0aW1lXCIsXG4gICAgICAgICAgICBwcmVjaXNpb246IHR5cGVvZiBvcHRpb25zPy5wcmVjaXNpb24gPT09IFwidW5kZWZpbmVkXCIgPyBudWxsIDogb3B0aW9ucz8ucHJlY2lzaW9uLFxuICAgICAgICAgICAgb2Zmc2V0OiBvcHRpb25zPy5vZmZzZXQgPz8gZmFsc2UsXG4gICAgICAgICAgICBsb2NhbDogb3B0aW9ucz8ubG9jYWwgPz8gZmFsc2UsXG4gICAgICAgICAgICAuLi5lcnJvclV0aWwuZXJyVG9PYmoob3B0aW9ucz8ubWVzc2FnZSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBkYXRlKG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHsga2luZDogXCJkYXRlXCIsIG1lc3NhZ2UgfSk7XG4gICAgfVxuICAgIHRpbWUob3B0aW9ucykge1xuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICAgICAgICAgICAga2luZDogXCJ0aW1lXCIsXG4gICAgICAgICAgICAgICAgcHJlY2lzaW9uOiBudWxsLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IG9wdGlvbnMsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAgICAgICAga2luZDogXCJ0aW1lXCIsXG4gICAgICAgICAgICBwcmVjaXNpb246IHR5cGVvZiBvcHRpb25zPy5wcmVjaXNpb24gPT09IFwidW5kZWZpbmVkXCIgPyBudWxsIDogb3B0aW9ucz8ucHJlY2lzaW9uLFxuICAgICAgICAgICAgLi4uZXJyb3JVdGlsLmVyclRvT2JqKG9wdGlvbnM/Lm1lc3NhZ2UpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZHVyYXRpb24obWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soeyBraW5kOiBcImR1cmF0aW9uXCIsIC4uLmVycm9yVXRpbC5lcnJUb09iaihtZXNzYWdlKSB9KTtcbiAgICB9XG4gICAgcmVnZXgocmVnZXgsIG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcbiAgICAgICAgICAgIGtpbmQ6IFwicmVnZXhcIixcbiAgICAgICAgICAgIHJlZ2V4OiByZWdleCxcbiAgICAgICAgICAgIC4uLmVycm9yVXRpbC5lcnJUb09iaihtZXNzYWdlKSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGluY2x1ZGVzKHZhbHVlLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICAgICAgICBraW5kOiBcImluY2x1ZGVzXCIsXG4gICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgICBwb3NpdGlvbjogb3B0aW9ucz8ucG9zaXRpb24sXG4gICAgICAgICAgICAuLi5lcnJvclV0aWwuZXJyVG9PYmoob3B0aW9ucz8ubWVzc2FnZSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzdGFydHNXaXRoKHZhbHVlLCBtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICAgICAgICBraW5kOiBcInN0YXJ0c1dpdGhcIixcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICAgIC4uLmVycm9yVXRpbC5lcnJUb09iaihtZXNzYWdlKSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVuZHNXaXRoKHZhbHVlLCBtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICAgICAgICBraW5kOiBcImVuZHNXaXRoXCIsXG4gICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgICAuLi5lcnJvclV0aWwuZXJyVG9PYmoobWVzc2FnZSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBtaW4obWluTGVuZ3RoLCBtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICAgICAgICBraW5kOiBcIm1pblwiLFxuICAgICAgICAgICAgdmFsdWU6IG1pbkxlbmd0aCxcbiAgICAgICAgICAgIC4uLmVycm9yVXRpbC5lcnJUb09iaihtZXNzYWdlKSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIG1heChtYXhMZW5ndGgsIG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcbiAgICAgICAgICAgIGtpbmQ6IFwibWF4XCIsXG4gICAgICAgICAgICB2YWx1ZTogbWF4TGVuZ3RoLFxuICAgICAgICAgICAgLi4uZXJyb3JVdGlsLmVyclRvT2JqKG1lc3NhZ2UpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgbGVuZ3RoKGxlbiwgbWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAgICAgICAga2luZDogXCJsZW5ndGhcIixcbiAgICAgICAgICAgIHZhbHVlOiBsZW4sXG4gICAgICAgICAgICAuLi5lcnJvclV0aWwuZXJyVG9PYmoobWVzc2FnZSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFcXVpdmFsZW50IHRvIGAubWluKDEpYFxuICAgICAqL1xuICAgIG5vbmVtcHR5KG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWluKDEsIGVycm9yVXRpbC5lcnJUb09iaihtZXNzYWdlKSk7XG4gICAgfVxuICAgIHRyaW0oKSB7XG4gICAgICAgIHJldHVybiBuZXcgWm9kU3RyaW5nKHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIGNoZWNrczogWy4uLnRoaXMuX2RlZi5jaGVja3MsIHsga2luZDogXCJ0cmltXCIgfV0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB0b0xvd2VyQ2FzZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBab2RTdHJpbmcoe1xuICAgICAgICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgICAgICAgY2hlY2tzOiBbLi4udGhpcy5fZGVmLmNoZWNrcywgeyBraW5kOiBcInRvTG93ZXJDYXNlXCIgfV0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB0b1VwcGVyQ2FzZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBab2RTdHJpbmcoe1xuICAgICAgICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgICAgICAgY2hlY2tzOiBbLi4udGhpcy5fZGVmLmNoZWNrcywgeyBraW5kOiBcInRvVXBwZXJDYXNlXCIgfV0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBnZXQgaXNEYXRldGltZSgpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5fZGVmLmNoZWNrcy5maW5kKChjaCkgPT4gY2gua2luZCA9PT0gXCJkYXRldGltZVwiKTtcbiAgICB9XG4gICAgZ2V0IGlzRGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5fZGVmLmNoZWNrcy5maW5kKChjaCkgPT4gY2gua2luZCA9PT0gXCJkYXRlXCIpO1xuICAgIH1cbiAgICBnZXQgaXNUaW1lKCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLl9kZWYuY2hlY2tzLmZpbmQoKGNoKSA9PiBjaC5raW5kID09PSBcInRpbWVcIik7XG4gICAgfVxuICAgIGdldCBpc0R1cmF0aW9uKCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLl9kZWYuY2hlY2tzLmZpbmQoKGNoKSA9PiBjaC5raW5kID09PSBcImR1cmF0aW9uXCIpO1xuICAgIH1cbiAgICBnZXQgaXNFbWFpbCgpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5fZGVmLmNoZWNrcy5maW5kKChjaCkgPT4gY2gua2luZCA9PT0gXCJlbWFpbFwiKTtcbiAgICB9XG4gICAgZ2V0IGlzVVJMKCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLl9kZWYuY2hlY2tzLmZpbmQoKGNoKSA9PiBjaC5raW5kID09PSBcInVybFwiKTtcbiAgICB9XG4gICAgZ2V0IGlzRW1vamkoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuX2RlZi5jaGVja3MuZmluZCgoY2gpID0+IGNoLmtpbmQgPT09IFwiZW1vamlcIik7XG4gICAgfVxuICAgIGdldCBpc1VVSUQoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuX2RlZi5jaGVja3MuZmluZCgoY2gpID0+IGNoLmtpbmQgPT09IFwidXVpZFwiKTtcbiAgICB9XG4gICAgZ2V0IGlzTkFOT0lEKCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLl9kZWYuY2hlY2tzLmZpbmQoKGNoKSA9PiBjaC5raW5kID09PSBcIm5hbm9pZFwiKTtcbiAgICB9XG4gICAgZ2V0IGlzQ1VJRCgpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5fZGVmLmNoZWNrcy5maW5kKChjaCkgPT4gY2gua2luZCA9PT0gXCJjdWlkXCIpO1xuICAgIH1cbiAgICBnZXQgaXNDVUlEMigpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5fZGVmLmNoZWNrcy5maW5kKChjaCkgPT4gY2gua2luZCA9PT0gXCJjdWlkMlwiKTtcbiAgICB9XG4gICAgZ2V0IGlzVUxJRCgpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5fZGVmLmNoZWNrcy5maW5kKChjaCkgPT4gY2gua2luZCA9PT0gXCJ1bGlkXCIpO1xuICAgIH1cbiAgICBnZXQgaXNJUCgpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5fZGVmLmNoZWNrcy5maW5kKChjaCkgPT4gY2gua2luZCA9PT0gXCJpcFwiKTtcbiAgICB9XG4gICAgZ2V0IGlzQ0lEUigpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5fZGVmLmNoZWNrcy5maW5kKChjaCkgPT4gY2gua2luZCA9PT0gXCJjaWRyXCIpO1xuICAgIH1cbiAgICBnZXQgaXNCYXNlNjQoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuX2RlZi5jaGVja3MuZmluZCgoY2gpID0+IGNoLmtpbmQgPT09IFwiYmFzZTY0XCIpO1xuICAgIH1cbiAgICBnZXQgaXNCYXNlNjR1cmwoKSB7XG4gICAgICAgIC8vIGJhc2U2NHVybCBlbmNvZGluZyBpcyBhIG1vZGlmaWNhdGlvbiBvZiBiYXNlNjQgdGhhdCBjYW4gc2FmZWx5IGJlIHVzZWQgaW4gVVJMcyBhbmQgZmlsZW5hbWVzXG4gICAgICAgIHJldHVybiAhIXRoaXMuX2RlZi5jaGVja3MuZmluZCgoY2gpID0+IGNoLmtpbmQgPT09IFwiYmFzZTY0dXJsXCIpO1xuICAgIH1cbiAgICBnZXQgbWluTGVuZ3RoKCkge1xuICAgICAgICBsZXQgbWluID0gbnVsbDtcbiAgICAgICAgZm9yIChjb25zdCBjaCBvZiB0aGlzLl9kZWYuY2hlY2tzKSB7XG4gICAgICAgICAgICBpZiAoY2gua2luZCA9PT0gXCJtaW5cIikge1xuICAgICAgICAgICAgICAgIGlmIChtaW4gPT09IG51bGwgfHwgY2gudmFsdWUgPiBtaW4pXG4gICAgICAgICAgICAgICAgICAgIG1pbiA9IGNoLnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtaW47XG4gICAgfVxuICAgIGdldCBtYXhMZW5ndGgoKSB7XG4gICAgICAgIGxldCBtYXggPSBudWxsO1xuICAgICAgICBmb3IgKGNvbnN0IGNoIG9mIHRoaXMuX2RlZi5jaGVja3MpIHtcbiAgICAgICAgICAgIGlmIChjaC5raW5kID09PSBcIm1heFwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKG1heCA9PT0gbnVsbCB8fCBjaC52YWx1ZSA8IG1heClcbiAgICAgICAgICAgICAgICAgICAgbWF4ID0gY2gudmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1heDtcbiAgICB9XG59XG5ab2RTdHJpbmcuY3JlYXRlID0gKHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kU3RyaW5nKHtcbiAgICAgICAgY2hlY2tzOiBbXSxcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RTdHJpbmcsXG4gICAgICAgIGNvZXJjZTogcGFyYW1zPy5jb2VyY2UgPz8gZmFsc2UsXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG4vLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8zOTY2NDg0L3doeS1kb2VzLW1vZHVsdXMtb3BlcmF0b3ItcmV0dXJuLWZyYWN0aW9uYWwtbnVtYmVyLWluLWphdmFzY3JpcHQvMzE3MTEwMzQjMzE3MTEwMzRcbmZ1bmN0aW9uIGZsb2F0U2FmZVJlbWFpbmRlcih2YWwsIHN0ZXApIHtcbiAgICBjb25zdCB2YWxEZWNDb3VudCA9ICh2YWwudG9TdHJpbmcoKS5zcGxpdChcIi5cIilbMV0gfHwgXCJcIikubGVuZ3RoO1xuICAgIGNvbnN0IHN0ZXBEZWNDb3VudCA9IChzdGVwLnRvU3RyaW5nKCkuc3BsaXQoXCIuXCIpWzFdIHx8IFwiXCIpLmxlbmd0aDtcbiAgICBjb25zdCBkZWNDb3VudCA9IHZhbERlY0NvdW50ID4gc3RlcERlY0NvdW50ID8gdmFsRGVjQ291bnQgOiBzdGVwRGVjQ291bnQ7XG4gICAgY29uc3QgdmFsSW50ID0gTnVtYmVyLnBhcnNlSW50KHZhbC50b0ZpeGVkKGRlY0NvdW50KS5yZXBsYWNlKFwiLlwiLCBcIlwiKSk7XG4gICAgY29uc3Qgc3RlcEludCA9IE51bWJlci5wYXJzZUludChzdGVwLnRvRml4ZWQoZGVjQ291bnQpLnJlcGxhY2UoXCIuXCIsIFwiXCIpKTtcbiAgICByZXR1cm4gKHZhbEludCAlIHN0ZXBJbnQpIC8gMTAgKiogZGVjQ291bnQ7XG59XG5leHBvcnQgY2xhc3MgWm9kTnVtYmVyIGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMubWluID0gdGhpcy5ndGU7XG4gICAgICAgIHRoaXMubWF4ID0gdGhpcy5sdGU7XG4gICAgICAgIHRoaXMuc3RlcCA9IHRoaXMubXVsdGlwbGVPZjtcbiAgICB9XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGlmICh0aGlzLl9kZWYuY29lcmNlKSB7XG4gICAgICAgICAgICBpbnB1dC5kYXRhID0gTnVtYmVyKGlucHV0LmRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhcnNlZFR5cGUgPSB0aGlzLl9nZXRUeXBlKGlucHV0KTtcbiAgICAgICAgaWYgKHBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUubnVtYmVyKSB7XG4gICAgICAgICAgICBjb25zdCBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCk7XG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlLm51bWJlcixcbiAgICAgICAgICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICB9XG4gICAgICAgIGxldCBjdHggPSB1bmRlZmluZWQ7XG4gICAgICAgIGNvbnN0IHN0YXR1cyA9IG5ldyBQYXJzZVN0YXR1cygpO1xuICAgICAgICBmb3IgKGNvbnN0IGNoZWNrIG9mIHRoaXMuX2RlZi5jaGVja3MpIHtcbiAgICAgICAgICAgIGlmIChjaGVjay5raW5kID09PSBcImludFwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF1dGlsLmlzSW50ZWdlcihpbnB1dC5kYXRhKSkge1xuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0ZWQ6IFwiaW50ZWdlclwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVjZWl2ZWQ6IFwiZmxvYXRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGVjay5raW5kID09PSBcIm1pblwiKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdG9vU21hbGwgPSBjaGVjay5pbmNsdXNpdmUgPyBpbnB1dC5kYXRhIDwgY2hlY2sudmFsdWUgOiBpbnB1dC5kYXRhIDw9IGNoZWNrLnZhbHVlO1xuICAgICAgICAgICAgICAgIGlmICh0b29TbWFsbCkge1xuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUudG9vX3NtYWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWluaW11bTogY2hlY2sudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIm51bWJlclwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5jbHVzaXZlOiBjaGVjay5pbmNsdXNpdmUsXG4gICAgICAgICAgICAgICAgICAgICAgICBleGFjdDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJtYXhcIikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRvb0JpZyA9IGNoZWNrLmluY2x1c2l2ZSA/IGlucHV0LmRhdGEgPiBjaGVjay52YWx1ZSA6IGlucHV0LmRhdGEgPj0gY2hlY2sudmFsdWU7XG4gICAgICAgICAgICAgICAgaWYgKHRvb0JpZykge1xuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUudG9vX2JpZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heGltdW06IGNoZWNrLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJudW1iZXJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGluY2x1c2l2ZTogY2hlY2suaW5jbHVzaXZlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXhhY3Q6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwibXVsdGlwbGVPZlwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKGZsb2F0U2FmZVJlbWFpbmRlcihpbnB1dC5kYXRhLCBjaGVjay52YWx1ZSkgIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLm5vdF9tdWx0aXBsZV9vZixcbiAgICAgICAgICAgICAgICAgICAgICAgIG11bHRpcGxlT2Y6IGNoZWNrLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwiZmluaXRlXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoIU51bWJlci5pc0Zpbml0ZShpbnB1dC5kYXRhKSkge1xuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUubm90X2Zpbml0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB1dGlsLmFzc2VydE5ldmVyKGNoZWNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBzdGF0dXM6IHN0YXR1cy52YWx1ZSwgdmFsdWU6IGlucHV0LmRhdGEgfTtcbiAgICB9XG4gICAgZ3RlKHZhbHVlLCBtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNldExpbWl0KFwibWluXCIsIHZhbHVlLCB0cnVlLCBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSkpO1xuICAgIH1cbiAgICBndCh2YWx1ZSwgbWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXRMaW1pdChcIm1pblwiLCB2YWx1ZSwgZmFsc2UsIGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSk7XG4gICAgfVxuICAgIGx0ZSh2YWx1ZSwgbWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXRMaW1pdChcIm1heFwiLCB2YWx1ZSwgdHJ1ZSwgZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpKTtcbiAgICB9XG4gICAgbHQodmFsdWUsIG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0TGltaXQoXCJtYXhcIiwgdmFsdWUsIGZhbHNlLCBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSkpO1xuICAgIH1cbiAgICBzZXRMaW1pdChraW5kLCB2YWx1ZSwgaW5jbHVzaXZlLCBtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiBuZXcgWm9kTnVtYmVyKHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIGNoZWNrczogW1xuICAgICAgICAgICAgICAgIC4uLnRoaXMuX2RlZi5jaGVja3MsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBraW5kLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgaW5jbHVzaXZlLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSksXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfYWRkQ2hlY2soY2hlY2spIHtcbiAgICAgICAgcmV0dXJuIG5ldyBab2ROdW1iZXIoe1xuICAgICAgICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgICAgICAgY2hlY2tzOiBbLi4udGhpcy5fZGVmLmNoZWNrcywgY2hlY2tdLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgaW50KG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcbiAgICAgICAgICAgIGtpbmQ6IFwiaW50XCIsXG4gICAgICAgICAgICBtZXNzYWdlOiBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBwb3NpdGl2ZShtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICAgICAgICBraW5kOiBcIm1pblwiLFxuICAgICAgICAgICAgdmFsdWU6IDAsXG4gICAgICAgICAgICBpbmNsdXNpdmU6IGZhbHNlLFxuICAgICAgICAgICAgbWVzc2FnZTogZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgbmVnYXRpdmUobWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAgICAgICAga2luZDogXCJtYXhcIixcbiAgICAgICAgICAgIHZhbHVlOiAwLFxuICAgICAgICAgICAgaW5jbHVzaXZlOiBmYWxzZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIG5vbnBvc2l0aXZlKG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcbiAgICAgICAgICAgIGtpbmQ6IFwibWF4XCIsXG4gICAgICAgICAgICB2YWx1ZTogMCxcbiAgICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIG5vbm5lZ2F0aXZlKG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcbiAgICAgICAgICAgIGtpbmQ6IFwibWluXCIsXG4gICAgICAgICAgICB2YWx1ZTogMCxcbiAgICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIG11bHRpcGxlT2YodmFsdWUsIG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcbiAgICAgICAgICAgIGtpbmQ6IFwibXVsdGlwbGVPZlwiLFxuICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgbWVzc2FnZTogZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZmluaXRlKG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcbiAgICAgICAgICAgIGtpbmQ6IFwiZmluaXRlXCIsXG4gICAgICAgICAgICBtZXNzYWdlOiBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzYWZlKG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcbiAgICAgICAgICAgIGtpbmQ6IFwibWluXCIsXG4gICAgICAgICAgICBpbmNsdXNpdmU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVIsXG4gICAgICAgICAgICBtZXNzYWdlOiBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSksXG4gICAgICAgIH0pLl9hZGRDaGVjayh7XG4gICAgICAgICAgICBraW5kOiBcIm1heFwiLFxuICAgICAgICAgICAgaW5jbHVzaXZlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSLFxuICAgICAgICAgICAgbWVzc2FnZTogZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0IG1pblZhbHVlKCkge1xuICAgICAgICBsZXQgbWluID0gbnVsbDtcbiAgICAgICAgZm9yIChjb25zdCBjaCBvZiB0aGlzLl9kZWYuY2hlY2tzKSB7XG4gICAgICAgICAgICBpZiAoY2gua2luZCA9PT0gXCJtaW5cIikge1xuICAgICAgICAgICAgICAgIGlmIChtaW4gPT09IG51bGwgfHwgY2gudmFsdWUgPiBtaW4pXG4gICAgICAgICAgICAgICAgICAgIG1pbiA9IGNoLnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtaW47XG4gICAgfVxuICAgIGdldCBtYXhWYWx1ZSgpIHtcbiAgICAgICAgbGV0IG1heCA9IG51bGw7XG4gICAgICAgIGZvciAoY29uc3QgY2ggb2YgdGhpcy5fZGVmLmNoZWNrcykge1xuICAgICAgICAgICAgaWYgKGNoLmtpbmQgPT09IFwibWF4XCIpIHtcbiAgICAgICAgICAgICAgICBpZiAobWF4ID09PSBudWxsIHx8IGNoLnZhbHVlIDwgbWF4KVxuICAgICAgICAgICAgICAgICAgICBtYXggPSBjaC52YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWF4O1xuICAgIH1cbiAgICBnZXQgaXNJbnQoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuX2RlZi5jaGVja3MuZmluZCgoY2gpID0+IGNoLmtpbmQgPT09IFwiaW50XCIgfHwgKGNoLmtpbmQgPT09IFwibXVsdGlwbGVPZlwiICYmIHV0aWwuaXNJbnRlZ2VyKGNoLnZhbHVlKSkpO1xuICAgIH1cbiAgICBnZXQgaXNGaW5pdGUoKSB7XG4gICAgICAgIGxldCBtYXggPSBudWxsO1xuICAgICAgICBsZXQgbWluID0gbnVsbDtcbiAgICAgICAgZm9yIChjb25zdCBjaCBvZiB0aGlzLl9kZWYuY2hlY2tzKSB7XG4gICAgICAgICAgICBpZiAoY2gua2luZCA9PT0gXCJmaW5pdGVcIiB8fCBjaC5raW5kID09PSBcImludFwiIHx8IGNoLmtpbmQgPT09IFwibXVsdGlwbGVPZlwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaC5raW5kID09PSBcIm1pblwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKG1pbiA9PT0gbnVsbCB8fCBjaC52YWx1ZSA+IG1pbilcbiAgICAgICAgICAgICAgICAgICAgbWluID0gY2gudmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaC5raW5kID09PSBcIm1heFwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKG1heCA9PT0gbnVsbCB8fCBjaC52YWx1ZSA8IG1heClcbiAgICAgICAgICAgICAgICAgICAgbWF4ID0gY2gudmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIE51bWJlci5pc0Zpbml0ZShtaW4pICYmIE51bWJlci5pc0Zpbml0ZShtYXgpO1xuICAgIH1cbn1cblpvZE51bWJlci5jcmVhdGUgPSAocGFyYW1zKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBab2ROdW1iZXIoe1xuICAgICAgICBjaGVja3M6IFtdLFxuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZE51bWJlcixcbiAgICAgICAgY29lcmNlOiBwYXJhbXM/LmNvZXJjZSB8fCBmYWxzZSxcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxuICAgIH0pO1xufTtcbmV4cG9ydCBjbGFzcyBab2RCaWdJbnQgZXh0ZW5kcyBab2RUeXBlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5taW4gPSB0aGlzLmd0ZTtcbiAgICAgICAgdGhpcy5tYXggPSB0aGlzLmx0ZTtcbiAgICB9XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGlmICh0aGlzLl9kZWYuY29lcmNlKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlucHV0LmRhdGEgPSBCaWdJbnQoaW5wdXQuZGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dldEludmFsaWRJbnB1dChpbnB1dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGFyc2VkVHlwZSA9IHRoaXMuX2dldFR5cGUoaW5wdXQpO1xuICAgICAgICBpZiAocGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZS5iaWdpbnQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZXRJbnZhbGlkSW5wdXQoaW5wdXQpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBjdHggPSB1bmRlZmluZWQ7XG4gICAgICAgIGNvbnN0IHN0YXR1cyA9IG5ldyBQYXJzZVN0YXR1cygpO1xuICAgICAgICBmb3IgKGNvbnN0IGNoZWNrIG9mIHRoaXMuX2RlZi5jaGVja3MpIHtcbiAgICAgICAgICAgIGlmIChjaGVjay5raW5kID09PSBcIm1pblwiKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdG9vU21hbGwgPSBjaGVjay5pbmNsdXNpdmUgPyBpbnB1dC5kYXRhIDwgY2hlY2sudmFsdWUgOiBpbnB1dC5kYXRhIDw9IGNoZWNrLnZhbHVlO1xuICAgICAgICAgICAgICAgIGlmICh0b29TbWFsbCkge1xuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUudG9vX3NtYWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJiaWdpbnRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbmltdW06IGNoZWNrLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5jbHVzaXZlOiBjaGVjay5pbmNsdXNpdmUsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJtYXhcIikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRvb0JpZyA9IGNoZWNrLmluY2x1c2l2ZSA/IGlucHV0LmRhdGEgPiBjaGVjay52YWx1ZSA6IGlucHV0LmRhdGEgPj0gY2hlY2sudmFsdWU7XG4gICAgICAgICAgICAgICAgaWYgKHRvb0JpZykge1xuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUudG9vX2JpZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYmlnaW50XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXhpbXVtOiBjaGVjay52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGluY2x1c2l2ZTogY2hlY2suaW5jbHVzaXZlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwibXVsdGlwbGVPZlwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlucHV0LmRhdGEgJSBjaGVjay52YWx1ZSAhPT0gQmlnSW50KDApKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5ub3RfbXVsdGlwbGVfb2YsXG4gICAgICAgICAgICAgICAgICAgICAgICBtdWx0aXBsZU9mOiBjaGVjay52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB1dGlsLmFzc2VydE5ldmVyKGNoZWNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBzdGF0dXM6IHN0YXR1cy52YWx1ZSwgdmFsdWU6IGlucHV0LmRhdGEgfTtcbiAgICB9XG4gICAgX2dldEludmFsaWRJbnB1dChpbnB1dCkge1xuICAgICAgICBjb25zdCBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCk7XG4gICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcbiAgICAgICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlLmJpZ2ludCxcbiAgICAgICAgICAgIHJlY2VpdmVkOiBjdHgucGFyc2VkVHlwZSxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgIH1cbiAgICBndGUodmFsdWUsIG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0TGltaXQoXCJtaW5cIiwgdmFsdWUsIHRydWUsIGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSk7XG4gICAgfVxuICAgIGd0KHZhbHVlLCBtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNldExpbWl0KFwibWluXCIsIHZhbHVlLCBmYWxzZSwgZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpKTtcbiAgICB9XG4gICAgbHRlKHZhbHVlLCBtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNldExpbWl0KFwibWF4XCIsIHZhbHVlLCB0cnVlLCBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSkpO1xuICAgIH1cbiAgICBsdCh2YWx1ZSwgbWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXRMaW1pdChcIm1heFwiLCB2YWx1ZSwgZmFsc2UsIGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSk7XG4gICAgfVxuICAgIHNldExpbWl0KGtpbmQsIHZhbHVlLCBpbmNsdXNpdmUsIG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBab2RCaWdJbnQoe1xuICAgICAgICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgICAgICAgY2hlY2tzOiBbXG4gICAgICAgICAgICAgICAgLi4udGhpcy5fZGVmLmNoZWNrcyxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGtpbmQsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgICAgICAgICBpbmNsdXNpdmUsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIF9hZGRDaGVjayhjaGVjaykge1xuICAgICAgICByZXR1cm4gbmV3IFpvZEJpZ0ludCh7XG4gICAgICAgICAgICAuLi50aGlzLl9kZWYsXG4gICAgICAgICAgICBjaGVja3M6IFsuLi50aGlzLl9kZWYuY2hlY2tzLCBjaGVja10sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBwb3NpdGl2ZShtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICAgICAgICBraW5kOiBcIm1pblwiLFxuICAgICAgICAgICAgdmFsdWU6IEJpZ0ludCgwKSxcbiAgICAgICAgICAgIGluY2x1c2l2ZTogZmFsc2UsXG4gICAgICAgICAgICBtZXNzYWdlOiBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBuZWdhdGl2ZShtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICAgICAgICBraW5kOiBcIm1heFwiLFxuICAgICAgICAgICAgdmFsdWU6IEJpZ0ludCgwKSxcbiAgICAgICAgICAgIGluY2x1c2l2ZTogZmFsc2UsXG4gICAgICAgICAgICBtZXNzYWdlOiBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBub25wb3NpdGl2ZShtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICAgICAgICBraW5kOiBcIm1heFwiLFxuICAgICAgICAgICAgdmFsdWU6IEJpZ0ludCgwKSxcbiAgICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIG5vbm5lZ2F0aXZlKG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcbiAgICAgICAgICAgIGtpbmQ6IFwibWluXCIsXG4gICAgICAgICAgICB2YWx1ZTogQmlnSW50KDApLFxuICAgICAgICAgICAgaW5jbHVzaXZlOiB0cnVlLFxuICAgICAgICAgICAgbWVzc2FnZTogZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgbXVsdGlwbGVPZih2YWx1ZSwgbWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAgICAgICAga2luZDogXCJtdWx0aXBsZU9mXCIsXG4gICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGdldCBtaW5WYWx1ZSgpIHtcbiAgICAgICAgbGV0IG1pbiA9IG51bGw7XG4gICAgICAgIGZvciAoY29uc3QgY2ggb2YgdGhpcy5fZGVmLmNoZWNrcykge1xuICAgICAgICAgICAgaWYgKGNoLmtpbmQgPT09IFwibWluXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAobWluID09PSBudWxsIHx8IGNoLnZhbHVlID4gbWluKVxuICAgICAgICAgICAgICAgICAgICBtaW4gPSBjaC52YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWluO1xuICAgIH1cbiAgICBnZXQgbWF4VmFsdWUoKSB7XG4gICAgICAgIGxldCBtYXggPSBudWxsO1xuICAgICAgICBmb3IgKGNvbnN0IGNoIG9mIHRoaXMuX2RlZi5jaGVja3MpIHtcbiAgICAgICAgICAgIGlmIChjaC5raW5kID09PSBcIm1heFwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKG1heCA9PT0gbnVsbCB8fCBjaC52YWx1ZSA8IG1heClcbiAgICAgICAgICAgICAgICAgICAgbWF4ID0gY2gudmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1heDtcbiAgICB9XG59XG5ab2RCaWdJbnQuY3JlYXRlID0gKHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kQmlnSW50KHtcbiAgICAgICAgY2hlY2tzOiBbXSxcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RCaWdJbnQsXG4gICAgICAgIGNvZXJjZTogcGFyYW1zPy5jb2VyY2UgPz8gZmFsc2UsXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5leHBvcnQgY2xhc3MgWm9kQm9vbGVhbiBleHRlbmRzIFpvZFR5cGUge1xuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBpZiAodGhpcy5fZGVmLmNvZXJjZSkge1xuICAgICAgICAgICAgaW5wdXQuZGF0YSA9IEJvb2xlYW4oaW5wdXQuZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGFyc2VkVHlwZSA9IHRoaXMuX2dldFR5cGUoaW5wdXQpO1xuICAgICAgICBpZiAocGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZS5ib29sZWFuKSB7XG4gICAgICAgICAgICBjb25zdCBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCk7XG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlLmJvb2xlYW4sXG4gICAgICAgICAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gT0soaW5wdXQuZGF0YSk7XG4gICAgfVxufVxuWm9kQm9vbGVhbi5jcmVhdGUgPSAocGFyYW1zKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBab2RCb29sZWFuKHtcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RCb29sZWFuLFxuICAgICAgICBjb2VyY2U6IHBhcmFtcz8uY29lcmNlIHx8IGZhbHNlLFxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgfSk7XG59O1xuZXhwb3J0IGNsYXNzIFpvZERhdGUgZXh0ZW5kcyBab2RUeXBlIHtcbiAgICBfcGFyc2UoaW5wdXQpIHtcbiAgICAgICAgaWYgKHRoaXMuX2RlZi5jb2VyY2UpIHtcbiAgICAgICAgICAgIGlucHV0LmRhdGEgPSBuZXcgRGF0ZShpbnB1dC5kYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYXJzZWRUeXBlID0gdGhpcy5fZ2V0VHlwZShpbnB1dCk7XG4gICAgICAgIGlmIChwYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlLmRhdGUpIHtcbiAgICAgICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0KTtcbiAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3R5cGUsXG4gICAgICAgICAgICAgICAgZXhwZWN0ZWQ6IFpvZFBhcnNlZFR5cGUuZGF0ZSxcbiAgICAgICAgICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICB9XG4gICAgICAgIGlmIChOdW1iZXIuaXNOYU4oaW5wdXQuZGF0YS5nZXRUaW1lKCkpKSB7XG4gICAgICAgICAgICBjb25zdCBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCk7XG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9kYXRlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdGF0dXMgPSBuZXcgUGFyc2VTdGF0dXMoKTtcbiAgICAgICAgbGV0IGN0eCA9IHVuZGVmaW5lZDtcbiAgICAgICAgZm9yIChjb25zdCBjaGVjayBvZiB0aGlzLl9kZWYuY2hlY2tzKSB7XG4gICAgICAgICAgICBpZiAoY2hlY2sua2luZCA9PT0gXCJtaW5cIikge1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dC5kYXRhLmdldFRpbWUoKSA8IGNoZWNrLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS50b29fc21hbGwsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5jbHVzaXZlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXhhY3Q6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWluaW11bTogY2hlY2sudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImRhdGVcIixcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwibWF4XCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQuZGF0YS5nZXRUaW1lKCkgPiBjaGVjay52YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUudG9vX2JpZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmNsdXNpdmU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBleGFjdDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXhpbXVtOiBjaGVjay52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiZGF0ZVwiLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdXRpbC5hc3NlcnROZXZlcihjaGVjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN0YXR1czogc3RhdHVzLnZhbHVlLFxuICAgICAgICAgICAgdmFsdWU6IG5ldyBEYXRlKGlucHV0LmRhdGEuZ2V0VGltZSgpKSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgX2FkZENoZWNrKGNoZWNrKSB7XG4gICAgICAgIHJldHVybiBuZXcgWm9kRGF0ZSh7XG4gICAgICAgICAgICAuLi50aGlzLl9kZWYsXG4gICAgICAgICAgICBjaGVja3M6IFsuLi50aGlzLl9kZWYuY2hlY2tzLCBjaGVja10sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBtaW4obWluRGF0ZSwgbWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAgICAgICAga2luZDogXCJtaW5cIixcbiAgICAgICAgICAgIHZhbHVlOiBtaW5EYXRlLmdldFRpbWUoKSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIG1heChtYXhEYXRlLCBtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICAgICAgICBraW5kOiBcIm1heFwiLFxuICAgICAgICAgICAgdmFsdWU6IG1heERhdGUuZ2V0VGltZSgpLFxuICAgICAgICAgICAgbWVzc2FnZTogZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0IG1pbkRhdGUoKSB7XG4gICAgICAgIGxldCBtaW4gPSBudWxsO1xuICAgICAgICBmb3IgKGNvbnN0IGNoIG9mIHRoaXMuX2RlZi5jaGVja3MpIHtcbiAgICAgICAgICAgIGlmIChjaC5raW5kID09PSBcIm1pblwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKG1pbiA9PT0gbnVsbCB8fCBjaC52YWx1ZSA+IG1pbilcbiAgICAgICAgICAgICAgICAgICAgbWluID0gY2gudmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1pbiAhPSBudWxsID8gbmV3IERhdGUobWluKSA6IG51bGw7XG4gICAgfVxuICAgIGdldCBtYXhEYXRlKCkge1xuICAgICAgICBsZXQgbWF4ID0gbnVsbDtcbiAgICAgICAgZm9yIChjb25zdCBjaCBvZiB0aGlzLl9kZWYuY2hlY2tzKSB7XG4gICAgICAgICAgICBpZiAoY2gua2luZCA9PT0gXCJtYXhcIikge1xuICAgICAgICAgICAgICAgIGlmIChtYXggPT09IG51bGwgfHwgY2gudmFsdWUgPCBtYXgpXG4gICAgICAgICAgICAgICAgICAgIG1heCA9IGNoLnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYXggIT0gbnVsbCA/IG5ldyBEYXRlKG1heCkgOiBudWxsO1xuICAgIH1cbn1cblpvZERhdGUuY3JlYXRlID0gKHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kRGF0ZSh7XG4gICAgICAgIGNoZWNrczogW10sXG4gICAgICAgIGNvZXJjZTogcGFyYW1zPy5jb2VyY2UgfHwgZmFsc2UsXG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kRGF0ZSxcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxuICAgIH0pO1xufTtcbmV4cG9ydCBjbGFzcyBab2RTeW1ib2wgZXh0ZW5kcyBab2RUeXBlIHtcbiAgICBfcGFyc2UoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgcGFyc2VkVHlwZSA9IHRoaXMuX2dldFR5cGUoaW5wdXQpO1xuICAgICAgICBpZiAocGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZS5zeW1ib2wpIHtcbiAgICAgICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0KTtcbiAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3R5cGUsXG4gICAgICAgICAgICAgICAgZXhwZWN0ZWQ6IFpvZFBhcnNlZFR5cGUuc3ltYm9sLFxuICAgICAgICAgICAgICAgIHJlY2VpdmVkOiBjdHgucGFyc2VkVHlwZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIE9LKGlucHV0LmRhdGEpO1xuICAgIH1cbn1cblpvZFN5bWJvbC5jcmVhdGUgPSAocGFyYW1zKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBab2RTeW1ib2woe1xuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZFN5bWJvbCxcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxuICAgIH0pO1xufTtcbmV4cG9ydCBjbGFzcyBab2RVbmRlZmluZWQgZXh0ZW5kcyBab2RUeXBlIHtcbiAgICBfcGFyc2UoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgcGFyc2VkVHlwZSA9IHRoaXMuX2dldFR5cGUoaW5wdXQpO1xuICAgICAgICBpZiAocGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZS51bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0KTtcbiAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3R5cGUsXG4gICAgICAgICAgICAgICAgZXhwZWN0ZWQ6IFpvZFBhcnNlZFR5cGUudW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIHJlY2VpdmVkOiBjdHgucGFyc2VkVHlwZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIE9LKGlucHV0LmRhdGEpO1xuICAgIH1cbn1cblpvZFVuZGVmaW5lZC5jcmVhdGUgPSAocGFyYW1zKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBab2RVbmRlZmluZWQoe1xuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZFVuZGVmaW5lZCxcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxuICAgIH0pO1xufTtcbmV4cG9ydCBjbGFzcyBab2ROdWxsIGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IHBhcnNlZFR5cGUgPSB0aGlzLl9nZXRUeXBlKGlucHV0KTtcbiAgICAgICAgaWYgKHBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUubnVsbCkge1xuICAgICAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcbiAgICAgICAgICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZS5udWxsLFxuICAgICAgICAgICAgICAgIHJlY2VpdmVkOiBjdHgucGFyc2VkVHlwZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIE9LKGlucHV0LmRhdGEpO1xuICAgIH1cbn1cblpvZE51bGwuY3JlYXRlID0gKHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kTnVsbCh7XG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kTnVsbCxcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxuICAgIH0pO1xufTtcbmV4cG9ydCBjbGFzcyBab2RBbnkgZXh0ZW5kcyBab2RUeXBlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgLy8gdG8gcHJldmVudCBpbnN0YW5jZXMgb2Ygb3RoZXIgY2xhc3NlcyBmcm9tIGV4dGVuZGluZyBab2RBbnkuIHRoaXMgY2F1c2VzIGlzc3VlcyB3aXRoIGNhdGNoYWxsIGluIFpvZE9iamVjdC5cbiAgICAgICAgdGhpcy5fYW55ID0gdHJ1ZTtcbiAgICB9XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBPSyhpbnB1dC5kYXRhKTtcbiAgICB9XG59XG5ab2RBbnkuY3JlYXRlID0gKHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kQW55KHtcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RBbnksXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5leHBvcnQgY2xhc3MgWm9kVW5rbm93biBleHRlbmRzIFpvZFR5cGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICAvLyByZXF1aXJlZFxuICAgICAgICB0aGlzLl91bmtub3duID0gdHJ1ZTtcbiAgICB9XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBPSyhpbnB1dC5kYXRhKTtcbiAgICB9XG59XG5ab2RVbmtub3duLmNyZWF0ZSA9IChwYXJhbXMpID0+IHtcbiAgICByZXR1cm4gbmV3IFpvZFVua25vd24oe1xuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZFVua25vd24sXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5leHBvcnQgY2xhc3MgWm9kTmV2ZXIgZXh0ZW5kcyBab2RUeXBlIHtcbiAgICBfcGFyc2UoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xuICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3R5cGUsXG4gICAgICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZS5uZXZlcixcbiAgICAgICAgICAgIHJlY2VpdmVkOiBjdHgucGFyc2VkVHlwZSxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgIH1cbn1cblpvZE5ldmVyLmNyZWF0ZSA9IChwYXJhbXMpID0+IHtcbiAgICByZXR1cm4gbmV3IFpvZE5ldmVyKHtcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2ROZXZlcixcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxuICAgIH0pO1xufTtcbmV4cG9ydCBjbGFzcyBab2RWb2lkIGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IHBhcnNlZFR5cGUgPSB0aGlzLl9nZXRUeXBlKGlucHV0KTtcbiAgICAgICAgaWYgKHBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUudW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb25zdCBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCk7XG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlLnZvaWQsXG4gICAgICAgICAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gT0soaW5wdXQuZGF0YSk7XG4gICAgfVxufVxuWm9kVm9pZC5jcmVhdGUgPSAocGFyYW1zKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBab2RWb2lkKHtcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RWb2lkLFxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgfSk7XG59O1xuZXhwb3J0IGNsYXNzIFpvZEFycmF5IGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IHsgY3R4LCBzdGF0dXMgfSA9IHRoaXMuX3Byb2Nlc3NJbnB1dFBhcmFtcyhpbnB1dCk7XG4gICAgICAgIGNvbnN0IGRlZiA9IHRoaXMuX2RlZjtcbiAgICAgICAgaWYgKGN0eC5wYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlLmFycmF5KSB7XG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlLmFycmF5LFxuICAgICAgICAgICAgICAgIHJlY2VpdmVkOiBjdHgucGFyc2VkVHlwZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRlZi5leGFjdExlbmd0aCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc3QgdG9vQmlnID0gY3R4LmRhdGEubGVuZ3RoID4gZGVmLmV4YWN0TGVuZ3RoLnZhbHVlO1xuICAgICAgICAgICAgY29uc3QgdG9vU21hbGwgPSBjdHguZGF0YS5sZW5ndGggPCBkZWYuZXhhY3RMZW5ndGgudmFsdWU7XG4gICAgICAgICAgICBpZiAodG9vQmlnIHx8IHRvb1NtYWxsKSB7XG4gICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgIGNvZGU6IHRvb0JpZyA/IFpvZElzc3VlQ29kZS50b29fYmlnIDogWm9kSXNzdWVDb2RlLnRvb19zbWFsbCxcbiAgICAgICAgICAgICAgICAgICAgbWluaW11bTogKHRvb1NtYWxsID8gZGVmLmV4YWN0TGVuZ3RoLnZhbHVlIDogdW5kZWZpbmVkKSxcbiAgICAgICAgICAgICAgICAgICAgbWF4aW11bTogKHRvb0JpZyA/IGRlZi5leGFjdExlbmd0aC52YWx1ZSA6IHVuZGVmaW5lZCksXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYXJyYXlcIixcbiAgICAgICAgICAgICAgICAgICAgaW5jbHVzaXZlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBleGFjdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogZGVmLmV4YWN0TGVuZ3RoLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRlZi5taW5MZW5ndGggIT09IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChjdHguZGF0YS5sZW5ndGggPCBkZWYubWluTGVuZ3RoLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS50b29fc21hbGwsXG4gICAgICAgICAgICAgICAgICAgIG1pbmltdW06IGRlZi5taW5MZW5ndGgudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYXJyYXlcIixcbiAgICAgICAgICAgICAgICAgICAgaW5jbHVzaXZlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBleGFjdDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGRlZi5taW5MZW5ndGgubWVzc2FnZSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZGVmLm1heExlbmd0aCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKGN0eC5kYXRhLmxlbmd0aCA+IGRlZi5tYXhMZW5ndGgudmFsdWUpIHtcbiAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLnRvb19iaWcsXG4gICAgICAgICAgICAgICAgICAgIG1heGltdW06IGRlZi5tYXhMZW5ndGgudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYXJyYXlcIixcbiAgICAgICAgICAgICAgICAgICAgaW5jbHVzaXZlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBleGFjdDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGRlZi5tYXhMZW5ndGgubWVzc2FnZSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoY3R4LmNvbW1vbi5hc3luYykge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKFsuLi5jdHguZGF0YV0ubWFwKChpdGVtLCBpKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlZi50eXBlLl9wYXJzZUFzeW5jKG5ldyBQYXJzZUlucHV0TGF6eVBhdGgoY3R4LCBpdGVtLCBjdHgucGF0aCwgaSkpO1xuICAgICAgICAgICAgfSkpLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBQYXJzZVN0YXR1cy5tZXJnZUFycmF5KHN0YXR1cywgcmVzdWx0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFsuLi5jdHguZGF0YV0ubWFwKChpdGVtLCBpKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gZGVmLnR5cGUuX3BhcnNlU3luYyhuZXcgUGFyc2VJbnB1dExhenlQYXRoKGN0eCwgaXRlbSwgY3R4LnBhdGgsIGkpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBQYXJzZVN0YXR1cy5tZXJnZUFycmF5KHN0YXR1cywgcmVzdWx0KTtcbiAgICB9XG4gICAgZ2V0IGVsZW1lbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYudHlwZTtcbiAgICB9XG4gICAgbWluKG1pbkxlbmd0aCwgbWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gbmV3IFpvZEFycmF5KHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIG1pbkxlbmd0aDogeyB2YWx1ZTogbWluTGVuZ3RoLCBtZXNzYWdlOiBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSkgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIG1heChtYXhMZW5ndGgsIG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBab2RBcnJheSh7XG4gICAgICAgICAgICAuLi50aGlzLl9kZWYsXG4gICAgICAgICAgICBtYXhMZW5ndGg6IHsgdmFsdWU6IG1heExlbmd0aCwgbWVzc2FnZTogZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBsZW5ndGgobGVuLCBtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiBuZXcgWm9kQXJyYXkoe1xuICAgICAgICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgICAgICAgZXhhY3RMZW5ndGg6IHsgdmFsdWU6IGxlbiwgbWVzc2FnZTogZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBub25lbXB0eShtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbigxLCBtZXNzYWdlKTtcbiAgICB9XG59XG5ab2RBcnJheS5jcmVhdGUgPSAoc2NoZW1hLCBwYXJhbXMpID0+IHtcbiAgICByZXR1cm4gbmV3IFpvZEFycmF5KHtcbiAgICAgICAgdHlwZTogc2NoZW1hLFxuICAgICAgICBtaW5MZW5ndGg6IG51bGwsXG4gICAgICAgIG1heExlbmd0aDogbnVsbCxcbiAgICAgICAgZXhhY3RMZW5ndGg6IG51bGwsXG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kQXJyYXksXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5mdW5jdGlvbiBkZWVwUGFydGlhbGlmeShzY2hlbWEpIHtcbiAgICBpZiAoc2NoZW1hIGluc3RhbmNlb2YgWm9kT2JqZWN0KSB7XG4gICAgICAgIGNvbnN0IG5ld1NoYXBlID0ge307XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHNjaGVtYS5zaGFwZSkge1xuICAgICAgICAgICAgY29uc3QgZmllbGRTY2hlbWEgPSBzY2hlbWEuc2hhcGVba2V5XTtcbiAgICAgICAgICAgIG5ld1NoYXBlW2tleV0gPSBab2RPcHRpb25hbC5jcmVhdGUoZGVlcFBhcnRpYWxpZnkoZmllbGRTY2hlbWEpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFpvZE9iamVjdCh7XG4gICAgICAgICAgICAuLi5zY2hlbWEuX2RlZixcbiAgICAgICAgICAgIHNoYXBlOiAoKSA9PiBuZXdTaGFwZSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHNjaGVtYSBpbnN0YW5jZW9mIFpvZEFycmF5KSB7XG4gICAgICAgIHJldHVybiBuZXcgWm9kQXJyYXkoe1xuICAgICAgICAgICAgLi4uc2NoZW1hLl9kZWYsXG4gICAgICAgICAgICB0eXBlOiBkZWVwUGFydGlhbGlmeShzY2hlbWEuZWxlbWVudCksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIGlmIChzY2hlbWEgaW5zdGFuY2VvZiBab2RPcHRpb25hbCkge1xuICAgICAgICByZXR1cm4gWm9kT3B0aW9uYWwuY3JlYXRlKGRlZXBQYXJ0aWFsaWZ5KHNjaGVtYS51bndyYXAoKSkpO1xuICAgIH1cbiAgICBlbHNlIGlmIChzY2hlbWEgaW5zdGFuY2VvZiBab2ROdWxsYWJsZSkge1xuICAgICAgICByZXR1cm4gWm9kTnVsbGFibGUuY3JlYXRlKGRlZXBQYXJ0aWFsaWZ5KHNjaGVtYS51bndyYXAoKSkpO1xuICAgIH1cbiAgICBlbHNlIGlmIChzY2hlbWEgaW5zdGFuY2VvZiBab2RUdXBsZSkge1xuICAgICAgICByZXR1cm4gWm9kVHVwbGUuY3JlYXRlKHNjaGVtYS5pdGVtcy5tYXAoKGl0ZW0pID0+IGRlZXBQYXJ0aWFsaWZ5KGl0ZW0pKSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gc2NoZW1hO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBab2RPYmplY3QgZXh0ZW5kcyBab2RUeXBlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5fY2FjaGVkID0gbnVsbDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXByZWNhdGVkIEluIG1vc3QgY2FzZXMsIHRoaXMgaXMgbm8gbG9uZ2VyIG5lZWRlZCAtIHVua25vd24gcHJvcGVydGllcyBhcmUgbm93IHNpbGVudGx5IHN0cmlwcGVkLlxuICAgICAgICAgKiBJZiB5b3Ugd2FudCB0byBwYXNzIHRocm91Z2ggdW5rbm93biBwcm9wZXJ0aWVzLCB1c2UgYC5wYXNzdGhyb3VnaCgpYCBpbnN0ZWFkLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5ub25zdHJpY3QgPSB0aGlzLnBhc3N0aHJvdWdoO1xuICAgICAgICAvLyBleHRlbmQ8XG4gICAgICAgIC8vICAgQXVnbWVudGF0aW9uIGV4dGVuZHMgWm9kUmF3U2hhcGUsXG4gICAgICAgIC8vICAgTmV3T3V0cHV0IGV4dGVuZHMgdXRpbC5mbGF0dGVuPHtcbiAgICAgICAgLy8gICAgIFtrIGluIGtleW9mIEF1Z21lbnRhdGlvbiB8IGtleW9mIE91dHB1dF06IGsgZXh0ZW5kcyBrZXlvZiBBdWdtZW50YXRpb25cbiAgICAgICAgLy8gICAgICAgPyBBdWdtZW50YXRpb25ba11bXCJfb3V0cHV0XCJdXG4gICAgICAgIC8vICAgICAgIDogayBleHRlbmRzIGtleW9mIE91dHB1dFxuICAgICAgICAvLyAgICAgICA/IE91dHB1dFtrXVxuICAgICAgICAvLyAgICAgICA6IG5ldmVyO1xuICAgICAgICAvLyAgIH0+LFxuICAgICAgICAvLyAgIE5ld0lucHV0IGV4dGVuZHMgdXRpbC5mbGF0dGVuPHtcbiAgICAgICAgLy8gICAgIFtrIGluIGtleW9mIEF1Z21lbnRhdGlvbiB8IGtleW9mIElucHV0XTogayBleHRlbmRzIGtleW9mIEF1Z21lbnRhdGlvblxuICAgICAgICAvLyAgICAgICA/IEF1Z21lbnRhdGlvbltrXVtcIl9pbnB1dFwiXVxuICAgICAgICAvLyAgICAgICA6IGsgZXh0ZW5kcyBrZXlvZiBJbnB1dFxuICAgICAgICAvLyAgICAgICA/IElucHV0W2tdXG4gICAgICAgIC8vICAgICAgIDogbmV2ZXI7XG4gICAgICAgIC8vICAgfT5cbiAgICAgICAgLy8gPihcbiAgICAgICAgLy8gICBhdWdtZW50YXRpb246IEF1Z21lbnRhdGlvblxuICAgICAgICAvLyApOiBab2RPYmplY3Q8XG4gICAgICAgIC8vICAgZXh0ZW5kU2hhcGU8VCwgQXVnbWVudGF0aW9uPixcbiAgICAgICAgLy8gICBVbmtub3duS2V5cyxcbiAgICAgICAgLy8gICBDYXRjaGFsbCxcbiAgICAgICAgLy8gICBOZXdPdXRwdXQsXG4gICAgICAgIC8vICAgTmV3SW5wdXRcbiAgICAgICAgLy8gPiB7XG4gICAgICAgIC8vICAgcmV0dXJuIG5ldyBab2RPYmplY3Qoe1xuICAgICAgICAvLyAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgICAvLyAgICAgc2hhcGU6ICgpID0+ICh7XG4gICAgICAgIC8vICAgICAgIC4uLnRoaXMuX2RlZi5zaGFwZSgpLFxuICAgICAgICAvLyAgICAgICAuLi5hdWdtZW50YXRpb24sXG4gICAgICAgIC8vICAgICB9KSxcbiAgICAgICAgLy8gICB9KSBhcyBhbnk7XG4gICAgICAgIC8vIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXByZWNhdGVkIFVzZSBgLmV4dGVuZGAgaW5zdGVhZFxuICAgICAgICAgKiAgKi9cbiAgICAgICAgdGhpcy5hdWdtZW50ID0gdGhpcy5leHRlbmQ7XG4gICAgfVxuICAgIF9nZXRDYWNoZWQoKSB7XG4gICAgICAgIGlmICh0aGlzLl9jYWNoZWQgIT09IG51bGwpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY2FjaGVkO1xuICAgICAgICBjb25zdCBzaGFwZSA9IHRoaXMuX2RlZi5zaGFwZSgpO1xuICAgICAgICBjb25zdCBrZXlzID0gdXRpbC5vYmplY3RLZXlzKHNoYXBlKTtcbiAgICAgICAgdGhpcy5fY2FjaGVkID0geyBzaGFwZSwga2V5cyB9O1xuICAgICAgICByZXR1cm4gdGhpcy5fY2FjaGVkO1xuICAgIH1cbiAgICBfcGFyc2UoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgcGFyc2VkVHlwZSA9IHRoaXMuX2dldFR5cGUoaW5wdXQpO1xuICAgICAgICBpZiAocGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZS5vYmplY3QpIHtcbiAgICAgICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0KTtcbiAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3R5cGUsXG4gICAgICAgICAgICAgICAgZXhwZWN0ZWQ6IFpvZFBhcnNlZFR5cGUub2JqZWN0LFxuICAgICAgICAgICAgICAgIHJlY2VpdmVkOiBjdHgucGFyc2VkVHlwZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyBzdGF0dXMsIGN0eCB9ID0gdGhpcy5fcHJvY2Vzc0lucHV0UGFyYW1zKGlucHV0KTtcbiAgICAgICAgY29uc3QgeyBzaGFwZSwga2V5czogc2hhcGVLZXlzIH0gPSB0aGlzLl9nZXRDYWNoZWQoKTtcbiAgICAgICAgY29uc3QgZXh0cmFLZXlzID0gW107XG4gICAgICAgIGlmICghKHRoaXMuX2RlZi5jYXRjaGFsbCBpbnN0YW5jZW9mIFpvZE5ldmVyICYmIHRoaXMuX2RlZi51bmtub3duS2V5cyA9PT0gXCJzdHJpcFwiKSkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gY3R4LmRhdGEpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXNoYXBlS2V5cy5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGV4dHJhS2V5cy5wdXNoKGtleSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhaXJzID0gW107XG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIHNoYXBlS2V5cykge1xuICAgICAgICAgICAgY29uc3Qga2V5VmFsaWRhdG9yID0gc2hhcGVba2V5XTtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gY3R4LmRhdGFba2V5XTtcbiAgICAgICAgICAgIHBhaXJzLnB1c2goe1xuICAgICAgICAgICAgICAgIGtleTogeyBzdGF0dXM6IFwidmFsaWRcIiwgdmFsdWU6IGtleSB9LFxuICAgICAgICAgICAgICAgIHZhbHVlOiBrZXlWYWxpZGF0b3IuX3BhcnNlKG5ldyBQYXJzZUlucHV0TGF6eVBhdGgoY3R4LCB2YWx1ZSwgY3R4LnBhdGgsIGtleSkpLFxuICAgICAgICAgICAgICAgIGFsd2F5c1NldDoga2V5IGluIGN0eC5kYXRhLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2RlZi5jYXRjaGFsbCBpbnN0YW5jZW9mIFpvZE5ldmVyKSB7XG4gICAgICAgICAgICBjb25zdCB1bmtub3duS2V5cyA9IHRoaXMuX2RlZi51bmtub3duS2V5cztcbiAgICAgICAgICAgIGlmICh1bmtub3duS2V5cyA9PT0gXCJwYXNzdGhyb3VnaFwiKSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgZXh0cmFLZXlzKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhaXJzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiB7IHN0YXR1czogXCJ2YWxpZFwiLCB2YWx1ZToga2V5IH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogeyBzdGF0dXM6IFwidmFsaWRcIiwgdmFsdWU6IGN0eC5kYXRhW2tleV0gfSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodW5rbm93bktleXMgPT09IFwic3RyaWN0XCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXh0cmFLZXlzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUudW5yZWNvZ25pemVkX2tleXMsXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXlzOiBleHRyYUtleXMsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh1bmtub3duS2V5cyA9PT0gXCJzdHJpcFwiKSB7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludGVybmFsIFpvZE9iamVjdCBlcnJvcjogaW52YWxpZCB1bmtub3duS2V5cyB2YWx1ZS5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIHJ1biBjYXRjaGFsbCB2YWxpZGF0aW9uXG4gICAgICAgICAgICBjb25zdCBjYXRjaGFsbCA9IHRoaXMuX2RlZi5jYXRjaGFsbDtcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IG9mIGV4dHJhS2V5cykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gY3R4LmRhdGFba2V5XTtcbiAgICAgICAgICAgICAgICBwYWlycy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAga2V5OiB7IHN0YXR1czogXCJ2YWxpZFwiLCB2YWx1ZToga2V5IH0sXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBjYXRjaGFsbC5fcGFyc2UobmV3IFBhcnNlSW5wdXRMYXp5UGF0aChjdHgsIHZhbHVlLCBjdHgucGF0aCwga2V5KSAvLywgY3R4LmNoaWxkKGtleSksIHZhbHVlLCBnZXRQYXJzZWRUeXBlKHZhbHVlKVxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBhbHdheXNTZXQ6IGtleSBpbiBjdHguZGF0YSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoY3R4LmNvbW1vbi5hc3luYykge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpXG4gICAgICAgICAgICAgICAgLnRoZW4oYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHN5bmNQYWlycyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcGFpciBvZiBwYWlycykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSBhd2FpdCBwYWlyLmtleTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBhd2FpdCBwYWlyLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBzeW5jUGFpcnMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsd2F5c1NldDogcGFpci5hbHdheXNTZXQsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gc3luY1BhaXJzO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAudGhlbigoc3luY1BhaXJzKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFBhcnNlU3RhdHVzLm1lcmdlT2JqZWN0U3luYyhzdGF0dXMsIHN5bmNQYWlycyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBQYXJzZVN0YXR1cy5tZXJnZU9iamVjdFN5bmMoc3RhdHVzLCBwYWlycyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IHNoYXBlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVmLnNoYXBlKCk7XG4gICAgfVxuICAgIHN0cmljdChtZXNzYWdlKSB7XG4gICAgICAgIGVycm9yVXRpbC5lcnJUb09iajtcbiAgICAgICAgcmV0dXJuIG5ldyBab2RPYmplY3Qoe1xuICAgICAgICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgICAgICAgdW5rbm93bktleXM6IFwic3RyaWN0XCIsXG4gICAgICAgICAgICAuLi4obWVzc2FnZSAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yTWFwOiAoaXNzdWUsIGN0eCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVmYXVsdEVycm9yID0gdGhpcy5fZGVmLmVycm9yTWFwPy4oaXNzdWUsIGN0eCkubWVzc2FnZSA/PyBjdHguZGVmYXVsdEVycm9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzc3VlLmNvZGUgPT09IFwidW5yZWNvZ25pemVkX2tleXNcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBlcnJvclV0aWwuZXJyVG9PYmoobWVzc2FnZSkubWVzc2FnZSA/PyBkZWZhdWx0RXJyb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogZGVmYXVsdEVycm9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgOiB7fSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzdHJpcCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBab2RPYmplY3Qoe1xuICAgICAgICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgICAgICAgdW5rbm93bktleXM6IFwic3RyaXBcIixcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHBhc3N0aHJvdWdoKCkge1xuICAgICAgICByZXR1cm4gbmV3IFpvZE9iamVjdCh7XG4gICAgICAgICAgICAuLi50aGlzLl9kZWYsXG4gICAgICAgICAgICB1bmtub3duS2V5czogXCJwYXNzdGhyb3VnaFwiLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLy8gY29uc3QgQXVnbWVudEZhY3RvcnkgPVxuICAgIC8vICAgPERlZiBleHRlbmRzIFpvZE9iamVjdERlZj4oZGVmOiBEZWYpID0+XG4gICAgLy8gICA8QXVnbWVudGF0aW9uIGV4dGVuZHMgWm9kUmF3U2hhcGU+KFxuICAgIC8vICAgICBhdWdtZW50YXRpb246IEF1Z21lbnRhdGlvblxuICAgIC8vICAgKTogWm9kT2JqZWN0PFxuICAgIC8vICAgICBleHRlbmRTaGFwZTxSZXR1cm5UeXBlPERlZltcInNoYXBlXCJdPiwgQXVnbWVudGF0aW9uPixcbiAgICAvLyAgICAgRGVmW1widW5rbm93bktleXNcIl0sXG4gICAgLy8gICAgIERlZltcImNhdGNoYWxsXCJdXG4gICAgLy8gICA+ID0+IHtcbiAgICAvLyAgICAgcmV0dXJuIG5ldyBab2RPYmplY3Qoe1xuICAgIC8vICAgICAgIC4uLmRlZixcbiAgICAvLyAgICAgICBzaGFwZTogKCkgPT4gKHtcbiAgICAvLyAgICAgICAgIC4uLmRlZi5zaGFwZSgpLFxuICAgIC8vICAgICAgICAgLi4uYXVnbWVudGF0aW9uLFxuICAgIC8vICAgICAgIH0pLFxuICAgIC8vICAgICB9KSBhcyBhbnk7XG4gICAgLy8gICB9O1xuICAgIGV4dGVuZChhdWdtZW50YXRpb24pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBab2RPYmplY3Qoe1xuICAgICAgICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgICAgICAgc2hhcGU6ICgpID0+ICh7XG4gICAgICAgICAgICAgICAgLi4udGhpcy5fZGVmLnNoYXBlKCksXG4gICAgICAgICAgICAgICAgLi4uYXVnbWVudGF0aW9uLFxuICAgICAgICAgICAgfSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQcmlvciB0byB6b2RAMS4wLjEyIHRoZXJlIHdhcyBhIGJ1ZyBpbiB0aGVcbiAgICAgKiBpbmZlcnJlZCB0eXBlIG9mIG1lcmdlZCBvYmplY3RzLiBQbGVhc2VcbiAgICAgKiB1cGdyYWRlIGlmIHlvdSBhcmUgZXhwZXJpZW5jaW5nIGlzc3Vlcy5cbiAgICAgKi9cbiAgICBtZXJnZShtZXJnaW5nKSB7XG4gICAgICAgIGNvbnN0IG1lcmdlZCA9IG5ldyBab2RPYmplY3Qoe1xuICAgICAgICAgICAgdW5rbm93bktleXM6IG1lcmdpbmcuX2RlZi51bmtub3duS2V5cyxcbiAgICAgICAgICAgIGNhdGNoYWxsOiBtZXJnaW5nLl9kZWYuY2F0Y2hhbGwsXG4gICAgICAgICAgICBzaGFwZTogKCkgPT4gKHtcbiAgICAgICAgICAgICAgICAuLi50aGlzLl9kZWYuc2hhcGUoKSxcbiAgICAgICAgICAgICAgICAuLi5tZXJnaW5nLl9kZWYuc2hhcGUoKSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RPYmplY3QsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbWVyZ2VkO1xuICAgIH1cbiAgICAvLyBtZXJnZTxcbiAgICAvLyAgIEluY29taW5nIGV4dGVuZHMgQW55Wm9kT2JqZWN0LFxuICAgIC8vICAgQXVnbWVudGF0aW9uIGV4dGVuZHMgSW5jb21pbmdbXCJzaGFwZVwiXSxcbiAgICAvLyAgIE5ld091dHB1dCBleHRlbmRzIHtcbiAgICAvLyAgICAgW2sgaW4ga2V5b2YgQXVnbWVudGF0aW9uIHwga2V5b2YgT3V0cHV0XTogayBleHRlbmRzIGtleW9mIEF1Z21lbnRhdGlvblxuICAgIC8vICAgICAgID8gQXVnbWVudGF0aW9uW2tdW1wiX291dHB1dFwiXVxuICAgIC8vICAgICAgIDogayBleHRlbmRzIGtleW9mIE91dHB1dFxuICAgIC8vICAgICAgID8gT3V0cHV0W2tdXG4gICAgLy8gICAgICAgOiBuZXZlcjtcbiAgICAvLyAgIH0sXG4gICAgLy8gICBOZXdJbnB1dCBleHRlbmRzIHtcbiAgICAvLyAgICAgW2sgaW4ga2V5b2YgQXVnbWVudGF0aW9uIHwga2V5b2YgSW5wdXRdOiBrIGV4dGVuZHMga2V5b2YgQXVnbWVudGF0aW9uXG4gICAgLy8gICAgICAgPyBBdWdtZW50YXRpb25ba11bXCJfaW5wdXRcIl1cbiAgICAvLyAgICAgICA6IGsgZXh0ZW5kcyBrZXlvZiBJbnB1dFxuICAgIC8vICAgICAgID8gSW5wdXRba11cbiAgICAvLyAgICAgICA6IG5ldmVyO1xuICAgIC8vICAgfVxuICAgIC8vID4oXG4gICAgLy8gICBtZXJnaW5nOiBJbmNvbWluZ1xuICAgIC8vICk6IFpvZE9iamVjdDxcbiAgICAvLyAgIGV4dGVuZFNoYXBlPFQsIFJldHVyblR5cGU8SW5jb21pbmdbXCJfZGVmXCJdW1wic2hhcGVcIl0+PixcbiAgICAvLyAgIEluY29taW5nW1wiX2RlZlwiXVtcInVua25vd25LZXlzXCJdLFxuICAgIC8vICAgSW5jb21pbmdbXCJfZGVmXCJdW1wiY2F0Y2hhbGxcIl0sXG4gICAgLy8gICBOZXdPdXRwdXQsXG4gICAgLy8gICBOZXdJbnB1dFxuICAgIC8vID4ge1xuICAgIC8vICAgY29uc3QgbWVyZ2VkOiBhbnkgPSBuZXcgWm9kT2JqZWN0KHtcbiAgICAvLyAgICAgdW5rbm93bktleXM6IG1lcmdpbmcuX2RlZi51bmtub3duS2V5cyxcbiAgICAvLyAgICAgY2F0Y2hhbGw6IG1lcmdpbmcuX2RlZi5jYXRjaGFsbCxcbiAgICAvLyAgICAgc2hhcGU6ICgpID0+XG4gICAgLy8gICAgICAgb2JqZWN0VXRpbC5tZXJnZVNoYXBlcyh0aGlzLl9kZWYuc2hhcGUoKSwgbWVyZ2luZy5fZGVmLnNoYXBlKCkpLFxuICAgIC8vICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZE9iamVjdCxcbiAgICAvLyAgIH0pIGFzIGFueTtcbiAgICAvLyAgIHJldHVybiBtZXJnZWQ7XG4gICAgLy8gfVxuICAgIHNldEtleShrZXksIHNjaGVtYSkge1xuICAgICAgICByZXR1cm4gdGhpcy5hdWdtZW50KHsgW2tleV06IHNjaGVtYSB9KTtcbiAgICB9XG4gICAgLy8gbWVyZ2U8SW5jb21pbmcgZXh0ZW5kcyBBbnlab2RPYmplY3Q+KFxuICAgIC8vICAgbWVyZ2luZzogSW5jb21pbmdcbiAgICAvLyApOiAvL1pvZE9iamVjdDxUICYgSW5jb21pbmdbXCJfc2hhcGVcIl0sIFVua25vd25LZXlzLCBDYXRjaGFsbD4gPSAobWVyZ2luZykgPT4ge1xuICAgIC8vIFpvZE9iamVjdDxcbiAgICAvLyAgIGV4dGVuZFNoYXBlPFQsIFJldHVyblR5cGU8SW5jb21pbmdbXCJfZGVmXCJdW1wic2hhcGVcIl0+PixcbiAgICAvLyAgIEluY29taW5nW1wiX2RlZlwiXVtcInVua25vd25LZXlzXCJdLFxuICAgIC8vICAgSW5jb21pbmdbXCJfZGVmXCJdW1wiY2F0Y2hhbGxcIl1cbiAgICAvLyA+IHtcbiAgICAvLyAgIC8vIGNvbnN0IG1lcmdlZFNoYXBlID0gb2JqZWN0VXRpbC5tZXJnZVNoYXBlcyhcbiAgICAvLyAgIC8vICAgdGhpcy5fZGVmLnNoYXBlKCksXG4gICAgLy8gICAvLyAgIG1lcmdpbmcuX2RlZi5zaGFwZSgpXG4gICAgLy8gICAvLyApO1xuICAgIC8vICAgY29uc3QgbWVyZ2VkOiBhbnkgPSBuZXcgWm9kT2JqZWN0KHtcbiAgICAvLyAgICAgdW5rbm93bktleXM6IG1lcmdpbmcuX2RlZi51bmtub3duS2V5cyxcbiAgICAvLyAgICAgY2F0Y2hhbGw6IG1lcmdpbmcuX2RlZi5jYXRjaGFsbCxcbiAgICAvLyAgICAgc2hhcGU6ICgpID0+XG4gICAgLy8gICAgICAgb2JqZWN0VXRpbC5tZXJnZVNoYXBlcyh0aGlzLl9kZWYuc2hhcGUoKSwgbWVyZ2luZy5fZGVmLnNoYXBlKCkpLFxuICAgIC8vICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZE9iamVjdCxcbiAgICAvLyAgIH0pIGFzIGFueTtcbiAgICAvLyAgIHJldHVybiBtZXJnZWQ7XG4gICAgLy8gfVxuICAgIGNhdGNoYWxsKGluZGV4KSB7XG4gICAgICAgIHJldHVybiBuZXcgWm9kT2JqZWN0KHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIGNhdGNoYWxsOiBpbmRleCxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHBpY2sobWFzaykge1xuICAgICAgICBjb25zdCBzaGFwZSA9IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiB1dGlsLm9iamVjdEtleXMobWFzaykpIHtcbiAgICAgICAgICAgIGlmIChtYXNrW2tleV0gJiYgdGhpcy5zaGFwZVtrZXldKSB7XG4gICAgICAgICAgICAgICAgc2hhcGVba2V5XSA9IHRoaXMuc2hhcGVba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFpvZE9iamVjdCh7XG4gICAgICAgICAgICAuLi50aGlzLl9kZWYsXG4gICAgICAgICAgICBzaGFwZTogKCkgPT4gc2hhcGUsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBvbWl0KG1hc2spIHtcbiAgICAgICAgY29uc3Qgc2hhcGUgPSB7fTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgdXRpbC5vYmplY3RLZXlzKHRoaXMuc2hhcGUpKSB7XG4gICAgICAgICAgICBpZiAoIW1hc2tba2V5XSkge1xuICAgICAgICAgICAgICAgIHNoYXBlW2tleV0gPSB0aGlzLnNoYXBlW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBab2RPYmplY3Qoe1xuICAgICAgICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgICAgICAgc2hhcGU6ICgpID0+IHNoYXBlLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGRlcHJlY2F0ZWRcbiAgICAgKi9cbiAgICBkZWVwUGFydGlhbCgpIHtcbiAgICAgICAgcmV0dXJuIGRlZXBQYXJ0aWFsaWZ5KHRoaXMpO1xuICAgIH1cbiAgICBwYXJ0aWFsKG1hc2spIHtcbiAgICAgICAgY29uc3QgbmV3U2hhcGUgPSB7fTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgdXRpbC5vYmplY3RLZXlzKHRoaXMuc2hhcGUpKSB7XG4gICAgICAgICAgICBjb25zdCBmaWVsZFNjaGVtYSA9IHRoaXMuc2hhcGVba2V5XTtcbiAgICAgICAgICAgIGlmIChtYXNrICYmICFtYXNrW2tleV0pIHtcbiAgICAgICAgICAgICAgICBuZXdTaGFwZVtrZXldID0gZmllbGRTY2hlbWE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBuZXdTaGFwZVtrZXldID0gZmllbGRTY2hlbWEub3B0aW9uYWwoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFpvZE9iamVjdCh7XG4gICAgICAgICAgICAuLi50aGlzLl9kZWYsXG4gICAgICAgICAgICBzaGFwZTogKCkgPT4gbmV3U2hhcGUsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXF1aXJlZChtYXNrKSB7XG4gICAgICAgIGNvbnN0IG5ld1NoYXBlID0ge307XG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIHV0aWwub2JqZWN0S2V5cyh0aGlzLnNoYXBlKSkge1xuICAgICAgICAgICAgaWYgKG1hc2sgJiYgIW1hc2tba2V5XSkge1xuICAgICAgICAgICAgICAgIG5ld1NoYXBlW2tleV0gPSB0aGlzLnNoYXBlW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBmaWVsZFNjaGVtYSA9IHRoaXMuc2hhcGVba2V5XTtcbiAgICAgICAgICAgICAgICBsZXQgbmV3RmllbGQgPSBmaWVsZFNjaGVtYTtcbiAgICAgICAgICAgICAgICB3aGlsZSAobmV3RmllbGQgaW5zdGFuY2VvZiBab2RPcHRpb25hbCkge1xuICAgICAgICAgICAgICAgICAgICBuZXdGaWVsZCA9IG5ld0ZpZWxkLl9kZWYuaW5uZXJUeXBlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBuZXdTaGFwZVtrZXldID0gbmV3RmllbGQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBab2RPYmplY3Qoe1xuICAgICAgICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgICAgICAgc2hhcGU6ICgpID0+IG5ld1NoYXBlLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAga2V5b2YoKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVab2RFbnVtKHV0aWwub2JqZWN0S2V5cyh0aGlzLnNoYXBlKSk7XG4gICAgfVxufVxuWm9kT2JqZWN0LmNyZWF0ZSA9IChzaGFwZSwgcGFyYW1zKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBab2RPYmplY3Qoe1xuICAgICAgICBzaGFwZTogKCkgPT4gc2hhcGUsXG4gICAgICAgIHVua25vd25LZXlzOiBcInN0cmlwXCIsXG4gICAgICAgIGNhdGNoYWxsOiBab2ROZXZlci5jcmVhdGUoKSxcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RPYmplY3QsXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5ab2RPYmplY3Quc3RyaWN0Q3JlYXRlID0gKHNoYXBlLCBwYXJhbXMpID0+IHtcbiAgICByZXR1cm4gbmV3IFpvZE9iamVjdCh7XG4gICAgICAgIHNoYXBlOiAoKSA9PiBzaGFwZSxcbiAgICAgICAgdW5rbm93bktleXM6IFwic3RyaWN0XCIsXG4gICAgICAgIGNhdGNoYWxsOiBab2ROZXZlci5jcmVhdGUoKSxcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RPYmplY3QsXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5ab2RPYmplY3QubGF6eWNyZWF0ZSA9IChzaGFwZSwgcGFyYW1zKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBab2RPYmplY3Qoe1xuICAgICAgICBzaGFwZSxcbiAgICAgICAgdW5rbm93bktleXM6IFwic3RyaXBcIixcbiAgICAgICAgY2F0Y2hhbGw6IFpvZE5ldmVyLmNyZWF0ZSgpLFxuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZE9iamVjdCxcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxuICAgIH0pO1xufTtcbmV4cG9ydCBjbGFzcyBab2RVbmlvbiBleHRlbmRzIFpvZFR5cGUge1xuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBjb25zdCB7IGN0eCB9ID0gdGhpcy5fcHJvY2Vzc0lucHV0UGFyYW1zKGlucHV0KTtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMuX2RlZi5vcHRpb25zO1xuICAgICAgICBmdW5jdGlvbiBoYW5kbGVSZXN1bHRzKHJlc3VsdHMpIHtcbiAgICAgICAgICAgIC8vIHJldHVybiBmaXJzdCBpc3N1ZS1mcmVlIHZhbGlkYXRpb24gaWYgaXQgZXhpc3RzXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHJlc3VsdCBvZiByZXN1bHRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5yZXN1bHQuc3RhdHVzID09PSBcInZhbGlkXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC5yZXN1bHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChjb25zdCByZXN1bHQgb2YgcmVzdWx0cykge1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQucmVzdWx0LnN0YXR1cyA9PT0gXCJkaXJ0eVwiKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGFkZCBpc3N1ZXMgZnJvbSBkaXJ0eSBvcHRpb25cbiAgICAgICAgICAgICAgICAgICAgY3R4LmNvbW1vbi5pc3N1ZXMucHVzaCguLi5yZXN1bHQuY3R4LmNvbW1vbi5pc3N1ZXMpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0LnJlc3VsdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyByZXR1cm4gaW52YWxpZFxuICAgICAgICAgICAgY29uc3QgdW5pb25FcnJvcnMgPSByZXN1bHRzLm1hcCgocmVzdWx0KSA9PiBuZXcgWm9kRXJyb3IocmVzdWx0LmN0eC5jb21tb24uaXNzdWVzKSk7XG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF91bmlvbixcbiAgICAgICAgICAgICAgICB1bmlvbkVycm9ycyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN0eC5jb21tb24uYXN5bmMpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChvcHRpb25zLm1hcChhc3luYyAob3B0aW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2hpbGRDdHggPSB7XG4gICAgICAgICAgICAgICAgICAgIC4uLmN0eCxcbiAgICAgICAgICAgICAgICAgICAgY29tbW9uOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5jdHguY29tbW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgaXNzdWVzOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50OiBudWxsLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0OiBhd2FpdCBvcHRpb24uX3BhcnNlQXN5bmMoe1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogY3R4LmRhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXRoOiBjdHgucGF0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudDogY2hpbGRDdHgsXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBjdHg6IGNoaWxkQ3R4LFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KSkudGhlbihoYW5kbGVSZXN1bHRzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxldCBkaXJ0eSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGNvbnN0IGlzc3VlcyA9IFtdO1xuICAgICAgICAgICAgZm9yIChjb25zdCBvcHRpb24gb2Ygb3B0aW9ucykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkQ3R4ID0ge1xuICAgICAgICAgICAgICAgICAgICAuLi5jdHgsXG4gICAgICAgICAgICAgICAgICAgIGNvbW1vbjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4uY3R4LmNvbW1vbixcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzc3VlczogW10sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudDogbnVsbCxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IG9wdGlvbi5fcGFyc2VTeW5jKHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogY3R4LmRhdGEsXG4gICAgICAgICAgICAgICAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgICAgICAgICAgICAgICBwYXJlbnQ6IGNoaWxkQ3R4LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuc3RhdHVzID09PSBcInZhbGlkXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAocmVzdWx0LnN0YXR1cyA9PT0gXCJkaXJ0eVwiICYmICFkaXJ0eSkge1xuICAgICAgICAgICAgICAgICAgICBkaXJ0eSA9IHsgcmVzdWx0LCBjdHg6IGNoaWxkQ3R4IH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjaGlsZEN0eC5jb21tb24uaXNzdWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBpc3N1ZXMucHVzaChjaGlsZEN0eC5jb21tb24uaXNzdWVzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZGlydHkpIHtcbiAgICAgICAgICAgICAgICBjdHguY29tbW9uLmlzc3Vlcy5wdXNoKC4uLmRpcnR5LmN0eC5jb21tb24uaXNzdWVzKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGlydHkucmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgdW5pb25FcnJvcnMgPSBpc3N1ZXMubWFwKChpc3N1ZXMpID0+IG5ldyBab2RFcnJvcihpc3N1ZXMpKTtcbiAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3VuaW9uLFxuICAgICAgICAgICAgICAgIHVuaW9uRXJyb3JzLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgb3B0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5vcHRpb25zO1xuICAgIH1cbn1cblpvZFVuaW9uLmNyZWF0ZSA9ICh0eXBlcywgcGFyYW1zKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBab2RVbmlvbih7XG4gICAgICAgIG9wdGlvbnM6IHR5cGVzLFxuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZFVuaW9uLFxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgfSk7XG59O1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLy8vLy8vLy8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vLy8vLy8vL1xuLy8vLy8vLy8vLyAgICAgIFpvZERpc2NyaW1pbmF0ZWRVbmlvbiAgICAgIC8vLy8vLy8vLy9cbi8vLy8vLy8vLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLy8vLy8vLy8vXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbmNvbnN0IGdldERpc2NyaW1pbmF0b3IgPSAodHlwZSkgPT4ge1xuICAgIGlmICh0eXBlIGluc3RhbmNlb2YgWm9kTGF6eSkge1xuICAgICAgICByZXR1cm4gZ2V0RGlzY3JpbWluYXRvcih0eXBlLnNjaGVtYSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGUgaW5zdGFuY2VvZiBab2RFZmZlY3RzKSB7XG4gICAgICAgIHJldHVybiBnZXREaXNjcmltaW5hdG9yKHR5cGUuaW5uZXJUeXBlKCkpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlIGluc3RhbmNlb2YgWm9kTGl0ZXJhbCkge1xuICAgICAgICByZXR1cm4gW3R5cGUudmFsdWVdO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlIGluc3RhbmNlb2YgWm9kRW51bSkge1xuICAgICAgICByZXR1cm4gdHlwZS5vcHRpb25zO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlIGluc3RhbmNlb2YgWm9kTmF0aXZlRW51bSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgYmFuL2JhblxuICAgICAgICByZXR1cm4gdXRpbC5vYmplY3RWYWx1ZXModHlwZS5lbnVtKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZSBpbnN0YW5jZW9mIFpvZERlZmF1bHQpIHtcbiAgICAgICAgcmV0dXJuIGdldERpc2NyaW1pbmF0b3IodHlwZS5fZGVmLmlubmVyVHlwZSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGUgaW5zdGFuY2VvZiBab2RVbmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIFt1bmRlZmluZWRdO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlIGluc3RhbmNlb2YgWm9kTnVsbCkge1xuICAgICAgICByZXR1cm4gW251bGxdO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlIGluc3RhbmNlb2YgWm9kT3B0aW9uYWwpIHtcbiAgICAgICAgcmV0dXJuIFt1bmRlZmluZWQsIC4uLmdldERpc2NyaW1pbmF0b3IodHlwZS51bndyYXAoKSldO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlIGluc3RhbmNlb2YgWm9kTnVsbGFibGUpIHtcbiAgICAgICAgcmV0dXJuIFtudWxsLCAuLi5nZXREaXNjcmltaW5hdG9yKHR5cGUudW53cmFwKCkpXTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZSBpbnN0YW5jZW9mIFpvZEJyYW5kZWQpIHtcbiAgICAgICAgcmV0dXJuIGdldERpc2NyaW1pbmF0b3IodHlwZS51bndyYXAoKSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGUgaW5zdGFuY2VvZiBab2RSZWFkb25seSkge1xuICAgICAgICByZXR1cm4gZ2V0RGlzY3JpbWluYXRvcih0eXBlLnVud3JhcCgpKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZSBpbnN0YW5jZW9mIFpvZENhdGNoKSB7XG4gICAgICAgIHJldHVybiBnZXREaXNjcmltaW5hdG9yKHR5cGUuX2RlZi5pbm5lclR5cGUpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbn07XG5leHBvcnQgY2xhc3MgWm9kRGlzY3JpbWluYXRlZFVuaW9uIGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IHsgY3R4IH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xuICAgICAgICBpZiAoY3R4LnBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUub2JqZWN0KSB7XG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlLm9iamVjdCxcbiAgICAgICAgICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRpc2NyaW1pbmF0b3IgPSB0aGlzLmRpc2NyaW1pbmF0b3I7XG4gICAgICAgIGNvbnN0IGRpc2NyaW1pbmF0b3JWYWx1ZSA9IGN0eC5kYXRhW2Rpc2NyaW1pbmF0b3JdO1xuICAgICAgICBjb25zdCBvcHRpb24gPSB0aGlzLm9wdGlvbnNNYXAuZ2V0KGRpc2NyaW1pbmF0b3JWYWx1ZSk7XG4gICAgICAgIGlmICghb3B0aW9uKSB7XG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF91bmlvbl9kaXNjcmltaW5hdG9yLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IEFycmF5LmZyb20odGhpcy5vcHRpb25zTWFwLmtleXMoKSksXG4gICAgICAgICAgICAgICAgcGF0aDogW2Rpc2NyaW1pbmF0b3JdLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY3R4LmNvbW1vbi5hc3luYykge1xuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbi5fcGFyc2VBc3luYyh7XG4gICAgICAgICAgICAgICAgZGF0YTogY3R4LmRhdGEsXG4gICAgICAgICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgICAgICAgcGFyZW50OiBjdHgsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBvcHRpb24uX3BhcnNlU3luYyh7XG4gICAgICAgICAgICAgICAgZGF0YTogY3R4LmRhdGEsXG4gICAgICAgICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgICAgICAgcGFyZW50OiBjdHgsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgZGlzY3JpbWluYXRvcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5kaXNjcmltaW5hdG9yO1xuICAgIH1cbiAgICBnZXQgb3B0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5vcHRpb25zO1xuICAgIH1cbiAgICBnZXQgb3B0aW9uc01hcCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5vcHRpb25zTWFwO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgY29uc3RydWN0b3Igb2YgdGhlIGRpc2NyaW1pbmF0ZWQgdW5pb24gc2NoZW1hLiBJdHMgYmVoYXZpb3VyIGlzIHZlcnkgc2ltaWxhciB0byB0aGF0IG9mIHRoZSBub3JtYWwgei51bmlvbigpIGNvbnN0cnVjdG9yLlxuICAgICAqIEhvd2V2ZXIsIGl0IG9ubHkgYWxsb3dzIGEgdW5pb24gb2Ygb2JqZWN0cywgYWxsIG9mIHdoaWNoIG5lZWQgdG8gc2hhcmUgYSBkaXNjcmltaW5hdG9yIHByb3BlcnR5LiBUaGlzIHByb3BlcnR5IG11c3RcbiAgICAgKiBoYXZlIGEgZGlmZmVyZW50IHZhbHVlIGZvciBlYWNoIG9iamVjdCBpbiB0aGUgdW5pb24uXG4gICAgICogQHBhcmFtIGRpc2NyaW1pbmF0b3IgdGhlIG5hbWUgb2YgdGhlIGRpc2NyaW1pbmF0b3IgcHJvcGVydHlcbiAgICAgKiBAcGFyYW0gdHlwZXMgYW4gYXJyYXkgb2Ygb2JqZWN0IHNjaGVtYXNcbiAgICAgKiBAcGFyYW0gcGFyYW1zXG4gICAgICovXG4gICAgc3RhdGljIGNyZWF0ZShkaXNjcmltaW5hdG9yLCBvcHRpb25zLCBwYXJhbXMpIHtcbiAgICAgICAgLy8gR2V0IGFsbCB0aGUgdmFsaWQgZGlzY3JpbWluYXRvciB2YWx1ZXNcbiAgICAgICAgY29uc3Qgb3B0aW9uc01hcCA9IG5ldyBNYXAoKTtcbiAgICAgICAgLy8gdHJ5IHtcbiAgICAgICAgZm9yIChjb25zdCB0eXBlIG9mIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIGNvbnN0IGRpc2NyaW1pbmF0b3JWYWx1ZXMgPSBnZXREaXNjcmltaW5hdG9yKHR5cGUuc2hhcGVbZGlzY3JpbWluYXRvcl0pO1xuICAgICAgICAgICAgaWYgKCFkaXNjcmltaW5hdG9yVmFsdWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQSBkaXNjcmltaW5hdG9yIHZhbHVlIGZvciBrZXkgXFxgJHtkaXNjcmltaW5hdG9yfVxcYCBjb3VsZCBub3QgYmUgZXh0cmFjdGVkIGZyb20gYWxsIHNjaGVtYSBvcHRpb25zYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIGRpc2NyaW1pbmF0b3JWYWx1ZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9uc01hcC5oYXModmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRGlzY3JpbWluYXRvciBwcm9wZXJ0eSAke1N0cmluZyhkaXNjcmltaW5hdG9yKX0gaGFzIGR1cGxpY2F0ZSB2YWx1ZSAke1N0cmluZyh2YWx1ZSl9YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG9wdGlvbnNNYXAuc2V0KHZhbHVlLCB0eXBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFpvZERpc2NyaW1pbmF0ZWRVbmlvbih7XG4gICAgICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZERpc2NyaW1pbmF0ZWRVbmlvbixcbiAgICAgICAgICAgIGRpc2NyaW1pbmF0b3IsXG4gICAgICAgICAgICBvcHRpb25zLFxuICAgICAgICAgICAgb3B0aW9uc01hcCxcbiAgICAgICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZnVuY3Rpb24gbWVyZ2VWYWx1ZXMoYSwgYikge1xuICAgIGNvbnN0IGFUeXBlID0gZ2V0UGFyc2VkVHlwZShhKTtcbiAgICBjb25zdCBiVHlwZSA9IGdldFBhcnNlZFR5cGUoYik7XG4gICAgaWYgKGEgPT09IGIpIHtcbiAgICAgICAgcmV0dXJuIHsgdmFsaWQ6IHRydWUsIGRhdGE6IGEgfTtcbiAgICB9XG4gICAgZWxzZSBpZiAoYVR5cGUgPT09IFpvZFBhcnNlZFR5cGUub2JqZWN0ICYmIGJUeXBlID09PSBab2RQYXJzZWRUeXBlLm9iamVjdCkge1xuICAgICAgICBjb25zdCBiS2V5cyA9IHV0aWwub2JqZWN0S2V5cyhiKTtcbiAgICAgICAgY29uc3Qgc2hhcmVkS2V5cyA9IHV0aWwub2JqZWN0S2V5cyhhKS5maWx0ZXIoKGtleSkgPT4gYktleXMuaW5kZXhPZihrZXkpICE9PSAtMSk7XG4gICAgICAgIGNvbnN0IG5ld09iaiA9IHsgLi4uYSwgLi4uYiB9O1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBzaGFyZWRLZXlzKSB7XG4gICAgICAgICAgICBjb25zdCBzaGFyZWRWYWx1ZSA9IG1lcmdlVmFsdWVzKGFba2V5XSwgYltrZXldKTtcbiAgICAgICAgICAgIGlmICghc2hhcmVkVmFsdWUudmFsaWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyB2YWxpZDogZmFsc2UgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5ld09ialtrZXldID0gc2hhcmVkVmFsdWUuZGF0YTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyB2YWxpZDogdHJ1ZSwgZGF0YTogbmV3T2JqIH07XG4gICAgfVxuICAgIGVsc2UgaWYgKGFUeXBlID09PSBab2RQYXJzZWRUeXBlLmFycmF5ICYmIGJUeXBlID09PSBab2RQYXJzZWRUeXBlLmFycmF5KSB7XG4gICAgICAgIGlmIChhLmxlbmd0aCAhPT0gYi5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHZhbGlkOiBmYWxzZSB9O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG5ld0FycmF5ID0gW107XG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBhLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgICAgY29uc3QgaXRlbUEgPSBhW2luZGV4XTtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1CID0gYltpbmRleF07XG4gICAgICAgICAgICBjb25zdCBzaGFyZWRWYWx1ZSA9IG1lcmdlVmFsdWVzKGl0ZW1BLCBpdGVtQik7XG4gICAgICAgICAgICBpZiAoIXNoYXJlZFZhbHVlLnZhbGlkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgdmFsaWQ6IGZhbHNlIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuZXdBcnJheS5wdXNoKHNoYXJlZFZhbHVlLmRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHZhbGlkOiB0cnVlLCBkYXRhOiBuZXdBcnJheSB9O1xuICAgIH1cbiAgICBlbHNlIGlmIChhVHlwZSA9PT0gWm9kUGFyc2VkVHlwZS5kYXRlICYmIGJUeXBlID09PSBab2RQYXJzZWRUeXBlLmRhdGUgJiYgK2EgPT09ICtiKSB7XG4gICAgICAgIHJldHVybiB7IHZhbGlkOiB0cnVlLCBkYXRhOiBhIH07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4geyB2YWxpZDogZmFsc2UgfTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgWm9kSW50ZXJzZWN0aW9uIGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IHsgc3RhdHVzLCBjdHggfSA9IHRoaXMuX3Byb2Nlc3NJbnB1dFBhcmFtcyhpbnB1dCk7XG4gICAgICAgIGNvbnN0IGhhbmRsZVBhcnNlZCA9IChwYXJzZWRMZWZ0LCBwYXJzZWRSaWdodCkgPT4ge1xuICAgICAgICAgICAgaWYgKGlzQWJvcnRlZChwYXJzZWRMZWZ0KSB8fCBpc0Fib3J0ZWQocGFyc2VkUmlnaHQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBtZXJnZWQgPSBtZXJnZVZhbHVlcyhwYXJzZWRMZWZ0LnZhbHVlLCBwYXJzZWRSaWdodC52YWx1ZSk7XG4gICAgICAgICAgICBpZiAoIW1lcmdlZC52YWxpZCkge1xuICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9pbnRlcnNlY3Rpb25fdHlwZXMsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNEaXJ0eShwYXJzZWRMZWZ0KSB8fCBpc0RpcnR5KHBhcnNlZFJpZ2h0KSkge1xuICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiBzdGF0dXMudmFsdWUsIHZhbHVlOiBtZXJnZWQuZGF0YSB9O1xuICAgICAgICB9O1xuICAgICAgICBpZiAoY3R4LmNvbW1vbi5hc3luYykge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKFtcbiAgICAgICAgICAgICAgICB0aGlzLl9kZWYubGVmdC5fcGFyc2VBc3luYyh7XG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IGN0eC5kYXRhLFxuICAgICAgICAgICAgICAgICAgICBwYXRoOiBjdHgucGF0aCxcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50OiBjdHgsXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgdGhpcy5fZGVmLnJpZ2h0Ll9wYXJzZUFzeW5jKHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogY3R4LmRhdGEsXG4gICAgICAgICAgICAgICAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgICAgICAgICAgICAgICBwYXJlbnQ6IGN0eCxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIF0pLnRoZW4oKFtsZWZ0LCByaWdodF0pID0+IGhhbmRsZVBhcnNlZChsZWZ0LCByaWdodCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZVBhcnNlZCh0aGlzLl9kZWYubGVmdC5fcGFyc2VTeW5jKHtcbiAgICAgICAgICAgICAgICBkYXRhOiBjdHguZGF0YSxcbiAgICAgICAgICAgICAgICBwYXRoOiBjdHgucGF0aCxcbiAgICAgICAgICAgICAgICBwYXJlbnQ6IGN0eCxcbiAgICAgICAgICAgIH0pLCB0aGlzLl9kZWYucmlnaHQuX3BhcnNlU3luYyh7XG4gICAgICAgICAgICAgICAgZGF0YTogY3R4LmRhdGEsXG4gICAgICAgICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgICAgICAgcGFyZW50OiBjdHgsXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5ab2RJbnRlcnNlY3Rpb24uY3JlYXRlID0gKGxlZnQsIHJpZ2h0LCBwYXJhbXMpID0+IHtcbiAgICByZXR1cm4gbmV3IFpvZEludGVyc2VjdGlvbih7XG4gICAgICAgIGxlZnQ6IGxlZnQsXG4gICAgICAgIHJpZ2h0OiByaWdodCxcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RJbnRlcnNlY3Rpb24sXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG4vLyB0eXBlIFpvZFR1cGxlSXRlbXMgPSBbWm9kVHlwZUFueSwgLi4uWm9kVHlwZUFueVtdXTtcbmV4cG9ydCBjbGFzcyBab2RUdXBsZSBleHRlbmRzIFpvZFR5cGUge1xuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBjb25zdCB7IHN0YXR1cywgY3R4IH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xuICAgICAgICBpZiAoY3R4LnBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUuYXJyYXkpIHtcbiAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3R5cGUsXG4gICAgICAgICAgICAgICAgZXhwZWN0ZWQ6IFpvZFBhcnNlZFR5cGUuYXJyYXksXG4gICAgICAgICAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY3R4LmRhdGEubGVuZ3RoIDwgdGhpcy5fZGVmLml0ZW1zLmxlbmd0aCkge1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLnRvb19zbWFsbCxcbiAgICAgICAgICAgICAgICBtaW5pbXVtOiB0aGlzLl9kZWYuaXRlbXMubGVuZ3RoLFxuICAgICAgICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBleGFjdDogZmFsc2UsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJhcnJheVwiLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXN0ID0gdGhpcy5fZGVmLnJlc3Q7XG4gICAgICAgIGlmICghcmVzdCAmJiBjdHguZGF0YS5sZW5ndGggPiB0aGlzLl9kZWYuaXRlbXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUudG9vX2JpZyxcbiAgICAgICAgICAgICAgICBtYXhpbXVtOiB0aGlzLl9kZWYuaXRlbXMubGVuZ3RoLFxuICAgICAgICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBleGFjdDogZmFsc2UsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJhcnJheVwiLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpdGVtcyA9IFsuLi5jdHguZGF0YV1cbiAgICAgICAgICAgIC5tYXAoKGl0ZW0sIGl0ZW1JbmRleCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc2NoZW1hID0gdGhpcy5fZGVmLml0ZW1zW2l0ZW1JbmRleF0gfHwgdGhpcy5fZGVmLnJlc3Q7XG4gICAgICAgICAgICBpZiAoIXNjaGVtYSlcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIHJldHVybiBzY2hlbWEuX3BhcnNlKG5ldyBQYXJzZUlucHV0TGF6eVBhdGgoY3R4LCBpdGVtLCBjdHgucGF0aCwgaXRlbUluZGV4KSk7XG4gICAgICAgIH0pXG4gICAgICAgICAgICAuZmlsdGVyKCh4KSA9PiAhIXgpOyAvLyBmaWx0ZXIgbnVsbHNcbiAgICAgICAgaWYgKGN0eC5jb21tb24uYXN5bmMpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChpdGVtcykudGhlbigocmVzdWx0cykgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBQYXJzZVN0YXR1cy5tZXJnZUFycmF5KHN0YXR1cywgcmVzdWx0cyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBQYXJzZVN0YXR1cy5tZXJnZUFycmF5KHN0YXR1cywgaXRlbXMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBpdGVtcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5pdGVtcztcbiAgICB9XG4gICAgcmVzdChyZXN0KSB7XG4gICAgICAgIHJldHVybiBuZXcgWm9kVHVwbGUoe1xuICAgICAgICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgICAgICAgcmVzdCxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuWm9kVHVwbGUuY3JlYXRlID0gKHNjaGVtYXMsIHBhcmFtcykgPT4ge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShzY2hlbWFzKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgbXVzdCBwYXNzIGFuIGFycmF5IG9mIHNjaGVtYXMgdG8gei50dXBsZShbIC4uLiBdKVwiKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBab2RUdXBsZSh7XG4gICAgICAgIGl0ZW1zOiBzY2hlbWFzLFxuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZFR1cGxlLFxuICAgICAgICByZXN0OiBudWxsLFxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgfSk7XG59O1xuZXhwb3J0IGNsYXNzIFpvZFJlY29yZCBleHRlbmRzIFpvZFR5cGUge1xuICAgIGdldCBrZXlTY2hlbWEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYua2V5VHlwZTtcbiAgICB9XG4gICAgZ2V0IHZhbHVlU2NoZW1hKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVmLnZhbHVlVHlwZTtcbiAgICB9XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IHsgc3RhdHVzLCBjdHggfSA9IHRoaXMuX3Byb2Nlc3NJbnB1dFBhcmFtcyhpbnB1dCk7XG4gICAgICAgIGlmIChjdHgucGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZS5vYmplY3QpIHtcbiAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3R5cGUsXG4gICAgICAgICAgICAgICAgZXhwZWN0ZWQ6IFpvZFBhcnNlZFR5cGUub2JqZWN0LFxuICAgICAgICAgICAgICAgIHJlY2VpdmVkOiBjdHgucGFyc2VkVHlwZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGFpcnMgPSBbXTtcbiAgICAgICAgY29uc3Qga2V5VHlwZSA9IHRoaXMuX2RlZi5rZXlUeXBlO1xuICAgICAgICBjb25zdCB2YWx1ZVR5cGUgPSB0aGlzLl9kZWYudmFsdWVUeXBlO1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBjdHguZGF0YSkge1xuICAgICAgICAgICAgcGFpcnMucHVzaCh7XG4gICAgICAgICAgICAgICAga2V5OiBrZXlUeXBlLl9wYXJzZShuZXcgUGFyc2VJbnB1dExhenlQYXRoKGN0eCwga2V5LCBjdHgucGF0aCwga2V5KSksXG4gICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlVHlwZS5fcGFyc2UobmV3IFBhcnNlSW5wdXRMYXp5UGF0aChjdHgsIGN0eC5kYXRhW2tleV0sIGN0eC5wYXRoLCBrZXkpKSxcbiAgICAgICAgICAgICAgICBhbHdheXNTZXQ6IGtleSBpbiBjdHguZGF0YSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjdHguY29tbW9uLmFzeW5jKSB7XG4gICAgICAgICAgICByZXR1cm4gUGFyc2VTdGF0dXMubWVyZ2VPYmplY3RBc3luYyhzdGF0dXMsIHBhaXJzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBQYXJzZVN0YXR1cy5tZXJnZU9iamVjdFN5bmMoc3RhdHVzLCBwYWlycyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IGVsZW1lbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYudmFsdWVUeXBlO1xuICAgIH1cbiAgICBzdGF0aWMgY3JlYXRlKGZpcnN0LCBzZWNvbmQsIHRoaXJkKSB7XG4gICAgICAgIGlmIChzZWNvbmQgaW5zdGFuY2VvZiBab2RUeXBlKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFpvZFJlY29yZCh7XG4gICAgICAgICAgICAgICAga2V5VHlwZTogZmlyc3QsXG4gICAgICAgICAgICAgICAgdmFsdWVUeXBlOiBzZWNvbmQsXG4gICAgICAgICAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RSZWNvcmQsXG4gICAgICAgICAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyh0aGlyZCksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFpvZFJlY29yZCh7XG4gICAgICAgICAgICBrZXlUeXBlOiBab2RTdHJpbmcuY3JlYXRlKCksXG4gICAgICAgICAgICB2YWx1ZVR5cGU6IGZpcnN0LFxuICAgICAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RSZWNvcmQsXG4gICAgICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHNlY29uZCksXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBab2RNYXAgZXh0ZW5kcyBab2RUeXBlIHtcbiAgICBnZXQga2V5U2NoZW1hKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVmLmtleVR5cGU7XG4gICAgfVxuICAgIGdldCB2YWx1ZVNjaGVtYSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi52YWx1ZVR5cGU7XG4gICAgfVxuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBjb25zdCB7IHN0YXR1cywgY3R4IH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xuICAgICAgICBpZiAoY3R4LnBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUubWFwKSB7XG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlLm1hcCxcbiAgICAgICAgICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGtleVR5cGUgPSB0aGlzLl9kZWYua2V5VHlwZTtcbiAgICAgICAgY29uc3QgdmFsdWVUeXBlID0gdGhpcy5fZGVmLnZhbHVlVHlwZTtcbiAgICAgICAgY29uc3QgcGFpcnMgPSBbLi4uY3R4LmRhdGEuZW50cmllcygpXS5tYXAoKFtrZXksIHZhbHVlXSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAga2V5OiBrZXlUeXBlLl9wYXJzZShuZXcgUGFyc2VJbnB1dExhenlQYXRoKGN0eCwga2V5LCBjdHgucGF0aCwgW2luZGV4LCBcImtleVwiXSkpLFxuICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZVR5cGUuX3BhcnNlKG5ldyBQYXJzZUlucHV0TGF6eVBhdGgoY3R4LCB2YWx1ZSwgY3R4LnBhdGgsIFtpbmRleCwgXCJ2YWx1ZVwiXSkpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChjdHguY29tbW9uLmFzeW5jKSB7XG4gICAgICAgICAgICBjb25zdCBmaW5hbE1hcCA9IG5ldyBNYXAoKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHBhaXIgb2YgcGFpcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gYXdhaXQgcGFpci5rZXk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gYXdhaXQgcGFpci52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGtleS5zdGF0dXMgPT09IFwiYWJvcnRlZFwiIHx8IHZhbHVlLnN0YXR1cyA9PT0gXCJhYm9ydGVkXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChrZXkuc3RhdHVzID09PSBcImRpcnR5XCIgfHwgdmFsdWUuc3RhdHVzID09PSBcImRpcnR5XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGZpbmFsTWFwLnNldChrZXkudmFsdWUsIHZhbHVlLnZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiBzdGF0dXMudmFsdWUsIHZhbHVlOiBmaW5hbE1hcCB9O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBmaW5hbE1hcCA9IG5ldyBNYXAoKTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgcGFpciBvZiBwYWlycykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IHBhaXIua2V5O1xuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gcGFpci52YWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAoa2V5LnN0YXR1cyA9PT0gXCJhYm9ydGVkXCIgfHwgdmFsdWUuc3RhdHVzID09PSBcImFib3J0ZWRcIikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGtleS5zdGF0dXMgPT09IFwiZGlydHlcIiB8fCB2YWx1ZS5zdGF0dXMgPT09IFwiZGlydHlcIikge1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZmluYWxNYXAuc2V0KGtleS52YWx1ZSwgdmFsdWUudmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiBzdGF0dXMudmFsdWUsIHZhbHVlOiBmaW5hbE1hcCB9O1xuICAgICAgICB9XG4gICAgfVxufVxuWm9kTWFwLmNyZWF0ZSA9IChrZXlUeXBlLCB2YWx1ZVR5cGUsIHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kTWFwKHtcbiAgICAgICAgdmFsdWVUeXBlLFxuICAgICAgICBrZXlUeXBlLFxuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZE1hcCxcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxuICAgIH0pO1xufTtcbmV4cG9ydCBjbGFzcyBab2RTZXQgZXh0ZW5kcyBab2RUeXBlIHtcbiAgICBfcGFyc2UoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgeyBzdGF0dXMsIGN0eCB9ID0gdGhpcy5fcHJvY2Vzc0lucHV0UGFyYW1zKGlucHV0KTtcbiAgICAgICAgaWYgKGN0eC5wYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlLnNldCkge1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcbiAgICAgICAgICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZS5zZXQsXG4gICAgICAgICAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkZWYgPSB0aGlzLl9kZWY7XG4gICAgICAgIGlmIChkZWYubWluU2l6ZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKGN0eC5kYXRhLnNpemUgPCBkZWYubWluU2l6ZS52YWx1ZSkge1xuICAgICAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUudG9vX3NtYWxsLFxuICAgICAgICAgICAgICAgICAgICBtaW5pbXVtOiBkZWYubWluU2l6ZS52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJzZXRcIixcbiAgICAgICAgICAgICAgICAgICAgaW5jbHVzaXZlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBleGFjdDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGRlZi5taW5TaXplLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRlZi5tYXhTaXplICE9PSBudWxsKSB7XG4gICAgICAgICAgICBpZiAoY3R4LmRhdGEuc2l6ZSA+IGRlZi5tYXhTaXplLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS50b29fYmlnLFxuICAgICAgICAgICAgICAgICAgICBtYXhpbXVtOiBkZWYubWF4U2l6ZS52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJzZXRcIixcbiAgICAgICAgICAgICAgICAgICAgaW5jbHVzaXZlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBleGFjdDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGRlZi5tYXhTaXplLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdmFsdWVUeXBlID0gdGhpcy5fZGVmLnZhbHVlVHlwZTtcbiAgICAgICAgZnVuY3Rpb24gZmluYWxpemVTZXQoZWxlbWVudHMpIHtcbiAgICAgICAgICAgIGNvbnN0IHBhcnNlZFNldCA9IG5ldyBTZXQoKTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgZWxlbWVudCBvZiBlbGVtZW50cykge1xuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LnN0YXR1cyA9PT0gXCJhYm9ydGVkXCIpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LnN0YXR1cyA9PT0gXCJkaXJ0eVwiKVxuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICAgICAgICBwYXJzZWRTZXQuYWRkKGVsZW1lbnQudmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiBzdGF0dXMudmFsdWUsIHZhbHVlOiBwYXJzZWRTZXQgfTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBlbGVtZW50cyA9IFsuLi5jdHguZGF0YS52YWx1ZXMoKV0ubWFwKChpdGVtLCBpKSA9PiB2YWx1ZVR5cGUuX3BhcnNlKG5ldyBQYXJzZUlucHV0TGF6eVBhdGgoY3R4LCBpdGVtLCBjdHgucGF0aCwgaSkpKTtcbiAgICAgICAgaWYgKGN0eC5jb21tb24uYXN5bmMpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChlbGVtZW50cykudGhlbigoZWxlbWVudHMpID0+IGZpbmFsaXplU2V0KGVsZW1lbnRzKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmluYWxpemVTZXQoZWxlbWVudHMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIG1pbihtaW5TaXplLCBtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiBuZXcgWm9kU2V0KHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIG1pblNpemU6IHsgdmFsdWU6IG1pblNpemUsIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKSB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgbWF4KG1heFNpemUsIG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBab2RTZXQoe1xuICAgICAgICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgICAgICAgbWF4U2l6ZTogeyB2YWx1ZTogbWF4U2l6ZSwgbWVzc2FnZTogZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzaXplKHNpemUsIG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWluKHNpemUsIG1lc3NhZ2UpLm1heChzaXplLCBtZXNzYWdlKTtcbiAgICB9XG4gICAgbm9uZW1wdHkobWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5taW4oMSwgbWVzc2FnZSk7XG4gICAgfVxufVxuWm9kU2V0LmNyZWF0ZSA9ICh2YWx1ZVR5cGUsIHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kU2V0KHtcbiAgICAgICAgdmFsdWVUeXBlLFxuICAgICAgICBtaW5TaXplOiBudWxsLFxuICAgICAgICBtYXhTaXplOiBudWxsLFxuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZFNldCxcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxuICAgIH0pO1xufTtcbmV4cG9ydCBjbGFzcyBab2RGdW5jdGlvbiBleHRlbmRzIFpvZFR5cGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLnZhbGlkYXRlID0gdGhpcy5pbXBsZW1lbnQ7XG4gICAgfVxuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBjb25zdCB7IGN0eCB9ID0gdGhpcy5fcHJvY2Vzc0lucHV0UGFyYW1zKGlucHV0KTtcbiAgICAgICAgaWYgKGN0eC5wYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlLmZ1bmN0aW9uKSB7XG4gICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgICAgICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlLmZ1bmN0aW9uLFxuICAgICAgICAgICAgICAgIHJlY2VpdmVkOiBjdHgucGFyc2VkVHlwZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gbWFrZUFyZ3NJc3N1ZShhcmdzLCBlcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIG1ha2VJc3N1ZSh7XG4gICAgICAgICAgICAgICAgZGF0YTogYXJncyxcbiAgICAgICAgICAgICAgICBwYXRoOiBjdHgucGF0aCxcbiAgICAgICAgICAgICAgICBlcnJvck1hcHM6IFtjdHguY29tbW9uLmNvbnRleHR1YWxFcnJvck1hcCwgY3R4LnNjaGVtYUVycm9yTWFwLCBnZXRFcnJvck1hcCgpLCBkZWZhdWx0RXJyb3JNYXBdLmZpbHRlcigoeCkgPT4gISF4KSxcbiAgICAgICAgICAgICAgICBpc3N1ZURhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfYXJndW1lbnRzLFxuICAgICAgICAgICAgICAgICAgICBhcmd1bWVudHNFcnJvcjogZXJyb3IsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIG1ha2VSZXR1cm5zSXNzdWUocmV0dXJucywgZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiBtYWtlSXNzdWUoe1xuICAgICAgICAgICAgICAgIGRhdGE6IHJldHVybnMsXG4gICAgICAgICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgICAgICAgZXJyb3JNYXBzOiBbY3R4LmNvbW1vbi5jb250ZXh0dWFsRXJyb3JNYXAsIGN0eC5zY2hlbWFFcnJvck1hcCwgZ2V0RXJyb3JNYXAoKSwgZGVmYXVsdEVycm9yTWFwXS5maWx0ZXIoKHgpID0+ICEheCksXG4gICAgICAgICAgICAgICAgaXNzdWVEYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3JldHVybl90eXBlLFxuICAgICAgICAgICAgICAgICAgICByZXR1cm5UeXBlRXJyb3I6IGVycm9yLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYXJhbXMgPSB7IGVycm9yTWFwOiBjdHguY29tbW9uLmNvbnRleHR1YWxFcnJvck1hcCB9O1xuICAgICAgICBjb25zdCBmbiA9IGN0eC5kYXRhO1xuICAgICAgICBpZiAodGhpcy5fZGVmLnJldHVybnMgaW5zdGFuY2VvZiBab2RQcm9taXNlKSB7XG4gICAgICAgICAgICAvLyBXb3VsZCBsb3ZlIGEgd2F5IHRvIGF2b2lkIGRpc2FibGluZyB0aGlzIHJ1bGUsIGJ1dCB3ZSBuZWVkXG4gICAgICAgICAgICAvLyBhbiBhbGlhcyAodXNpbmcgYW4gYXJyb3cgZnVuY3Rpb24gd2FzIHdoYXQgY2F1c2VkIDI2NTEpLlxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby10aGlzLWFsaWFzXG4gICAgICAgICAgICBjb25zdCBtZSA9IHRoaXM7XG4gICAgICAgICAgICByZXR1cm4gT0soYXN5bmMgZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlcnJvciA9IG5ldyBab2RFcnJvcihbXSk7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFyc2VkQXJncyA9IGF3YWl0IG1lLl9kZWYuYXJncy5wYXJzZUFzeW5jKGFyZ3MsIHBhcmFtcykuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IuYWRkSXNzdWUobWFrZUFyZ3NJc3N1ZShhcmdzLCBlKSk7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IFJlZmxlY3QuYXBwbHkoZm4sIHRoaXMsIHBhcnNlZEFyZ3MpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhcnNlZFJldHVybnMgPSBhd2FpdCBtZS5fZGVmLnJldHVybnMuX2RlZi50eXBlXG4gICAgICAgICAgICAgICAgICAgIC5wYXJzZUFzeW5jKHJlc3VsdCwgcGFyYW1zKVxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IuYWRkSXNzdWUobWFrZVJldHVybnNJc3N1ZShyZXN1bHQsIGUpKTtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlZFJldHVybnM7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIFdvdWxkIGxvdmUgYSB3YXkgdG8gYXZvaWQgZGlzYWJsaW5nIHRoaXMgcnVsZSwgYnV0IHdlIG5lZWRcbiAgICAgICAgICAgIC8vIGFuIGFsaWFzICh1c2luZyBhbiBhcnJvdyBmdW5jdGlvbiB3YXMgd2hhdCBjYXVzZWQgMjY1MSkuXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXRoaXMtYWxpYXNcbiAgICAgICAgICAgIGNvbnN0IG1lID0gdGhpcztcbiAgICAgICAgICAgIHJldHVybiBPSyhmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhcnNlZEFyZ3MgPSBtZS5fZGVmLmFyZ3Muc2FmZVBhcnNlKGFyZ3MsIHBhcmFtcyk7XG4gICAgICAgICAgICAgICAgaWYgKCFwYXJzZWRBcmdzLnN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFpvZEVycm9yKFttYWtlQXJnc0lzc3VlKGFyZ3MsIHBhcnNlZEFyZ3MuZXJyb3IpXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IFJlZmxlY3QuYXBwbHkoZm4sIHRoaXMsIHBhcnNlZEFyZ3MuZGF0YSk7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFyc2VkUmV0dXJucyA9IG1lLl9kZWYucmV0dXJucy5zYWZlUGFyc2UocmVzdWx0LCBwYXJhbXMpO1xuICAgICAgICAgICAgICAgIGlmICghcGFyc2VkUmV0dXJucy5zdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBab2RFcnJvcihbbWFrZVJldHVybnNJc3N1ZShyZXN1bHQsIHBhcnNlZFJldHVybnMuZXJyb3IpXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZWRSZXR1cm5zLmRhdGE7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBwYXJhbWV0ZXJzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVmLmFyZ3M7XG4gICAgfVxuICAgIHJldHVyblR5cGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYucmV0dXJucztcbiAgICB9XG4gICAgYXJncyguLi5pdGVtcykge1xuICAgICAgICByZXR1cm4gbmV3IFpvZEZ1bmN0aW9uKHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIGFyZ3M6IFpvZFR1cGxlLmNyZWF0ZShpdGVtcykucmVzdChab2RVbmtub3duLmNyZWF0ZSgpKSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybnMocmV0dXJuVHlwZSkge1xuICAgICAgICByZXR1cm4gbmV3IFpvZEZ1bmN0aW9uKHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgICAgIHJldHVybnM6IHJldHVyblR5cGUsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpbXBsZW1lbnQoZnVuYykge1xuICAgICAgICBjb25zdCB2YWxpZGF0ZWRGdW5jID0gdGhpcy5wYXJzZShmdW5jKTtcbiAgICAgICAgcmV0dXJuIHZhbGlkYXRlZEZ1bmM7XG4gICAgfVxuICAgIHN0cmljdEltcGxlbWVudChmdW5jKSB7XG4gICAgICAgIGNvbnN0IHZhbGlkYXRlZEZ1bmMgPSB0aGlzLnBhcnNlKGZ1bmMpO1xuICAgICAgICByZXR1cm4gdmFsaWRhdGVkRnVuYztcbiAgICB9XG4gICAgc3RhdGljIGNyZWF0ZShhcmdzLCByZXR1cm5zLCBwYXJhbXMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBab2RGdW5jdGlvbih7XG4gICAgICAgICAgICBhcmdzOiAoYXJncyA/IGFyZ3MgOiBab2RUdXBsZS5jcmVhdGUoW10pLnJlc3QoWm9kVW5rbm93bi5jcmVhdGUoKSkpLFxuICAgICAgICAgICAgcmV0dXJuczogcmV0dXJucyB8fCBab2RVbmtub3duLmNyZWF0ZSgpLFxuICAgICAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RGdW5jdGlvbixcbiAgICAgICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFpvZExhenkgZXh0ZW5kcyBab2RUeXBlIHtcbiAgICBnZXQgc2NoZW1hKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVmLmdldHRlcigpO1xuICAgIH1cbiAgICBfcGFyc2UoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgeyBjdHggfSA9IHRoaXMuX3Byb2Nlc3NJbnB1dFBhcmFtcyhpbnB1dCk7XG4gICAgICAgIGNvbnN0IGxhenlTY2hlbWEgPSB0aGlzLl9kZWYuZ2V0dGVyKCk7XG4gICAgICAgIHJldHVybiBsYXp5U2NoZW1hLl9wYXJzZSh7IGRhdGE6IGN0eC5kYXRhLCBwYXRoOiBjdHgucGF0aCwgcGFyZW50OiBjdHggfSk7XG4gICAgfVxufVxuWm9kTGF6eS5jcmVhdGUgPSAoZ2V0dGVyLCBwYXJhbXMpID0+IHtcbiAgICByZXR1cm4gbmV3IFpvZExhenkoe1xuICAgICAgICBnZXR0ZXI6IGdldHRlcixcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RMYXp5LFxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgfSk7XG59O1xuZXhwb3J0IGNsYXNzIFpvZExpdGVyYWwgZXh0ZW5kcyBab2RUeXBlIHtcbiAgICBfcGFyc2UoaW5wdXQpIHtcbiAgICAgICAgaWYgKGlucHV0LmRhdGEgIT09IHRoaXMuX2RlZi52YWx1ZSkge1xuICAgICAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgcmVjZWl2ZWQ6IGN0eC5kYXRhLFxuICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX2xpdGVyYWwsXG4gICAgICAgICAgICAgICAgZXhwZWN0ZWQ6IHRoaXMuX2RlZi52YWx1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiBcInZhbGlkXCIsIHZhbHVlOiBpbnB1dC5kYXRhIH07XG4gICAgfVxuICAgIGdldCB2YWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi52YWx1ZTtcbiAgICB9XG59XG5ab2RMaXRlcmFsLmNyZWF0ZSA9ICh2YWx1ZSwgcGFyYW1zKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBab2RMaXRlcmFsKHtcbiAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZExpdGVyYWwsXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5mdW5jdGlvbiBjcmVhdGVab2RFbnVtKHZhbHVlcywgcGFyYW1zKSB7XG4gICAgcmV0dXJuIG5ldyBab2RFbnVtKHtcbiAgICAgICAgdmFsdWVzLFxuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZEVudW0sXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn1cbmV4cG9ydCBjbGFzcyBab2RFbnVtIGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGlmICh0eXBlb2YgaW5wdXQuZGF0YSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xuICAgICAgICAgICAgY29uc3QgZXhwZWN0ZWRWYWx1ZXMgPSB0aGlzLl9kZWYudmFsdWVzO1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgZXhwZWN0ZWQ6IHV0aWwuam9pblZhbHVlcyhleHBlY3RlZFZhbHVlcyksXG4gICAgICAgICAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlLFxuICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3R5cGUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5fY2FjaGUpIHtcbiAgICAgICAgICAgIHRoaXMuX2NhY2hlID0gbmV3IFNldCh0aGlzLl9kZWYudmFsdWVzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX2NhY2hlLmhhcyhpbnB1dC5kYXRhKSkge1xuICAgICAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xuICAgICAgICAgICAgY29uc3QgZXhwZWN0ZWRWYWx1ZXMgPSB0aGlzLl9kZWYudmFsdWVzO1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgcmVjZWl2ZWQ6IGN0eC5kYXRhLFxuICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX2VudW1fdmFsdWUsXG4gICAgICAgICAgICAgICAgb3B0aW9uczogZXhwZWN0ZWRWYWx1ZXMsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBPSyhpbnB1dC5kYXRhKTtcbiAgICB9XG4gICAgZ2V0IG9wdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYudmFsdWVzO1xuICAgIH1cbiAgICBnZXQgZW51bSgpIHtcbiAgICAgICAgY29uc3QgZW51bVZhbHVlcyA9IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IHZhbCBvZiB0aGlzLl9kZWYudmFsdWVzKSB7XG4gICAgICAgICAgICBlbnVtVmFsdWVzW3ZhbF0gPSB2YWw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVudW1WYWx1ZXM7XG4gICAgfVxuICAgIGdldCBWYWx1ZXMoKSB7XG4gICAgICAgIGNvbnN0IGVudW1WYWx1ZXMgPSB7fTtcbiAgICAgICAgZm9yIChjb25zdCB2YWwgb2YgdGhpcy5fZGVmLnZhbHVlcykge1xuICAgICAgICAgICAgZW51bVZhbHVlc1t2YWxdID0gdmFsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbnVtVmFsdWVzO1xuICAgIH1cbiAgICBnZXQgRW51bSgpIHtcbiAgICAgICAgY29uc3QgZW51bVZhbHVlcyA9IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IHZhbCBvZiB0aGlzLl9kZWYudmFsdWVzKSB7XG4gICAgICAgICAgICBlbnVtVmFsdWVzW3ZhbF0gPSB2YWw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVudW1WYWx1ZXM7XG4gICAgfVxuICAgIGV4dHJhY3QodmFsdWVzLCBuZXdEZWYgPSB0aGlzLl9kZWYpIHtcbiAgICAgICAgcmV0dXJuIFpvZEVudW0uY3JlYXRlKHZhbHVlcywge1xuICAgICAgICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgICAgICAgLi4ubmV3RGVmLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZXhjbHVkZSh2YWx1ZXMsIG5ld0RlZiA9IHRoaXMuX2RlZikge1xuICAgICAgICByZXR1cm4gWm9kRW51bS5jcmVhdGUodGhpcy5vcHRpb25zLmZpbHRlcigob3B0KSA9PiAhdmFsdWVzLmluY2x1ZGVzKG9wdCkpLCB7XG4gICAgICAgICAgICAuLi50aGlzLl9kZWYsXG4gICAgICAgICAgICAuLi5uZXdEZWYsXG4gICAgICAgIH0pO1xuICAgIH1cbn1cblpvZEVudW0uY3JlYXRlID0gY3JlYXRlWm9kRW51bTtcbmV4cG9ydCBjbGFzcyBab2ROYXRpdmVFbnVtIGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IG5hdGl2ZUVudW1WYWx1ZXMgPSB1dGlsLmdldFZhbGlkRW51bVZhbHVlcyh0aGlzLl9kZWYudmFsdWVzKTtcbiAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xuICAgICAgICBpZiAoY3R4LnBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUuc3RyaW5nICYmIGN0eC5wYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlLm51bWJlcikge1xuICAgICAgICAgICAgY29uc3QgZXhwZWN0ZWRWYWx1ZXMgPSB1dGlsLm9iamVjdFZhbHVlcyhuYXRpdmVFbnVtVmFsdWVzKTtcbiAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgIGV4cGVjdGVkOiB1dGlsLmpvaW5WYWx1ZXMoZXhwZWN0ZWRWYWx1ZXMpLFxuICAgICAgICAgICAgICAgIHJlY2VpdmVkOiBjdHgucGFyc2VkVHlwZSxcbiAgICAgICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX2NhY2hlKSB7XG4gICAgICAgICAgICB0aGlzLl9jYWNoZSA9IG5ldyBTZXQodXRpbC5nZXRWYWxpZEVudW1WYWx1ZXModGhpcy5fZGVmLnZhbHVlcykpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5fY2FjaGUuaGFzKGlucHV0LmRhdGEpKSB7XG4gICAgICAgICAgICBjb25zdCBleHBlY3RlZFZhbHVlcyA9IHV0aWwub2JqZWN0VmFsdWVzKG5hdGl2ZUVudW1WYWx1ZXMpO1xuICAgICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICAgICAgcmVjZWl2ZWQ6IGN0eC5kYXRhLFxuICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX2VudW1fdmFsdWUsXG4gICAgICAgICAgICAgICAgb3B0aW9uczogZXhwZWN0ZWRWYWx1ZXMsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBPSyhpbnB1dC5kYXRhKTtcbiAgICB9XG4gICAgZ2V0IGVudW0oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYudmFsdWVzO1xuICAgIH1cbn1cblpvZE5hdGl2ZUVudW0uY3JlYXRlID0gKHZhbHVlcywgcGFyYW1zKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBab2ROYXRpdmVFbnVtKHtcbiAgICAgICAgdmFsdWVzOiB2YWx1ZXMsXG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kTmF0aXZlRW51bSxcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxuICAgIH0pO1xufTtcbmV4cG9ydCBjbGFzcyBab2RQcm9taXNlIGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgdW53cmFwKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVmLnR5cGU7XG4gICAgfVxuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBjb25zdCB7IGN0eCB9ID0gdGhpcy5fcHJvY2Vzc0lucHV0UGFyYW1zKGlucHV0KTtcbiAgICAgICAgaWYgKGN0eC5wYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlLnByb21pc2UgJiYgY3R4LmNvbW1vbi5hc3luYyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3R5cGUsXG4gICAgICAgICAgICAgICAgZXhwZWN0ZWQ6IFpvZFBhcnNlZFR5cGUucHJvbWlzZSxcbiAgICAgICAgICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHByb21pc2lmaWVkID0gY3R4LnBhcnNlZFR5cGUgPT09IFpvZFBhcnNlZFR5cGUucHJvbWlzZSA/IGN0eC5kYXRhIDogUHJvbWlzZS5yZXNvbHZlKGN0eC5kYXRhKTtcbiAgICAgICAgcmV0dXJuIE9LKHByb21pc2lmaWVkLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9kZWYudHlwZS5wYXJzZUFzeW5jKGRhdGEsIHtcbiAgICAgICAgICAgICAgICBwYXRoOiBjdHgucGF0aCxcbiAgICAgICAgICAgICAgICBlcnJvck1hcDogY3R4LmNvbW1vbi5jb250ZXh0dWFsRXJyb3JNYXAsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSkpO1xuICAgIH1cbn1cblpvZFByb21pc2UuY3JlYXRlID0gKHNjaGVtYSwgcGFyYW1zKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBab2RQcm9taXNlKHtcbiAgICAgICAgdHlwZTogc2NoZW1hLFxuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZFByb21pc2UsXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG5leHBvcnQgY2xhc3MgWm9kRWZmZWN0cyBleHRlbmRzIFpvZFR5cGUge1xuICAgIGlubmVyVHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5zY2hlbWE7XG4gICAgfVxuICAgIHNvdXJjZVR5cGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYuc2NoZW1hLl9kZWYudHlwZU5hbWUgPT09IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RFZmZlY3RzXG4gICAgICAgICAgICA/IHRoaXMuX2RlZi5zY2hlbWEuc291cmNlVHlwZSgpXG4gICAgICAgICAgICA6IHRoaXMuX2RlZi5zY2hlbWE7XG4gICAgfVxuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBjb25zdCB7IHN0YXR1cywgY3R4IH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xuICAgICAgICBjb25zdCBlZmZlY3QgPSB0aGlzLl9kZWYuZWZmZWN0IHx8IG51bGw7XG4gICAgICAgIGNvbnN0IGNoZWNrQ3R4ID0ge1xuICAgICAgICAgICAgYWRkSXNzdWU6IChhcmcpID0+IHtcbiAgICAgICAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIGFyZyk7XG4gICAgICAgICAgICAgICAgaWYgKGFyZy5mYXRhbCkge1xuICAgICAgICAgICAgICAgICAgICBzdGF0dXMuYWJvcnQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXQgcGF0aCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY3R4LnBhdGg7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgICAgICBjaGVja0N0eC5hZGRJc3N1ZSA9IGNoZWNrQ3R4LmFkZElzc3VlLmJpbmQoY2hlY2tDdHgpO1xuICAgICAgICBpZiAoZWZmZWN0LnR5cGUgPT09IFwicHJlcHJvY2Vzc1wiKSB7XG4gICAgICAgICAgICBjb25zdCBwcm9jZXNzZWQgPSBlZmZlY3QudHJhbnNmb3JtKGN0eC5kYXRhLCBjaGVja0N0eCk7XG4gICAgICAgICAgICBpZiAoY3R4LmNvbW1vbi5hc3luYykge1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocHJvY2Vzc2VkKS50aGVuKGFzeW5jIChwcm9jZXNzZWQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXR1cy52YWx1ZSA9PT0gXCJhYm9ydGVkXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5fZGVmLnNjaGVtYS5fcGFyc2VBc3luYyh7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBwcm9jZXNzZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXRoOiBjdHgucGF0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudDogY3R4LFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5zdGF0dXMgPT09IFwiYWJvcnRlZFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuc3RhdHVzID09PSBcImRpcnR5XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gRElSVFkocmVzdWx0LnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXR1cy52YWx1ZSA9PT0gXCJkaXJ0eVwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIERJUlRZKHJlc3VsdC52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoc3RhdHVzLnZhbHVlID09PSBcImFib3J0ZWRcIilcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5fZGVmLnNjaGVtYS5fcGFyc2VTeW5jKHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogcHJvY2Vzc2VkLFxuICAgICAgICAgICAgICAgICAgICBwYXRoOiBjdHgucGF0aCxcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50OiBjdHgsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5zdGF0dXMgPT09IFwiYWJvcnRlZFwiKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnN0YXR1cyA9PT0gXCJkaXJ0eVwiKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gRElSVFkocmVzdWx0LnZhbHVlKTtcbiAgICAgICAgICAgICAgICBpZiAoc3RhdHVzLnZhbHVlID09PSBcImRpcnR5XCIpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBESVJUWShyZXN1bHQudmFsdWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVmZmVjdC50eXBlID09PSBcInJlZmluZW1lbnRcIikge1xuICAgICAgICAgICAgY29uc3QgZXhlY3V0ZVJlZmluZW1lbnQgPSAoYWNjKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gZWZmZWN0LnJlZmluZW1lbnQoYWNjLCBjaGVja0N0eCk7XG4gICAgICAgICAgICAgICAgaWYgKGN0eC5jb21tb24uYXN5bmMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBc3luYyByZWZpbmVtZW50IGVuY291bnRlcmVkIGR1cmluZyBzeW5jaHJvbm91cyBwYXJzZSBvcGVyYXRpb24uIFVzZSAucGFyc2VBc3luYyBpbnN0ZWFkLlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoY3R4LmNvbW1vbi5hc3luYyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBpbm5lciA9IHRoaXMuX2RlZi5zY2hlbWEuX3BhcnNlU3luYyh7XG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IGN0eC5kYXRhLFxuICAgICAgICAgICAgICAgICAgICBwYXRoOiBjdHgucGF0aCxcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50OiBjdHgsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKGlubmVyLnN0YXR1cyA9PT0gXCJhYm9ydGVkXCIpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICAgICAgICAgIGlmIChpbm5lci5zdGF0dXMgPT09IFwiZGlydHlcIilcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgLy8gcmV0dXJuIHZhbHVlIGlzIGlnbm9yZWRcbiAgICAgICAgICAgICAgICBleGVjdXRlUmVmaW5lbWVudChpbm5lci52YWx1ZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiBzdGF0dXMudmFsdWUsIHZhbHVlOiBpbm5lci52YWx1ZSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5zY2hlbWEuX3BhcnNlQXN5bmMoeyBkYXRhOiBjdHguZGF0YSwgcGF0aDogY3R4LnBhdGgsIHBhcmVudDogY3R4IH0pLnRoZW4oKGlubmVyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbm5lci5zdGF0dXMgPT09IFwiYWJvcnRlZFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbm5lci5zdGF0dXMgPT09IFwiZGlydHlcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXhlY3V0ZVJlZmluZW1lbnQoaW5uZXIudmFsdWUpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiBzdGF0dXMudmFsdWUsIHZhbHVlOiBpbm5lci52YWx1ZSB9O1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZWZmZWN0LnR5cGUgPT09IFwidHJhbnNmb3JtXCIpIHtcbiAgICAgICAgICAgIGlmIChjdHguY29tbW9uLmFzeW5jID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGJhc2UgPSB0aGlzLl9kZWYuc2NoZW1hLl9wYXJzZVN5bmMoe1xuICAgICAgICAgICAgICAgICAgICBkYXRhOiBjdHguZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudDogY3R4LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmICghaXNWYWxpZChiYXNlKSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gZWZmZWN0LnRyYW5zZm9ybShiYXNlLnZhbHVlLCBjaGVja0N0eCk7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBBc3luY2hyb25vdXMgdHJhbnNmb3JtIGVuY291bnRlcmVkIGR1cmluZyBzeW5jaHJvbm91cyBwYXJzZSBvcGVyYXRpb24uIFVzZSAucGFyc2VBc3luYyBpbnN0ZWFkLmApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4geyBzdGF0dXM6IHN0YXR1cy52YWx1ZSwgdmFsdWU6IHJlc3VsdCB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5zY2hlbWEuX3BhcnNlQXN5bmMoeyBkYXRhOiBjdHguZGF0YSwgcGF0aDogY3R4LnBhdGgsIHBhcmVudDogY3R4IH0pLnRoZW4oKGJhc2UpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1ZhbGlkKGJhc2UpKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZWZmZWN0LnRyYW5zZm9ybShiYXNlLnZhbHVlLCBjaGVja0N0eCkpLnRoZW4oKHJlc3VsdCkgPT4gKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1czogc3RhdHVzLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHJlc3VsdCxcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHV0aWwuYXNzZXJ0TmV2ZXIoZWZmZWN0KTtcbiAgICB9XG59XG5ab2RFZmZlY3RzLmNyZWF0ZSA9IChzY2hlbWEsIGVmZmVjdCwgcGFyYW1zKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBab2RFZmZlY3RzKHtcbiAgICAgICAgc2NoZW1hLFxuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZEVmZmVjdHMsXG4gICAgICAgIGVmZmVjdCxcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxuICAgIH0pO1xufTtcblpvZEVmZmVjdHMuY3JlYXRlV2l0aFByZXByb2Nlc3MgPSAocHJlcHJvY2Vzcywgc2NoZW1hLCBwYXJhbXMpID0+IHtcbiAgICByZXR1cm4gbmV3IFpvZEVmZmVjdHMoe1xuICAgICAgICBzY2hlbWEsXG4gICAgICAgIGVmZmVjdDogeyB0eXBlOiBcInByZXByb2Nlc3NcIiwgdHJhbnNmb3JtOiBwcmVwcm9jZXNzIH0sXG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kRWZmZWN0cyxcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxuICAgIH0pO1xufTtcbmV4cG9ydCB7IFpvZEVmZmVjdHMgYXMgWm9kVHJhbnNmb3JtZXIgfTtcbmV4cG9ydCBjbGFzcyBab2RPcHRpb25hbCBleHRlbmRzIFpvZFR5cGUge1xuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBjb25zdCBwYXJzZWRUeXBlID0gdGhpcy5fZ2V0VHlwZShpbnB1dCk7XG4gICAgICAgIGlmIChwYXJzZWRUeXBlID09PSBab2RQYXJzZWRUeXBlLnVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIE9LKHVuZGVmaW5lZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5pbm5lclR5cGUuX3BhcnNlKGlucHV0KTtcbiAgICB9XG4gICAgdW53cmFwKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVmLmlubmVyVHlwZTtcbiAgICB9XG59XG5ab2RPcHRpb25hbC5jcmVhdGUgPSAodHlwZSwgcGFyYW1zKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBab2RPcHRpb25hbCh7XG4gICAgICAgIGlubmVyVHlwZTogdHlwZSxcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RPcHRpb25hbCxcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxuICAgIH0pO1xufTtcbmV4cG9ydCBjbGFzcyBab2ROdWxsYWJsZSBleHRlbmRzIFpvZFR5cGUge1xuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBjb25zdCBwYXJzZWRUeXBlID0gdGhpcy5fZ2V0VHlwZShpbnB1dCk7XG4gICAgICAgIGlmIChwYXJzZWRUeXBlID09PSBab2RQYXJzZWRUeXBlLm51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBPSyhudWxsKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fZGVmLmlubmVyVHlwZS5fcGFyc2UoaW5wdXQpO1xuICAgIH1cbiAgICB1bndyYXAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYuaW5uZXJUeXBlO1xuICAgIH1cbn1cblpvZE51bGxhYmxlLmNyZWF0ZSA9ICh0eXBlLCBwYXJhbXMpID0+IHtcbiAgICByZXR1cm4gbmV3IFpvZE51bGxhYmxlKHtcbiAgICAgICAgaW5uZXJUeXBlOiB0eXBlLFxuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZE51bGxhYmxlLFxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgfSk7XG59O1xuZXhwb3J0IGNsYXNzIFpvZERlZmF1bHQgZXh0ZW5kcyBab2RUeXBlIHtcbiAgICBfcGFyc2UoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgeyBjdHggfSA9IHRoaXMuX3Byb2Nlc3NJbnB1dFBhcmFtcyhpbnB1dCk7XG4gICAgICAgIGxldCBkYXRhID0gY3R4LmRhdGE7XG4gICAgICAgIGlmIChjdHgucGFyc2VkVHlwZSA9PT0gWm9kUGFyc2VkVHlwZS51bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGRhdGEgPSB0aGlzLl9kZWYuZGVmYXVsdFZhbHVlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5pbm5lclR5cGUuX3BhcnNlKHtcbiAgICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgICBwYXRoOiBjdHgucGF0aCxcbiAgICAgICAgICAgIHBhcmVudDogY3R4LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmVtb3ZlRGVmYXVsdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5pbm5lclR5cGU7XG4gICAgfVxufVxuWm9kRGVmYXVsdC5jcmVhdGUgPSAodHlwZSwgcGFyYW1zKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBab2REZWZhdWx0KHtcbiAgICAgICAgaW5uZXJUeXBlOiB0eXBlLFxuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZERlZmF1bHQsXG4gICAgICAgIGRlZmF1bHRWYWx1ZTogdHlwZW9mIHBhcmFtcy5kZWZhdWx0ID09PSBcImZ1bmN0aW9uXCIgPyBwYXJhbXMuZGVmYXVsdCA6ICgpID0+IHBhcmFtcy5kZWZhdWx0LFxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgfSk7XG59O1xuZXhwb3J0IGNsYXNzIFpvZENhdGNoIGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IHsgY3R4IH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xuICAgICAgICAvLyBuZXdDdHggaXMgdXNlZCB0byBub3QgY29sbGVjdCBpc3N1ZXMgZnJvbSBpbm5lciB0eXBlcyBpbiBjdHhcbiAgICAgICAgY29uc3QgbmV3Q3R4ID0ge1xuICAgICAgICAgICAgLi4uY3R4LFxuICAgICAgICAgICAgY29tbW9uOiB7XG4gICAgICAgICAgICAgICAgLi4uY3R4LmNvbW1vbixcbiAgICAgICAgICAgICAgICBpc3N1ZXM6IFtdLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5fZGVmLmlubmVyVHlwZS5fcGFyc2Uoe1xuICAgICAgICAgICAgZGF0YTogbmV3Q3R4LmRhdGEsXG4gICAgICAgICAgICBwYXRoOiBuZXdDdHgucGF0aCxcbiAgICAgICAgICAgIHBhcmVudDoge1xuICAgICAgICAgICAgICAgIC4uLm5ld0N0eCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoaXNBc3luYyhyZXN1bHQpKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0LnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1czogXCJ2YWxpZFwiLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogcmVzdWx0LnN0YXR1cyA9PT0gXCJ2YWxpZFwiXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHJlc3VsdC52YWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgOiB0aGlzLl9kZWYuY2F0Y2hWYWx1ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0IGVycm9yKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFpvZEVycm9yKG5ld0N0eC5jb21tb24uaXNzdWVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0OiBuZXdDdHguZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgc3RhdHVzOiBcInZhbGlkXCIsXG4gICAgICAgICAgICAgICAgdmFsdWU6IHJlc3VsdC5zdGF0dXMgPT09IFwidmFsaWRcIlxuICAgICAgICAgICAgICAgICAgICA/IHJlc3VsdC52YWx1ZVxuICAgICAgICAgICAgICAgICAgICA6IHRoaXMuX2RlZi5jYXRjaFZhbHVlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldCBlcnJvcigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFpvZEVycm9yKG5ld0N0eC5jb21tb24uaXNzdWVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dDogbmV3Q3R4LmRhdGEsXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZW1vdmVDYXRjaCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5pbm5lclR5cGU7XG4gICAgfVxufVxuWm9kQ2F0Y2guY3JlYXRlID0gKHR5cGUsIHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kQ2F0Y2goe1xuICAgICAgICBpbm5lclR5cGU6IHR5cGUsXG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kQ2F0Y2gsXG4gICAgICAgIGNhdGNoVmFsdWU6IHR5cGVvZiBwYXJhbXMuY2F0Y2ggPT09IFwiZnVuY3Rpb25cIiA/IHBhcmFtcy5jYXRjaCA6ICgpID0+IHBhcmFtcy5jYXRjaCxcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpLFxuICAgIH0pO1xufTtcbmV4cG9ydCBjbGFzcyBab2ROYU4gZXh0ZW5kcyBab2RUeXBlIHtcbiAgICBfcGFyc2UoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgcGFyc2VkVHlwZSA9IHRoaXMuX2dldFR5cGUoaW5wdXQpO1xuICAgICAgICBpZiAocGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZS5uYW4pIHtcbiAgICAgICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0KTtcbiAgICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3R5cGUsXG4gICAgICAgICAgICAgICAgZXhwZWN0ZWQ6IFpvZFBhcnNlZFR5cGUubmFuLFxuICAgICAgICAgICAgICAgIHJlY2VpdmVkOiBjdHgucGFyc2VkVHlwZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiBcInZhbGlkXCIsIHZhbHVlOiBpbnB1dC5kYXRhIH07XG4gICAgfVxufVxuWm9kTmFOLmNyZWF0ZSA9IChwYXJhbXMpID0+IHtcbiAgICByZXR1cm4gbmV3IFpvZE5hTih7XG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kTmFOLFxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcyksXG4gICAgfSk7XG59O1xuZXhwb3J0IGNvbnN0IEJSQU5EID0gU3ltYm9sKFwiem9kX2JyYW5kXCIpO1xuZXhwb3J0IGNsYXNzIFpvZEJyYW5kZWQgZXh0ZW5kcyBab2RUeXBlIHtcbiAgICBfcGFyc2UoaW5wdXQpIHtcbiAgICAgICAgY29uc3QgeyBjdHggfSA9IHRoaXMuX3Byb2Nlc3NJbnB1dFBhcmFtcyhpbnB1dCk7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBjdHguZGF0YTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi50eXBlLl9wYXJzZSh7XG4gICAgICAgICAgICBkYXRhLFxuICAgICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgICBwYXJlbnQ6IGN0eCxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHVud3JhcCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi50eXBlO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBab2RQaXBlbGluZSBleHRlbmRzIFpvZFR5cGUge1xuICAgIF9wYXJzZShpbnB1dCkge1xuICAgICAgICBjb25zdCB7IHN0YXR1cywgY3R4IH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xuICAgICAgICBpZiAoY3R4LmNvbW1vbi5hc3luYykge1xuICAgICAgICAgICAgY29uc3QgaGFuZGxlQXN5bmMgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaW5SZXN1bHQgPSBhd2FpdCB0aGlzLl9kZWYuaW4uX3BhcnNlQXN5bmMoe1xuICAgICAgICAgICAgICAgICAgICBkYXRhOiBjdHguZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudDogY3R4LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmIChpblJlc3VsdC5zdGF0dXMgPT09IFwiYWJvcnRlZFwiKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgICAgICAgICBpZiAoaW5SZXN1bHQuc3RhdHVzID09PSBcImRpcnR5XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBESVJUWShpblJlc3VsdC52YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZGVmLm91dC5fcGFyc2VBc3luYyh7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBpblJlc3VsdC52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50OiBjdHgsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gaGFuZGxlQXN5bmMoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGluUmVzdWx0ID0gdGhpcy5fZGVmLmluLl9wYXJzZVN5bmMoe1xuICAgICAgICAgICAgICAgIGRhdGE6IGN0eC5kYXRhLFxuICAgICAgICAgICAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgICAgICAgICAgIHBhcmVudDogY3R4LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoaW5SZXN1bHQuc3RhdHVzID09PSBcImFib3J0ZWRcIilcbiAgICAgICAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgICAgIGlmIChpblJlc3VsdC5zdGF0dXMgPT09IFwiZGlydHlcIikge1xuICAgICAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1czogXCJkaXJ0eVwiLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogaW5SZXN1bHQudmFsdWUsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9kZWYub3V0Ll9wYXJzZVN5bmMoe1xuICAgICAgICAgICAgICAgICAgICBkYXRhOiBpblJlc3VsdC52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudDogY3R4LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHN0YXRpYyBjcmVhdGUoYSwgYikge1xuICAgICAgICByZXR1cm4gbmV3IFpvZFBpcGVsaW5lKHtcbiAgICAgICAgICAgIGluOiBhLFxuICAgICAgICAgICAgb3V0OiBiLFxuICAgICAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RQaXBlbGluZSxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFpvZFJlYWRvbmx5IGV4dGVuZHMgWm9kVHlwZSB7XG4gICAgX3BhcnNlKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuX2RlZi5pbm5lclR5cGUuX3BhcnNlKGlucHV0KTtcbiAgICAgICAgY29uc3QgZnJlZXplID0gKGRhdGEpID0+IHtcbiAgICAgICAgICAgIGlmIChpc1ZhbGlkKGRhdGEpKSB7XG4gICAgICAgICAgICAgICAgZGF0YS52YWx1ZSA9IE9iamVjdC5mcmVlemUoZGF0YS52YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGlzQXN5bmMocmVzdWx0KSA/IHJlc3VsdC50aGVuKChkYXRhKSA9PiBmcmVlemUoZGF0YSkpIDogZnJlZXplKHJlc3VsdCk7XG4gICAgfVxuICAgIHVud3JhcCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5pbm5lclR5cGU7XG4gICAgfVxufVxuWm9kUmVhZG9ubHkuY3JlYXRlID0gKHR5cGUsIHBhcmFtcykgPT4ge1xuICAgIHJldHVybiBuZXcgWm9kUmVhZG9ubHkoe1xuICAgICAgICBpbm5lclR5cGU6IHR5cGUsXG4gICAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kUmVhZG9ubHksXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKSxcbiAgICB9KTtcbn07XG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLy8vLy8vLy8vICAgICAgICAgICAgICAgICAgICAvLy8vLy8vLy8vXG4vLy8vLy8vLy8vICAgICAgei5jdXN0b20gICAgICAvLy8vLy8vLy8vXG4vLy8vLy8vLy8vICAgICAgICAgICAgICAgICAgICAvLy8vLy8vLy8vXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5mdW5jdGlvbiBjbGVhblBhcmFtcyhwYXJhbXMsIGRhdGEpIHtcbiAgICBjb25zdCBwID0gdHlwZW9mIHBhcmFtcyA9PT0gXCJmdW5jdGlvblwiID8gcGFyYW1zKGRhdGEpIDogdHlwZW9mIHBhcmFtcyA9PT0gXCJzdHJpbmdcIiA/IHsgbWVzc2FnZTogcGFyYW1zIH0gOiBwYXJhbXM7XG4gICAgY29uc3QgcDIgPSB0eXBlb2YgcCA9PT0gXCJzdHJpbmdcIiA/IHsgbWVzc2FnZTogcCB9IDogcDtcbiAgICByZXR1cm4gcDI7XG59XG5leHBvcnQgZnVuY3Rpb24gY3VzdG9tKGNoZWNrLCBfcGFyYW1zID0ge30sIFxuLyoqXG4gKiBAZGVwcmVjYXRlZFxuICpcbiAqIFBhc3MgYGZhdGFsYCBpbnRvIHRoZSBwYXJhbXMgb2JqZWN0IGluc3RlYWQ6XG4gKlxuICogYGBgdHNcbiAqIHouc3RyaW5nKCkuY3VzdG9tKCh2YWwpID0+IHZhbC5sZW5ndGggPiA1LCB7IGZhdGFsOiBmYWxzZSB9KVxuICogYGBgXG4gKlxuICovXG5mYXRhbCkge1xuICAgIGlmIChjaGVjaylcbiAgICAgICAgcmV0dXJuIFpvZEFueS5jcmVhdGUoKS5zdXBlclJlZmluZSgoZGF0YSwgY3R4KSA9PiB7XG4gICAgICAgICAgICBjb25zdCByID0gY2hlY2soZGF0YSk7XG4gICAgICAgICAgICBpZiAociBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gci50aGVuKChyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFyYW1zID0gY2xlYW5QYXJhbXMoX3BhcmFtcywgZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBfZmF0YWwgPSBwYXJhbXMuZmF0YWwgPz8gZmF0YWwgPz8gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5hZGRJc3N1ZSh7IGNvZGU6IFwiY3VzdG9tXCIsIC4uLnBhcmFtcywgZmF0YWw6IF9mYXRhbCB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFyKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFyYW1zID0gY2xlYW5QYXJhbXMoX3BhcmFtcywgZGF0YSk7XG4gICAgICAgICAgICAgICAgY29uc3QgX2ZhdGFsID0gcGFyYW1zLmZhdGFsID8/IGZhdGFsID8/IHRydWU7XG4gICAgICAgICAgICAgICAgY3R4LmFkZElzc3VlKHsgY29kZTogXCJjdXN0b21cIiwgLi4ucGFyYW1zLCBmYXRhbDogX2ZhdGFsIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9KTtcbiAgICByZXR1cm4gWm9kQW55LmNyZWF0ZSgpO1xufVxuZXhwb3J0IHsgWm9kVHlwZSBhcyBTY2hlbWEsIFpvZFR5cGUgYXMgWm9kU2NoZW1hIH07XG5leHBvcnQgY29uc3QgbGF0ZSA9IHtcbiAgICBvYmplY3Q6IFpvZE9iamVjdC5sYXp5Y3JlYXRlLFxufTtcbmV4cG9ydCB2YXIgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kO1xuKGZ1bmN0aW9uIChab2RGaXJzdFBhcnR5VHlwZUtpbmQpIHtcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2RTdHJpbmdcIl0gPSBcIlpvZFN0cmluZ1wiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZE51bWJlclwiXSA9IFwiWm9kTnVtYmVyXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kTmFOXCJdID0gXCJab2ROYU5cIjtcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2RCaWdJbnRcIl0gPSBcIlpvZEJpZ0ludFwiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZEJvb2xlYW5cIl0gPSBcIlpvZEJvb2xlYW5cIjtcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2REYXRlXCJdID0gXCJab2REYXRlXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kU3ltYm9sXCJdID0gXCJab2RTeW1ib2xcIjtcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2RVbmRlZmluZWRcIl0gPSBcIlpvZFVuZGVmaW5lZFwiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZE51bGxcIl0gPSBcIlpvZE51bGxcIjtcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2RBbnlcIl0gPSBcIlpvZEFueVwiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZFVua25vd25cIl0gPSBcIlpvZFVua25vd25cIjtcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2ROZXZlclwiXSA9IFwiWm9kTmV2ZXJcIjtcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2RWb2lkXCJdID0gXCJab2RWb2lkXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kQXJyYXlcIl0gPSBcIlpvZEFycmF5XCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kT2JqZWN0XCJdID0gXCJab2RPYmplY3RcIjtcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2RVbmlvblwiXSA9IFwiWm9kVW5pb25cIjtcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2REaXNjcmltaW5hdGVkVW5pb25cIl0gPSBcIlpvZERpc2NyaW1pbmF0ZWRVbmlvblwiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZEludGVyc2VjdGlvblwiXSA9IFwiWm9kSW50ZXJzZWN0aW9uXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kVHVwbGVcIl0gPSBcIlpvZFR1cGxlXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kUmVjb3JkXCJdID0gXCJab2RSZWNvcmRcIjtcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2RNYXBcIl0gPSBcIlpvZE1hcFwiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZFNldFwiXSA9IFwiWm9kU2V0XCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kRnVuY3Rpb25cIl0gPSBcIlpvZEZ1bmN0aW9uXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kTGF6eVwiXSA9IFwiWm9kTGF6eVwiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZExpdGVyYWxcIl0gPSBcIlpvZExpdGVyYWxcIjtcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2RFbnVtXCJdID0gXCJab2RFbnVtXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kRWZmZWN0c1wiXSA9IFwiWm9kRWZmZWN0c1wiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZE5hdGl2ZUVudW1cIl0gPSBcIlpvZE5hdGl2ZUVudW1cIjtcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2RPcHRpb25hbFwiXSA9IFwiWm9kT3B0aW9uYWxcIjtcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2ROdWxsYWJsZVwiXSA9IFwiWm9kTnVsbGFibGVcIjtcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2REZWZhdWx0XCJdID0gXCJab2REZWZhdWx0XCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kQ2F0Y2hcIl0gPSBcIlpvZENhdGNoXCI7XG4gICAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kW1wiWm9kUHJvbWlzZVwiXSA9IFwiWm9kUHJvbWlzZVwiO1xuICAgIFpvZEZpcnN0UGFydHlUeXBlS2luZFtcIlpvZEJyYW5kZWRcIl0gPSBcIlpvZEJyYW5kZWRcIjtcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2RQaXBlbGluZVwiXSA9IFwiWm9kUGlwZWxpbmVcIjtcbiAgICBab2RGaXJzdFBhcnR5VHlwZUtpbmRbXCJab2RSZWFkb25seVwiXSA9IFwiWm9kUmVhZG9ubHlcIjtcbn0pKFpvZEZpcnN0UGFydHlUeXBlS2luZCB8fCAoWm9kRmlyc3RQYXJ0eVR5cGVLaW5kID0ge30pKTtcbi8vIHJlcXVpcmVzIFRTIDQuNCtcbmNsYXNzIENsYXNzIHtcbiAgICBjb25zdHJ1Y3RvciguLi5fKSB7IH1cbn1cbmNvbnN0IGluc3RhbmNlT2ZUeXBlID0gKFxuLy8gY29uc3QgaW5zdGFuY2VPZlR5cGUgPSA8VCBleHRlbmRzIG5ldyAoLi4uYXJnczogYW55W10pID0+IGFueT4oXG5jbHMsIHBhcmFtcyA9IHtcbiAgICBtZXNzYWdlOiBgSW5wdXQgbm90IGluc3RhbmNlIG9mICR7Y2xzLm5hbWV9YCxcbn0pID0+IGN1c3RvbSgoZGF0YSkgPT4gZGF0YSBpbnN0YW5jZW9mIGNscywgcGFyYW1zKTtcbmNvbnN0IHN0cmluZ1R5cGUgPSBab2RTdHJpbmcuY3JlYXRlO1xuY29uc3QgbnVtYmVyVHlwZSA9IFpvZE51bWJlci5jcmVhdGU7XG5jb25zdCBuYW5UeXBlID0gWm9kTmFOLmNyZWF0ZTtcbmNvbnN0IGJpZ0ludFR5cGUgPSBab2RCaWdJbnQuY3JlYXRlO1xuY29uc3QgYm9vbGVhblR5cGUgPSBab2RCb29sZWFuLmNyZWF0ZTtcbmNvbnN0IGRhdGVUeXBlID0gWm9kRGF0ZS5jcmVhdGU7XG5jb25zdCBzeW1ib2xUeXBlID0gWm9kU3ltYm9sLmNyZWF0ZTtcbmNvbnN0IHVuZGVmaW5lZFR5cGUgPSBab2RVbmRlZmluZWQuY3JlYXRlO1xuY29uc3QgbnVsbFR5cGUgPSBab2ROdWxsLmNyZWF0ZTtcbmNvbnN0IGFueVR5cGUgPSBab2RBbnkuY3JlYXRlO1xuY29uc3QgdW5rbm93blR5cGUgPSBab2RVbmtub3duLmNyZWF0ZTtcbmNvbnN0IG5ldmVyVHlwZSA9IFpvZE5ldmVyLmNyZWF0ZTtcbmNvbnN0IHZvaWRUeXBlID0gWm9kVm9pZC5jcmVhdGU7XG5jb25zdCBhcnJheVR5cGUgPSBab2RBcnJheS5jcmVhdGU7XG5jb25zdCBvYmplY3RUeXBlID0gWm9kT2JqZWN0LmNyZWF0ZTtcbmNvbnN0IHN0cmljdE9iamVjdFR5cGUgPSBab2RPYmplY3Quc3RyaWN0Q3JlYXRlO1xuY29uc3QgdW5pb25UeXBlID0gWm9kVW5pb24uY3JlYXRlO1xuY29uc3QgZGlzY3JpbWluYXRlZFVuaW9uVHlwZSA9IFpvZERpc2NyaW1pbmF0ZWRVbmlvbi5jcmVhdGU7XG5jb25zdCBpbnRlcnNlY3Rpb25UeXBlID0gWm9kSW50ZXJzZWN0aW9uLmNyZWF0ZTtcbmNvbnN0IHR1cGxlVHlwZSA9IFpvZFR1cGxlLmNyZWF0ZTtcbmNvbnN0IHJlY29yZFR5cGUgPSBab2RSZWNvcmQuY3JlYXRlO1xuY29uc3QgbWFwVHlwZSA9IFpvZE1hcC5jcmVhdGU7XG5jb25zdCBzZXRUeXBlID0gWm9kU2V0LmNyZWF0ZTtcbmNvbnN0IGZ1bmN0aW9uVHlwZSA9IFpvZEZ1bmN0aW9uLmNyZWF0ZTtcbmNvbnN0IGxhenlUeXBlID0gWm9kTGF6eS5jcmVhdGU7XG5jb25zdCBsaXRlcmFsVHlwZSA9IFpvZExpdGVyYWwuY3JlYXRlO1xuY29uc3QgZW51bVR5cGUgPSBab2RFbnVtLmNyZWF0ZTtcbmNvbnN0IG5hdGl2ZUVudW1UeXBlID0gWm9kTmF0aXZlRW51bS5jcmVhdGU7XG5jb25zdCBwcm9taXNlVHlwZSA9IFpvZFByb21pc2UuY3JlYXRlO1xuY29uc3QgZWZmZWN0c1R5cGUgPSBab2RFZmZlY3RzLmNyZWF0ZTtcbmNvbnN0IG9wdGlvbmFsVHlwZSA9IFpvZE9wdGlvbmFsLmNyZWF0ZTtcbmNvbnN0IG51bGxhYmxlVHlwZSA9IFpvZE51bGxhYmxlLmNyZWF0ZTtcbmNvbnN0IHByZXByb2Nlc3NUeXBlID0gWm9kRWZmZWN0cy5jcmVhdGVXaXRoUHJlcHJvY2VzcztcbmNvbnN0IHBpcGVsaW5lVHlwZSA9IFpvZFBpcGVsaW5lLmNyZWF0ZTtcbmNvbnN0IG9zdHJpbmcgPSAoKSA9PiBzdHJpbmdUeXBlKCkub3B0aW9uYWwoKTtcbmNvbnN0IG9udW1iZXIgPSAoKSA9PiBudW1iZXJUeXBlKCkub3B0aW9uYWwoKTtcbmNvbnN0IG9ib29sZWFuID0gKCkgPT4gYm9vbGVhblR5cGUoKS5vcHRpb25hbCgpO1xuZXhwb3J0IGNvbnN0IGNvZXJjZSA9IHtcbiAgICBzdHJpbmc6ICgoYXJnKSA9PiBab2RTdHJpbmcuY3JlYXRlKHsgLi4uYXJnLCBjb2VyY2U6IHRydWUgfSkpLFxuICAgIG51bWJlcjogKChhcmcpID0+IFpvZE51bWJlci5jcmVhdGUoeyAuLi5hcmcsIGNvZXJjZTogdHJ1ZSB9KSksXG4gICAgYm9vbGVhbjogKChhcmcpID0+IFpvZEJvb2xlYW4uY3JlYXRlKHtcbiAgICAgICAgLi4uYXJnLFxuICAgICAgICBjb2VyY2U6IHRydWUsXG4gICAgfSkpLFxuICAgIGJpZ2ludDogKChhcmcpID0+IFpvZEJpZ0ludC5jcmVhdGUoeyAuLi5hcmcsIGNvZXJjZTogdHJ1ZSB9KSksXG4gICAgZGF0ZTogKChhcmcpID0+IFpvZERhdGUuY3JlYXRlKHsgLi4uYXJnLCBjb2VyY2U6IHRydWUgfSkpLFxufTtcbmV4cG9ydCB7IGFueVR5cGUgYXMgYW55LCBhcnJheVR5cGUgYXMgYXJyYXksIGJpZ0ludFR5cGUgYXMgYmlnaW50LCBib29sZWFuVHlwZSBhcyBib29sZWFuLCBkYXRlVHlwZSBhcyBkYXRlLCBkaXNjcmltaW5hdGVkVW5pb25UeXBlIGFzIGRpc2NyaW1pbmF0ZWRVbmlvbiwgZWZmZWN0c1R5cGUgYXMgZWZmZWN0LCBlbnVtVHlwZSBhcyBlbnVtLCBmdW5jdGlvblR5cGUgYXMgZnVuY3Rpb24sIGluc3RhbmNlT2ZUeXBlIGFzIGluc3RhbmNlb2YsIGludGVyc2VjdGlvblR5cGUgYXMgaW50ZXJzZWN0aW9uLCBsYXp5VHlwZSBhcyBsYXp5LCBsaXRlcmFsVHlwZSBhcyBsaXRlcmFsLCBtYXBUeXBlIGFzIG1hcCwgbmFuVHlwZSBhcyBuYW4sIG5hdGl2ZUVudW1UeXBlIGFzIG5hdGl2ZUVudW0sIG5ldmVyVHlwZSBhcyBuZXZlciwgbnVsbFR5cGUgYXMgbnVsbCwgbnVsbGFibGVUeXBlIGFzIG51bGxhYmxlLCBudW1iZXJUeXBlIGFzIG51bWJlciwgb2JqZWN0VHlwZSBhcyBvYmplY3QsIG9ib29sZWFuLCBvbnVtYmVyLCBvcHRpb25hbFR5cGUgYXMgb3B0aW9uYWwsIG9zdHJpbmcsIHBpcGVsaW5lVHlwZSBhcyBwaXBlbGluZSwgcHJlcHJvY2Vzc1R5cGUgYXMgcHJlcHJvY2VzcywgcHJvbWlzZVR5cGUgYXMgcHJvbWlzZSwgcmVjb3JkVHlwZSBhcyByZWNvcmQsIHNldFR5cGUgYXMgc2V0LCBzdHJpY3RPYmplY3RUeXBlIGFzIHN0cmljdE9iamVjdCwgc3RyaW5nVHlwZSBhcyBzdHJpbmcsIHN5bWJvbFR5cGUgYXMgc3ltYm9sLCBlZmZlY3RzVHlwZSBhcyB0cmFuc2Zvcm1lciwgdHVwbGVUeXBlIGFzIHR1cGxlLCB1bmRlZmluZWRUeXBlIGFzIHVuZGVmaW5lZCwgdW5pb25UeXBlIGFzIHVuaW9uLCB1bmtub3duVHlwZSBhcyB1bmtub3duLCB2b2lkVHlwZSBhcyB2b2lkLCB9O1xuZXhwb3J0IGNvbnN0IE5FVkVSID0gSU5WQUxJRDtcbiIsImV4cG9ydCBmdW5jdGlvbiBwYXJzZUFueURlZigpIHtcbiAgICByZXR1cm4ge307XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hbnkubWpzLm1hcCIsImltcG9ydCB7IFpvZEZpcnN0UGFydHlUeXBlS2luZCB9IGZyb20gJ3pvZCc7XG5pbXBvcnQgeyBzZXRSZXNwb25zZVZhbHVlQW5kRXJyb3JzIH0gZnJvbSBcIi4uL2Vycm9yTWVzc2FnZXMubWpzXCI7XG5pbXBvcnQgeyBwYXJzZURlZiB9IGZyb20gXCIuLi9wYXJzZURlZi5tanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUFycmF5RGVmKGRlZiwgcmVmcykge1xuICAgIGNvbnN0IHJlcyA9IHtcbiAgICAgICAgdHlwZTogJ2FycmF5JyxcbiAgICB9O1xuICAgIGlmIChkZWYudHlwZT8uX2RlZj8udHlwZU5hbWUgIT09IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RBbnkpIHtcbiAgICAgICAgcmVzLml0ZW1zID0gcGFyc2VEZWYoZGVmLnR5cGUuX2RlZiwge1xuICAgICAgICAgICAgLi4ucmVmcyxcbiAgICAgICAgICAgIGN1cnJlbnRQYXRoOiBbLi4ucmVmcy5jdXJyZW50UGF0aCwgJ2l0ZW1zJ10sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoZGVmLm1pbkxlbmd0aCkge1xuICAgICAgICBzZXRSZXNwb25zZVZhbHVlQW5kRXJyb3JzKHJlcywgJ21pbkl0ZW1zJywgZGVmLm1pbkxlbmd0aC52YWx1ZSwgZGVmLm1pbkxlbmd0aC5tZXNzYWdlLCByZWZzKTtcbiAgICB9XG4gICAgaWYgKGRlZi5tYXhMZW5ndGgpIHtcbiAgICAgICAgc2V0UmVzcG9uc2VWYWx1ZUFuZEVycm9ycyhyZXMsICdtYXhJdGVtcycsIGRlZi5tYXhMZW5ndGgudmFsdWUsIGRlZi5tYXhMZW5ndGgubWVzc2FnZSwgcmVmcyk7XG4gICAgfVxuICAgIGlmIChkZWYuZXhhY3RMZW5ndGgpIHtcbiAgICAgICAgc2V0UmVzcG9uc2VWYWx1ZUFuZEVycm9ycyhyZXMsICdtaW5JdGVtcycsIGRlZi5leGFjdExlbmd0aC52YWx1ZSwgZGVmLmV4YWN0TGVuZ3RoLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICBzZXRSZXNwb25zZVZhbHVlQW5kRXJyb3JzKHJlcywgJ21heEl0ZW1zJywgZGVmLmV4YWN0TGVuZ3RoLnZhbHVlLCBkZWYuZXhhY3RMZW5ndGgubWVzc2FnZSwgcmVmcyk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcnJheS5tanMubWFwIiwiaW1wb3J0IHsgc2V0UmVzcG9uc2VWYWx1ZUFuZEVycm9ycyB9IGZyb20gXCIuLi9lcnJvck1lc3NhZ2VzLm1qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlQmlnaW50RGVmKGRlZiwgcmVmcykge1xuICAgIGNvbnN0IHJlcyA9IHtcbiAgICAgICAgdHlwZTogJ2ludGVnZXInLFxuICAgICAgICBmb3JtYXQ6ICdpbnQ2NCcsXG4gICAgfTtcbiAgICBpZiAoIWRlZi5jaGVja3MpXG4gICAgICAgIHJldHVybiByZXM7XG4gICAgZm9yIChjb25zdCBjaGVjayBvZiBkZWYuY2hlY2tzKSB7XG4gICAgICAgIHN3aXRjaCAoY2hlY2sua2luZCkge1xuICAgICAgICAgICAgY2FzZSAnbWluJzpcbiAgICAgICAgICAgICAgICBpZiAocmVmcy50YXJnZXQgPT09ICdqc29uU2NoZW1hNycpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoZWNrLmluY2x1c2l2ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0UmVzcG9uc2VWYWx1ZUFuZEVycm9ycyhyZXMsICdtaW5pbXVtJywgY2hlY2sudmFsdWUsIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0UmVzcG9uc2VWYWx1ZUFuZEVycm9ycyhyZXMsICdleGNsdXNpdmVNaW5pbXVtJywgY2hlY2sudmFsdWUsIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWNoZWNrLmluY2x1c2l2ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzLmV4Y2x1c2l2ZU1pbmltdW0gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHNldFJlc3BvbnNlVmFsdWVBbmRFcnJvcnMocmVzLCAnbWluaW11bScsIGNoZWNrLnZhbHVlLCBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtYXgnOlxuICAgICAgICAgICAgICAgIGlmIChyZWZzLnRhcmdldCA9PT0gJ2pzb25TY2hlbWE3Jykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2hlY2suaW5jbHVzaXZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRSZXNwb25zZVZhbHVlQW5kRXJyb3JzKHJlcywgJ21heGltdW0nLCBjaGVjay52YWx1ZSwgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRSZXNwb25zZVZhbHVlQW5kRXJyb3JzKHJlcywgJ2V4Y2x1c2l2ZU1heGltdW0nLCBjaGVjay52YWx1ZSwgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghY2hlY2suaW5jbHVzaXZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXMuZXhjbHVzaXZlTWF4aW11bSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc2V0UmVzcG9uc2VWYWx1ZUFuZEVycm9ycyhyZXMsICdtYXhpbXVtJywgY2hlY2sudmFsdWUsIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ211bHRpcGxlT2YnOlxuICAgICAgICAgICAgICAgIHNldFJlc3BvbnNlVmFsdWVBbmRFcnJvcnMocmVzLCAnbXVsdGlwbGVPZicsIGNoZWNrLnZhbHVlLCBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmlnaW50Lm1qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gcGFyc2VCb29sZWFuRGVmKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdib29sZWFuJyxcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Ym9vbGVhbi5tanMubWFwIiwiaW1wb3J0IHsgcGFyc2VEZWYgfSBmcm9tIFwiLi4vcGFyc2VEZWYubWpzXCI7XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VCcmFuZGVkRGVmKF9kZWYsIHJlZnMpIHtcbiAgICByZXR1cm4gcGFyc2VEZWYoX2RlZi50eXBlLl9kZWYsIHJlZnMpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YnJhbmRlZC5tanMubWFwIiwiaW1wb3J0IHsgcGFyc2VEZWYgfSBmcm9tIFwiLi4vcGFyc2VEZWYubWpzXCI7XG5leHBvcnQgY29uc3QgcGFyc2VDYXRjaERlZiA9IChkZWYsIHJlZnMpID0+IHtcbiAgICByZXR1cm4gcGFyc2VEZWYoZGVmLmlubmVyVHlwZS5fZGVmLCByZWZzKTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jYXRjaC5tanMubWFwIiwiaW1wb3J0IHsgc2V0UmVzcG9uc2VWYWx1ZUFuZEVycm9ycyB9IGZyb20gXCIuLi9lcnJvck1lc3NhZ2VzLm1qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlRGF0ZURlZihkZWYsIHJlZnMsIG92ZXJyaWRlRGF0ZVN0cmF0ZWd5KSB7XG4gICAgY29uc3Qgc3RyYXRlZ3kgPSBvdmVycmlkZURhdGVTdHJhdGVneSA/PyByZWZzLmRhdGVTdHJhdGVneTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShzdHJhdGVneSkpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGFueU9mOiBzdHJhdGVneS5tYXAoKGl0ZW0sIGkpID0+IHBhcnNlRGF0ZURlZihkZWYsIHJlZnMsIGl0ZW0pKSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgc3dpdGNoIChzdHJhdGVneSkge1xuICAgICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICBjYXNlICdmb3JtYXQ6ZGF0ZS10aW1lJzpcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgICAgICAgICAgZm9ybWF0OiAnZGF0ZS10aW1lJyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIGNhc2UgJ2Zvcm1hdDpkYXRlJzpcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgICAgICAgICAgZm9ybWF0OiAnZGF0ZScsXG4gICAgICAgICAgICB9O1xuICAgICAgICBjYXNlICdpbnRlZ2VyJzpcbiAgICAgICAgICAgIHJldHVybiBpbnRlZ2VyRGF0ZVBhcnNlcihkZWYsIHJlZnMpO1xuICAgIH1cbn1cbmNvbnN0IGludGVnZXJEYXRlUGFyc2VyID0gKGRlZiwgcmVmcykgPT4ge1xuICAgIGNvbnN0IHJlcyA9IHtcbiAgICAgICAgdHlwZTogJ2ludGVnZXInLFxuICAgICAgICBmb3JtYXQ6ICd1bml4LXRpbWUnLFxuICAgIH07XG4gICAgaWYgKHJlZnMudGFyZ2V0ID09PSAnb3BlbkFwaTMnKSB7XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuICAgIGZvciAoY29uc3QgY2hlY2sgb2YgZGVmLmNoZWNrcykge1xuICAgICAgICBzd2l0Y2ggKGNoZWNrLmtpbmQpIHtcbiAgICAgICAgICAgIGNhc2UgJ21pbic6XG4gICAgICAgICAgICAgICAgc2V0UmVzcG9uc2VWYWx1ZUFuZEVycm9ycyhyZXMsICdtaW5pbXVtJywgY2hlY2sudmFsdWUsIC8vIFRoaXMgaXMgaW4gbWlsbGlzZWNvbmRzXG4gICAgICAgICAgICAgICAgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtYXgnOlxuICAgICAgICAgICAgICAgIHNldFJlc3BvbnNlVmFsdWVBbmRFcnJvcnMocmVzLCAnbWF4aW11bScsIGNoZWNrLnZhbHVlLCAvLyBUaGlzIGlzIGluIG1pbGxpc2Vjb25kc1xuICAgICAgICAgICAgICAgIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0ZS5tanMubWFwIiwiaW1wb3J0IHsgcGFyc2VEZWYgfSBmcm9tIFwiLi4vcGFyc2VEZWYubWpzXCI7XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VEZWZhdWx0RGVmKF9kZWYsIHJlZnMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICAuLi5wYXJzZURlZihfZGVmLmlubmVyVHlwZS5fZGVmLCByZWZzKSxcbiAgICAgICAgZGVmYXVsdDogX2RlZi5kZWZhdWx0VmFsdWUoKSxcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVmYXVsdC5tanMubWFwIiwiaW1wb3J0IHsgcGFyc2VEZWYgfSBmcm9tIFwiLi4vcGFyc2VEZWYubWpzXCI7XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VFZmZlY3RzRGVmKF9kZWYsIHJlZnMsIGZvcmNlUmVzb2x1dGlvbikge1xuICAgIHJldHVybiByZWZzLmVmZmVjdFN0cmF0ZWd5ID09PSAnaW5wdXQnID8gcGFyc2VEZWYoX2RlZi5zY2hlbWEuX2RlZiwgcmVmcywgZm9yY2VSZXNvbHV0aW9uKSA6IHt9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZWZmZWN0cy5tanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIHBhcnNlRW51bURlZihkZWYpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgICAgZW51bTogWy4uLmRlZi52YWx1ZXNdLFxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbnVtLm1qcy5tYXAiLCJpbXBvcnQgeyBwYXJzZURlZiB9IGZyb20gXCIuLi9wYXJzZURlZi5tanNcIjtcbmNvbnN0IGlzSnNvblNjaGVtYTdBbGxPZlR5cGUgPSAodHlwZSkgPT4ge1xuICAgIGlmICgndHlwZScgaW4gdHlwZSAmJiB0eXBlLnR5cGUgPT09ICdzdHJpbmcnKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuICdhbGxPZicgaW4gdHlwZTtcbn07XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VJbnRlcnNlY3Rpb25EZWYoZGVmLCByZWZzKSB7XG4gICAgY29uc3QgYWxsT2YgPSBbXG4gICAgICAgIHBhcnNlRGVmKGRlZi5sZWZ0Ll9kZWYsIHtcbiAgICAgICAgICAgIC4uLnJlZnMsXG4gICAgICAgICAgICBjdXJyZW50UGF0aDogWy4uLnJlZnMuY3VycmVudFBhdGgsICdhbGxPZicsICcwJ10sXG4gICAgICAgIH0pLFxuICAgICAgICBwYXJzZURlZihkZWYucmlnaHQuX2RlZiwge1xuICAgICAgICAgICAgLi4ucmVmcyxcbiAgICAgICAgICAgIGN1cnJlbnRQYXRoOiBbLi4ucmVmcy5jdXJyZW50UGF0aCwgJ2FsbE9mJywgJzEnXSxcbiAgICAgICAgfSksXG4gICAgXS5maWx0ZXIoKHgpID0+ICEheCk7XG4gICAgbGV0IHVuZXZhbHVhdGVkUHJvcGVydGllcyA9IHJlZnMudGFyZ2V0ID09PSAnanNvblNjaGVtYTIwMTktMDknID8geyB1bmV2YWx1YXRlZFByb3BlcnRpZXM6IGZhbHNlIH0gOiB1bmRlZmluZWQ7XG4gICAgY29uc3QgbWVyZ2VkQWxsT2YgPSBbXTtcbiAgICAvLyBJZiBlaXRoZXIgb2YgdGhlIHNjaGVtYXMgaXMgYW4gYWxsT2YsIG1lcmdlIHRoZW0gaW50byBhIHNpbmdsZSBhbGxPZlxuICAgIGFsbE9mLmZvckVhY2goKHNjaGVtYSkgPT4ge1xuICAgICAgICBpZiAoaXNKc29uU2NoZW1hN0FsbE9mVHlwZShzY2hlbWEpKSB7XG4gICAgICAgICAgICBtZXJnZWRBbGxPZi5wdXNoKC4uLnNjaGVtYS5hbGxPZik7XG4gICAgICAgICAgICBpZiAoc2NoZW1hLnVuZXZhbHVhdGVkUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgb25lIG9mIHRoZSBzY2hlbWFzIGhhcyBubyB1bmV2YWx1YXRlZFByb3BlcnRpZXMgc2V0LFxuICAgICAgICAgICAgICAgIC8vIHRoZSBtZXJnZWQgc2NoZW1hIHNob3VsZCBhbHNvIGhhdmUgbm8gdW5ldmFsdWF0ZWRQcm9wZXJ0aWVzIHNldFxuICAgICAgICAgICAgICAgIHVuZXZhbHVhdGVkUHJvcGVydGllcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxldCBuZXN0ZWRTY2hlbWEgPSBzY2hlbWE7XG4gICAgICAgICAgICBpZiAoJ2FkZGl0aW9uYWxQcm9wZXJ0aWVzJyBpbiBzY2hlbWEgJiYgc2NoZW1hLmFkZGl0aW9uYWxQcm9wZXJ0aWVzID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgYWRkaXRpb25hbFByb3BlcnRpZXMsIC4uLnJlc3QgfSA9IHNjaGVtYTtcbiAgICAgICAgICAgICAgICBuZXN0ZWRTY2hlbWEgPSByZXN0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gQXMgc29vbiBhcyBvbmUgb2YgdGhlIHNjaGVtYXMgaGFzIGFkZGl0aW9uYWxQcm9wZXJ0aWVzIHNldCBub3QgdG8gZmFsc2UsIHdlIGFsbG93IHVuZXZhbHVhdGVkUHJvcGVydGllc1xuICAgICAgICAgICAgICAgIHVuZXZhbHVhdGVkUHJvcGVydGllcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1lcmdlZEFsbE9mLnB1c2gobmVzdGVkU2NoZW1hKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBtZXJnZWRBbGxPZi5sZW5ndGggP1xuICAgICAgICB7XG4gICAgICAgICAgICBhbGxPZjogbWVyZ2VkQWxsT2YsXG4gICAgICAgICAgICAuLi51bmV2YWx1YXRlZFByb3BlcnRpZXMsXG4gICAgICAgIH1cbiAgICAgICAgOiB1bmRlZmluZWQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbnRlcnNlY3Rpb24ubWpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBwYXJzZUxpdGVyYWxEZWYoZGVmLCByZWZzKSB7XG4gICAgY29uc3QgcGFyc2VkVHlwZSA9IHR5cGVvZiBkZWYudmFsdWU7XG4gICAgaWYgKHBhcnNlZFR5cGUgIT09ICdiaWdpbnQnICYmXG4gICAgICAgIHBhcnNlZFR5cGUgIT09ICdudW1iZXInICYmXG4gICAgICAgIHBhcnNlZFR5cGUgIT09ICdib29sZWFuJyAmJlxuICAgICAgICBwYXJzZWRUeXBlICE9PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogQXJyYXkuaXNBcnJheShkZWYudmFsdWUpID8gJ2FycmF5JyA6ICdvYmplY3QnLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBpZiAocmVmcy50YXJnZXQgPT09ICdvcGVuQXBpMycpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6IHBhcnNlZFR5cGUgPT09ICdiaWdpbnQnID8gJ2ludGVnZXInIDogcGFyc2VkVHlwZSxcbiAgICAgICAgICAgIGVudW06IFtkZWYudmFsdWVdLFxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBwYXJzZWRUeXBlID09PSAnYmlnaW50JyA/ICdpbnRlZ2VyJyA6IHBhcnNlZFR5cGUsXG4gICAgICAgIGNvbnN0OiBkZWYudmFsdWUsXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpdGVyYWwubWpzLm1hcCIsImltcG9ydCB7IHNldFJlc3BvbnNlVmFsdWVBbmRFcnJvcnMgfSBmcm9tIFwiLi4vZXJyb3JNZXNzYWdlcy5tanNcIjtcbmxldCBlbW9qaVJlZ2V4O1xuLyoqXG4gKiBHZW5lcmF0ZWQgZnJvbSB0aGUgcmVndWxhciBleHByZXNzaW9ucyBmb3VuZCBoZXJlIGFzIG9mIDIwMjQtMDUtMjI6XG4gKiBodHRwczovL2dpdGh1Yi5jb20vY29saW5oYWNrcy96b2QvYmxvYi9tYXN0ZXIvc3JjL3R5cGVzLnRzLlxuICpcbiAqIEV4cHJlc3Npb25zIHdpdGggL2kgZmxhZyBoYXZlIGJlZW4gY2hhbmdlZCBhY2NvcmRpbmdseS5cbiAqL1xuZXhwb3J0IGNvbnN0IHpvZFBhdHRlcm5zID0ge1xuICAgIC8qKlxuICAgICAqIGBjYCB3YXMgY2hhbmdlZCB0byBgW2NDXWAgdG8gcmVwbGljYXRlIC9pIGZsYWdcbiAgICAgKi9cbiAgICBjdWlkOiAvXltjQ11bXlxccy1dezgsfSQvLFxuICAgIGN1aWQyOiAvXlswLTlhLXpdKyQvLFxuICAgIHVsaWQ6IC9eWzAtOUEtSEpLTU5QLVRWLVpdezI2fSQvLFxuICAgIC8qKlxuICAgICAqIGBhLXpgIHdhcyBhZGRlZCB0byByZXBsaWNhdGUgL2kgZmxhZ1xuICAgICAqL1xuICAgIGVtYWlsOiAvXig/IVxcLikoPyEuKlxcLlxcLikoW2EtekEtWjAtOV8nK1xcLVxcLl0qKVthLXpBLVowLTlfKy1dQChbYS16QS1aMC05XVthLXpBLVowLTlcXC1dKlxcLikrW2EtekEtWl17Mix9JC8sXG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0ZWQgYSB2YWxpZCBVbmljb2RlIFJlZ0V4cFxuICAgICAqXG4gICAgICogTGF6aWx5IGluc3RhbnRpYXRlIHNpbmNlIHRoaXMgdHlwZSBvZiByZWdleCBpc24ndCBzdXBwb3J0ZWRcbiAgICAgKiBpbiBhbGwgZW52cyAoZS5nLiBSZWFjdCBOYXRpdmUpLlxuICAgICAqXG4gICAgICogU2VlOlxuICAgICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9jb2xpbmhhY2tzL3pvZC9pc3N1ZXMvMjQzM1xuICAgICAqIEZpeCBpbiBab2Q6XG4gICAgICogaHR0cHM6Ly9naXRodWIuY29tL2NvbGluaGFja3Mvem9kL2NvbW1pdC85MzQwZmQ1MWU0ODU3NmE3NWFkYzkxOWJmZjY1ZGJjNGE1ZDRjOTliXG4gICAgICovXG4gICAgZW1vamk6ICgpID0+IHtcbiAgICAgICAgaWYgKGVtb2ppUmVnZXggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZW1vamlSZWdleCA9IFJlZ0V4cCgnXihcXFxccHtFeHRlbmRlZF9QaWN0b2dyYXBoaWN9fFxcXFxwe0Vtb2ppX0NvbXBvbmVudH0pKyQnLCAndScpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbW9qaVJlZ2V4O1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogVW51c2VkXG4gICAgICovXG4gICAgdXVpZDogL15bMC05YS1mQS1GXXs4fVxcYi1bMC05YS1mQS1GXXs0fVxcYi1bMC05YS1mQS1GXXs0fVxcYi1bMC05YS1mQS1GXXs0fVxcYi1bMC05YS1mQS1GXXsxMn0kLyxcbiAgICAvKipcbiAgICAgKiBVbnVzZWRcbiAgICAgKi9cbiAgICBpcHY0OiAvXig/Oig/OjI1WzAtNV18MlswLTRdWzAtOV18MVswLTldWzAtOV18WzEtOV1bMC05XXxbMC05XSlcXC4pezN9KD86MjVbMC01XXwyWzAtNF1bMC05XXwxWzAtOV1bMC05XXxbMS05XVswLTldfFswLTldKSQvLFxuICAgIC8qKlxuICAgICAqIFVudXNlZFxuICAgICAqL1xuICAgIGlwdjY6IC9eKChbYS1mMC05XXsxLDR9Oil7N318OjooW2EtZjAtOV17MSw0fTopezAsNn18KFthLWYwLTldezEsNH06KXsxfTooW2EtZjAtOV17MSw0fTopezAsNX18KFthLWYwLTldezEsNH06KXsyfTooW2EtZjAtOV17MSw0fTopezAsNH18KFthLWYwLTldezEsNH06KXszfTooW2EtZjAtOV17MSw0fTopezAsM318KFthLWYwLTldezEsNH06KXs0fTooW2EtZjAtOV17MSw0fTopezAsMn18KFthLWYwLTldezEsNH06KXs1fTooW2EtZjAtOV17MSw0fTopezAsMX0pKFthLWYwLTldezEsNH18KCgoMjVbMC01XSl8KDJbMC00XVswLTldKXwoMVswLTldezJ9KXwoWzAtOV17MSwyfSkpXFwuKXszfSgoMjVbMC01XSl8KDJbMC00XVswLTldKXwoMVswLTldezJ9KXwoWzAtOV17MSwyfSkpKSQvLFxuICAgIGJhc2U2NDogL14oWzAtOWEtekEtWisvXXs0fSkqKChbMC05YS16QS1aKy9dezJ9PT0pfChbMC05YS16QS1aKy9dezN9PSkpPyQvLFxuICAgIG5hbm9pZDogL15bYS16QS1aMC05Xy1dezIxfSQvLFxufTtcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVN0cmluZ0RlZihkZWYsIHJlZnMpIHtcbiAgICBjb25zdCByZXMgPSB7XG4gICAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgIH07XG4gICAgZnVuY3Rpb24gcHJvY2Vzc1BhdHRlcm4odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHJlZnMucGF0dGVyblN0cmF0ZWd5ID09PSAnZXNjYXBlJyA/IGVzY2FwZU5vbkFscGhhTnVtZXJpYyh2YWx1ZSkgOiB2YWx1ZTtcbiAgICB9XG4gICAgaWYgKGRlZi5jaGVja3MpIHtcbiAgICAgICAgZm9yIChjb25zdCBjaGVjayBvZiBkZWYuY2hlY2tzKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKGNoZWNrLmtpbmQpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdtaW4nOlxuICAgICAgICAgICAgICAgICAgICBzZXRSZXNwb25zZVZhbHVlQW5kRXJyb3JzKHJlcywgJ21pbkxlbmd0aCcsIHR5cGVvZiByZXMubWluTGVuZ3RoID09PSAnbnVtYmVyJyA/IE1hdGgubWF4KHJlcy5taW5MZW5ndGgsIGNoZWNrLnZhbHVlKSA6IGNoZWNrLnZhbHVlLCBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnbWF4JzpcbiAgICAgICAgICAgICAgICAgICAgc2V0UmVzcG9uc2VWYWx1ZUFuZEVycm9ycyhyZXMsICdtYXhMZW5ndGgnLCB0eXBlb2YgcmVzLm1heExlbmd0aCA9PT0gJ251bWJlcicgPyBNYXRoLm1pbihyZXMubWF4TGVuZ3RoLCBjaGVjay52YWx1ZSkgOiBjaGVjay52YWx1ZSwgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2VtYWlsJzpcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChyZWZzLmVtYWlsU3RyYXRlZ3kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2Zvcm1hdDplbWFpbCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkRm9ybWF0KHJlcywgJ2VtYWlsJywgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdmb3JtYXQ6aWRuLWVtYWlsJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRGb3JtYXQocmVzLCAnaWRuLWVtYWlsJywgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdwYXR0ZXJuOnpvZCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkUGF0dGVybihyZXMsIHpvZFBhdHRlcm5zLmVtYWlsLCBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICd1cmwnOlxuICAgICAgICAgICAgICAgICAgICBhZGRGb3JtYXQocmVzLCAndXJpJywgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3V1aWQnOlxuICAgICAgICAgICAgICAgICAgICBhZGRGb3JtYXQocmVzLCAndXVpZCcsIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdyZWdleCc6XG4gICAgICAgICAgICAgICAgICAgIGFkZFBhdHRlcm4ocmVzLCBjaGVjay5yZWdleCwgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2N1aWQnOlxuICAgICAgICAgICAgICAgICAgICBhZGRQYXR0ZXJuKHJlcywgem9kUGF0dGVybnMuY3VpZCwgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2N1aWQyJzpcbiAgICAgICAgICAgICAgICAgICAgYWRkUGF0dGVybihyZXMsIHpvZFBhdHRlcm5zLmN1aWQyLCBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnc3RhcnRzV2l0aCc6XG4gICAgICAgICAgICAgICAgICAgIGFkZFBhdHRlcm4ocmVzLCBSZWdFeHAoYF4ke3Byb2Nlc3NQYXR0ZXJuKGNoZWNrLnZhbHVlKX1gKSwgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2VuZHNXaXRoJzpcbiAgICAgICAgICAgICAgICAgICAgYWRkUGF0dGVybihyZXMsIFJlZ0V4cChgJHtwcm9jZXNzUGF0dGVybihjaGVjay52YWx1ZSl9JGApLCBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnZGF0ZXRpbWUnOlxuICAgICAgICAgICAgICAgICAgICBhZGRGb3JtYXQocmVzLCAnZGF0ZS10aW1lJywgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2RhdGUnOlxuICAgICAgICAgICAgICAgICAgICBhZGRGb3JtYXQocmVzLCAnZGF0ZScsIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICd0aW1lJzpcbiAgICAgICAgICAgICAgICAgICAgYWRkRm9ybWF0KHJlcywgJ3RpbWUnLCBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnZHVyYXRpb24nOlxuICAgICAgICAgICAgICAgICAgICBhZGRGb3JtYXQocmVzLCAnZHVyYXRpb24nLCBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnbGVuZ3RoJzpcbiAgICAgICAgICAgICAgICAgICAgc2V0UmVzcG9uc2VWYWx1ZUFuZEVycm9ycyhyZXMsICdtaW5MZW5ndGgnLCB0eXBlb2YgcmVzLm1pbkxlbmd0aCA9PT0gJ251bWJlcicgPyBNYXRoLm1heChyZXMubWluTGVuZ3RoLCBjaGVjay52YWx1ZSkgOiBjaGVjay52YWx1ZSwgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgICAgICAgICAgIHNldFJlc3BvbnNlVmFsdWVBbmRFcnJvcnMocmVzLCAnbWF4TGVuZ3RoJywgdHlwZW9mIHJlcy5tYXhMZW5ndGggPT09ICdudW1iZXInID8gTWF0aC5taW4ocmVzLm1heExlbmd0aCwgY2hlY2sudmFsdWUpIDogY2hlY2sudmFsdWUsIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdpbmNsdWRlcyc6IHtcbiAgICAgICAgICAgICAgICAgICAgYWRkUGF0dGVybihyZXMsIFJlZ0V4cChwcm9jZXNzUGF0dGVybihjaGVjay52YWx1ZSkpLCBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgJ2lwJzoge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2hlY2sudmVyc2lvbiAhPT0gJ3Y2Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWRkRm9ybWF0KHJlcywgJ2lwdjQnLCBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoY2hlY2sudmVyc2lvbiAhPT0gJ3Y0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWRkRm9ybWF0KHJlcywgJ2lwdjYnLCBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSAnZW1vamknOlxuICAgICAgICAgICAgICAgICAgICBhZGRQYXR0ZXJuKHJlcywgem9kUGF0dGVybnMuZW1vamksIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICd1bGlkJzoge1xuICAgICAgICAgICAgICAgICAgICBhZGRQYXR0ZXJuKHJlcywgem9kUGF0dGVybnMudWxpZCwgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlICdiYXNlNjQnOiB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAocmVmcy5iYXNlNjRTdHJhdGVneSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZm9ybWF0OmJpbmFyeSc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRGb3JtYXQocmVzLCAnYmluYXJ5JywgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdjb250ZW50RW5jb2Rpbmc6YmFzZTY0Jzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFJlc3BvbnNlVmFsdWVBbmRFcnJvcnMocmVzLCAnY29udGVudEVuY29kaW5nJywgJ2Jhc2U2NCcsIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAncGF0dGVybjp6b2QnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkUGF0dGVybihyZXMsIHpvZFBhdHRlcm5zLmJhc2U2NCwgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgJ25hbm9pZCc6IHtcbiAgICAgICAgICAgICAgICAgICAgYWRkUGF0dGVybihyZXMsIHpvZFBhdHRlcm5zLm5hbm9pZCwgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgJ3RvTG93ZXJDYXNlJzpcbiAgICAgICAgICAgICAgICBjYXNlICd0b1VwcGVyQ2FzZSc6XG4gICAgICAgICAgICAgICAgY2FzZSAndHJpbSc6XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICgoXykgPT4geyB9KShjaGVjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cbmNvbnN0IGVzY2FwZU5vbkFscGhhTnVtZXJpYyA9ICh2YWx1ZSkgPT4gQXJyYXkuZnJvbSh2YWx1ZSlcbiAgICAubWFwKChjKSA9PiAoL1thLXpBLVowLTldLy50ZXN0KGMpID8gYyA6IGBcXFxcJHtjfWApKVxuICAgIC5qb2luKCcnKTtcbmNvbnN0IGFkZEZvcm1hdCA9IChzY2hlbWEsIHZhbHVlLCBtZXNzYWdlLCByZWZzKSA9PiB7XG4gICAgaWYgKHNjaGVtYS5mb3JtYXQgfHwgc2NoZW1hLmFueU9mPy5zb21lKCh4KSA9PiB4LmZvcm1hdCkpIHtcbiAgICAgICAgaWYgKCFzY2hlbWEuYW55T2YpIHtcbiAgICAgICAgICAgIHNjaGVtYS5hbnlPZiA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzY2hlbWEuZm9ybWF0KSB7XG4gICAgICAgICAgICBzY2hlbWEuYW55T2YucHVzaCh7XG4gICAgICAgICAgICAgICAgZm9ybWF0OiBzY2hlbWEuZm9ybWF0LFxuICAgICAgICAgICAgICAgIC4uLihzY2hlbWEuZXJyb3JNZXNzYWdlICYmXG4gICAgICAgICAgICAgICAgICAgIHJlZnMuZXJyb3JNZXNzYWdlcyAmJiB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZTogeyBmb3JtYXQ6IHNjaGVtYS5lcnJvck1lc3NhZ2UuZm9ybWF0IH0sXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGRlbGV0ZSBzY2hlbWEuZm9ybWF0O1xuICAgICAgICAgICAgaWYgKHNjaGVtYS5lcnJvck1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgc2NoZW1hLmVycm9yTWVzc2FnZS5mb3JtYXQ7XG4gICAgICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKHNjaGVtYS5lcnJvck1lc3NhZ2UpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgc2NoZW1hLmVycm9yTWVzc2FnZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc2NoZW1hLmFueU9mLnB1c2goe1xuICAgICAgICAgICAgZm9ybWF0OiB2YWx1ZSxcbiAgICAgICAgICAgIC4uLihtZXNzYWdlICYmIHJlZnMuZXJyb3JNZXNzYWdlcyAmJiB7IGVycm9yTWVzc2FnZTogeyBmb3JtYXQ6IG1lc3NhZ2UgfSB9KSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBzZXRSZXNwb25zZVZhbHVlQW5kRXJyb3JzKHNjaGVtYSwgJ2Zvcm1hdCcsIHZhbHVlLCBtZXNzYWdlLCByZWZzKTtcbiAgICB9XG59O1xuY29uc3QgYWRkUGF0dGVybiA9IChzY2hlbWEsIHJlZ2V4LCBtZXNzYWdlLCByZWZzKSA9PiB7XG4gICAgaWYgKHNjaGVtYS5wYXR0ZXJuIHx8IHNjaGVtYS5hbGxPZj8uc29tZSgoeCkgPT4geC5wYXR0ZXJuKSkge1xuICAgICAgICBpZiAoIXNjaGVtYS5hbGxPZikge1xuICAgICAgICAgICAgc2NoZW1hLmFsbE9mID0gW107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNjaGVtYS5wYXR0ZXJuKSB7XG4gICAgICAgICAgICBzY2hlbWEuYWxsT2YucHVzaCh7XG4gICAgICAgICAgICAgICAgcGF0dGVybjogc2NoZW1hLnBhdHRlcm4sXG4gICAgICAgICAgICAgICAgLi4uKHNjaGVtYS5lcnJvck1lc3NhZ2UgJiZcbiAgICAgICAgICAgICAgICAgICAgcmVmcy5lcnJvck1lc3NhZ2VzICYmIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiB7IHBhdHRlcm46IHNjaGVtYS5lcnJvck1lc3NhZ2UucGF0dGVybiB9LFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBkZWxldGUgc2NoZW1hLnBhdHRlcm47XG4gICAgICAgICAgICBpZiAoc2NoZW1hLmVycm9yTWVzc2FnZSkge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBzY2hlbWEuZXJyb3JNZXNzYWdlLnBhdHRlcm47XG4gICAgICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKHNjaGVtYS5lcnJvck1lc3NhZ2UpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgc2NoZW1hLmVycm9yTWVzc2FnZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc2NoZW1hLmFsbE9mLnB1c2goe1xuICAgICAgICAgICAgcGF0dGVybjogcHJvY2Vzc1JlZ0V4cChyZWdleCwgcmVmcyksXG4gICAgICAgICAgICAuLi4obWVzc2FnZSAmJiByZWZzLmVycm9yTWVzc2FnZXMgJiYgeyBlcnJvck1lc3NhZ2U6IHsgcGF0dGVybjogbWVzc2FnZSB9IH0pLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHNldFJlc3BvbnNlVmFsdWVBbmRFcnJvcnMoc2NoZW1hLCAncGF0dGVybicsIHByb2Nlc3NSZWdFeHAocmVnZXgsIHJlZnMpLCBtZXNzYWdlLCByZWZzKTtcbiAgICB9XG59O1xuLy8gTXV0YXRlIHouc3RyaW5nLnJlZ2V4KCkgaW4gYSBiZXN0IGF0dGVtcHQgdG8gYWNjb21tb2RhdGUgZm9yIHJlZ2V4IGZsYWdzIHdoZW4gYXBwbHlSZWdleEZsYWdzIGlzIHRydWVcbmNvbnN0IHByb2Nlc3NSZWdFeHAgPSAocmVnZXhPckZ1bmN0aW9uLCByZWZzKSA9PiB7XG4gICAgY29uc3QgcmVnZXggPSB0eXBlb2YgcmVnZXhPckZ1bmN0aW9uID09PSAnZnVuY3Rpb24nID8gcmVnZXhPckZ1bmN0aW9uKCkgOiByZWdleE9yRnVuY3Rpb247XG4gICAgaWYgKCFyZWZzLmFwcGx5UmVnZXhGbGFncyB8fCAhcmVnZXguZmxhZ3MpXG4gICAgICAgIHJldHVybiByZWdleC5zb3VyY2U7XG4gICAgLy8gQ3VycmVudGx5IGhhbmRsZWQgZmxhZ3NcbiAgICBjb25zdCBmbGFncyA9IHtcbiAgICAgICAgaTogcmVnZXguZmxhZ3MuaW5jbHVkZXMoJ2knKSwgLy8gQ2FzZS1pbnNlbnNpdGl2ZVxuICAgICAgICBtOiByZWdleC5mbGFncy5pbmNsdWRlcygnbScpLCAvLyBgXmAgYW5kIGAkYCBtYXRjaGVzIGFkamFjZW50IHRvIG5ld2xpbmUgY2hhcmFjdGVyc1xuICAgICAgICBzOiByZWdleC5mbGFncy5pbmNsdWRlcygncycpLCAvLyBgLmAgbWF0Y2hlcyBuZXdsaW5lc1xuICAgIH07XG4gICAgLy8gVGhlIGdlbmVyYWwgcHJpbmNpcGxlIGhlcmUgaXMgdG8gc3RlcCB0aHJvdWdoIGVhY2ggY2hhcmFjdGVyLCBvbmUgYXQgYSB0aW1lLCBhcHBseWluZyBtdXRhdGlvbnMgYXMgZmxhZ3MgcmVxdWlyZS4gV2Uga2VlcCB0cmFjayB3aGVuIHRoZSBjdXJyZW50IGNoYXJhY3RlciBpcyBlc2NhcGVkLCBhbmQgd2hlbiBpdCdzIGluc2lkZSBhIGdyb3VwIC9saWtlIFt0aGlzXS8gb3IgKGFsc28pIGEgcmFuZ2UgbGlrZSAvW2Etel0vLiBUaGUgZm9sbG93aW5nIGlzIGZhaXJseSBicml0dGxlIGltcGVyYXRpdmUgY29kZTsgZWRpdCBhdCB5b3VyIHBlcmlsIVxuICAgIGNvbnN0IHNvdXJjZSA9IGZsYWdzLmkgPyByZWdleC5zb3VyY2UudG9Mb3dlckNhc2UoKSA6IHJlZ2V4LnNvdXJjZTtcbiAgICBsZXQgcGF0dGVybiA9ICcnO1xuICAgIGxldCBpc0VzY2FwZWQgPSBmYWxzZTtcbiAgICBsZXQgaW5DaGFyR3JvdXAgPSBmYWxzZTtcbiAgICBsZXQgaW5DaGFyUmFuZ2UgPSBmYWxzZTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNvdXJjZS5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoaXNFc2NhcGVkKSB7XG4gICAgICAgICAgICBwYXR0ZXJuICs9IHNvdXJjZVtpXTtcbiAgICAgICAgICAgIGlzRXNjYXBlZCA9IGZhbHNlO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZsYWdzLmkpIHtcbiAgICAgICAgICAgIGlmIChpbkNoYXJHcm91cCkge1xuICAgICAgICAgICAgICAgIGlmIChzb3VyY2VbaV0ubWF0Y2goL1thLXpdLykpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluQ2hhclJhbmdlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXR0ZXJuICs9IHNvdXJjZVtpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdHRlcm4gKz0gYCR7c291cmNlW2kgLSAyXX0tJHtzb3VyY2VbaV19YC50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5DaGFyUmFuZ2UgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChzb3VyY2VbaSArIDFdID09PSAnLScgJiYgc291cmNlW2kgKyAyXT8ubWF0Y2goL1thLXpdLykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdHRlcm4gKz0gc291cmNlW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5DaGFyUmFuZ2UgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGF0dGVybiArPSBgJHtzb3VyY2VbaV19JHtzb3VyY2VbaV0udG9VcHBlckNhc2UoKX1gO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHNvdXJjZVtpXS5tYXRjaCgvW2Etel0vKSkge1xuICAgICAgICAgICAgICAgIHBhdHRlcm4gKz0gYFske3NvdXJjZVtpXX0ke3NvdXJjZVtpXS50b1VwcGVyQ2FzZSgpfV1gO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChmbGFncy5tKSB7XG4gICAgICAgICAgICBpZiAoc291cmNlW2ldID09PSAnXicpIHtcbiAgICAgICAgICAgICAgICBwYXR0ZXJuICs9IGAoXnwoPzw9W1xcclxcbl0pKWA7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChzb3VyY2VbaV0gPT09ICckJykge1xuICAgICAgICAgICAgICAgIHBhdHRlcm4gKz0gYCgkfCg/PVtcXHJcXG5dKSlgO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChmbGFncy5zICYmIHNvdXJjZVtpXSA9PT0gJy4nKSB7XG4gICAgICAgICAgICBwYXR0ZXJuICs9IGluQ2hhckdyb3VwID8gYCR7c291cmNlW2ldfVxcclxcbmAgOiBgWyR7c291cmNlW2ldfVxcclxcbl1gO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgcGF0dGVybiArPSBzb3VyY2VbaV07XG4gICAgICAgIGlmIChzb3VyY2VbaV0gPT09ICdcXFxcJykge1xuICAgICAgICAgICAgaXNFc2NhcGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpbkNoYXJHcm91cCAmJiBzb3VyY2VbaV0gPT09ICddJykge1xuICAgICAgICAgICAgaW5DaGFyR3JvdXAgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghaW5DaGFyR3JvdXAgJiYgc291cmNlW2ldID09PSAnWycpIHtcbiAgICAgICAgICAgIGluQ2hhckdyb3VwID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBjb25zdCByZWdleFRlc3QgPSBuZXcgUmVnRXhwKHBhdHRlcm4pO1xuICAgIH1cbiAgICBjYXRjaCB7XG4gICAgICAgIGNvbnNvbGUud2FybihgQ291bGQgbm90IGNvbnZlcnQgcmVnZXggcGF0dGVybiBhdCAke3JlZnMuY3VycmVudFBhdGguam9pbignLycpfSB0byBhIGZsYWctaW5kZXBlbmRlbnQgZm9ybSEgRmFsbGluZyBiYWNrIHRvIHRoZSBmbGFnLWlnbm9yYW50IHNvdXJjZWApO1xuICAgICAgICByZXR1cm4gcmVnZXguc291cmNlO1xuICAgIH1cbiAgICByZXR1cm4gcGF0dGVybjtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdHJpbmcubWpzLm1hcCIsImltcG9ydCB7IFpvZEZpcnN0UGFydHlUeXBlS2luZCB9IGZyb20gJ3pvZCc7XG5pbXBvcnQgeyBwYXJzZURlZiB9IGZyb20gXCIuLi9wYXJzZURlZi5tanNcIjtcbmltcG9ydCB7IHBhcnNlU3RyaW5nRGVmIH0gZnJvbSBcIi4vc3RyaW5nLm1qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlUmVjb3JkRGVmKGRlZiwgcmVmcykge1xuICAgIGlmIChyZWZzLnRhcmdldCA9PT0gJ29wZW5BcGkzJyAmJiBkZWYua2V5VHlwZT8uX2RlZi50eXBlTmFtZSA9PT0gWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZEVudW0pIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6ICdvYmplY3QnLFxuICAgICAgICAgICAgcmVxdWlyZWQ6IGRlZi5rZXlUeXBlLl9kZWYudmFsdWVzLFxuICAgICAgICAgICAgcHJvcGVydGllczogZGVmLmtleVR5cGUuX2RlZi52YWx1ZXMucmVkdWNlKChhY2MsIGtleSkgPT4gKHtcbiAgICAgICAgICAgICAgICAuLi5hY2MsXG4gICAgICAgICAgICAgICAgW2tleV06IHBhcnNlRGVmKGRlZi52YWx1ZVR5cGUuX2RlZiwge1xuICAgICAgICAgICAgICAgICAgICAuLi5yZWZzLFxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50UGF0aDogWy4uLnJlZnMuY3VycmVudFBhdGgsICdwcm9wZXJ0aWVzJywga2V5XSxcbiAgICAgICAgICAgICAgICB9KSA/PyB7fSxcbiAgICAgICAgICAgIH0pLCB7fSksXG4gICAgICAgICAgICBhZGRpdGlvbmFsUHJvcGVydGllczogZmFsc2UsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IHNjaGVtYSA9IHtcbiAgICAgICAgdHlwZTogJ29iamVjdCcsXG4gICAgICAgIGFkZGl0aW9uYWxQcm9wZXJ0aWVzOiBwYXJzZURlZihkZWYudmFsdWVUeXBlLl9kZWYsIHtcbiAgICAgICAgICAgIC4uLnJlZnMsXG4gICAgICAgICAgICBjdXJyZW50UGF0aDogWy4uLnJlZnMuY3VycmVudFBhdGgsICdhZGRpdGlvbmFsUHJvcGVydGllcyddLFxuICAgICAgICB9KSA/PyB7fSxcbiAgICB9O1xuICAgIGlmIChyZWZzLnRhcmdldCA9PT0gJ29wZW5BcGkzJykge1xuICAgICAgICByZXR1cm4gc2NoZW1hO1xuICAgIH1cbiAgICBpZiAoZGVmLmtleVR5cGU/Ll9kZWYudHlwZU5hbWUgPT09IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RTdHJpbmcgJiYgZGVmLmtleVR5cGUuX2RlZi5jaGVja3M/Lmxlbmd0aCkge1xuICAgICAgICBjb25zdCBrZXlUeXBlID0gT2JqZWN0LmVudHJpZXMocGFyc2VTdHJpbmdEZWYoZGVmLmtleVR5cGUuX2RlZiwgcmVmcykpLnJlZHVjZSgoYWNjLCBba2V5LCB2YWx1ZV0pID0+IChrZXkgPT09ICd0eXBlJyA/IGFjYyA6IHsgLi4uYWNjLCBba2V5XTogdmFsdWUgfSksIHt9KTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLnNjaGVtYSxcbiAgICAgICAgICAgIHByb3BlcnR5TmFtZXM6IGtleVR5cGUsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGVsc2UgaWYgKGRlZi5rZXlUeXBlPy5fZGVmLnR5cGVOYW1lID09PSBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kRW51bSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4uc2NoZW1hLFxuICAgICAgICAgICAgcHJvcGVydHlOYW1lczoge1xuICAgICAgICAgICAgICAgIGVudW06IGRlZi5rZXlUeXBlLl9kZWYudmFsdWVzLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHNjaGVtYTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlY29yZC5tanMubWFwIiwiaW1wb3J0IHsgcGFyc2VEZWYgfSBmcm9tIFwiLi4vcGFyc2VEZWYubWpzXCI7XG5pbXBvcnQgeyBwYXJzZVJlY29yZERlZiB9IGZyb20gXCIuL3JlY29yZC5tanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZU1hcERlZihkZWYsIHJlZnMpIHtcbiAgICBpZiAocmVmcy5tYXBTdHJhdGVneSA9PT0gJ3JlY29yZCcpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlUmVjb3JkRGVmKGRlZiwgcmVmcyk7XG4gICAgfVxuICAgIGNvbnN0IGtleXMgPSBwYXJzZURlZihkZWYua2V5VHlwZS5fZGVmLCB7XG4gICAgICAgIC4uLnJlZnMsXG4gICAgICAgIGN1cnJlbnRQYXRoOiBbLi4ucmVmcy5jdXJyZW50UGF0aCwgJ2l0ZW1zJywgJ2l0ZW1zJywgJzAnXSxcbiAgICB9KSB8fCB7fTtcbiAgICBjb25zdCB2YWx1ZXMgPSBwYXJzZURlZihkZWYudmFsdWVUeXBlLl9kZWYsIHtcbiAgICAgICAgLi4ucmVmcyxcbiAgICAgICAgY3VycmVudFBhdGg6IFsuLi5yZWZzLmN1cnJlbnRQYXRoLCAnaXRlbXMnLCAnaXRlbXMnLCAnMSddLFxuICAgIH0pIHx8IHt9O1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdhcnJheScsXG4gICAgICAgIG1heEl0ZW1zOiAxMjUsXG4gICAgICAgIGl0ZW1zOiB7XG4gICAgICAgICAgICB0eXBlOiAnYXJyYXknLFxuICAgICAgICAgICAgaXRlbXM6IFtrZXlzLCB2YWx1ZXNdLFxuICAgICAgICAgICAgbWluSXRlbXM6IDIsXG4gICAgICAgICAgICBtYXhJdGVtczogMixcbiAgICAgICAgfSxcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWFwLm1qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gcGFyc2VOYXRpdmVFbnVtRGVmKGRlZikge1xuICAgIGNvbnN0IG9iamVjdCA9IGRlZi52YWx1ZXM7XG4gICAgY29uc3QgYWN0dWFsS2V5cyA9IE9iamVjdC5rZXlzKGRlZi52YWx1ZXMpLmZpbHRlcigoa2V5KSA9PiB7XG4gICAgICAgIHJldHVybiB0eXBlb2Ygb2JqZWN0W29iamVjdFtrZXldXSAhPT0gJ251bWJlcic7XG4gICAgfSk7XG4gICAgY29uc3QgYWN0dWFsVmFsdWVzID0gYWN0dWFsS2V5cy5tYXAoKGtleSkgPT4gb2JqZWN0W2tleV0pO1xuICAgIGNvbnN0IHBhcnNlZFR5cGVzID0gQXJyYXkuZnJvbShuZXcgU2V0KGFjdHVhbFZhbHVlcy5tYXAoKHZhbHVlcykgPT4gdHlwZW9mIHZhbHVlcykpKTtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBwYXJzZWRUeXBlcy5sZW5ndGggPT09IDEgP1xuICAgICAgICAgICAgcGFyc2VkVHlwZXNbMF0gPT09ICdzdHJpbmcnID9cbiAgICAgICAgICAgICAgICAnc3RyaW5nJ1xuICAgICAgICAgICAgICAgIDogJ251bWJlcidcbiAgICAgICAgICAgIDogWydzdHJpbmcnLCAnbnVtYmVyJ10sXG4gICAgICAgIGVudW06IGFjdHVhbFZhbHVlcyxcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bmF0aXZlRW51bS5tanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIHBhcnNlTmV2ZXJEZWYoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbm90OiB7fSxcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bmV2ZXIubWpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBwYXJzZU51bGxEZWYocmVmcykge1xuICAgIHJldHVybiByZWZzLnRhcmdldCA9PT0gJ29wZW5BcGkzJyA/XG4gICAgICAgIHtcbiAgICAgICAgICAgIGVudW06IFsnbnVsbCddLFxuICAgICAgICAgICAgbnVsbGFibGU6IHRydWUsXG4gICAgICAgIH1cbiAgICAgICAgOiB7XG4gICAgICAgICAgICB0eXBlOiAnbnVsbCcsXG4gICAgICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1udWxsLm1qcy5tYXAiLCJpbXBvcnQgeyBwYXJzZURlZiB9IGZyb20gXCIuLi9wYXJzZURlZi5tanNcIjtcbmV4cG9ydCBjb25zdCBwcmltaXRpdmVNYXBwaW5ncyA9IHtcbiAgICBab2RTdHJpbmc6ICdzdHJpbmcnLFxuICAgIFpvZE51bWJlcjogJ251bWJlcicsXG4gICAgWm9kQmlnSW50OiAnaW50ZWdlcicsXG4gICAgWm9kQm9vbGVhbjogJ2Jvb2xlYW4nLFxuICAgIFpvZE51bGw6ICdudWxsJyxcbn07XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VVbmlvbkRlZihkZWYsIHJlZnMpIHtcbiAgICBpZiAocmVmcy50YXJnZXQgPT09ICdvcGVuQXBpMycpXG4gICAgICAgIHJldHVybiBhc0FueU9mKGRlZiwgcmVmcyk7XG4gICAgY29uc3Qgb3B0aW9ucyA9IGRlZi5vcHRpb25zIGluc3RhbmNlb2YgTWFwID8gQXJyYXkuZnJvbShkZWYub3B0aW9ucy52YWx1ZXMoKSkgOiBkZWYub3B0aW9ucztcbiAgICAvLyBUaGlzIGJsb2NrcyB0cmllcyB0byBsb29rIGFoZWFkIGEgYml0IHRvIHByb2R1Y2UgbmljZXIgbG9va2luZyBzY2hlbWFzIHdpdGggdHlwZSBhcnJheSBpbnN0ZWFkIG9mIGFueU9mLlxuICAgIGlmIChvcHRpb25zLmV2ZXJ5KCh4KSA9PiB4Ll9kZWYudHlwZU5hbWUgaW4gcHJpbWl0aXZlTWFwcGluZ3MgJiYgKCF4Ll9kZWYuY2hlY2tzIHx8ICF4Ll9kZWYuY2hlY2tzLmxlbmd0aCkpKSB7XG4gICAgICAgIC8vIGFsbCB0eXBlcyBpbiB1bmlvbiBhcmUgcHJpbWl0aXZlIGFuZCBsYWNrIGNoZWNrcywgc28gbWlnaHQgYXMgd2VsbCBzcXVhc2ggaW50byB7dHlwZTogWy4uLl19XG4gICAgICAgIGNvbnN0IHR5cGVzID0gb3B0aW9ucy5yZWR1Y2UoKHR5cGVzLCB4KSA9PiB7XG4gICAgICAgICAgICBjb25zdCB0eXBlID0gcHJpbWl0aXZlTWFwcGluZ3NbeC5fZGVmLnR5cGVOYW1lXTsgLy9DYW4gYmUgc2FmZWx5IGNhc3RlZCBkdWUgdG8gcm93IDQzXG4gICAgICAgICAgICByZXR1cm4gdHlwZSAmJiAhdHlwZXMuaW5jbHVkZXModHlwZSkgPyBbLi4udHlwZXMsIHR5cGVdIDogdHlwZXM7XG4gICAgICAgIH0sIFtdKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6IHR5cGVzLmxlbmd0aCA+IDEgPyB0eXBlcyA6IHR5cGVzWzBdLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBlbHNlIGlmIChvcHRpb25zLmV2ZXJ5KCh4KSA9PiB4Ll9kZWYudHlwZU5hbWUgPT09ICdab2RMaXRlcmFsJyAmJiAheC5kZXNjcmlwdGlvbikpIHtcbiAgICAgICAgLy8gYWxsIG9wdGlvbnMgbGl0ZXJhbHNcbiAgICAgICAgY29uc3QgdHlwZXMgPSBvcHRpb25zLnJlZHVjZSgoYWNjLCB4KSA9PiB7XG4gICAgICAgICAgICBjb25zdCB0eXBlID0gdHlwZW9mIHguX2RlZi52YWx1ZTtcbiAgICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgICAgICAgICAgICBjYXNlICdib29sZWFuJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsuLi5hY2MsIHR5cGVdO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2JpZ2ludCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbLi4uYWNjLCAnaW50ZWdlciddO1xuICAgICAgICAgICAgICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICAgICAgICAgICAgICAgIGlmICh4Ll9kZWYudmFsdWUgPT09IG51bGwpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWy4uLmFjYywgJ251bGwnXTtcbiAgICAgICAgICAgICAgICBjYXNlICdzeW1ib2wnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3VuZGVmaW5lZCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIFtdKTtcbiAgICAgICAgaWYgKHR5cGVzLmxlbmd0aCA9PT0gb3B0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgICAgIC8vIGFsbCB0aGUgbGl0ZXJhbHMgYXJlIHByaW1pdGl2ZSwgYXMgZmFyIGFzIG51bGwgY2FuIGJlIGNvbnNpZGVyZWQgcHJpbWl0aXZlXG4gICAgICAgICAgICBjb25zdCB1bmlxdWVUeXBlcyA9IHR5cGVzLmZpbHRlcigoeCwgaSwgYSkgPT4gYS5pbmRleE9mKHgpID09PSBpKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogdW5pcXVlVHlwZXMubGVuZ3RoID4gMSA/IHVuaXF1ZVR5cGVzIDogdW5pcXVlVHlwZXNbMF0sXG4gICAgICAgICAgICAgICAgZW51bTogb3B0aW9ucy5yZWR1Y2UoKGFjYywgeCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWNjLmluY2x1ZGVzKHguX2RlZi52YWx1ZSkgPyBhY2MgOiBbLi4uYWNjLCB4Ll9kZWYudmFsdWVdO1xuICAgICAgICAgICAgICAgIH0sIFtdKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAob3B0aW9ucy5ldmVyeSgoeCkgPT4geC5fZGVmLnR5cGVOYW1lID09PSAnWm9kRW51bScpKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgICAgICAgIGVudW06IG9wdGlvbnMucmVkdWNlKChhY2MsIHgpID0+IFsuLi5hY2MsIC4uLnguX2RlZi52YWx1ZXMuZmlsdGVyKCh4KSA9PiAhYWNjLmluY2x1ZGVzKHgpKV0sIFtdKSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIGFzQW55T2YoZGVmLCByZWZzKTtcbn1cbmNvbnN0IGFzQW55T2YgPSAoZGVmLCByZWZzKSA9PiB7XG4gICAgY29uc3QgYW55T2YgPSAoZGVmLm9wdGlvbnMgaW5zdGFuY2VvZiBNYXAgPyBBcnJheS5mcm9tKGRlZi5vcHRpb25zLnZhbHVlcygpKSA6IGRlZi5vcHRpb25zKVxuICAgICAgICAubWFwKCh4LCBpKSA9PiBwYXJzZURlZih4Ll9kZWYsIHtcbiAgICAgICAgLi4ucmVmcyxcbiAgICAgICAgY3VycmVudFBhdGg6IFsuLi5yZWZzLmN1cnJlbnRQYXRoLCAnYW55T2YnLCBgJHtpfWBdLFxuICAgIH0pKVxuICAgICAgICAuZmlsdGVyKCh4KSA9PiAhIXggJiYgKCFyZWZzLnN0cmljdFVuaW9ucyB8fCAodHlwZW9mIHggPT09ICdvYmplY3QnICYmIE9iamVjdC5rZXlzKHgpLmxlbmd0aCA+IDApKSk7XG4gICAgcmV0dXJuIGFueU9mLmxlbmd0aCA/IHsgYW55T2YgfSA6IHVuZGVmaW5lZDtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11bmlvbi5tanMubWFwIiwiaW1wb3J0IHsgcGFyc2VEZWYgfSBmcm9tIFwiLi4vcGFyc2VEZWYubWpzXCI7XG5pbXBvcnQgeyBwcmltaXRpdmVNYXBwaW5ncyB9IGZyb20gXCIuL3VuaW9uLm1qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlTnVsbGFibGVEZWYoZGVmLCByZWZzKSB7XG4gICAgaWYgKFsnWm9kU3RyaW5nJywgJ1pvZE51bWJlcicsICdab2RCaWdJbnQnLCAnWm9kQm9vbGVhbicsICdab2ROdWxsJ10uaW5jbHVkZXMoZGVmLmlubmVyVHlwZS5fZGVmLnR5cGVOYW1lKSAmJlxuICAgICAgICAoIWRlZi5pbm5lclR5cGUuX2RlZi5jaGVja3MgfHwgIWRlZi5pbm5lclR5cGUuX2RlZi5jaGVja3MubGVuZ3RoKSkge1xuICAgICAgICBpZiAocmVmcy50YXJnZXQgPT09ICdvcGVuQXBpMycgfHwgcmVmcy5udWxsYWJsZVN0cmF0ZWd5ID09PSAncHJvcGVydHknKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6IHByaW1pdGl2ZU1hcHBpbmdzW2RlZi5pbm5lclR5cGUuX2RlZi50eXBlTmFtZV0sXG4gICAgICAgICAgICAgICAgbnVsbGFibGU6IHRydWUsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiBbcHJpbWl0aXZlTWFwcGluZ3NbZGVmLmlubmVyVHlwZS5fZGVmLnR5cGVOYW1lXSwgJ251bGwnXSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaWYgKHJlZnMudGFyZ2V0ID09PSAnb3BlbkFwaTMnKSB7XG4gICAgICAgIGNvbnN0IGJhc2UgPSBwYXJzZURlZihkZWYuaW5uZXJUeXBlLl9kZWYsIHtcbiAgICAgICAgICAgIC4uLnJlZnMsXG4gICAgICAgICAgICBjdXJyZW50UGF0aDogWy4uLnJlZnMuY3VycmVudFBhdGhdLFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGJhc2UgJiYgJyRyZWYnIGluIGJhc2UpXG4gICAgICAgICAgICByZXR1cm4geyBhbGxPZjogW2Jhc2VdLCBudWxsYWJsZTogdHJ1ZSB9O1xuICAgICAgICByZXR1cm4gYmFzZSAmJiB7IC4uLmJhc2UsIG51bGxhYmxlOiB0cnVlIH07XG4gICAgfVxuICAgIGNvbnN0IGJhc2UgPSBwYXJzZURlZihkZWYuaW5uZXJUeXBlLl9kZWYsIHtcbiAgICAgICAgLi4ucmVmcyxcbiAgICAgICAgY3VycmVudFBhdGg6IFsuLi5yZWZzLmN1cnJlbnRQYXRoLCAnYW55T2YnLCAnMCddLFxuICAgIH0pO1xuICAgIHJldHVybiBiYXNlICYmIHsgYW55T2Y6IFtiYXNlLCB7IHR5cGU6ICdudWxsJyB9XSB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bnVsbGFibGUubWpzLm1hcCIsImltcG9ydCB7IGFkZEVycm9yTWVzc2FnZSwgc2V0UmVzcG9uc2VWYWx1ZUFuZEVycm9ycyB9IGZyb20gXCIuLi9lcnJvck1lc3NhZ2VzLm1qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlTnVtYmVyRGVmKGRlZiwgcmVmcykge1xuICAgIGNvbnN0IHJlcyA9IHtcbiAgICAgICAgdHlwZTogJ251bWJlcicsXG4gICAgfTtcbiAgICBpZiAoIWRlZi5jaGVja3MpXG4gICAgICAgIHJldHVybiByZXM7XG4gICAgZm9yIChjb25zdCBjaGVjayBvZiBkZWYuY2hlY2tzKSB7XG4gICAgICAgIHN3aXRjaCAoY2hlY2sua2luZCkge1xuICAgICAgICAgICAgY2FzZSAnaW50JzpcbiAgICAgICAgICAgICAgICByZXMudHlwZSA9ICdpbnRlZ2VyJztcbiAgICAgICAgICAgICAgICBhZGRFcnJvck1lc3NhZ2UocmVzLCAndHlwZScsIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbWluJzpcbiAgICAgICAgICAgICAgICBpZiAocmVmcy50YXJnZXQgPT09ICdqc29uU2NoZW1hNycpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoZWNrLmluY2x1c2l2ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0UmVzcG9uc2VWYWx1ZUFuZEVycm9ycyhyZXMsICdtaW5pbXVtJywgY2hlY2sudmFsdWUsIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0UmVzcG9uc2VWYWx1ZUFuZEVycm9ycyhyZXMsICdleGNsdXNpdmVNaW5pbXVtJywgY2hlY2sudmFsdWUsIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWNoZWNrLmluY2x1c2l2ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzLmV4Y2x1c2l2ZU1pbmltdW0gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHNldFJlc3BvbnNlVmFsdWVBbmRFcnJvcnMocmVzLCAnbWluaW11bScsIGNoZWNrLnZhbHVlLCBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtYXgnOlxuICAgICAgICAgICAgICAgIGlmIChyZWZzLnRhcmdldCA9PT0gJ2pzb25TY2hlbWE3Jykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2hlY2suaW5jbHVzaXZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRSZXNwb25zZVZhbHVlQW5kRXJyb3JzKHJlcywgJ21heGltdW0nLCBjaGVjay52YWx1ZSwgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRSZXNwb25zZVZhbHVlQW5kRXJyb3JzKHJlcywgJ2V4Y2x1c2l2ZU1heGltdW0nLCBjaGVjay52YWx1ZSwgY2hlY2subWVzc2FnZSwgcmVmcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghY2hlY2suaW5jbHVzaXZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXMuZXhjbHVzaXZlTWF4aW11bSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc2V0UmVzcG9uc2VWYWx1ZUFuZEVycm9ycyhyZXMsICdtYXhpbXVtJywgY2hlY2sudmFsdWUsIGNoZWNrLm1lc3NhZ2UsIHJlZnMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ211bHRpcGxlT2YnOlxuICAgICAgICAgICAgICAgIHNldFJlc3BvbnNlVmFsdWVBbmRFcnJvcnMocmVzLCAnbXVsdGlwbGVPZicsIGNoZWNrLnZhbHVlLCBjaGVjay5tZXNzYWdlLCByZWZzKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bnVtYmVyLm1qcy5tYXAiLCJpbXBvcnQgeyBwYXJzZURlZiB9IGZyb20gXCIuLi9wYXJzZURlZi5tanNcIjtcbmZ1bmN0aW9uIGRlY2lkZUFkZGl0aW9uYWxQcm9wZXJ0aWVzKGRlZiwgcmVmcykge1xuICAgIGlmIChyZWZzLnJlbW92ZUFkZGl0aW9uYWxTdHJhdGVneSA9PT0gJ3N0cmljdCcpIHtcbiAgICAgICAgcmV0dXJuIGRlZi5jYXRjaGFsbC5fZGVmLnR5cGVOYW1lID09PSAnWm9kTmV2ZXInID9cbiAgICAgICAgICAgIGRlZi51bmtub3duS2V5cyAhPT0gJ3N0cmljdCdcbiAgICAgICAgICAgIDogcGFyc2VEZWYoZGVmLmNhdGNoYWxsLl9kZWYsIHtcbiAgICAgICAgICAgICAgICAuLi5yZWZzLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRQYXRoOiBbLi4ucmVmcy5jdXJyZW50UGF0aCwgJ2FkZGl0aW9uYWxQcm9wZXJ0aWVzJ10sXG4gICAgICAgICAgICB9KSA/PyB0cnVlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGRlZi5jYXRjaGFsbC5fZGVmLnR5cGVOYW1lID09PSAnWm9kTmV2ZXInID9cbiAgICAgICAgICAgIGRlZi51bmtub3duS2V5cyA9PT0gJ3Bhc3N0aHJvdWdoJ1xuICAgICAgICAgICAgOiBwYXJzZURlZihkZWYuY2F0Y2hhbGwuX2RlZiwge1xuICAgICAgICAgICAgICAgIC4uLnJlZnMsXG4gICAgICAgICAgICAgICAgY3VycmVudFBhdGg6IFsuLi5yZWZzLmN1cnJlbnRQYXRoLCAnYWRkaXRpb25hbFByb3BlcnRpZXMnXSxcbiAgICAgICAgICAgIH0pID8/IHRydWU7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlT2JqZWN0RGVmKGRlZiwgcmVmcykge1xuICAgIGNvbnN0IHJlc3VsdCA9IHtcbiAgICAgICAgdHlwZTogJ29iamVjdCcsXG4gICAgICAgIC4uLk9iamVjdC5lbnRyaWVzKGRlZi5zaGFwZSgpKS5yZWR1Y2UoKGFjYywgW3Byb3BOYW1lLCBwcm9wRGVmXSkgPT4ge1xuICAgICAgICAgICAgaWYgKHByb3BEZWYgPT09IHVuZGVmaW5lZCB8fCBwcm9wRGVmLl9kZWYgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICAgICAgY29uc3QgcHJvcGVydHlQYXRoID0gWy4uLnJlZnMuY3VycmVudFBhdGgsICdwcm9wZXJ0aWVzJywgcHJvcE5hbWVdO1xuICAgICAgICAgICAgY29uc3QgcGFyc2VkRGVmID0gcGFyc2VEZWYocHJvcERlZi5fZGVmLCB7XG4gICAgICAgICAgICAgICAgLi4ucmVmcyxcbiAgICAgICAgICAgICAgICBjdXJyZW50UGF0aDogcHJvcGVydHlQYXRoLFxuICAgICAgICAgICAgICAgIHByb3BlcnR5UGF0aCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKHBhcnNlZERlZiA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgICAgICBpZiAocmVmcy5vcGVuYWlTdHJpY3RNb2RlICYmXG4gICAgICAgICAgICAgICAgcHJvcERlZi5pc09wdGlvbmFsKCkgJiZcbiAgICAgICAgICAgICAgICAhcHJvcERlZi5pc051bGxhYmxlKCkgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgcHJvcERlZi5fZGVmPy5kZWZhdWx0VmFsdWUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBab2QgZmllbGQgYXQgXFxgJHtwcm9wZXJ0eVBhdGguam9pbignLycpfVxcYCB1c2VzIFxcYC5vcHRpb25hbCgpXFxgIHdpdGhvdXQgXFxgLm51bGxhYmxlKClcXGAgd2hpY2ggaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgQVBJLiBTZWU6IGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy9zdHJ1Y3R1cmVkLW91dHB1dHM/YXBpLW1vZGU9cmVzcG9uc2VzI2FsbC1maWVsZHMtbXVzdC1iZS1yZXF1aXJlZGApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICAgICAgICAgIC4uLmFjYy5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAgICAgICAgICBbcHJvcE5hbWVdOiBwYXJzZWREZWYsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICByZXF1aXJlZDogcHJvcERlZi5pc09wdGlvbmFsKCkgJiYgIXJlZnMub3BlbmFpU3RyaWN0TW9kZSA/IGFjYy5yZXF1aXJlZCA6IFsuLi5hY2MucmVxdWlyZWQsIHByb3BOYW1lXSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sIHsgcHJvcGVydGllczoge30sIHJlcXVpcmVkOiBbXSB9KSxcbiAgICAgICAgYWRkaXRpb25hbFByb3BlcnRpZXM6IGRlY2lkZUFkZGl0aW9uYWxQcm9wZXJ0aWVzKGRlZiwgcmVmcyksXG4gICAgfTtcbiAgICBpZiAoIXJlc3VsdC5yZXF1aXJlZC5sZW5ndGgpXG4gICAgICAgIGRlbGV0ZSByZXN1bHQucmVxdWlyZWQ7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9iamVjdC5tanMubWFwIiwiaW1wb3J0IHsgcGFyc2VEZWYgfSBmcm9tIFwiLi4vcGFyc2VEZWYubWpzXCI7XG5leHBvcnQgY29uc3QgcGFyc2VPcHRpb25hbERlZiA9IChkZWYsIHJlZnMpID0+IHtcbiAgICBpZiAocmVmcy5wcm9wZXJ0eVBhdGggJiZcbiAgICAgICAgcmVmcy5jdXJyZW50UGF0aC5zbGljZSgwLCByZWZzLnByb3BlcnR5UGF0aC5sZW5ndGgpLnRvU3RyaW5nKCkgPT09IHJlZnMucHJvcGVydHlQYXRoLnRvU3RyaW5nKCkpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlRGVmKGRlZi5pbm5lclR5cGUuX2RlZiwgeyAuLi5yZWZzLCBjdXJyZW50UGF0aDogcmVmcy5jdXJyZW50UGF0aCB9KTtcbiAgICB9XG4gICAgY29uc3QgaW5uZXJTY2hlbWEgPSBwYXJzZURlZihkZWYuaW5uZXJUeXBlLl9kZWYsIHtcbiAgICAgICAgLi4ucmVmcyxcbiAgICAgICAgY3VycmVudFBhdGg6IFsuLi5yZWZzLmN1cnJlbnRQYXRoLCAnYW55T2YnLCAnMSddLFxuICAgIH0pO1xuICAgIHJldHVybiBpbm5lclNjaGVtYSA/XG4gICAgICAgIHtcbiAgICAgICAgICAgIGFueU9mOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBub3Q6IHt9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaW5uZXJTY2hlbWEsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9XG4gICAgICAgIDoge307XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b3B0aW9uYWwubWpzLm1hcCIsImltcG9ydCB7IHBhcnNlRGVmIH0gZnJvbSBcIi4uL3BhcnNlRGVmLm1qc1wiO1xuZXhwb3J0IGNvbnN0IHBhcnNlUGlwZWxpbmVEZWYgPSAoZGVmLCByZWZzKSA9PiB7XG4gICAgaWYgKHJlZnMucGlwZVN0cmF0ZWd5ID09PSAnaW5wdXQnKSB7XG4gICAgICAgIHJldHVybiBwYXJzZURlZihkZWYuaW4uX2RlZiwgcmVmcyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHJlZnMucGlwZVN0cmF0ZWd5ID09PSAnb3V0cHV0Jykge1xuICAgICAgICByZXR1cm4gcGFyc2VEZWYoZGVmLm91dC5fZGVmLCByZWZzKTtcbiAgICB9XG4gICAgY29uc3QgYSA9IHBhcnNlRGVmKGRlZi5pbi5fZGVmLCB7XG4gICAgICAgIC4uLnJlZnMsXG4gICAgICAgIGN1cnJlbnRQYXRoOiBbLi4ucmVmcy5jdXJyZW50UGF0aCwgJ2FsbE9mJywgJzAnXSxcbiAgICB9KTtcbiAgICBjb25zdCBiID0gcGFyc2VEZWYoZGVmLm91dC5fZGVmLCB7XG4gICAgICAgIC4uLnJlZnMsXG4gICAgICAgIGN1cnJlbnRQYXRoOiBbLi4ucmVmcy5jdXJyZW50UGF0aCwgJ2FsbE9mJywgYSA/ICcxJyA6ICcwJ10sXG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYWxsT2Y6IFthLCBiXS5maWx0ZXIoKHgpID0+IHggIT09IHVuZGVmaW5lZCksXG4gICAgfTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1waXBlbGluZS5tanMubWFwIiwiaW1wb3J0IHsgcGFyc2VEZWYgfSBmcm9tIFwiLi4vcGFyc2VEZWYubWpzXCI7XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VQcm9taXNlRGVmKGRlZiwgcmVmcykge1xuICAgIHJldHVybiBwYXJzZURlZihkZWYudHlwZS5fZGVmLCByZWZzKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb21pc2UubWpzLm1hcCIsImltcG9ydCB7IHNldFJlc3BvbnNlVmFsdWVBbmRFcnJvcnMgfSBmcm9tIFwiLi4vZXJyb3JNZXNzYWdlcy5tanNcIjtcbmltcG9ydCB7IHBhcnNlRGVmIH0gZnJvbSBcIi4uL3BhcnNlRGVmLm1qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlU2V0RGVmKGRlZiwgcmVmcykge1xuICAgIGNvbnN0IGl0ZW1zID0gcGFyc2VEZWYoZGVmLnZhbHVlVHlwZS5fZGVmLCB7XG4gICAgICAgIC4uLnJlZnMsXG4gICAgICAgIGN1cnJlbnRQYXRoOiBbLi4ucmVmcy5jdXJyZW50UGF0aCwgJ2l0ZW1zJ10sXG4gICAgfSk7XG4gICAgY29uc3Qgc2NoZW1hID0ge1xuICAgICAgICB0eXBlOiAnYXJyYXknLFxuICAgICAgICB1bmlxdWVJdGVtczogdHJ1ZSxcbiAgICAgICAgaXRlbXMsXG4gICAgfTtcbiAgICBpZiAoZGVmLm1pblNpemUpIHtcbiAgICAgICAgc2V0UmVzcG9uc2VWYWx1ZUFuZEVycm9ycyhzY2hlbWEsICdtaW5JdGVtcycsIGRlZi5taW5TaXplLnZhbHVlLCBkZWYubWluU2l6ZS5tZXNzYWdlLCByZWZzKTtcbiAgICB9XG4gICAgaWYgKGRlZi5tYXhTaXplKSB7XG4gICAgICAgIHNldFJlc3BvbnNlVmFsdWVBbmRFcnJvcnMoc2NoZW1hLCAnbWF4SXRlbXMnLCBkZWYubWF4U2l6ZS52YWx1ZSwgZGVmLm1heFNpemUubWVzc2FnZSwgcmVmcyk7XG4gICAgfVxuICAgIHJldHVybiBzY2hlbWE7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZXQubWpzLm1hcCIsImltcG9ydCB7IHBhcnNlRGVmIH0gZnJvbSBcIi4uL3BhcnNlRGVmLm1qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVHVwbGVEZWYoZGVmLCByZWZzKSB7XG4gICAgaWYgKGRlZi5yZXN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiAnYXJyYXknLFxuICAgICAgICAgICAgbWluSXRlbXM6IGRlZi5pdGVtcy5sZW5ndGgsXG4gICAgICAgICAgICBpdGVtczogZGVmLml0ZW1zXG4gICAgICAgICAgICAgICAgLm1hcCgoeCwgaSkgPT4gcGFyc2VEZWYoeC5fZGVmLCB7XG4gICAgICAgICAgICAgICAgLi4ucmVmcyxcbiAgICAgICAgICAgICAgICBjdXJyZW50UGF0aDogWy4uLnJlZnMuY3VycmVudFBhdGgsICdpdGVtcycsIGAke2l9YF0sXG4gICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICAgICAucmVkdWNlKChhY2MsIHgpID0+ICh4ID09PSB1bmRlZmluZWQgPyBhY2MgOiBbLi4uYWNjLCB4XSksIFtdKSxcbiAgICAgICAgICAgIGFkZGl0aW9uYWxJdGVtczogcGFyc2VEZWYoZGVmLnJlc3QuX2RlZiwge1xuICAgICAgICAgICAgICAgIC4uLnJlZnMsXG4gICAgICAgICAgICAgICAgY3VycmVudFBhdGg6IFsuLi5yZWZzLmN1cnJlbnRQYXRoLCAnYWRkaXRpb25hbEl0ZW1zJ10sXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiAnYXJyYXknLFxuICAgICAgICAgICAgbWluSXRlbXM6IGRlZi5pdGVtcy5sZW5ndGgsXG4gICAgICAgICAgICBtYXhJdGVtczogZGVmLml0ZW1zLmxlbmd0aCxcbiAgICAgICAgICAgIGl0ZW1zOiBkZWYuaXRlbXNcbiAgICAgICAgICAgICAgICAubWFwKCh4LCBpKSA9PiBwYXJzZURlZih4Ll9kZWYsIHtcbiAgICAgICAgICAgICAgICAuLi5yZWZzLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRQYXRoOiBbLi4ucmVmcy5jdXJyZW50UGF0aCwgJ2l0ZW1zJywgYCR7aX1gXSxcbiAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgICAgIC5yZWR1Y2UoKGFjYywgeCkgPT4gKHggPT09IHVuZGVmaW5lZCA/IGFjYyA6IFsuLi5hY2MsIHhdKSwgW10pLFxuICAgICAgICB9O1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR1cGxlLm1qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gcGFyc2VVbmRlZmluZWREZWYoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbm90OiB7fSxcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dW5kZWZpbmVkLm1qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gcGFyc2VVbmtub3duRGVmKCkge1xuICAgIHJldHVybiB7fTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVua25vd24ubWpzLm1hcCIsImltcG9ydCB7IHBhcnNlRGVmIH0gZnJvbSBcIi4uL3BhcnNlRGVmLm1qc1wiO1xuZXhwb3J0IGNvbnN0IHBhcnNlUmVhZG9ubHlEZWYgPSAoZGVmLCByZWZzKSA9PiB7XG4gICAgcmV0dXJuIHBhcnNlRGVmKGRlZi5pbm5lclR5cGUuX2RlZiwgcmVmcyk7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVhZG9ubHkubWpzLm1hcCIsImltcG9ydCB7IFpvZEZpcnN0UGFydHlUeXBlS2luZCB9IGZyb20gJ3pvZCc7XG5pbXBvcnQgeyBwYXJzZUFueURlZiB9IGZyb20gXCIuL3BhcnNlcnMvYW55Lm1qc1wiO1xuaW1wb3J0IHsgcGFyc2VBcnJheURlZiB9IGZyb20gXCIuL3BhcnNlcnMvYXJyYXkubWpzXCI7XG5pbXBvcnQgeyBwYXJzZUJpZ2ludERlZiB9IGZyb20gXCIuL3BhcnNlcnMvYmlnaW50Lm1qc1wiO1xuaW1wb3J0IHsgcGFyc2VCb29sZWFuRGVmIH0gZnJvbSBcIi4vcGFyc2Vycy9ib29sZWFuLm1qc1wiO1xuaW1wb3J0IHsgcGFyc2VCcmFuZGVkRGVmIH0gZnJvbSBcIi4vcGFyc2Vycy9icmFuZGVkLm1qc1wiO1xuaW1wb3J0IHsgcGFyc2VDYXRjaERlZiB9IGZyb20gXCIuL3BhcnNlcnMvY2F0Y2gubWpzXCI7XG5pbXBvcnQgeyBwYXJzZURhdGVEZWYgfSBmcm9tIFwiLi9wYXJzZXJzL2RhdGUubWpzXCI7XG5pbXBvcnQgeyBwYXJzZURlZmF1bHREZWYgfSBmcm9tIFwiLi9wYXJzZXJzL2RlZmF1bHQubWpzXCI7XG5pbXBvcnQgeyBwYXJzZUVmZmVjdHNEZWYgfSBmcm9tIFwiLi9wYXJzZXJzL2VmZmVjdHMubWpzXCI7XG5pbXBvcnQgeyBwYXJzZUVudW1EZWYgfSBmcm9tIFwiLi9wYXJzZXJzL2VudW0ubWpzXCI7XG5pbXBvcnQgeyBwYXJzZUludGVyc2VjdGlvbkRlZiB9IGZyb20gXCIuL3BhcnNlcnMvaW50ZXJzZWN0aW9uLm1qc1wiO1xuaW1wb3J0IHsgcGFyc2VMaXRlcmFsRGVmIH0gZnJvbSBcIi4vcGFyc2Vycy9saXRlcmFsLm1qc1wiO1xuaW1wb3J0IHsgcGFyc2VNYXBEZWYgfSBmcm9tIFwiLi9wYXJzZXJzL21hcC5tanNcIjtcbmltcG9ydCB7IHBhcnNlTmF0aXZlRW51bURlZiB9IGZyb20gXCIuL3BhcnNlcnMvbmF0aXZlRW51bS5tanNcIjtcbmltcG9ydCB7IHBhcnNlTmV2ZXJEZWYgfSBmcm9tIFwiLi9wYXJzZXJzL25ldmVyLm1qc1wiO1xuaW1wb3J0IHsgcGFyc2VOdWxsRGVmIH0gZnJvbSBcIi4vcGFyc2Vycy9udWxsLm1qc1wiO1xuaW1wb3J0IHsgcGFyc2VOdWxsYWJsZURlZiB9IGZyb20gXCIuL3BhcnNlcnMvbnVsbGFibGUubWpzXCI7XG5pbXBvcnQgeyBwYXJzZU51bWJlckRlZiB9IGZyb20gXCIuL3BhcnNlcnMvbnVtYmVyLm1qc1wiO1xuaW1wb3J0IHsgcGFyc2VPYmplY3REZWYgfSBmcm9tIFwiLi9wYXJzZXJzL29iamVjdC5tanNcIjtcbmltcG9ydCB7IHBhcnNlT3B0aW9uYWxEZWYgfSBmcm9tIFwiLi9wYXJzZXJzL29wdGlvbmFsLm1qc1wiO1xuaW1wb3J0IHsgcGFyc2VQaXBlbGluZURlZiB9IGZyb20gXCIuL3BhcnNlcnMvcGlwZWxpbmUubWpzXCI7XG5pbXBvcnQgeyBwYXJzZVByb21pc2VEZWYgfSBmcm9tIFwiLi9wYXJzZXJzL3Byb21pc2UubWpzXCI7XG5pbXBvcnQgeyBwYXJzZVJlY29yZERlZiB9IGZyb20gXCIuL3BhcnNlcnMvcmVjb3JkLm1qc1wiO1xuaW1wb3J0IHsgcGFyc2VTZXREZWYgfSBmcm9tIFwiLi9wYXJzZXJzL3NldC5tanNcIjtcbmltcG9ydCB7IHBhcnNlU3RyaW5nRGVmIH0gZnJvbSBcIi4vcGFyc2Vycy9zdHJpbmcubWpzXCI7XG5pbXBvcnQgeyBwYXJzZVR1cGxlRGVmIH0gZnJvbSBcIi4vcGFyc2Vycy90dXBsZS5tanNcIjtcbmltcG9ydCB7IHBhcnNlVW5kZWZpbmVkRGVmIH0gZnJvbSBcIi4vcGFyc2Vycy91bmRlZmluZWQubWpzXCI7XG5pbXBvcnQgeyBwYXJzZVVuaW9uRGVmIH0gZnJvbSBcIi4vcGFyc2Vycy91bmlvbi5tanNcIjtcbmltcG9ydCB7IHBhcnNlVW5rbm93bkRlZiB9IGZyb20gXCIuL3BhcnNlcnMvdW5rbm93bi5tanNcIjtcbmltcG9ydCB7IHBhcnNlUmVhZG9ubHlEZWYgfSBmcm9tIFwiLi9wYXJzZXJzL3JlYWRvbmx5Lm1qc1wiO1xuaW1wb3J0IHsgaWdub3JlT3ZlcnJpZGUgfSBmcm9tIFwiLi9PcHRpb25zLm1qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlRGVmKGRlZiwgcmVmcywgZm9yY2VSZXNvbHV0aW9uID0gZmFsc2UpIHtcbiAgICBjb25zdCBzZWVuSXRlbSA9IHJlZnMuc2Vlbi5nZXQoZGVmKTtcbiAgICBpZiAocmVmcy5vdmVycmlkZSkge1xuICAgICAgICBjb25zdCBvdmVycmlkZVJlc3VsdCA9IHJlZnMub3ZlcnJpZGU/LihkZWYsIHJlZnMsIHNlZW5JdGVtLCBmb3JjZVJlc29sdXRpb24pO1xuICAgICAgICBpZiAob3ZlcnJpZGVSZXN1bHQgIT09IGlnbm9yZU92ZXJyaWRlKSB7XG4gICAgICAgICAgICByZXR1cm4gb3ZlcnJpZGVSZXN1bHQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHNlZW5JdGVtICYmICFmb3JjZVJlc29sdXRpb24pIHtcbiAgICAgICAgY29uc3Qgc2VlblNjaGVtYSA9IGdldCRyZWYoc2Vlbkl0ZW0sIHJlZnMpO1xuICAgICAgICBpZiAoc2VlblNjaGVtYSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoJyRyZWYnIGluIHNlZW5TY2hlbWEpIHtcbiAgICAgICAgICAgICAgICByZWZzLnNlZW5SZWZzLmFkZChzZWVuU2NoZW1hLiRyZWYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHNlZW5TY2hlbWE7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgbmV3SXRlbSA9IHsgZGVmLCBwYXRoOiByZWZzLmN1cnJlbnRQYXRoLCBqc29uU2NoZW1hOiB1bmRlZmluZWQgfTtcbiAgICByZWZzLnNlZW4uc2V0KGRlZiwgbmV3SXRlbSk7XG4gICAgY29uc3QganNvblNjaGVtYSA9IHNlbGVjdFBhcnNlcihkZWYsIGRlZi50eXBlTmFtZSwgcmVmcywgZm9yY2VSZXNvbHV0aW9uKTtcbiAgICBpZiAoanNvblNjaGVtYSkge1xuICAgICAgICBhZGRNZXRhKGRlZiwgcmVmcywganNvblNjaGVtYSk7XG4gICAgfVxuICAgIG5ld0l0ZW0uanNvblNjaGVtYSA9IGpzb25TY2hlbWE7XG4gICAgcmV0dXJuIGpzb25TY2hlbWE7XG59XG5jb25zdCBnZXQkcmVmID0gKGl0ZW0sIHJlZnMpID0+IHtcbiAgICBzd2l0Y2ggKHJlZnMuJHJlZlN0cmF0ZWd5KSB7XG4gICAgICAgIGNhc2UgJ3Jvb3QnOlxuICAgICAgICAgICAgcmV0dXJuIHsgJHJlZjogaXRlbS5wYXRoLmpvaW4oJy8nKSB9O1xuICAgICAgICAvLyB0aGlzIGNhc2UgaXMgbmVlZGVkIGFzIE9wZW5BSSBzdHJpY3QgbW9kZSBkb2Vzbid0IHN1cHBvcnQgdG9wLWxldmVsIGAkcmVmYHMsIGkuZS5cbiAgICAgICAgLy8gdGhlIHRvcC1sZXZlbCBzY2hlbWEgKm11c3QqIGJlIGB7XCJ0eXBlXCI6IFwib2JqZWN0XCIsIFwicHJvcGVydGllc1wiOiB7Li4ufX1gIGJ1dCBpZiB3ZSBldmVyXG4gICAgICAgIC8vIG5lZWQgdG8gZGVmaW5lIGEgYCRyZWZgLCByZWxhdGl2ZSBgJHJlZmBzIGFyZW4ndCBzdXBwb3J0ZWQsIHNvIHdlIG5lZWQgdG8gZXh0cmFjdFxuICAgICAgICAvLyB0aGUgc2NoZW1hIHRvIGAjL2RlZmluaXRpb25zL2AgYW5kIHJlZmVyZW5jZSB0aGF0LlxuICAgICAgICAvL1xuICAgICAgICAvLyBlLmcuIGlmIHdlIG5lZWQgdG8gcmVmZXJlbmNlIGEgc2NoZW1hIGF0XG4gICAgICAgIC8vIGBbXCIjXCIsXCJkZWZpbml0aW9uc1wiLFwiY29udGFjdFBlcnNvblwiLFwicHJvcGVydGllc1wiLFwicGVyc29uMVwiLFwicHJvcGVydGllc1wiLFwibmFtZVwiXWBcbiAgICAgICAgLy8gdGhlbiB3ZSdsbCBleHRyYWN0IGl0IG91dCB0byBgY29udGFjdFBlcnNvbl9wcm9wZXJ0aWVzX3BlcnNvbjFfcHJvcGVydGllc19uYW1lYFxuICAgICAgICBjYXNlICdleHRyYWN0LXRvLXJvb3QnOlxuICAgICAgICAgICAgY29uc3QgbmFtZSA9IGl0ZW0ucGF0aC5zbGljZShyZWZzLmJhc2VQYXRoLmxlbmd0aCArIDEpLmpvaW4oJ18nKTtcbiAgICAgICAgICAgIC8vIHdlIGRvbid0IG5lZWQgdG8gZXh0cmFjdCB0aGUgcm9vdCBzY2hlbWEgaW4gdGhpcyBjYXNlLCBhcyBpdCdzIGFscmVhZHlcbiAgICAgICAgICAgIC8vIGJlZW4gYWRkZWQgdG8gdGhlIGRlZmluaXRpb25zXG4gICAgICAgICAgICBpZiAobmFtZSAhPT0gcmVmcy5uYW1lICYmIHJlZnMubmFtZVN0cmF0ZWd5ID09PSAnZHVwbGljYXRlLXJlZicpIHtcbiAgICAgICAgICAgICAgICByZWZzLmRlZmluaXRpb25zW25hbWVdID0gaXRlbS5kZWY7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4geyAkcmVmOiBbLi4ucmVmcy5iYXNlUGF0aCwgcmVmcy5kZWZpbml0aW9uUGF0aCwgbmFtZV0uam9pbignLycpIH07XG4gICAgICAgIGNhc2UgJ3JlbGF0aXZlJzpcbiAgICAgICAgICAgIHJldHVybiB7ICRyZWY6IGdldFJlbGF0aXZlUGF0aChyZWZzLmN1cnJlbnRQYXRoLCBpdGVtLnBhdGgpIH07XG4gICAgICAgIGNhc2UgJ25vbmUnOlxuICAgICAgICBjYXNlICdzZWVuJzoge1xuICAgICAgICAgICAgaWYgKGl0ZW0ucGF0aC5sZW5ndGggPCByZWZzLmN1cnJlbnRQYXRoLmxlbmd0aCAmJlxuICAgICAgICAgICAgICAgIGl0ZW0ucGF0aC5ldmVyeSgodmFsdWUsIGluZGV4KSA9PiByZWZzLmN1cnJlbnRQYXRoW2luZGV4XSA9PT0gdmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGBSZWN1cnNpdmUgcmVmZXJlbmNlIGRldGVjdGVkIGF0ICR7cmVmcy5jdXJyZW50UGF0aC5qb2luKCcvJyl9ISBEZWZhdWx0aW5nIHRvIGFueWApO1xuICAgICAgICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZWZzLiRyZWZTdHJhdGVneSA9PT0gJ3NlZW4nID8ge30gOiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9XG59O1xuY29uc3QgZ2V0UmVsYXRpdmVQYXRoID0gKHBhdGhBLCBwYXRoQikgPT4ge1xuICAgIGxldCBpID0gMDtcbiAgICBmb3IgKDsgaSA8IHBhdGhBLmxlbmd0aCAmJiBpIDwgcGF0aEIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHBhdGhBW2ldICE9PSBwYXRoQltpXSlcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gWyhwYXRoQS5sZW5ndGggLSBpKS50b1N0cmluZygpLCAuLi5wYXRoQi5zbGljZShpKV0uam9pbignLycpO1xufTtcbmNvbnN0IHNlbGVjdFBhcnNlciA9IChkZWYsIHR5cGVOYW1lLCByZWZzLCBmb3JjZVJlc29sdXRpb24pID0+IHtcbiAgICBzd2l0Y2ggKHR5cGVOYW1lKSB7XG4gICAgICAgIGNhc2UgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZFN0cmluZzpcbiAgICAgICAgICAgIHJldHVybiBwYXJzZVN0cmluZ0RlZihkZWYsIHJlZnMpO1xuICAgICAgICBjYXNlIFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2ROdW1iZXI6XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VOdW1iZXJEZWYoZGVmLCByZWZzKTtcbiAgICAgICAgY2FzZSBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kT2JqZWN0OlxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlT2JqZWN0RGVmKGRlZiwgcmVmcyk7XG4gICAgICAgIGNhc2UgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZEJpZ0ludDpcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUJpZ2ludERlZihkZWYsIHJlZnMpO1xuICAgICAgICBjYXNlIFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RCb29sZWFuOlxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlQm9vbGVhbkRlZigpO1xuICAgICAgICBjYXNlIFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2REYXRlOlxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlRGF0ZURlZihkZWYsIHJlZnMpO1xuICAgICAgICBjYXNlIFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RVbmRlZmluZWQ6XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VVbmRlZmluZWREZWYoKTtcbiAgICAgICAgY2FzZSBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kTnVsbDpcbiAgICAgICAgICAgIHJldHVybiBwYXJzZU51bGxEZWYocmVmcyk7XG4gICAgICAgIGNhc2UgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZEFycmF5OlxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlQXJyYXlEZWYoZGVmLCByZWZzKTtcbiAgICAgICAgY2FzZSBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kVW5pb246XG4gICAgICAgIGNhc2UgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZERpc2NyaW1pbmF0ZWRVbmlvbjpcbiAgICAgICAgICAgIHJldHVybiBwYXJzZVVuaW9uRGVmKGRlZiwgcmVmcyk7XG4gICAgICAgIGNhc2UgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZEludGVyc2VjdGlvbjpcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUludGVyc2VjdGlvbkRlZihkZWYsIHJlZnMpO1xuICAgICAgICBjYXNlIFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RUdXBsZTpcbiAgICAgICAgICAgIHJldHVybiBwYXJzZVR1cGxlRGVmKGRlZiwgcmVmcyk7XG4gICAgICAgIGNhc2UgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZFJlY29yZDpcbiAgICAgICAgICAgIHJldHVybiBwYXJzZVJlY29yZERlZihkZWYsIHJlZnMpO1xuICAgICAgICBjYXNlIFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RMaXRlcmFsOlxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlTGl0ZXJhbERlZihkZWYsIHJlZnMpO1xuICAgICAgICBjYXNlIFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RFbnVtOlxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlRW51bURlZihkZWYpO1xuICAgICAgICBjYXNlIFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2ROYXRpdmVFbnVtOlxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlTmF0aXZlRW51bURlZihkZWYpO1xuICAgICAgICBjYXNlIFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2ROdWxsYWJsZTpcbiAgICAgICAgICAgIHJldHVybiBwYXJzZU51bGxhYmxlRGVmKGRlZiwgcmVmcyk7XG4gICAgICAgIGNhc2UgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZE9wdGlvbmFsOlxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlT3B0aW9uYWxEZWYoZGVmLCByZWZzKTtcbiAgICAgICAgY2FzZSBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kTWFwOlxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlTWFwRGVmKGRlZiwgcmVmcyk7XG4gICAgICAgIGNhc2UgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZFNldDpcbiAgICAgICAgICAgIHJldHVybiBwYXJzZVNldERlZihkZWYsIHJlZnMpO1xuICAgICAgICBjYXNlIFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RMYXp5OlxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlRGVmKGRlZi5nZXR0ZXIoKS5fZGVmLCByZWZzKTtcbiAgICAgICAgY2FzZSBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kUHJvbWlzZTpcbiAgICAgICAgICAgIHJldHVybiBwYXJzZVByb21pc2VEZWYoZGVmLCByZWZzKTtcbiAgICAgICAgY2FzZSBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kTmFOOlxuICAgICAgICBjYXNlIFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2ROZXZlcjpcbiAgICAgICAgICAgIHJldHVybiBwYXJzZU5ldmVyRGVmKCk7XG4gICAgICAgIGNhc2UgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZEVmZmVjdHM6XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VFZmZlY3RzRGVmKGRlZiwgcmVmcywgZm9yY2VSZXNvbHV0aW9uKTtcbiAgICAgICAgY2FzZSBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kQW55OlxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlQW55RGVmKCk7XG4gICAgICAgIGNhc2UgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZFVua25vd246XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VVbmtub3duRGVmKCk7XG4gICAgICAgIGNhc2UgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZERlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VEZWZhdWx0RGVmKGRlZiwgcmVmcyk7XG4gICAgICAgIGNhc2UgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZEJyYW5kZWQ6XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VCcmFuZGVkRGVmKGRlZiwgcmVmcyk7XG4gICAgICAgIGNhc2UgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZFJlYWRvbmx5OlxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlUmVhZG9ubHlEZWYoZGVmLCByZWZzKTtcbiAgICAgICAgY2FzZSBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kQ2F0Y2g6XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VDYXRjaERlZihkZWYsIHJlZnMpO1xuICAgICAgICBjYXNlIFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RQaXBlbGluZTpcbiAgICAgICAgICAgIHJldHVybiBwYXJzZVBpcGVsaW5lRGVmKGRlZiwgcmVmcyk7XG4gICAgICAgIGNhc2UgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZEZ1bmN0aW9uOlxuICAgICAgICBjYXNlIFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RWb2lkOlxuICAgICAgICBjYXNlIFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RTeW1ib2w6XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuICgoXykgPT4gdW5kZWZpbmVkKSh0eXBlTmFtZSk7XG4gICAgfVxufTtcbmNvbnN0IGFkZE1ldGEgPSAoZGVmLCByZWZzLCBqc29uU2NoZW1hKSA9PiB7XG4gICAgaWYgKGRlZi5kZXNjcmlwdGlvbikge1xuICAgICAgICBqc29uU2NoZW1hLmRlc2NyaXB0aW9uID0gZGVmLmRlc2NyaXB0aW9uO1xuICAgICAgICBpZiAocmVmcy5tYXJrZG93bkRlc2NyaXB0aW9uKSB7XG4gICAgICAgICAgICBqc29uU2NoZW1hLm1hcmtkb3duRGVzY3JpcHRpb24gPSBkZWYuZGVzY3JpcHRpb247XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGpzb25TY2hlbWE7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFyc2VEZWYubWpzLm1hcCIsImltcG9ydCB7IHBhcnNlRGVmIH0gZnJvbSBcIi4vcGFyc2VEZWYubWpzXCI7XG5pbXBvcnQgeyBnZXRSZWZzIH0gZnJvbSBcIi4vUmVmcy5tanNcIjtcbmltcG9ydCB7IHpvZERlZiwgaXNFbXB0eU9iaiB9IGZyb20gXCIuL3V0aWwubWpzXCI7XG5jb25zdCB6b2RUb0pzb25TY2hlbWEgPSAoc2NoZW1hLCBvcHRpb25zKSA9PiB7XG4gICAgY29uc3QgcmVmcyA9IGdldFJlZnMob3B0aW9ucyk7XG4gICAgY29uc3QgbmFtZSA9IHR5cGVvZiBvcHRpb25zID09PSAnc3RyaW5nJyA/IG9wdGlvbnNcbiAgICAgICAgOiBvcHRpb25zPy5uYW1lU3RyYXRlZ3kgPT09ICd0aXRsZScgPyB1bmRlZmluZWRcbiAgICAgICAgICAgIDogb3B0aW9ucz8ubmFtZTtcbiAgICBjb25zdCBtYWluID0gcGFyc2VEZWYoc2NoZW1hLl9kZWYsIG5hbWUgPT09IHVuZGVmaW5lZCA/IHJlZnMgOiAoe1xuICAgICAgICAuLi5yZWZzLFxuICAgICAgICBjdXJyZW50UGF0aDogWy4uLnJlZnMuYmFzZVBhdGgsIHJlZnMuZGVmaW5pdGlvblBhdGgsIG5hbWVdLFxuICAgIH0pLCBmYWxzZSkgPz8ge307XG4gICAgY29uc3QgdGl0bGUgPSB0eXBlb2Ygb3B0aW9ucyA9PT0gJ29iamVjdCcgJiYgb3B0aW9ucy5uYW1lICE9PSB1bmRlZmluZWQgJiYgb3B0aW9ucy5uYW1lU3RyYXRlZ3kgPT09ICd0aXRsZScgP1xuICAgICAgICBvcHRpb25zLm5hbWVcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgaWYgKHRpdGxlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbWFpbi50aXRsZSA9IHRpdGxlO1xuICAgIH1cbiAgICBjb25zdCBkZWZpbml0aW9ucyA9ICgoKSA9PiB7XG4gICAgICAgIGlmIChpc0VtcHR5T2JqKHJlZnMuZGVmaW5pdGlvbnMpKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRlZmluaXRpb25zID0ge307XG4gICAgICAgIGNvbnN0IHByb2Nlc3NlZERlZmluaXRpb25zID0gbmV3IFNldCgpO1xuICAgICAgICAvLyB0aGUgY2FsbCB0byBgcGFyc2VEZWYoKWAgaGVyZSBtaWdodCBpdHNlbGYgYWRkIG1vcmUgZW50cmllcyB0byBgLmRlZmluaXRpb25zYFxuICAgICAgICAvLyBzbyB3ZSBuZWVkIHRvIGNvbnRpbnVhbGx5IGV2YWx1YXRlIGRlZmluaXRpb25zIHVudGlsIHdlJ3ZlIHJlc29sdmVkIGFsbCBvZiB0aGVtXG4gICAgICAgIC8vXG4gICAgICAgIC8vIHdlIGhhdmUgYSBnZW5lcm91cyBpdGVyYXRpb24gbGltaXQgaGVyZSB0byBhdm9pZCBibG93aW5nIHVwIHRoZSBzdGFjayBpZiB0aGVyZVxuICAgICAgICAvLyBhcmUgYW55IGJ1Z3MgdGhhdCB3b3VsZCBvdGhlcndpc2UgcmVzdWx0IGluIHVzIGl0ZXJhdGluZyBpbmRlZmluaXRlbHlcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA1MDA7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgbmV3RGVmaW5pdGlvbnMgPSBPYmplY3QuZW50cmllcyhyZWZzLmRlZmluaXRpb25zKS5maWx0ZXIoKFtrZXldKSA9PiAhcHJvY2Vzc2VkRGVmaW5pdGlvbnMuaGFzKGtleSkpO1xuICAgICAgICAgICAgaWYgKG5ld0RlZmluaXRpb25zLmxlbmd0aCA9PT0gMClcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGZvciAoY29uc3QgW2tleSwgc2NoZW1hXSBvZiBuZXdEZWZpbml0aW9ucykge1xuICAgICAgICAgICAgICAgIGRlZmluaXRpb25zW2tleV0gPVxuICAgICAgICAgICAgICAgICAgICBwYXJzZURlZih6b2REZWYoc2NoZW1hKSwgeyAuLi5yZWZzLCBjdXJyZW50UGF0aDogWy4uLnJlZnMuYmFzZVBhdGgsIHJlZnMuZGVmaW5pdGlvblBhdGgsIGtleV0gfSwgdHJ1ZSkgPz8ge307XG4gICAgICAgICAgICAgICAgcHJvY2Vzc2VkRGVmaW5pdGlvbnMuYWRkKGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRlZmluaXRpb25zO1xuICAgIH0pKCk7XG4gICAgY29uc3QgY29tYmluZWQgPSBuYW1lID09PSB1bmRlZmluZWQgP1xuICAgICAgICBkZWZpbml0aW9ucyA/XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgLi4ubWFpbixcbiAgICAgICAgICAgICAgICBbcmVmcy5kZWZpbml0aW9uUGF0aF06IGRlZmluaXRpb25zLFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiBtYWluXG4gICAgICAgIDogcmVmcy5uYW1lU3RyYXRlZ3kgPT09ICdkdXBsaWNhdGUtcmVmJyA/XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgLi4ubWFpbixcbiAgICAgICAgICAgICAgICAuLi4oZGVmaW5pdGlvbnMgfHwgcmVmcy5zZWVuUmVmcy5zaXplID9cbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgW3JlZnMuZGVmaW5pdGlvblBhdGhdOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uZGVmaW5pdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gb25seSBhY3R1YWxseSBkdXBsaWNhdGUgdGhlIHNjaGVtYSBkZWZpbml0aW9uIGlmIGl0IHdhcyBldmVyIHJlZmVyZW5jZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBvdGhlcndpc2UgdGhlIGR1cGxpY2F0aW9uIGlzIGNvbXBsZXRlbHkgcG9pbnRsZXNzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uKHJlZnMuc2VlblJlZnMuc2l6ZSA/IHsgW25hbWVdOiBtYWluIH0gOiB1bmRlZmluZWQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCksXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICA6IHtcbiAgICAgICAgICAgICAgICAkcmVmOiBbLi4uKHJlZnMuJHJlZlN0cmF0ZWd5ID09PSAncmVsYXRpdmUnID8gW10gOiByZWZzLmJhc2VQYXRoKSwgcmVmcy5kZWZpbml0aW9uUGF0aCwgbmFtZV0uam9pbignLycpLFxuICAgICAgICAgICAgICAgIFtyZWZzLmRlZmluaXRpb25QYXRoXToge1xuICAgICAgICAgICAgICAgICAgICAuLi5kZWZpbml0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgW25hbWVdOiBtYWluLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9O1xuICAgIGlmIChyZWZzLnRhcmdldCA9PT0gJ2pzb25TY2hlbWE3Jykge1xuICAgICAgICBjb21iaW5lZC4kc2NoZW1hID0gJ2h0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyc7XG4gICAgfVxuICAgIGVsc2UgaWYgKHJlZnMudGFyZ2V0ID09PSAnanNvblNjaGVtYTIwMTktMDknKSB7XG4gICAgICAgIGNvbWJpbmVkLiRzY2hlbWEgPSAnaHR0cHM6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQvMjAxOS0wOS9zY2hlbWEjJztcbiAgICB9XG4gICAgcmV0dXJuIGNvbWJpbmVkO1xufTtcbmV4cG9ydCB7IHpvZFRvSnNvblNjaGVtYSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9em9kVG9Kc29uU2NoZW1hLm1qcy5tYXAiLCJpbXBvcnQgeyBPcGVuQUlFcnJvciB9IGZyb20gXCIuLi9lcnJvci5tanNcIjtcbmltcG9ydCB7IGlzQXV0b1BhcnNhYmxlUmVzcG9uc2VGb3JtYXQgfSBmcm9tIFwiLi4vbGliL3BhcnNlci5tanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBtYXliZVBhcnNlUmVzcG9uc2UocmVzcG9uc2UsIHBhcmFtcykge1xuICAgIGlmICghcGFyYW1zIHx8ICFoYXNBdXRvUGFyc2VhYmxlSW5wdXQocGFyYW1zKSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4ucmVzcG9uc2UsXG4gICAgICAgICAgICBvdXRwdXRfcGFyc2VkOiBudWxsLFxuICAgICAgICAgICAgb3V0cHV0OiByZXNwb25zZS5vdXRwdXQubWFwKChpdGVtKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGl0ZW0udHlwZSA9PT0gJ2Z1bmN0aW9uX2NhbGwnKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5pdGVtLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VkX2FyZ3VtZW50czogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGl0ZW0udHlwZSA9PT0gJ21lc3NhZ2UnKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5pdGVtLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogaXRlbS5jb250ZW50Lm1hcCgoY29udGVudCkgPT4gKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5jb250ZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlZDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpdGVtO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLFxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gcGFyc2VSZXNwb25zZShyZXNwb25zZSwgcGFyYW1zKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVJlc3BvbnNlKHJlc3BvbnNlLCBwYXJhbXMpIHtcbiAgICBjb25zdCBvdXRwdXQgPSByZXNwb25zZS5vdXRwdXQubWFwKChpdGVtKSA9PiB7XG4gICAgICAgIGlmIChpdGVtLnR5cGUgPT09ICdmdW5jdGlvbl9jYWxsJykge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5pdGVtLFxuICAgICAgICAgICAgICAgIHBhcnNlZF9hcmd1bWVudHM6IHBhcnNlVG9vbENhbGwocGFyYW1zLCBpdGVtKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGl0ZW0udHlwZSA9PT0gJ21lc3NhZ2UnKSB7XG4gICAgICAgICAgICBjb25zdCBjb250ZW50ID0gaXRlbS5jb250ZW50Lm1hcCgoY29udGVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChjb250ZW50LnR5cGUgPT09ICdvdXRwdXRfdGV4dCcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLmNvbnRlbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJzZWQ6IHBhcnNlVGV4dEZvcm1hdChwYXJhbXMsIGNvbnRlbnQudGV4dCksXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBjb250ZW50O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLml0ZW0sXG4gICAgICAgICAgICAgICAgY29udGVudCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgfSk7XG4gICAgY29uc3QgcGFyc2VkID0gT2JqZWN0LmFzc2lnbih7fSwgcmVzcG9uc2UsIHsgb3V0cHV0IH0pO1xuICAgIGlmICghT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihyZXNwb25zZSwgJ291dHB1dF90ZXh0JykpIHtcbiAgICAgICAgYWRkT3V0cHV0VGV4dChwYXJzZWQpO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocGFyc2VkLCAnb3V0cHV0X3BhcnNlZCcsIHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0KCkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBvdXRwdXQgb2YgcGFyc2VkLm91dHB1dCkge1xuICAgICAgICAgICAgICAgIGlmIChvdXRwdXQudHlwZSAhPT0gJ21lc3NhZ2UnKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGNvbnRlbnQgb2Ygb3V0cHV0LmNvbnRlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRlbnQudHlwZSA9PT0gJ291dHB1dF90ZXh0JyAmJiBjb250ZW50LnBhcnNlZCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRlbnQucGFyc2VkO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH0sXG4gICAgfSk7XG4gICAgcmV0dXJuIHBhcnNlZDtcbn1cbmZ1bmN0aW9uIHBhcnNlVGV4dEZvcm1hdChwYXJhbXMsIGNvbnRlbnQpIHtcbiAgICBpZiAocGFyYW1zLnRleHQ/LmZvcm1hdD8udHlwZSAhPT0gJ2pzb25fc2NoZW1hJykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKCckcGFyc2VSYXcnIGluIHBhcmFtcy50ZXh0Py5mb3JtYXQpIHtcbiAgICAgICAgY29uc3QgdGV4dF9mb3JtYXQgPSBwYXJhbXMudGV4dD8uZm9ybWF0O1xuICAgICAgICByZXR1cm4gdGV4dF9mb3JtYXQuJHBhcnNlUmF3KGNvbnRlbnQpO1xuICAgIH1cbiAgICByZXR1cm4gSlNPTi5wYXJzZShjb250ZW50KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBoYXNBdXRvUGFyc2VhYmxlSW5wdXQocGFyYW1zKSB7XG4gICAgaWYgKGlzQXV0b1BhcnNhYmxlUmVzcG9uc2VGb3JtYXQocGFyYW1zLnRleHQ/LmZvcm1hdCkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBtYWtlUGFyc2VhYmxlUmVzcG9uc2VUb29sKHRvb2wsIHsgcGFyc2VyLCBjYWxsYmFjaywgfSkge1xuICAgIGNvbnN0IG9iaiA9IHsgLi4udG9vbCB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKG9iaiwge1xuICAgICAgICAkYnJhbmQ6IHtcbiAgICAgICAgICAgIHZhbHVlOiAnYXV0by1wYXJzZWFibGUtdG9vbCcsXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgfSxcbiAgICAgICAgJHBhcnNlUmF3OiB7XG4gICAgICAgICAgICB2YWx1ZTogcGFyc2VyLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIH0sXG4gICAgICAgICRjYWxsYmFjazoge1xuICAgICAgICAgICAgdmFsdWU6IGNhbGxiYWNrLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIH0sXG4gICAgfSk7XG4gICAgcmV0dXJuIG9iajtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0F1dG9QYXJzYWJsZVRvb2wodG9vbCkge1xuICAgIHJldHVybiB0b29sPy5bJyRicmFuZCddID09PSAnYXV0by1wYXJzZWFibGUtdG9vbCc7XG59XG5mdW5jdGlvbiBnZXRJbnB1dFRvb2xCeU5hbWUoaW5wdXRfdG9vbHMsIG5hbWUpIHtcbiAgICByZXR1cm4gaW5wdXRfdG9vbHMuZmluZCgodG9vbCkgPT4gdG9vbC50eXBlID09PSAnZnVuY3Rpb24nICYmIHRvb2wubmFtZSA9PT0gbmFtZSk7XG59XG5mdW5jdGlvbiBwYXJzZVRvb2xDYWxsKHBhcmFtcywgdG9vbENhbGwpIHtcbiAgICBjb25zdCBpbnB1dFRvb2wgPSBnZXRJbnB1dFRvb2xCeU5hbWUocGFyYW1zLnRvb2xzID8/IFtdLCB0b29sQ2FsbC5uYW1lKTtcbiAgICByZXR1cm4ge1xuICAgICAgICAuLi50b29sQ2FsbCxcbiAgICAgICAgLi4udG9vbENhbGwsXG4gICAgICAgIHBhcnNlZF9hcmd1bWVudHM6IGlzQXV0b1BhcnNhYmxlVG9vbChpbnB1dFRvb2wpID8gaW5wdXRUb29sLiRwYXJzZVJhdyh0b29sQ2FsbC5hcmd1bWVudHMpXG4gICAgICAgICAgICA6IGlucHV0VG9vbD8uc3RyaWN0ID8gSlNPTi5wYXJzZSh0b29sQ2FsbC5hcmd1bWVudHMpXG4gICAgICAgICAgICAgICAgOiBudWxsLFxuICAgIH07XG59XG5leHBvcnQgZnVuY3Rpb24gc2hvdWxkUGFyc2VUb29sQ2FsbChwYXJhbXMsIHRvb2xDYWxsKSB7XG4gICAgaWYgKCFwYXJhbXMpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCBpbnB1dFRvb2wgPSBnZXRJbnB1dFRvb2xCeU5hbWUocGFyYW1zLnRvb2xzID8/IFtdLCB0b29sQ2FsbC5uYW1lKTtcbiAgICByZXR1cm4gaXNBdXRvUGFyc2FibGVUb29sKGlucHV0VG9vbCkgfHwgaW5wdXRUb29sPy5zdHJpY3QgfHwgZmFsc2U7XG59XG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVJbnB1dFRvb2xzKHRvb2xzKSB7XG4gICAgZm9yIChjb25zdCB0b29sIG9mIHRvb2xzID8/IFtdKSB7XG4gICAgICAgIGlmICh0b29sLnR5cGUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBPcGVuQUlFcnJvcihgQ3VycmVudGx5IG9ubHkgXFxgZnVuY3Rpb25cXGAgdG9vbCB0eXBlcyBzdXBwb3J0IGF1dG8tcGFyc2luZzsgUmVjZWl2ZWQgXFxgJHt0b29sLnR5cGV9XFxgYCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRvb2wuZnVuY3Rpb24uc3RyaWN0ICE9PSB0cnVlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgT3BlbkFJRXJyb3IoYFRoZSBcXGAke3Rvb2wuZnVuY3Rpb24ubmFtZX1cXGAgdG9vbCBpcyBub3QgbWFya2VkIHdpdGggXFxgc3RyaWN0OiB0cnVlXFxgLiBPbmx5IHN0cmljdCBmdW5jdGlvbiB0b29scyBjYW4gYmUgYXV0by1wYXJzZWRgKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBhZGRPdXRwdXRUZXh0KHJzcCkge1xuICAgIGNvbnN0IHRleHRzID0gW107XG4gICAgZm9yIChjb25zdCBvdXRwdXQgb2YgcnNwLm91dHB1dCkge1xuICAgICAgICBpZiAob3V0cHV0LnR5cGUgIT09ICdtZXNzYWdlJykge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBjb250ZW50IG9mIG91dHB1dC5jb250ZW50KSB7XG4gICAgICAgICAgICBpZiAoY29udGVudC50eXBlID09PSAnb3V0cHV0X3RleHQnKSB7XG4gICAgICAgICAgICAgICAgdGV4dHMucHVzaChjb250ZW50LnRleHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJzcC5vdXRwdXRfdGV4dCA9IHRleHRzLmpvaW4oJycpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UmVzcG9uc2VzUGFyc2VyLm1qcy5tYXAiLCJpbXBvcnQgeyBtYWtlUGFyc2VhYmxlUmVzcG9uc2VGb3JtYXQsIG1ha2VQYXJzZWFibGVUZXh0Rm9ybWF0LCBtYWtlUGFyc2VhYmxlVG9vbCwgfSBmcm9tIFwiLi4vbGliL3BhcnNlci5tanNcIjtcbmltcG9ydCB7IHpvZFRvSnNvblNjaGVtYSBhcyBfem9kVG9Kc29uU2NoZW1hIH0gZnJvbSBcIi4uL192ZW5kb3Ivem9kLXRvLWpzb24tc2NoZW1hL2luZGV4Lm1qc1wiO1xuaW1wb3J0IHsgbWFrZVBhcnNlYWJsZVJlc3BvbnNlVG9vbCB9IGZyb20gXCIuLi9saWIvUmVzcG9uc2VzUGFyc2VyLm1qc1wiO1xuZnVuY3Rpb24gem9kVG9Kc29uU2NoZW1hKHNjaGVtYSwgb3B0aW9ucykge1xuICAgIHJldHVybiBfem9kVG9Kc29uU2NoZW1hKHNjaGVtYSwge1xuICAgICAgICBvcGVuYWlTdHJpY3RNb2RlOiB0cnVlLFxuICAgICAgICBuYW1lOiBvcHRpb25zLm5hbWUsXG4gICAgICAgIG5hbWVTdHJhdGVneTogJ2R1cGxpY2F0ZS1yZWYnLFxuICAgICAgICAkcmVmU3RyYXRlZ3k6ICdleHRyYWN0LXRvLXJvb3QnLFxuICAgICAgICBudWxsYWJsZVN0cmF0ZWd5OiAncHJvcGVydHknLFxuICAgIH0pO1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgY2hhdCBjb21wbGV0aW9uIGBKU09OU2NoZW1hYCByZXNwb25zZSBmb3JtYXQgb2JqZWN0IGZyb21cbiAqIHRoZSBnaXZlbiBab2Qgc2NoZW1hLlxuICpcbiAqIElmIHRoaXMgaXMgcGFzc2VkIHRvIHRoZSBgLnBhcnNlKClgLCBgLnN0cmVhbSgpYCBvciBgLnJ1blRvb2xzKClgXG4gKiBjaGF0IGNvbXBsZXRpb24gbWV0aG9kcyB0aGVuIHRoZSByZXNwb25zZSBtZXNzYWdlIHdpbGwgY29udGFpbiBhXG4gKiBgLnBhcnNlZGAgcHJvcGVydHkgdGhhdCBpcyB0aGUgcmVzdWx0IG9mIHBhcnNpbmcgdGhlIGNvbnRlbnQgd2l0aFxuICogdGhlIGdpdmVuIFpvZCBvYmplY3QuXG4gKlxuICogYGBgdHNcbiAqIGNvbnN0IGNvbXBsZXRpb24gPSBhd2FpdCBjbGllbnQuY2hhdC5jb21wbGV0aW9ucy5wYXJzZSh7XG4gKiAgICBtb2RlbDogJ2dwdC00by0yMDI0LTA4LTA2JyxcbiAqICAgIG1lc3NhZ2VzOiBbXG4gKiAgICAgIHsgcm9sZTogJ3N5c3RlbScsIGNvbnRlbnQ6ICdZb3UgYXJlIGEgaGVscGZ1bCBtYXRoIHR1dG9yLicgfSxcbiAqICAgICAgeyByb2xlOiAndXNlcicsIGNvbnRlbnQ6ICdzb2x2ZSA4eCArIDMxID0gMicgfSxcbiAqICAgIF0sXG4gKiAgICByZXNwb25zZV9mb3JtYXQ6IHpvZFJlc3BvbnNlRm9ybWF0KFxuICogICAgICB6Lm9iamVjdCh7XG4gKiAgICAgICAgc3RlcHM6IHouYXJyYXkoei5vYmplY3Qoe1xuICogICAgICAgICAgZXhwbGFuYXRpb246IHouc3RyaW5nKCksXG4gKiAgICAgICAgICBhbnN3ZXI6IHouc3RyaW5nKCksXG4gKiAgICAgICAgfSkpLFxuICogICAgICAgIGZpbmFsX2Fuc3dlcjogei5zdHJpbmcoKSxcbiAqICAgICAgfSksXG4gKiAgICAgICdtYXRoX2Fuc3dlcicsXG4gKiAgICApLFxuICogIH0pO1xuICogIGNvbnN0IG1lc3NhZ2UgPSBjb21wbGV0aW9uLmNob2ljZXNbMF0/Lm1lc3NhZ2U7XG4gKiAgaWYgKG1lc3NhZ2U/LnBhcnNlZCkge1xuICogICAgY29uc29sZS5sb2cobWVzc2FnZS5wYXJzZWQpO1xuICogICAgY29uc29sZS5sb2cobWVzc2FnZS5wYXJzZWQuZmluYWxfYW5zd2VyKTtcbiAqIH1cbiAqIGBgYFxuICpcbiAqIFRoaXMgY2FuIGJlIHBhc3NlZCBkaXJlY3RseSB0byB0aGUgYC5jcmVhdGUoKWAgbWV0aG9kIGJ1dCB3aWxsIG5vdFxuICogcmVzdWx0IGluIGFueSBhdXRvbWF0aWMgcGFyc2luZywgeW91J2xsIGhhdmUgdG8gcGFyc2UgdGhlIHJlc3BvbnNlIHlvdXJzZWxmLlxuICovXG5leHBvcnQgZnVuY3Rpb24gem9kUmVzcG9uc2VGb3JtYXQoem9kT2JqZWN0LCBuYW1lLCBwcm9wcykge1xuICAgIHJldHVybiBtYWtlUGFyc2VhYmxlUmVzcG9uc2VGb3JtYXQoe1xuICAgICAgICB0eXBlOiAnanNvbl9zY2hlbWEnLFxuICAgICAgICBqc29uX3NjaGVtYToge1xuICAgICAgICAgICAgLi4ucHJvcHMsXG4gICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgc3RyaWN0OiB0cnVlLFxuICAgICAgICAgICAgc2NoZW1hOiB6b2RUb0pzb25TY2hlbWEoem9kT2JqZWN0LCB7IG5hbWUgfSksXG4gICAgICAgIH0sXG4gICAgfSwgKGNvbnRlbnQpID0+IHpvZE9iamVjdC5wYXJzZShKU09OLnBhcnNlKGNvbnRlbnQpKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gem9kVGV4dEZvcm1hdCh6b2RPYmplY3QsIG5hbWUsIHByb3BzKSB7XG4gICAgcmV0dXJuIG1ha2VQYXJzZWFibGVUZXh0Rm9ybWF0KHtcbiAgICAgICAgdHlwZTogJ2pzb25fc2NoZW1hJyxcbiAgICAgICAgLi4ucHJvcHMsXG4gICAgICAgIG5hbWUsXG4gICAgICAgIHN0cmljdDogdHJ1ZSxcbiAgICAgICAgc2NoZW1hOiB6b2RUb0pzb25TY2hlbWEoem9kT2JqZWN0LCB7IG5hbWUgfSksXG4gICAgfSwgKGNvbnRlbnQpID0+IHpvZE9iamVjdC5wYXJzZShKU09OLnBhcnNlKGNvbnRlbnQpKSk7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBjaGF0IGNvbXBsZXRpb24gYGZ1bmN0aW9uYCB0b29sIHRoYXQgY2FuIGJlIGludm9rZWRcbiAqIGF1dG9tYXRpY2FsbHkgYnkgdGhlIGNoYXQgY29tcGxldGlvbiBgLnJ1blRvb2xzKClgIG1ldGhvZCBvciBhdXRvbWF0aWNhbGx5XG4gKiBwYXJzZWQgYnkgYC5wYXJzZSgpYCAvIGAuc3RyZWFtKClgLlxuICovXG5leHBvcnQgZnVuY3Rpb24gem9kRnVuY3Rpb24ob3B0aW9ucykge1xuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgVE9ET1xuICAgIHJldHVybiBtYWtlUGFyc2VhYmxlVG9vbCh7XG4gICAgICAgIHR5cGU6ICdmdW5jdGlvbicsXG4gICAgICAgIGZ1bmN0aW9uOiB7XG4gICAgICAgICAgICBuYW1lOiBvcHRpb25zLm5hbWUsXG4gICAgICAgICAgICBwYXJhbWV0ZXJzOiB6b2RUb0pzb25TY2hlbWEob3B0aW9ucy5wYXJhbWV0ZXJzLCB7IG5hbWU6IG9wdGlvbnMubmFtZSB9KSxcbiAgICAgICAgICAgIHN0cmljdDogdHJ1ZSxcbiAgICAgICAgICAgIC4uLihvcHRpb25zLmRlc2NyaXB0aW9uID8geyBkZXNjcmlwdGlvbjogb3B0aW9ucy5kZXNjcmlwdGlvbiB9IDogdW5kZWZpbmVkKSxcbiAgICAgICAgfSxcbiAgICB9LCB7XG4gICAgICAgIGNhbGxiYWNrOiBvcHRpb25zLmZ1bmN0aW9uLFxuICAgICAgICBwYXJzZXI6IChhcmdzKSA9PiBvcHRpb25zLnBhcmFtZXRlcnMucGFyc2UoSlNPTi5wYXJzZShhcmdzKSksXG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gem9kUmVzcG9uc2VzRnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHJldHVybiBtYWtlUGFyc2VhYmxlUmVzcG9uc2VUb29sKHtcbiAgICAgICAgdHlwZTogJ2Z1bmN0aW9uJyxcbiAgICAgICAgbmFtZTogb3B0aW9ucy5uYW1lLFxuICAgICAgICBwYXJhbWV0ZXJzOiB6b2RUb0pzb25TY2hlbWEob3B0aW9ucy5wYXJhbWV0ZXJzLCB7IG5hbWU6IG9wdGlvbnMubmFtZSB9KSxcbiAgICAgICAgc3RyaWN0OiB0cnVlLFxuICAgICAgICAuLi4ob3B0aW9ucy5kZXNjcmlwdGlvbiA/IHsgZGVzY3JpcHRpb246IG9wdGlvbnMuZGVzY3JpcHRpb24gfSA6IHVuZGVmaW5lZCksXG4gICAgfSwge1xuICAgICAgICBjYWxsYmFjazogb3B0aW9ucy5mdW5jdGlvbixcbiAgICAgICAgcGFyc2VyOiAoYXJncykgPT4gb3B0aW9ucy5wYXJhbWV0ZXJzLnBhcnNlKEpTT04ucGFyc2UoYXJncykpLFxuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9em9kLm1qcy5tYXAiLCIvKipcbiAqIEJhc2UgY2xhc3MgZm9yIGFsbCBlcnJvcnMgdGhyb3duIGJ5IHRoZSBsaWJyYXJ5LlxuICovXG5leHBvcnQgY2xhc3MgQWdlbnRzRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgc3RhdGU7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgc3RhdGUpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcbiAgICB9XG59XG4vKipcbiAqIFN5c3RlbSBlcnJvciB0aHJvd24gd2hlbiB0aGUgbGlicmFyeSBlbmNvdW50ZXJzIGFuIGVycm9yIHRoYXQgaXMgbm90IGNhdXNlZCBieSB0aGUgdXNlcidzXG4gKiBtaXNjb25maWd1cmF0aW9uLlxuICovXG5leHBvcnQgY2xhc3MgU3lzdGVtRXJyb3IgZXh0ZW5kcyBBZ2VudHNFcnJvciB7XG59XG4vKipcbiAqIEVycm9yIHRocm93biB3aGVuIHRoZSBtYXhpbXVtIG51bWJlciBvZiB0dXJucyBpcyBleGNlZWRlZC5cbiAqL1xuZXhwb3J0IGNsYXNzIE1heFR1cm5zRXhjZWVkZWRFcnJvciBleHRlbmRzIEFnZW50c0Vycm9yIHtcbn1cbi8qKlxuICogRXJyb3IgdGhyb3duIHdoZW4gYSBtb2RlbCBiZWhhdmlvciBpcyB1bmV4cGVjdGVkLlxuICovXG5leHBvcnQgY2xhc3MgTW9kZWxCZWhhdmlvckVycm9yIGV4dGVuZHMgQWdlbnRzRXJyb3Ige1xufVxuLyoqXG4gKiBFcnJvciB0aHJvd24gd2hlbiB0aGUgZXJyb3IgaXMgY2F1c2VkIGJ5IHRoZSBsaWJyYXJ5IHVzZXIncyBtaXNjb25maWd1cmF0aW9uLlxuICovXG5leHBvcnQgY2xhc3MgVXNlckVycm9yIGV4dGVuZHMgQWdlbnRzRXJyb3Ige1xufVxuLyoqXG4gKiBFcnJvciB0aHJvd24gd2hlbiBhIGd1YXJkcmFpbCBleGVjdXRpb24gZmFpbHMuXG4gKi9cbmV4cG9ydCBjbGFzcyBHdWFyZHJhaWxFeGVjdXRpb25FcnJvciBleHRlbmRzIEFnZW50c0Vycm9yIHtcbiAgICBlcnJvcjtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBlcnJvciwgc3RhdGUpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSwgc3RhdGUpO1xuICAgICAgICB0aGlzLmVycm9yID0gZXJyb3I7XG4gICAgfVxufVxuLyoqXG4gKiBFcnJvciB0aHJvd24gd2hlbiBhIHRvb2wgY2FsbCBmYWlscy5cbiAqL1xuZXhwb3J0IGNsYXNzIFRvb2xDYWxsRXJyb3IgZXh0ZW5kcyBBZ2VudHNFcnJvciB7XG4gICAgZXJyb3I7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgZXJyb3IsIHN0YXRlKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UsIHN0YXRlKTtcbiAgICAgICAgdGhpcy5lcnJvciA9IGVycm9yO1xuICAgIH1cbn1cbi8qKlxuICogRXJyb3IgdGhyb3duIHdoZW4gYW4gaW5wdXQgZ3VhcmRyYWlsIHRyaXB3aXJlIGlzIHRyaWdnZXJlZC5cbiAqL1xuZXhwb3J0IGNsYXNzIElucHV0R3VhcmRyYWlsVHJpcHdpcmVUcmlnZ2VyZWQgZXh0ZW5kcyBBZ2VudHNFcnJvciB7XG4gICAgcmVzdWx0O1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIHJlc3VsdCwgc3RhdGUpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSwgc3RhdGUpO1xuICAgICAgICB0aGlzLnJlc3VsdCA9IHJlc3VsdDtcbiAgICB9XG59XG4vKipcbiAqIEVycm9yIHRocm93biB3aGVuIGFuIG91dHB1dCBndWFyZHJhaWwgdHJpcHdpcmUgaXMgdHJpZ2dlcmVkLlxuICovXG5leHBvcnQgY2xhc3MgT3V0cHV0R3VhcmRyYWlsVHJpcHdpcmVUcmlnZ2VyZWQgZXh0ZW5kcyBBZ2VudHNFcnJvciB7XG4gICAgcmVzdWx0O1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIHJlc3VsdCwgc3RhdGUpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSwgc3RhdGUpO1xuICAgICAgICB0aGlzLnJlc3VsdCA9IHJlc3VsdDtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcnJvcnMubWpzLm1hcCIsIi8qKlxuICogVmVyaWZpZXMgdGhhdCBhbiBpbnB1dCBpcyBhIFpvZE9iamVjdCB3aXRob3V0IG5lZWRpbmcgdG8gaGF2ZSBab2QgYXQgcnVudGltZSBzaW5jZSBpdCdzIGFuXG4gKiBvcHRpb25hbCBkZXBlbmRlbmN5LlxuICogQHBhcmFtIGlucHV0XG4gKiBAcmV0dXJuc1xuICovXG5leHBvcnQgZnVuY3Rpb24gaXNab2RPYmplY3QoaW5wdXQpIHtcbiAgICByZXR1cm4gKHR5cGVvZiBpbnB1dCA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgaW5wdXQgIT09IG51bGwgJiZcbiAgICAgICAgJ19kZWYnIGluIGlucHV0ICYmXG4gICAgICAgIHR5cGVvZiBpbnB1dC5fZGVmID09PSAnb2JqZWN0JyAmJlxuICAgICAgICBpbnB1dC5fZGVmICE9PSBudWxsICYmXG4gICAgICAgICd0eXBlTmFtZScgaW4gaW5wdXQuX2RlZiAmJlxuICAgICAgICBpbnB1dC5fZGVmLnR5cGVOYW1lID09PSAnWm9kT2JqZWN0Jyk7XG59XG4vKipcbiAqIFZlcmlmaWVzIHRoYXQgYW4gaW5wdXQgaXMgYW4gb2JqZWN0IHdpdGggYW4gYGlucHV0YCBwcm9wZXJ0eS5cbiAqIEBwYXJhbSBpbnB1dFxuICogQHJldHVybnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzQWdlbnRUb29sSW5wdXQoaW5wdXQpIHtcbiAgICByZXR1cm4gKHR5cGVvZiBpbnB1dCA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgaW5wdXQgIT09IG51bGwgJiZcbiAgICAgICAgJ2lucHV0JyBpbiBpbnB1dCAmJlxuICAgICAgICB0eXBlb2YgaW5wdXQuaW5wdXQgPT09ICdzdHJpbmcnKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVHdWFyZHMubWpzLm1hcCIsImltcG9ydCB7IHpvZFJlc3BvbnNlc0Z1bmN0aW9uLCB6b2RUZXh0Rm9ybWF0IH0gZnJvbSAnb3BlbmFpL2hlbHBlcnMvem9kJztcbmltcG9ydCB7IFVzZXJFcnJvciB9IGZyb20gXCIuLi9lcnJvcnMubWpzXCI7XG5pbXBvcnQgeyBpc1pvZE9iamVjdCB9IGZyb20gXCIuL3R5cGVHdWFyZHMubWpzXCI7XG4vKipcbiAqIENvbnZlcnQgYSBzdHJpbmcgdG8gYSBmdW5jdGlvbiB0b29sIG5hbWUgYnkgcmVwbGFjaW5nIHNwYWNlcyB3aXRoIHVuZGVyc2NvcmVzIGFuZFxuICogbm9uLWFscGhhbnVtZXJpYyBjaGFyYWN0ZXJzIHdpdGggdW5kZXJzY29yZXMuXG4gKiBAcGFyYW0gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSB0b29sLlxuICogQHJldHVybnMgVGhlIGZ1bmN0aW9uIHRvb2wgbmFtZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvRnVuY3Rpb25Ub29sTmFtZShuYW1lKSB7XG4gICAgLy8gUmVwbGFjZSBzcGFjZXMgd2l0aCB1bmRlcnNjb3Jlc1xuICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoL1xccy9nLCAnXycpO1xuICAgIC8vIFJlcGxhY2Ugbm9uLWFscGhhbnVtZXJpYyBjaGFyYWN0ZXJzIHdpdGggdW5kZXJzY29yZXNcbiAgICBuYW1lID0gbmFtZS5yZXBsYWNlKC9bXmEtekEtWjAtOV0vZywgJ18nKTtcbiAgICAvLyBFbnN1cmUgdGhlIG5hbWUgaXMgbm90IGVtcHR5XG4gICAgaWYgKG5hbWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVG9vbCBuYW1lIGNhbm5vdCBiZSBlbXB0eScpO1xuICAgIH1cbiAgICByZXR1cm4gbmFtZTtcbn1cbi8qKlxuICogR2V0IHRoZSBzY2hlbWEgYW5kIHBhcnNlciBmcm9tIGFuIGlucHV0IHR5cGUuIElmIHRoZSBpbnB1dCB0eXBlIGlzIGEgWm9kT2JqZWN0LCB3ZSB3aWxsIGNvbnZlcnRcbiAqIGl0IGludG8gYSBKU09OIFNjaGVtYSBhbmQgdXNlIFpvZCBhcyBwYXJzZXIuIElmIHRoZSBpbnB1dCB0eXBlIGlzIGEgSlNPTiBzY2hlbWEsIHdlIHVzZSB0aGVcbiAqIEpTT04ucGFyc2UgZnVuY3Rpb24gdG8gZ2V0IHRoZSBwYXJzZXIuXG4gKiBAcGFyYW0gaW5wdXRUeXBlIC0gVGhlIGlucHV0IHR5cGUgdG8gZ2V0IHRoZSBzY2hlbWEgYW5kIHBhcnNlciBmcm9tLlxuICogQHBhcmFtIG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgdG9vbC5cbiAqIEByZXR1cm5zIFRoZSBzY2hlbWEgYW5kIHBhcnNlci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFNjaGVtYUFuZFBhcnNlckZyb21JbnB1dFR5cGUoaW5wdXRUeXBlLCBuYW1lKSB7XG4gICAgY29uc3QgcGFyc2VyID0gKGlucHV0KSA9PiBKU09OLnBhcnNlKGlucHV0KTtcbiAgICBpZiAoaXNab2RPYmplY3QoaW5wdXRUeXBlKSkge1xuICAgICAgICBjb25zdCBmb3JtYXR0ZWRGdW5jdGlvbiA9IHpvZFJlc3BvbnNlc0Z1bmN0aW9uKHtcbiAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICBwYXJhbWV0ZXJzOiBpbnB1dFR5cGUsXG4gICAgICAgICAgICBmdW5jdGlvbjogKCkgPT4geyB9LCAvLyBlbXB0eSBmdW5jdGlvbiBoZXJlIHRvIHNhdGlzZnkgdGhlIE9wZW5BSSBoZWxwZXJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnJyxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzY2hlbWE6IGZvcm1hdHRlZEZ1bmN0aW9uLnBhcmFtZXRlcnMsXG4gICAgICAgICAgICBwYXJzZXI6IGZvcm1hdHRlZEZ1bmN0aW9uLiRwYXJzZVJhdyxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGlucHV0VHlwZSA9PT0gJ29iamVjdCcgJiYgaW5wdXRUeXBlICE9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzY2hlbWE6IGlucHV0VHlwZSxcbiAgICAgICAgICAgIHBhcnNlcixcbiAgICAgICAgfTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IFVzZXJFcnJvcignSW5wdXQgdHlwZSBpcyBub3QgYSBab2RPYmplY3Qgb3IgYSB2YWxpZCBKU09OIHNjaGVtYScpO1xufVxuLyoqXG4gKiBDb252ZXJ0cyB0aGUgYWdlbnQgb3V0cHV0IHR5cGUgcHJvdmlkZWQgdG8gYSBzZXJpYWxpemFibGUgdmVyc2lvblxuICovXG5leHBvcnQgZnVuY3Rpb24gY29udmVydEFnZW50T3V0cHV0VHlwZVRvU2VyaWFsaXphYmxlKG91dHB1dFR5cGUpIHtcbiAgICBpZiAob3V0cHV0VHlwZSA9PT0gJ3RleHQnKSB7XG4gICAgICAgIHJldHVybiAndGV4dCc7XG4gICAgfVxuICAgIGlmIChpc1pvZE9iamVjdChvdXRwdXRUeXBlKSkge1xuICAgICAgICBjb25zdCBvdXRwdXQgPSB6b2RUZXh0Rm9ybWF0KG91dHB1dFR5cGUsICdvdXRwdXQnKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6IG91dHB1dC50eXBlLFxuICAgICAgICAgICAgbmFtZTogb3V0cHV0Lm5hbWUsXG4gICAgICAgICAgICBzdHJpY3Q6IG91dHB1dC5zdHJpY3QgfHwgZmFsc2UsXG4gICAgICAgICAgICBzY2hlbWE6IG91dHB1dC5zY2hlbWEsXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBvdXRwdXRUeXBlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dG9vbHMubWpzLm1hcCIsIi8qKlxuICogSGVscGVycy5cbiAqL1xuXG52YXIgcyA9IDEwMDA7XG52YXIgbSA9IHMgKiA2MDtcbnZhciBoID0gbSAqIDYwO1xudmFyIGQgPSBoICogMjQ7XG52YXIgdyA9IGQgKiA3O1xudmFyIHkgPSBkICogMzY1LjI1O1xuXG4vKipcbiAqIFBhcnNlIG9yIGZvcm1hdCB0aGUgZ2l2ZW4gYHZhbGAuXG4gKlxuICogT3B0aW9uczpcbiAqXG4gKiAgLSBgbG9uZ2AgdmVyYm9zZSBmb3JtYXR0aW5nIFtmYWxzZV1cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IHZhbFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogQHRocm93cyB7RXJyb3J9IHRocm93IGFuIGVycm9yIGlmIHZhbCBpcyBub3QgYSBub24tZW1wdHkgc3RyaW5nIG9yIGEgbnVtYmVyXG4gKiBAcmV0dXJuIHtTdHJpbmd8TnVtYmVyfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh2YWwsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbDtcbiAgaWYgKHR5cGUgPT09ICdzdHJpbmcnICYmIHZhbC5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIHBhcnNlKHZhbCk7XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ251bWJlcicgJiYgaXNGaW5pdGUodmFsKSkge1xuICAgIHJldHVybiBvcHRpb25zLmxvbmcgPyBmbXRMb25nKHZhbCkgOiBmbXRTaG9ydCh2YWwpO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihcbiAgICAndmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSB2YWxpZCBudW1iZXIuIHZhbD0nICtcbiAgICAgIEpTT04uc3RyaW5naWZ5KHZhbClcbiAgKTtcbn07XG5cbi8qKlxuICogUGFyc2UgdGhlIGdpdmVuIGBzdHJgIGFuZCByZXR1cm4gbWlsbGlzZWNvbmRzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBhcnNlKHN0cikge1xuICBzdHIgPSBTdHJpbmcoc3RyKTtcbiAgaWYgKHN0ci5sZW5ndGggPiAxMDApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG1hdGNoID0gL14oLT8oPzpcXGQrKT9cXC4/XFxkKykgKihtaWxsaXNlY29uZHM/fG1zZWNzP3xtc3xzZWNvbmRzP3xzZWNzP3xzfG1pbnV0ZXM/fG1pbnM/fG18aG91cnM/fGhycz98aHxkYXlzP3xkfHdlZWtzP3x3fHllYXJzP3x5cnM/fHkpPyQvaS5leGVjKFxuICAgIHN0clxuICApO1xuICBpZiAoIW1hdGNoKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBuID0gcGFyc2VGbG9hdChtYXRjaFsxXSk7XG4gIHZhciB0eXBlID0gKG1hdGNoWzJdIHx8ICdtcycpLnRvTG93ZXJDYXNlKCk7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ3llYXJzJzpcbiAgICBjYXNlICd5ZWFyJzpcbiAgICBjYXNlICd5cnMnOlxuICAgIGNhc2UgJ3lyJzpcbiAgICBjYXNlICd5JzpcbiAgICAgIHJldHVybiBuICogeTtcbiAgICBjYXNlICd3ZWVrcyc6XG4gICAgY2FzZSAnd2Vlayc6XG4gICAgY2FzZSAndyc6XG4gICAgICByZXR1cm4gbiAqIHc7XG4gICAgY2FzZSAnZGF5cyc6XG4gICAgY2FzZSAnZGF5JzpcbiAgICBjYXNlICdkJzpcbiAgICAgIHJldHVybiBuICogZDtcbiAgICBjYXNlICdob3Vycyc6XG4gICAgY2FzZSAnaG91cic6XG4gICAgY2FzZSAnaHJzJzpcbiAgICBjYXNlICdocic6XG4gICAgY2FzZSAnaCc6XG4gICAgICByZXR1cm4gbiAqIGg7XG4gICAgY2FzZSAnbWludXRlcyc6XG4gICAgY2FzZSAnbWludXRlJzpcbiAgICBjYXNlICdtaW5zJzpcbiAgICBjYXNlICdtaW4nOlxuICAgIGNhc2UgJ20nOlxuICAgICAgcmV0dXJuIG4gKiBtO1xuICAgIGNhc2UgJ3NlY29uZHMnOlxuICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgY2FzZSAnc2Vjcyc6XG4gICAgY2FzZSAnc2VjJzpcbiAgICBjYXNlICdzJzpcbiAgICAgIHJldHVybiBuICogcztcbiAgICBjYXNlICdtaWxsaXNlY29uZHMnOlxuICAgIGNhc2UgJ21pbGxpc2Vjb25kJzpcbiAgICBjYXNlICdtc2Vjcyc6XG4gICAgY2FzZSAnbXNlYyc6XG4gICAgY2FzZSAnbXMnOlxuICAgICAgcmV0dXJuIG47XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuLyoqXG4gKiBTaG9ydCBmb3JtYXQgZm9yIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBmbXRTaG9ydChtcykge1xuICB2YXIgbXNBYnMgPSBNYXRoLmFicyhtcyk7XG4gIGlmIChtc0FicyA+PSBkKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBkKSArICdkJztcbiAgfVxuICBpZiAobXNBYnMgPj0gaCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gaCkgKyAnaCc7XG4gIH1cbiAgaWYgKG1zQWJzID49IG0pIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIG0pICsgJ20nO1xuICB9XG4gIGlmIChtc0FicyA+PSBzKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBzKSArICdzJztcbiAgfVxuICByZXR1cm4gbXMgKyAnbXMnO1xufVxuXG4vKipcbiAqIExvbmcgZm9ybWF0IGZvciBgbXNgLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtc1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZm10TG9uZyhtcykge1xuICB2YXIgbXNBYnMgPSBNYXRoLmFicyhtcyk7XG4gIGlmIChtc0FicyA+PSBkKSB7XG4gICAgcmV0dXJuIHBsdXJhbChtcywgbXNBYnMsIGQsICdkYXknKTtcbiAgfVxuICBpZiAobXNBYnMgPj0gaCkge1xuICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBoLCAnaG91cicpO1xuICB9XG4gIGlmIChtc0FicyA+PSBtKSB7XG4gICAgcmV0dXJuIHBsdXJhbChtcywgbXNBYnMsIG0sICdtaW51dGUnKTtcbiAgfVxuICBpZiAobXNBYnMgPj0gcykge1xuICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBzLCAnc2Vjb25kJyk7XG4gIH1cbiAgcmV0dXJuIG1zICsgJyBtcyc7XG59XG5cbi8qKlxuICogUGx1cmFsaXphdGlvbiBoZWxwZXIuXG4gKi9cblxuZnVuY3Rpb24gcGx1cmFsKG1zLCBtc0FicywgbiwgbmFtZSkge1xuICB2YXIgaXNQbHVyYWwgPSBtc0FicyA+PSBuICogMS41O1xuICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIG4pICsgJyAnICsgbmFtZSArIChpc1BsdXJhbCA/ICdzJyA6ICcnKTtcbn1cbiIsIlxuLyoqXG4gKiBUaGlzIGlzIHRoZSBjb21tb24gbG9naWMgZm9yIGJvdGggdGhlIE5vZGUuanMgYW5kIHdlYiBicm93c2VyXG4gKiBpbXBsZW1lbnRhdGlvbnMgb2YgYGRlYnVnKClgLlxuICovXG5cbmZ1bmN0aW9uIHNldHVwKGVudikge1xuXHRjcmVhdGVEZWJ1Zy5kZWJ1ZyA9IGNyZWF0ZURlYnVnO1xuXHRjcmVhdGVEZWJ1Zy5kZWZhdWx0ID0gY3JlYXRlRGVidWc7XG5cdGNyZWF0ZURlYnVnLmNvZXJjZSA9IGNvZXJjZTtcblx0Y3JlYXRlRGVidWcuZGlzYWJsZSA9IGRpc2FibGU7XG5cdGNyZWF0ZURlYnVnLmVuYWJsZSA9IGVuYWJsZTtcblx0Y3JlYXRlRGVidWcuZW5hYmxlZCA9IGVuYWJsZWQ7XG5cdGNyZWF0ZURlYnVnLmh1bWFuaXplID0gcmVxdWlyZSgnbXMnKTtcblx0Y3JlYXRlRGVidWcuZGVzdHJveSA9IGRlc3Ryb3k7XG5cblx0T2JqZWN0LmtleXMoZW52KS5mb3JFYWNoKGtleSA9PiB7XG5cdFx0Y3JlYXRlRGVidWdba2V5XSA9IGVudltrZXldO1xuXHR9KTtcblxuXHQvKipcblx0KiBUaGUgY3VycmVudGx5IGFjdGl2ZSBkZWJ1ZyBtb2RlIG5hbWVzLCBhbmQgbmFtZXMgdG8gc2tpcC5cblx0Ki9cblxuXHRjcmVhdGVEZWJ1Zy5uYW1lcyA9IFtdO1xuXHRjcmVhdGVEZWJ1Zy5za2lwcyA9IFtdO1xuXG5cdC8qKlxuXHQqIE1hcCBvZiBzcGVjaWFsIFwiJW5cIiBoYW5kbGluZyBmdW5jdGlvbnMsIGZvciB0aGUgZGVidWcgXCJmb3JtYXRcIiBhcmd1bWVudC5cblx0KlxuXHQqIFZhbGlkIGtleSBuYW1lcyBhcmUgYSBzaW5nbGUsIGxvd2VyIG9yIHVwcGVyLWNhc2UgbGV0dGVyLCBpLmUuIFwiblwiIGFuZCBcIk5cIi5cblx0Ki9cblx0Y3JlYXRlRGVidWcuZm9ybWF0dGVycyA9IHt9O1xuXG5cdC8qKlxuXHQqIFNlbGVjdHMgYSBjb2xvciBmb3IgYSBkZWJ1ZyBuYW1lc3BhY2Vcblx0KiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlIFRoZSBuYW1lc3BhY2Ugc3RyaW5nIGZvciB0aGUgZGVidWcgaW5zdGFuY2UgdG8gYmUgY29sb3JlZFxuXHQqIEByZXR1cm4ge051bWJlcnxTdHJpbmd9IEFuIEFOU0kgY29sb3IgY29kZSBmb3IgdGhlIGdpdmVuIG5hbWVzcGFjZVxuXHQqIEBhcGkgcHJpdmF0ZVxuXHQqL1xuXHRmdW5jdGlvbiBzZWxlY3RDb2xvcihuYW1lc3BhY2UpIHtcblx0XHRsZXQgaGFzaCA9IDA7XG5cblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IG5hbWVzcGFjZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0aGFzaCA9ICgoaGFzaCA8PCA1KSAtIGhhc2gpICsgbmFtZXNwYWNlLmNoYXJDb2RlQXQoaSk7XG5cdFx0XHRoYXNoIHw9IDA7IC8vIENvbnZlcnQgdG8gMzJiaXQgaW50ZWdlclxuXHRcdH1cblxuXHRcdHJldHVybiBjcmVhdGVEZWJ1Zy5jb2xvcnNbTWF0aC5hYnMoaGFzaCkgJSBjcmVhdGVEZWJ1Zy5jb2xvcnMubGVuZ3RoXTtcblx0fVxuXHRjcmVhdGVEZWJ1Zy5zZWxlY3RDb2xvciA9IHNlbGVjdENvbG9yO1xuXG5cdC8qKlxuXHQqIENyZWF0ZSBhIGRlYnVnZ2VyIHdpdGggdGhlIGdpdmVuIGBuYW1lc3BhY2VgLlxuXHQqXG5cdCogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZVxuXHQqIEByZXR1cm4ge0Z1bmN0aW9ufVxuXHQqIEBhcGkgcHVibGljXG5cdCovXG5cdGZ1bmN0aW9uIGNyZWF0ZURlYnVnKG5hbWVzcGFjZSkge1xuXHRcdGxldCBwcmV2VGltZTtcblx0XHRsZXQgZW5hYmxlT3ZlcnJpZGUgPSBudWxsO1xuXHRcdGxldCBuYW1lc3BhY2VzQ2FjaGU7XG5cdFx0bGV0IGVuYWJsZWRDYWNoZTtcblxuXHRcdGZ1bmN0aW9uIGRlYnVnKC4uLmFyZ3MpIHtcblx0XHRcdC8vIERpc2FibGVkP1xuXHRcdFx0aWYgKCFkZWJ1Zy5lbmFibGVkKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Y29uc3Qgc2VsZiA9IGRlYnVnO1xuXG5cdFx0XHQvLyBTZXQgYGRpZmZgIHRpbWVzdGFtcFxuXHRcdFx0Y29uc3QgY3VyciA9IE51bWJlcihuZXcgRGF0ZSgpKTtcblx0XHRcdGNvbnN0IG1zID0gY3VyciAtIChwcmV2VGltZSB8fCBjdXJyKTtcblx0XHRcdHNlbGYuZGlmZiA9IG1zO1xuXHRcdFx0c2VsZi5wcmV2ID0gcHJldlRpbWU7XG5cdFx0XHRzZWxmLmN1cnIgPSBjdXJyO1xuXHRcdFx0cHJldlRpbWUgPSBjdXJyO1xuXG5cdFx0XHRhcmdzWzBdID0gY3JlYXRlRGVidWcuY29lcmNlKGFyZ3NbMF0pO1xuXG5cdFx0XHRpZiAodHlwZW9mIGFyZ3NbMF0gIT09ICdzdHJpbmcnKSB7XG5cdFx0XHRcdC8vIEFueXRoaW5nIGVsc2UgbGV0J3MgaW5zcGVjdCB3aXRoICVPXG5cdFx0XHRcdGFyZ3MudW5zaGlmdCgnJU8nKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQXBwbHkgYW55IGBmb3JtYXR0ZXJzYCB0cmFuc2Zvcm1hdGlvbnNcblx0XHRcdGxldCBpbmRleCA9IDA7XG5cdFx0XHRhcmdzWzBdID0gYXJnc1swXS5yZXBsYWNlKC8lKFthLXpBLVolXSkvZywgKG1hdGNoLCBmb3JtYXQpID0+IHtcblx0XHRcdFx0Ly8gSWYgd2UgZW5jb3VudGVyIGFuIGVzY2FwZWQgJSB0aGVuIGRvbid0IGluY3JlYXNlIHRoZSBhcnJheSBpbmRleFxuXHRcdFx0XHRpZiAobWF0Y2ggPT09ICclJScpIHtcblx0XHRcdFx0XHRyZXR1cm4gJyUnO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGluZGV4Kys7XG5cdFx0XHRcdGNvbnN0IGZvcm1hdHRlciA9IGNyZWF0ZURlYnVnLmZvcm1hdHRlcnNbZm9ybWF0XTtcblx0XHRcdFx0aWYgKHR5cGVvZiBmb3JtYXR0ZXIgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0XHRjb25zdCB2YWwgPSBhcmdzW2luZGV4XTtcblx0XHRcdFx0XHRtYXRjaCA9IGZvcm1hdHRlci5jYWxsKHNlbGYsIHZhbCk7XG5cblx0XHRcdFx0XHQvLyBOb3cgd2UgbmVlZCB0byByZW1vdmUgYGFyZ3NbaW5kZXhdYCBzaW5jZSBpdCdzIGlubGluZWQgaW4gdGhlIGBmb3JtYXRgXG5cdFx0XHRcdFx0YXJncy5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdFx0XHRcdGluZGV4LS07XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIG1hdGNoO1xuXHRcdFx0fSk7XG5cblx0XHRcdC8vIEFwcGx5IGVudi1zcGVjaWZpYyBmb3JtYXR0aW5nIChjb2xvcnMsIGV0Yy4pXG5cdFx0XHRjcmVhdGVEZWJ1Zy5mb3JtYXRBcmdzLmNhbGwoc2VsZiwgYXJncyk7XG5cblx0XHRcdGNvbnN0IGxvZ0ZuID0gc2VsZi5sb2cgfHwgY3JlYXRlRGVidWcubG9nO1xuXHRcdFx0bG9nRm4uYXBwbHkoc2VsZiwgYXJncyk7XG5cdFx0fVxuXG5cdFx0ZGVidWcubmFtZXNwYWNlID0gbmFtZXNwYWNlO1xuXHRcdGRlYnVnLnVzZUNvbG9ycyA9IGNyZWF0ZURlYnVnLnVzZUNvbG9ycygpO1xuXHRcdGRlYnVnLmNvbG9yID0gY3JlYXRlRGVidWcuc2VsZWN0Q29sb3IobmFtZXNwYWNlKTtcblx0XHRkZWJ1Zy5leHRlbmQgPSBleHRlbmQ7XG5cdFx0ZGVidWcuZGVzdHJveSA9IGNyZWF0ZURlYnVnLmRlc3Ryb3k7IC8vIFhYWCBUZW1wb3JhcnkuIFdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciByZWxlYXNlLlxuXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGRlYnVnLCAnZW5hYmxlZCcsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuXHRcdFx0Z2V0OiAoKSA9PiB7XG5cdFx0XHRcdGlmIChlbmFibGVPdmVycmlkZSAhPT0gbnVsbCkge1xuXHRcdFx0XHRcdHJldHVybiBlbmFibGVPdmVycmlkZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAobmFtZXNwYWNlc0NhY2hlICE9PSBjcmVhdGVEZWJ1Zy5uYW1lc3BhY2VzKSB7XG5cdFx0XHRcdFx0bmFtZXNwYWNlc0NhY2hlID0gY3JlYXRlRGVidWcubmFtZXNwYWNlcztcblx0XHRcdFx0XHRlbmFibGVkQ2FjaGUgPSBjcmVhdGVEZWJ1Zy5lbmFibGVkKG5hbWVzcGFjZSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZW5hYmxlZENhY2hlO1xuXHRcdFx0fSxcblx0XHRcdHNldDogdiA9PiB7XG5cdFx0XHRcdGVuYWJsZU92ZXJyaWRlID0gdjtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdC8vIEVudi1zcGVjaWZpYyBpbml0aWFsaXphdGlvbiBsb2dpYyBmb3IgZGVidWcgaW5zdGFuY2VzXG5cdFx0aWYgKHR5cGVvZiBjcmVhdGVEZWJ1Zy5pbml0ID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRjcmVhdGVEZWJ1Zy5pbml0KGRlYnVnKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGVidWc7XG5cdH1cblxuXHRmdW5jdGlvbiBleHRlbmQobmFtZXNwYWNlLCBkZWxpbWl0ZXIpIHtcblx0XHRjb25zdCBuZXdEZWJ1ZyA9IGNyZWF0ZURlYnVnKHRoaXMubmFtZXNwYWNlICsgKHR5cGVvZiBkZWxpbWl0ZXIgPT09ICd1bmRlZmluZWQnID8gJzonIDogZGVsaW1pdGVyKSArIG5hbWVzcGFjZSk7XG5cdFx0bmV3RGVidWcubG9nID0gdGhpcy5sb2c7XG5cdFx0cmV0dXJuIG5ld0RlYnVnO1xuXHR9XG5cblx0LyoqXG5cdCogRW5hYmxlcyBhIGRlYnVnIG1vZGUgYnkgbmFtZXNwYWNlcy4gVGhpcyBjYW4gaW5jbHVkZSBtb2Rlc1xuXHQqIHNlcGFyYXRlZCBieSBhIGNvbG9uIGFuZCB3aWxkY2FyZHMuXG5cdCpcblx0KiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuXHQqIEBhcGkgcHVibGljXG5cdCovXG5cdGZ1bmN0aW9uIGVuYWJsZShuYW1lc3BhY2VzKSB7XG5cdFx0Y3JlYXRlRGVidWcuc2F2ZShuYW1lc3BhY2VzKTtcblx0XHRjcmVhdGVEZWJ1Zy5uYW1lc3BhY2VzID0gbmFtZXNwYWNlcztcblxuXHRcdGNyZWF0ZURlYnVnLm5hbWVzID0gW107XG5cdFx0Y3JlYXRlRGVidWcuc2tpcHMgPSBbXTtcblxuXHRcdGNvbnN0IHNwbGl0ID0gKHR5cGVvZiBuYW1lc3BhY2VzID09PSAnc3RyaW5nJyA/IG5hbWVzcGFjZXMgOiAnJylcblx0XHRcdC50cmltKClcblx0XHRcdC5yZXBsYWNlKC9cXHMrL2csICcsJylcblx0XHRcdC5zcGxpdCgnLCcpXG5cdFx0XHQuZmlsdGVyKEJvb2xlYW4pO1xuXG5cdFx0Zm9yIChjb25zdCBucyBvZiBzcGxpdCkge1xuXHRcdFx0aWYgKG5zWzBdID09PSAnLScpIHtcblx0XHRcdFx0Y3JlYXRlRGVidWcuc2tpcHMucHVzaChucy5zbGljZSgxKSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjcmVhdGVEZWJ1Zy5uYW1lcy5wdXNoKG5zKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogQ2hlY2tzIGlmIHRoZSBnaXZlbiBzdHJpbmcgbWF0Y2hlcyBhIG5hbWVzcGFjZSB0ZW1wbGF0ZSwgaG9ub3Jpbmdcblx0ICogYXN0ZXJpc2tzIGFzIHdpbGRjYXJkcy5cblx0ICpcblx0ICogQHBhcmFtIHtTdHJpbmd9IHNlYXJjaFxuXHQgKiBAcGFyYW0ge1N0cmluZ30gdGVtcGxhdGVcblx0ICogQHJldHVybiB7Qm9vbGVhbn1cblx0ICovXG5cdGZ1bmN0aW9uIG1hdGNoZXNUZW1wbGF0ZShzZWFyY2gsIHRlbXBsYXRlKSB7XG5cdFx0bGV0IHNlYXJjaEluZGV4ID0gMDtcblx0XHRsZXQgdGVtcGxhdGVJbmRleCA9IDA7XG5cdFx0bGV0IHN0YXJJbmRleCA9IC0xO1xuXHRcdGxldCBtYXRjaEluZGV4ID0gMDtcblxuXHRcdHdoaWxlIChzZWFyY2hJbmRleCA8IHNlYXJjaC5sZW5ndGgpIHtcblx0XHRcdGlmICh0ZW1wbGF0ZUluZGV4IDwgdGVtcGxhdGUubGVuZ3RoICYmICh0ZW1wbGF0ZVt0ZW1wbGF0ZUluZGV4XSA9PT0gc2VhcmNoW3NlYXJjaEluZGV4XSB8fCB0ZW1wbGF0ZVt0ZW1wbGF0ZUluZGV4XSA9PT0gJyonKSkge1xuXHRcdFx0XHQvLyBNYXRjaCBjaGFyYWN0ZXIgb3IgcHJvY2VlZCB3aXRoIHdpbGRjYXJkXG5cdFx0XHRcdGlmICh0ZW1wbGF0ZVt0ZW1wbGF0ZUluZGV4XSA9PT0gJyonKSB7XG5cdFx0XHRcdFx0c3RhckluZGV4ID0gdGVtcGxhdGVJbmRleDtcblx0XHRcdFx0XHRtYXRjaEluZGV4ID0gc2VhcmNoSW5kZXg7XG5cdFx0XHRcdFx0dGVtcGxhdGVJbmRleCsrOyAvLyBTa2lwIHRoZSAnKidcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzZWFyY2hJbmRleCsrO1xuXHRcdFx0XHRcdHRlbXBsYXRlSW5kZXgrKztcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmIChzdGFySW5kZXggIT09IC0xKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmVnYXRlZC1jb25kaXRpb25cblx0XHRcdFx0Ly8gQmFja3RyYWNrIHRvIHRoZSBsYXN0ICcqJyBhbmQgdHJ5IHRvIG1hdGNoIG1vcmUgY2hhcmFjdGVyc1xuXHRcdFx0XHR0ZW1wbGF0ZUluZGV4ID0gc3RhckluZGV4ICsgMTtcblx0XHRcdFx0bWF0Y2hJbmRleCsrO1xuXHRcdFx0XHRzZWFyY2hJbmRleCA9IG1hdGNoSW5kZXg7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7IC8vIE5vIG1hdGNoXG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gSGFuZGxlIHRyYWlsaW5nICcqJyBpbiB0ZW1wbGF0ZVxuXHRcdHdoaWxlICh0ZW1wbGF0ZUluZGV4IDwgdGVtcGxhdGUubGVuZ3RoICYmIHRlbXBsYXRlW3RlbXBsYXRlSW5kZXhdID09PSAnKicpIHtcblx0XHRcdHRlbXBsYXRlSW5kZXgrKztcblx0XHR9XG5cblx0XHRyZXR1cm4gdGVtcGxhdGVJbmRleCA9PT0gdGVtcGxhdGUubGVuZ3RoO1xuXHR9XG5cblx0LyoqXG5cdCogRGlzYWJsZSBkZWJ1ZyBvdXRwdXQuXG5cdCpcblx0KiBAcmV0dXJuIHtTdHJpbmd9IG5hbWVzcGFjZXNcblx0KiBAYXBpIHB1YmxpY1xuXHQqL1xuXHRmdW5jdGlvbiBkaXNhYmxlKCkge1xuXHRcdGNvbnN0IG5hbWVzcGFjZXMgPSBbXG5cdFx0XHQuLi5jcmVhdGVEZWJ1Zy5uYW1lcyxcblx0XHRcdC4uLmNyZWF0ZURlYnVnLnNraXBzLm1hcChuYW1lc3BhY2UgPT4gJy0nICsgbmFtZXNwYWNlKVxuXHRcdF0uam9pbignLCcpO1xuXHRcdGNyZWF0ZURlYnVnLmVuYWJsZSgnJyk7XG5cdFx0cmV0dXJuIG5hbWVzcGFjZXM7XG5cdH1cblxuXHQvKipcblx0KiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIG1vZGUgbmFtZSBpcyBlbmFibGVkLCBmYWxzZSBvdGhlcndpc2UuXG5cdCpcblx0KiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuXHQqIEByZXR1cm4ge0Jvb2xlYW59XG5cdCogQGFwaSBwdWJsaWNcblx0Ki9cblx0ZnVuY3Rpb24gZW5hYmxlZChuYW1lKSB7XG5cdFx0Zm9yIChjb25zdCBza2lwIG9mIGNyZWF0ZURlYnVnLnNraXBzKSB7XG5cdFx0XHRpZiAobWF0Y2hlc1RlbXBsYXRlKG5hbWUsIHNraXApKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRmb3IgKGNvbnN0IG5zIG9mIGNyZWF0ZURlYnVnLm5hbWVzKSB7XG5cdFx0XHRpZiAobWF0Y2hlc1RlbXBsYXRlKG5hbWUsIG5zKSkge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHQvKipcblx0KiBDb2VyY2UgYHZhbGAuXG5cdCpcblx0KiBAcGFyYW0ge01peGVkfSB2YWxcblx0KiBAcmV0dXJuIHtNaXhlZH1cblx0KiBAYXBpIHByaXZhdGVcblx0Ki9cblx0ZnVuY3Rpb24gY29lcmNlKHZhbCkge1xuXHRcdGlmICh2YWwgaW5zdGFuY2VvZiBFcnJvcikge1xuXHRcdFx0cmV0dXJuIHZhbC5zdGFjayB8fCB2YWwubWVzc2FnZTtcblx0XHR9XG5cdFx0cmV0dXJuIHZhbDtcblx0fVxuXG5cdC8qKlxuXHQqIFhYWCBETyBOT1QgVVNFLiBUaGlzIGlzIGEgdGVtcG9yYXJ5IHN0dWIgZnVuY3Rpb24uXG5cdCogWFhYIEl0IFdJTEwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciByZWxlYXNlLlxuXHQqL1xuXHRmdW5jdGlvbiBkZXN0cm95KCkge1xuXHRcdGNvbnNvbGUud2FybignSW5zdGFuY2UgbWV0aG9kIGBkZWJ1Zy5kZXN0cm95KClgIGlzIGRlcHJlY2F0ZWQgYW5kIG5vIGxvbmdlciBkb2VzIGFueXRoaW5nLiBJdCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgdmVyc2lvbiBvZiBgZGVidWdgLicpO1xuXHR9XG5cblx0Y3JlYXRlRGVidWcuZW5hYmxlKGNyZWF0ZURlYnVnLmxvYWQoKSk7XG5cblx0cmV0dXJuIGNyZWF0ZURlYnVnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldHVwO1xuIiwiLyogZXNsaW50LWVudiBicm93c2VyICovXG5cbi8qKlxuICogVGhpcyBpcyB0aGUgd2ViIGJyb3dzZXIgaW1wbGVtZW50YXRpb24gb2YgYGRlYnVnKClgLlxuICovXG5cbmV4cG9ydHMuZm9ybWF0QXJncyA9IGZvcm1hdEFyZ3M7XG5leHBvcnRzLnNhdmUgPSBzYXZlO1xuZXhwb3J0cy5sb2FkID0gbG9hZDtcbmV4cG9ydHMudXNlQ29sb3JzID0gdXNlQ29sb3JzO1xuZXhwb3J0cy5zdG9yYWdlID0gbG9jYWxzdG9yYWdlKCk7XG5leHBvcnRzLmRlc3Ryb3kgPSAoKCkgPT4ge1xuXHRsZXQgd2FybmVkID0gZmFsc2U7XG5cblx0cmV0dXJuICgpID0+IHtcblx0XHRpZiAoIXdhcm5lZCkge1xuXHRcdFx0d2FybmVkID0gdHJ1ZTtcblx0XHRcdGNvbnNvbGUud2FybignSW5zdGFuY2UgbWV0aG9kIGBkZWJ1Zy5kZXN0cm95KClgIGlzIGRlcHJlY2F0ZWQgYW5kIG5vIGxvbmdlciBkb2VzIGFueXRoaW5nLiBJdCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgdmVyc2lvbiBvZiBgZGVidWdgLicpO1xuXHRcdH1cblx0fTtcbn0pKCk7XG5cbi8qKlxuICogQ29sb3JzLlxuICovXG5cbmV4cG9ydHMuY29sb3JzID0gW1xuXHQnIzAwMDBDQycsXG5cdCcjMDAwMEZGJyxcblx0JyMwMDMzQ0MnLFxuXHQnIzAwMzNGRicsXG5cdCcjMDA2NkNDJyxcblx0JyMwMDY2RkYnLFxuXHQnIzAwOTlDQycsXG5cdCcjMDA5OUZGJyxcblx0JyMwMENDMDAnLFxuXHQnIzAwQ0MzMycsXG5cdCcjMDBDQzY2Jyxcblx0JyMwMENDOTknLFxuXHQnIzAwQ0NDQycsXG5cdCcjMDBDQ0ZGJyxcblx0JyMzMzAwQ0MnLFxuXHQnIzMzMDBGRicsXG5cdCcjMzMzM0NDJyxcblx0JyMzMzMzRkYnLFxuXHQnIzMzNjZDQycsXG5cdCcjMzM2NkZGJyxcblx0JyMzMzk5Q0MnLFxuXHQnIzMzOTlGRicsXG5cdCcjMzNDQzAwJyxcblx0JyMzM0NDMzMnLFxuXHQnIzMzQ0M2NicsXG5cdCcjMzNDQzk5Jyxcblx0JyMzM0NDQ0MnLFxuXHQnIzMzQ0NGRicsXG5cdCcjNjYwMENDJyxcblx0JyM2NjAwRkYnLFxuXHQnIzY2MzNDQycsXG5cdCcjNjYzM0ZGJyxcblx0JyM2NkNDMDAnLFxuXHQnIzY2Q0MzMycsXG5cdCcjOTkwMENDJyxcblx0JyM5OTAwRkYnLFxuXHQnIzk5MzNDQycsXG5cdCcjOTkzM0ZGJyxcblx0JyM5OUNDMDAnLFxuXHQnIzk5Q0MzMycsXG5cdCcjQ0MwMDAwJyxcblx0JyNDQzAwMzMnLFxuXHQnI0NDMDA2NicsXG5cdCcjQ0MwMDk5Jyxcblx0JyNDQzAwQ0MnLFxuXHQnI0NDMDBGRicsXG5cdCcjQ0MzMzAwJyxcblx0JyNDQzMzMzMnLFxuXHQnI0NDMzM2NicsXG5cdCcjQ0MzMzk5Jyxcblx0JyNDQzMzQ0MnLFxuXHQnI0NDMzNGRicsXG5cdCcjQ0M2NjAwJyxcblx0JyNDQzY2MzMnLFxuXHQnI0NDOTkwMCcsXG5cdCcjQ0M5OTMzJyxcblx0JyNDQ0NDMDAnLFxuXHQnI0NDQ0MzMycsXG5cdCcjRkYwMDAwJyxcblx0JyNGRjAwMzMnLFxuXHQnI0ZGMDA2NicsXG5cdCcjRkYwMDk5Jyxcblx0JyNGRjAwQ0MnLFxuXHQnI0ZGMDBGRicsXG5cdCcjRkYzMzAwJyxcblx0JyNGRjMzMzMnLFxuXHQnI0ZGMzM2NicsXG5cdCcjRkYzMzk5Jyxcblx0JyNGRjMzQ0MnLFxuXHQnI0ZGMzNGRicsXG5cdCcjRkY2NjAwJyxcblx0JyNGRjY2MzMnLFxuXHQnI0ZGOTkwMCcsXG5cdCcjRkY5OTMzJyxcblx0JyNGRkNDMDAnLFxuXHQnI0ZGQ0MzMydcbl07XG5cbi8qKlxuICogQ3VycmVudGx5IG9ubHkgV2ViS2l0LWJhc2VkIFdlYiBJbnNwZWN0b3JzLCBGaXJlZm94ID49IHYzMSxcbiAqIGFuZCB0aGUgRmlyZWJ1ZyBleHRlbnNpb24gKGFueSBGaXJlZm94IHZlcnNpb24pIGFyZSBrbm93blxuICogdG8gc3VwcG9ydCBcIiVjXCIgQ1NTIGN1c3RvbWl6YXRpb25zLlxuICpcbiAqIFRPRE86IGFkZCBhIGBsb2NhbFN0b3JhZ2VgIHZhcmlhYmxlIHRvIGV4cGxpY2l0bHkgZW5hYmxlL2Rpc2FibGUgY29sb3JzXG4gKi9cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbXBsZXhpdHlcbmZ1bmN0aW9uIHVzZUNvbG9ycygpIHtcblx0Ly8gTkI6IEluIGFuIEVsZWN0cm9uIHByZWxvYWQgc2NyaXB0LCBkb2N1bWVudCB3aWxsIGJlIGRlZmluZWQgYnV0IG5vdCBmdWxseVxuXHQvLyBpbml0aWFsaXplZC4gU2luY2Ugd2Uga25vdyB3ZSdyZSBpbiBDaHJvbWUsIHdlJ2xsIGp1c3QgZGV0ZWN0IHRoaXMgY2FzZVxuXHQvLyBleHBsaWNpdGx5XG5cdGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cucHJvY2VzcyAmJiAod2luZG93LnByb2Nlc3MudHlwZSA9PT0gJ3JlbmRlcmVyJyB8fCB3aW5kb3cucHJvY2Vzcy5fX253anMpKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHQvLyBJbnRlcm5ldCBFeHBsb3JlciBhbmQgRWRnZSBkbyBub3Qgc3VwcG9ydCBjb2xvcnMuXG5cdGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvKGVkZ2V8dHJpZGVudClcXC8oXFxkKykvKSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGxldCBtO1xuXG5cdC8vIElzIHdlYmtpdD8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTY0NTk2MDYvMzc2NzczXG5cdC8vIGRvY3VtZW50IGlzIHVuZGVmaW5lZCBpbiByZWFjdC1uYXRpdmU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC1uYXRpdmUvcHVsbC8xNjMyXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXR1cm4tYXNzaWduXG5cdHJldHVybiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5XZWJraXRBcHBlYXJhbmNlKSB8fFxuXHRcdC8vIElzIGZpcmVidWc/IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzM5ODEyMC8zNzY3NzNcblx0XHQodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmNvbnNvbGUgJiYgKHdpbmRvdy5jb25zb2xlLmZpcmVidWcgfHwgKHdpbmRvdy5jb25zb2xlLmV4Y2VwdGlvbiAmJiB3aW5kb3cuY29uc29sZS50YWJsZSkpKSB8fFxuXHRcdC8vIElzIGZpcmVmb3ggPj0gdjMxP1xuXHRcdC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvVG9vbHMvV2ViX0NvbnNvbGUjU3R5bGluZ19tZXNzYWdlc1xuXHRcdCh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIChtID0gbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9maXJlZm94XFwvKFxcZCspLykpICYmIHBhcnNlSW50KG1bMV0sIDEwKSA+PSAzMSkgfHxcblx0XHQvLyBEb3VibGUgY2hlY2sgd2Via2l0IGluIHVzZXJBZ2VudCBqdXN0IGluIGNhc2Ugd2UgYXJlIGluIGEgd29ya2VyXG5cdFx0KHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9hcHBsZXdlYmtpdFxcLyhcXGQrKS8pKTtcbn1cblxuLyoqXG4gKiBDb2xvcml6ZSBsb2cgYXJndW1lbnRzIGlmIGVuYWJsZWQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBmb3JtYXRBcmdzKGFyZ3MpIHtcblx0YXJnc1swXSA9ICh0aGlzLnVzZUNvbG9ycyA/ICclYycgOiAnJykgK1xuXHRcdHRoaXMubmFtZXNwYWNlICtcblx0XHQodGhpcy51c2VDb2xvcnMgPyAnICVjJyA6ICcgJykgK1xuXHRcdGFyZ3NbMF0gK1xuXHRcdCh0aGlzLnVzZUNvbG9ycyA/ICclYyAnIDogJyAnKSArXG5cdFx0JysnICsgbW9kdWxlLmV4cG9ydHMuaHVtYW5pemUodGhpcy5kaWZmKTtcblxuXHRpZiAoIXRoaXMudXNlQ29sb3JzKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Y29uc3QgYyA9ICdjb2xvcjogJyArIHRoaXMuY29sb3I7XG5cdGFyZ3Muc3BsaWNlKDEsIDAsIGMsICdjb2xvcjogaW5oZXJpdCcpO1xuXG5cdC8vIFRoZSBmaW5hbCBcIiVjXCIgaXMgc29tZXdoYXQgdHJpY2t5LCBiZWNhdXNlIHRoZXJlIGNvdWxkIGJlIG90aGVyXG5cdC8vIGFyZ3VtZW50cyBwYXNzZWQgZWl0aGVyIGJlZm9yZSBvciBhZnRlciB0aGUgJWMsIHNvIHdlIG5lZWQgdG9cblx0Ly8gZmlndXJlIG91dCB0aGUgY29ycmVjdCBpbmRleCB0byBpbnNlcnQgdGhlIENTUyBpbnRvXG5cdGxldCBpbmRleCA9IDA7XG5cdGxldCBsYXN0QyA9IDA7XG5cdGFyZ3NbMF0ucmVwbGFjZSgvJVthLXpBLVolXS9nLCBtYXRjaCA9PiB7XG5cdFx0aWYgKG1hdGNoID09PSAnJSUnKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGluZGV4Kys7XG5cdFx0aWYgKG1hdGNoID09PSAnJWMnKSB7XG5cdFx0XHQvLyBXZSBvbmx5IGFyZSBpbnRlcmVzdGVkIGluIHRoZSAqbGFzdCogJWNcblx0XHRcdC8vICh0aGUgdXNlciBtYXkgaGF2ZSBwcm92aWRlZCB0aGVpciBvd24pXG5cdFx0XHRsYXN0QyA9IGluZGV4O1xuXHRcdH1cblx0fSk7XG5cblx0YXJncy5zcGxpY2UobGFzdEMsIDAsIGMpO1xufVxuXG4vKipcbiAqIEludm9rZXMgYGNvbnNvbGUuZGVidWcoKWAgd2hlbiBhdmFpbGFibGUuXG4gKiBOby1vcCB3aGVuIGBjb25zb2xlLmRlYnVnYCBpcyBub3QgYSBcImZ1bmN0aW9uXCIuXG4gKiBJZiBgY29uc29sZS5kZWJ1Z2AgaXMgbm90IGF2YWlsYWJsZSwgZmFsbHMgYmFja1xuICogdG8gYGNvbnNvbGUubG9nYC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5leHBvcnRzLmxvZyA9IGNvbnNvbGUuZGVidWcgfHwgY29uc29sZS5sb2cgfHwgKCgpID0+IHt9KTtcblxuLyoqXG4gKiBTYXZlIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHNhdmUobmFtZXNwYWNlcykge1xuXHR0cnkge1xuXHRcdGlmIChuYW1lc3BhY2VzKSB7XG5cdFx0XHRleHBvcnRzLnN0b3JhZ2Uuc2V0SXRlbSgnZGVidWcnLCBuYW1lc3BhY2VzKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZXhwb3J0cy5zdG9yYWdlLnJlbW92ZUl0ZW0oJ2RlYnVnJyk7XG5cdFx0fVxuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdC8vIFN3YWxsb3dcblx0XHQvLyBYWFggKEBRaXgtKSBzaG91bGQgd2UgYmUgbG9nZ2luZyB0aGVzZT9cblx0fVxufVxuXG4vKipcbiAqIExvYWQgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEByZXR1cm4ge1N0cmluZ30gcmV0dXJucyB0aGUgcHJldmlvdXNseSBwZXJzaXN0ZWQgZGVidWcgbW9kZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBsb2FkKCkge1xuXHRsZXQgcjtcblx0dHJ5IHtcblx0XHRyID0gZXhwb3J0cy5zdG9yYWdlLmdldEl0ZW0oJ2RlYnVnJykgfHwgZXhwb3J0cy5zdG9yYWdlLmdldEl0ZW0oJ0RFQlVHJykgO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdC8vIFN3YWxsb3dcblx0XHQvLyBYWFggKEBRaXgtKSBzaG91bGQgd2UgYmUgbG9nZ2luZyB0aGVzZT9cblx0fVxuXG5cdC8vIElmIGRlYnVnIGlzbid0IHNldCBpbiBMUywgYW5kIHdlJ3JlIGluIEVsZWN0cm9uLCB0cnkgdG8gbG9hZCAkREVCVUdcblx0aWYgKCFyICYmIHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiAnZW52JyBpbiBwcm9jZXNzKSB7XG5cdFx0ciA9IHByb2Nlc3MuZW52LkRFQlVHO1xuXHR9XG5cblx0cmV0dXJuIHI7XG59XG5cbi8qKlxuICogTG9jYWxzdG9yYWdlIGF0dGVtcHRzIHRvIHJldHVybiB0aGUgbG9jYWxzdG9yYWdlLlxuICpcbiAqIFRoaXMgaXMgbmVjZXNzYXJ5IGJlY2F1c2Ugc2FmYXJpIHRocm93c1xuICogd2hlbiBhIHVzZXIgZGlzYWJsZXMgY29va2llcy9sb2NhbHN0b3JhZ2VcbiAqIGFuZCB5b3UgYXR0ZW1wdCB0byBhY2Nlc3MgaXQuXG4gKlxuICogQHJldHVybiB7TG9jYWxTdG9yYWdlfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gbG9jYWxzdG9yYWdlKCkge1xuXHR0cnkge1xuXHRcdC8vIFRWTUxLaXQgKEFwcGxlIFRWIEpTIFJ1bnRpbWUpIGRvZXMgbm90IGhhdmUgYSB3aW5kb3cgb2JqZWN0LCBqdXN0IGxvY2FsU3RvcmFnZSBpbiB0aGUgZ2xvYmFsIGNvbnRleHRcblx0XHQvLyBUaGUgQnJvd3NlciBhbHNvIGhhcyBsb2NhbFN0b3JhZ2UgaW4gdGhlIGdsb2JhbCBjb250ZXh0LlxuXHRcdHJldHVybiBsb2NhbFN0b3JhZ2U7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Ly8gU3dhbGxvd1xuXHRcdC8vIFhYWCAoQFFpeC0pIHNob3VsZCB3ZSBiZSBsb2dnaW5nIHRoZXNlP1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9jb21tb24nKShleHBvcnRzKTtcblxuY29uc3Qge2Zvcm1hdHRlcnN9ID0gbW9kdWxlLmV4cG9ydHM7XG5cbi8qKlxuICogTWFwICVqIHRvIGBKU09OLnN0cmluZ2lmeSgpYCwgc2luY2Ugbm8gV2ViIEluc3BlY3RvcnMgZG8gdGhhdCBieSBkZWZhdWx0LlxuICovXG5cbmZvcm1hdHRlcnMuaiA9IGZ1bmN0aW9uICh2KSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIEpTT04uc3RyaW5naWZ5KHYpO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdHJldHVybiAnW1VuZXhwZWN0ZWRKU09OUGFyc2VFcnJvcl06ICcgKyBlcnJvci5tZXNzYWdlO1xuXHR9XG59O1xuIiwiaW1wb3J0IHsgbG9hZEVudiBhcyBfbG9hZEVudiwgaXNCcm93c2VyRW52aXJvbm1lbnQsIH0gZnJvbSAnQG9wZW5haS9hZ2VudHMtY29yZS9fc2hpbXMnO1xuLyoqXG4gKiBMb2FkcyBlbnZpcm9ubWVudCB2YXJpYWJsZXMgZnJvbSB0aGUgcHJvY2VzcyBlbnZpcm9ubWVudC5cbiAqXG4gKiBAcmV0dXJucyBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgZW52aXJvbm1lbnQgdmFyaWFibGVzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbG9hZEVudigpIHtcbiAgICByZXR1cm4gX2xvYWRFbnYoKTtcbn1cbi8qKlxuICogQ2hlY2tzIGlmIGEgZmxhZyBpcyBlbmFibGVkIGluIHRoZSBlbnZpcm9ubWVudC5cbiAqXG4gKiBAcGFyYW0gZmxhZ05hbWUgLSBUaGUgbmFtZSBvZiB0aGUgZmxhZyB0byBjaGVjay5cbiAqIEByZXR1cm5zIGB0cnVlYCBpZiB0aGUgZmxhZyBpcyBlbmFibGVkLCBgZmFsc2VgIG90aGVyd2lzZS5cbiAqL1xuZnVuY3Rpb24gaXNFbmFibGVkKGZsYWdOYW1lKSB7XG4gICAgY29uc3QgZW52ID0gbG9hZEVudigpO1xuICAgIHJldHVybiAodHlwZW9mIGVudiAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgKGVudltmbGFnTmFtZV0gPT09ICd0cnVlJyB8fCBlbnZbZmxhZ05hbWVdID09PSAnMScpKTtcbn1cbi8qKlxuICogR2xvYmFsIGNvbmZpZ3VyYXRpb24gZm9yIHRyYWNpbmcuXG4gKi9cbmV4cG9ydCBjb25zdCB0cmFjaW5nID0ge1xuICAgIGdldCBkaXNhYmxlZCgpIHtcbiAgICAgICAgaWYgKGlzQnJvd3NlckVudmlyb25tZW50KCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGxvYWRFbnYoKS5OT0RFX0VOViA9PT0gJ3Rlc3QnKSB7XG4gICAgICAgICAgICAvLyBkaXNhYmxpbmcgYnkgZGVmYXVsdCBpbiB0ZXN0c1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlzRW5hYmxlZCgnT1BFTkFJX0FHRU5UU19ESVNBQkxFX1RSQUNJTkcnKTtcbiAgICB9LFxufTtcbi8qKlxuICogR2xvYmFsIGNvbmZpZ3VyYXRpb24gZm9yIGxvZ2dpbmcuXG4gKi9cbmV4cG9ydCBjb25zdCBsb2dnaW5nID0ge1xuICAgIGdldCBkb250TG9nTW9kZWxEYXRhKCkge1xuICAgICAgICByZXR1cm4gaXNFbmFibGVkKCdPUEVOQUlfQUdFTlRTX0RPTlRfTE9HX01PREVMX0RBVEEnKTtcbiAgICB9LFxuICAgIGdldCBkb250TG9nVG9vbERhdGEoKSB7XG4gICAgICAgIHJldHVybiBpc0VuYWJsZWQoJ09QRU5BSV9BR0VOVFNfRE9OVF9MT0dfVE9PTF9EQVRBJyk7XG4gICAgfSxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25maWcubWpzLm1hcCIsImltcG9ydCBkZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5pbXBvcnQgeyBsb2dnaW5nIH0gZnJvbSBcIi4vY29uZmlnLm1qc1wiO1xuLyoqXG4gKiBCeSBkZWZhdWx0IHdlIGRvbid0IGxvZyBMTE0gaW5wdXRzL291dHB1dHMsIHRvIHByZXZlbnQgZXhwb3Npbmcgc2Vuc2l0aXZlIGRhdGEuIFNldCB0aGlzIGZsYWdcbiAqIHRvIGVuYWJsZSBsb2dnaW5nIHRoZW0uXG4gKi9cbmNvbnN0IGRvbnRMb2dNb2RlbERhdGEgPSBsb2dnaW5nLmRvbnRMb2dNb2RlbERhdGE7XG4vKipcbiAqIEJ5IGRlZmF1bHQgd2UgZG9uJ3QgbG9nIHRvb2wgaW5wdXRzL291dHB1dHMsIHRvIHByZXZlbnQgZXhwb3Npbmcgc2Vuc2l0aXZlIGRhdGEuIFNldCB0aGlzIGZsYWdcbiAqIHRvIGVuYWJsZSBsb2dnaW5nIHRoZW0uXG4gKi9cbmNvbnN0IGRvbnRMb2dUb29sRGF0YSA9IGxvZ2dpbmcuZG9udExvZ1Rvb2xEYXRhO1xuLyoqXG4gKiBHZXQgYSBsb2dnZXIgZm9yIGEgZ2l2ZW4gcGFja2FnZS5cbiAqXG4gKiBAcGFyYW0gbmFtZXNwYWNlIC0gdGhlIG5hbWVzcGFjZSB0byB1c2UgZm9yIHRoZSBsb2dnZXIuXG4gKiBAcmV0dXJucyBBIGxvZ2dlciBvYmplY3Qgd2l0aCBgZGVidWdgIGFuZCBgZXJyb3JgIG1ldGhvZHMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRMb2dnZXIobmFtZXNwYWNlID0gJ29wZW5haS1hZ2VudHMnKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbmFtZXNwYWNlLFxuICAgICAgICBkZWJ1ZzogZGVidWcobmFtZXNwYWNlKSxcbiAgICAgICAgZXJyb3I6IGNvbnNvbGUuZXJyb3IsXG4gICAgICAgIHdhcm46IGNvbnNvbGUud2FybixcbiAgICAgICAgZG9udExvZ01vZGVsRGF0YSxcbiAgICAgICAgZG9udExvZ1Rvb2xEYXRhLFxuICAgIH07XG59XG5leHBvcnQgY29uc3QgbG9nZ2VyID0gZ2V0TG9nZ2VyKCdvcGVuYWktYWdlbnRzOmNvcmUnKTtcbmV4cG9ydCBkZWZhdWx0IGxvZ2dlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvZ2dlci5tanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIHRvU21hcnRTdHJpbmcodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gU3RyaW5nKHZhbHVlKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKF9lKSB7XG4gICAgICAgICAgICByZXR1cm4gJ1tvYmplY3Qgd2l0aCBjaXJjdWxhciByZWZlcmVuY2VzXSc7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIFN0cmluZyh2YWx1ZSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zbWFydFN0cmluZy5tanMubWFwIiwiaW1wb3J0IHsgc2FmZUV4ZWN1dGUgfSBmcm9tIFwiLi91dGlscy9zYWZlRXhlY3V0ZS5tanNcIjtcbmltcG9ydCB7IHRvRnVuY3Rpb25Ub29sTmFtZSB9IGZyb20gXCIuL3V0aWxzL3Rvb2xzLm1qc1wiO1xuaW1wb3J0IHsgZ2V0U2NoZW1hQW5kUGFyc2VyRnJvbUlucHV0VHlwZSB9IGZyb20gXCIuL3V0aWxzL3Rvb2xzLm1qc1wiO1xuaW1wb3J0IHsgaXNab2RPYmplY3QgfSBmcm9tIFwiLi91dGlscy90eXBlR3VhcmRzLm1qc1wiO1xuaW1wb3J0IHsgTW9kZWxCZWhhdmlvckVycm9yLCBVc2VyRXJyb3IgfSBmcm9tIFwiLi9lcnJvcnMubWpzXCI7XG5pbXBvcnQgbG9nZ2VyIGZyb20gXCIuL2xvZ2dlci5tanNcIjtcbmltcG9ydCB7IGdldEN1cnJlbnRTcGFuIH0gZnJvbSBcIi4vdHJhY2luZy9pbmRleC5tanNcIjtcbmltcG9ydCB7IHRvU21hcnRTdHJpbmcgfSBmcm9tIFwiLi91dGlscy9zbWFydFN0cmluZy5tanNcIjtcbi8qKlxuICogRXhwb3NlcyBhIGNvbXB1dGVyIHRvIHRoZSBhZ2VudCBhcyBhIHRvb2wgdG8gYmUgY2FsbGVkXG4gKlxuICogQHBhcmFtIG9wdGlvbnMgQWRkaXRpb25hbCBjb25maWd1cmF0aW9uIGZvciB0aGUgY29tcHV0ZXIgdG9vbCBsaWtlIHNwZWNpZnlpbmcgdGhlIGxvY2F0aW9uIG9mIHlvdXIgYWdlbnRcbiAqIEByZXR1cm5zIGEgY29tcHV0ZXIgdG9vbCBkZWZpbml0aW9uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb21wdXRlclRvb2wob3B0aW9ucykge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdjb21wdXRlcicsXG4gICAgICAgIG5hbWU6IG9wdGlvbnMubmFtZSA/PyAnY29tcHV0ZXJfdXNlX3ByZXZpZXcnLFxuICAgICAgICBjb21wdXRlcjogb3B0aW9ucy5jb21wdXRlcixcbiAgICB9O1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgaG9zdGVkIE1DUCB0b29sIGRlZmluaXRpb24uXG4gKlxuICogQHBhcmFtIG9wdGlvbnMgLSBDb25maWd1cmF0aW9uIGZvciB0aGUgaG9zdGVkIE1DUCB0b29sLCBpbmNsdWRpbmcgc2VydmVyIGNvbm5lY3Rpb24gZGV0YWlsc1xuICogYW5kIGFwcHJvdmFsIHJlcXVpcmVtZW50cy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhvc3RlZE1jcFRvb2wob3B0aW9ucykge1xuICAgIGlmICgnc2VydmVyVXJsJyBpbiBvcHRpb25zKSB7XG4gICAgICAgIC8vIHRoZSBNQ1Agc2VydmVycyBjb21hcHRpYmxlIHdpdGggdGhlIHNwZWNpZmljYXRpb25cbiAgICAgICAgY29uc3QgcHJvdmlkZXJEYXRhID0gdHlwZW9mIG9wdGlvbnMucmVxdWlyZUFwcHJvdmFsID09PSAndW5kZWZpbmVkJyB8fFxuICAgICAgICAgICAgb3B0aW9ucy5yZXF1aXJlQXBwcm92YWwgPT09ICduZXZlcidcbiAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdtY3AnLFxuICAgICAgICAgICAgICAgIHNlcnZlcl9sYWJlbDogb3B0aW9ucy5zZXJ2ZXJMYWJlbCxcbiAgICAgICAgICAgICAgICBzZXJ2ZXJfdXJsOiBvcHRpb25zLnNlcnZlclVybCxcbiAgICAgICAgICAgICAgICByZXF1aXJlX2FwcHJvdmFsOiAnbmV2ZXInLFxuICAgICAgICAgICAgICAgIGFsbG93ZWRfdG9vbHM6IHRvTWNwQWxsb3dlZFRvb2xzRmlsdGVyKG9wdGlvbnMuYWxsb3dlZFRvb2xzKSxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBvcHRpb25zLmhlYWRlcnMsXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICA6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnbWNwJyxcbiAgICAgICAgICAgICAgICBzZXJ2ZXJfbGFiZWw6IG9wdGlvbnMuc2VydmVyTGFiZWwsXG4gICAgICAgICAgICAgICAgc2VydmVyX3VybDogb3B0aW9ucy5zZXJ2ZXJVcmwsXG4gICAgICAgICAgICAgICAgYWxsb3dlZF90b29sczogdG9NY3BBbGxvd2VkVG9vbHNGaWx0ZXIob3B0aW9ucy5hbGxvd2VkVG9vbHMpLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IG9wdGlvbnMuaGVhZGVycyxcbiAgICAgICAgICAgICAgICByZXF1aXJlX2FwcHJvdmFsOiB0eXBlb2Ygb3B0aW9ucy5yZXF1aXJlQXBwcm92YWwgPT09ICdzdHJpbmcnXG4gICAgICAgICAgICAgICAgICAgID8gJ2Fsd2F5cydcbiAgICAgICAgICAgICAgICAgICAgOiBidWlsZFJlcXVpcmVBcHByb3ZhbChvcHRpb25zLnJlcXVpcmVBcHByb3ZhbCksXG4gICAgICAgICAgICAgICAgb25fYXBwcm92YWw6IG9wdGlvbnMub25BcHByb3ZhbCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiAnaG9zdGVkX3Rvb2wnLFxuICAgICAgICAgICAgbmFtZTogJ2hvc3RlZF9tY3AnLFxuICAgICAgICAgICAgcHJvdmlkZXJEYXRhLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBlbHNlIGlmICgnY29ubmVjdG9ySWQnIGluIG9wdGlvbnMpIHtcbiAgICAgICAgLy8gT3BlbkFJJ3MgY29ubmVjdG9yc1xuICAgICAgICBjb25zdCBwcm92aWRlckRhdGEgPSB0eXBlb2Ygb3B0aW9ucy5yZXF1aXJlQXBwcm92YWwgPT09ICd1bmRlZmluZWQnIHx8XG4gICAgICAgICAgICBvcHRpb25zLnJlcXVpcmVBcHByb3ZhbCA9PT0gJ25ldmVyJ1xuICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ21jcCcsXG4gICAgICAgICAgICAgICAgc2VydmVyX2xhYmVsOiBvcHRpb25zLnNlcnZlckxhYmVsLFxuICAgICAgICAgICAgICAgIGNvbm5lY3Rvcl9pZDogb3B0aW9ucy5jb25uZWN0b3JJZCxcbiAgICAgICAgICAgICAgICBhdXRob3JpemF0aW9uOiBvcHRpb25zLmF1dGhvcml6YXRpb24sXG4gICAgICAgICAgICAgICAgcmVxdWlyZV9hcHByb3ZhbDogJ25ldmVyJyxcbiAgICAgICAgICAgICAgICBhbGxvd2VkX3Rvb2xzOiB0b01jcEFsbG93ZWRUb29sc0ZpbHRlcihvcHRpb25zLmFsbG93ZWRUb29scyksXG4gICAgICAgICAgICAgICAgaGVhZGVyczogb3B0aW9ucy5oZWFkZXJzLFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ21jcCcsXG4gICAgICAgICAgICAgICAgc2VydmVyX2xhYmVsOiBvcHRpb25zLnNlcnZlckxhYmVsLFxuICAgICAgICAgICAgICAgIGNvbm5lY3Rvcl9pZDogb3B0aW9ucy5jb25uZWN0b3JJZCxcbiAgICAgICAgICAgICAgICBhdXRob3JpemF0aW9uOiBvcHRpb25zLmF1dGhvcml6YXRpb24sXG4gICAgICAgICAgICAgICAgYWxsb3dlZF90b29sczogdG9NY3BBbGxvd2VkVG9vbHNGaWx0ZXIob3B0aW9ucy5hbGxvd2VkVG9vbHMpLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IG9wdGlvbnMuaGVhZGVycyxcbiAgICAgICAgICAgICAgICByZXF1aXJlX2FwcHJvdmFsOiB0eXBlb2Ygb3B0aW9ucy5yZXF1aXJlQXBwcm92YWwgPT09ICdzdHJpbmcnXG4gICAgICAgICAgICAgICAgICAgID8gJ2Fsd2F5cydcbiAgICAgICAgICAgICAgICAgICAgOiBidWlsZFJlcXVpcmVBcHByb3ZhbChvcHRpb25zLnJlcXVpcmVBcHByb3ZhbCksXG4gICAgICAgICAgICAgICAgb25fYXBwcm92YWw6IG9wdGlvbnMub25BcHByb3ZhbCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiAnaG9zdGVkX3Rvb2wnLFxuICAgICAgICAgICAgbmFtZTogJ2hvc3RlZF9tY3AnLFxuICAgICAgICAgICAgcHJvdmlkZXJEYXRhLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gdGhlIE1DUCBzZXJ2ZXJzIGNvbWFwdGlibGUgd2l0aCB0aGUgc3BlY2lmaWNhdGlvblxuICAgICAgICBjb25zdCBwcm92aWRlckRhdGEgPSB0eXBlb2Ygb3B0aW9ucy5yZXF1aXJlQXBwcm92YWwgPT09ICd1bmRlZmluZWQnIHx8XG4gICAgICAgICAgICBvcHRpb25zLnJlcXVpcmVBcHByb3ZhbCA9PT0gJ25ldmVyJ1xuICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ21jcCcsXG4gICAgICAgICAgICAgICAgc2VydmVyX2xhYmVsOiBvcHRpb25zLnNlcnZlckxhYmVsLFxuICAgICAgICAgICAgICAgIHJlcXVpcmVfYXBwcm92YWw6ICduZXZlcicsXG4gICAgICAgICAgICAgICAgYWxsb3dlZF90b29sczogdG9NY3BBbGxvd2VkVG9vbHNGaWx0ZXIob3B0aW9ucy5hbGxvd2VkVG9vbHMpLFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ21jcCcsXG4gICAgICAgICAgICAgICAgc2VydmVyX2xhYmVsOiBvcHRpb25zLnNlcnZlckxhYmVsLFxuICAgICAgICAgICAgICAgIGFsbG93ZWRfdG9vbHM6IHRvTWNwQWxsb3dlZFRvb2xzRmlsdGVyKG9wdGlvbnMuYWxsb3dlZFRvb2xzKSxcbiAgICAgICAgICAgICAgICByZXF1aXJlX2FwcHJvdmFsOiB0eXBlb2Ygb3B0aW9ucy5yZXF1aXJlQXBwcm92YWwgPT09ICdzdHJpbmcnXG4gICAgICAgICAgICAgICAgICAgID8gJ2Fsd2F5cydcbiAgICAgICAgICAgICAgICAgICAgOiBidWlsZFJlcXVpcmVBcHByb3ZhbChvcHRpb25zLnJlcXVpcmVBcHByb3ZhbCksXG4gICAgICAgICAgICAgICAgb25fYXBwcm92YWw6IG9wdGlvbnMub25BcHByb3ZhbCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiAnaG9zdGVkX3Rvb2wnLFxuICAgICAgICAgICAgbmFtZTogJ2hvc3RlZF9tY3AnLFxuICAgICAgICAgICAgcHJvdmlkZXJEYXRhLFxuICAgICAgICB9O1xuICAgIH1cbn1cbi8qKlxuICogVGhlIGRlZmF1bHQgZnVuY3Rpb24gdG8gaW52b2tlIHdoZW4gYW4gZXJyb3Igb2NjdXJzIHdoaWxlIHJ1bm5pbmcgdGhlIHRvb2wuXG4gKlxuICogQWx3YXlzIHJldHVybnMgYEFuIGVycm9yIG9jY3VycmVkIHdoaWxlIHJ1bm5pbmcgdGhlIHRvb2wuIFBsZWFzZSB0cnkgYWdhaW4uIEVycm9yOiA8ZXJyb3IgZGV0YWlscz5gXG4gKlxuICogQHBhcmFtIGNvbnRleHQgQW4gaW5zdGFuY2Ugb2YgdGhlIGN1cnJlbnQgUnVuQ29udGV4dFxuICogQHBhcmFtIGVycm9yIFRoZSBlcnJvciB0aGF0IG9jY3VycmVkXG4gKi9cbmZ1bmN0aW9uIGRlZmF1bHRUb29sRXJyb3JGdW5jdGlvbihjb250ZXh0LCBlcnJvcikge1xuICAgIGNvbnN0IGRldGFpbHMgPSBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IudG9TdHJpbmcoKSA6IFN0cmluZyhlcnJvcik7XG4gICAgcmV0dXJuIGBBbiBlcnJvciBvY2N1cnJlZCB3aGlsZSBydW5uaW5nIHRoZSB0b29sLiBQbGVhc2UgdHJ5IGFnYWluLiBFcnJvcjogJHtkZXRhaWxzfWA7XG59XG4vKipcbiAqIEV4cG9zZXMgYSBmdW5jdGlvbiB0byB0aGUgYWdlbnQgYXMgYSB0b29sIHRvIGJlIGNhbGxlZFxuICpcbiAqIEBwYXJhbSBvcHRpb25zIFRoZSBvcHRpb25zIGZvciB0aGUgdG9vbFxuICogQHJldHVybnMgQSBuZXcgdG9vbFxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9vbChvcHRpb25zKSB7XG4gICAgY29uc3QgbmFtZSA9IG9wdGlvbnMubmFtZVxuICAgICAgICA/IHRvRnVuY3Rpb25Ub29sTmFtZShvcHRpb25zLm5hbWUpXG4gICAgICAgIDogdG9GdW5jdGlvblRvb2xOYW1lKG9wdGlvbnMuZXhlY3V0ZS5uYW1lKTtcbiAgICBjb25zdCB0b29sRXJyb3JGdW5jdGlvbiA9IHR5cGVvZiBvcHRpb25zLmVycm9yRnVuY3Rpb24gPT09ICd1bmRlZmluZWQnXG4gICAgICAgID8gZGVmYXVsdFRvb2xFcnJvckZ1bmN0aW9uXG4gICAgICAgIDogb3B0aW9ucy5lcnJvckZ1bmN0aW9uO1xuICAgIGlmICghbmFtZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Rvb2wgbmFtZSBjYW5ub3QgYmUgZW1wdHkuIEVpdGhlciBuYW1lIHlvdXIgZnVuY3Rpb24gb3IgcHJvdmlkZSBhIG5hbWUgaW4gdGhlIG9wdGlvbnMuJyk7XG4gICAgfVxuICAgIGNvbnN0IHN0cmljdE1vZGUgPSBvcHRpb25zLnN0cmljdCA/PyB0cnVlO1xuICAgIGlmICghc3RyaWN0TW9kZSAmJiBpc1pvZE9iamVjdChvcHRpb25zLnBhcmFtZXRlcnMpKSB7XG4gICAgICAgIHRocm93IG5ldyBVc2VyRXJyb3IoJ1N0cmljdCBtb2RlIGlzIHJlcXVpcmVkIGZvciBab2QgcGFyYW1ldGVycycpO1xuICAgIH1cbiAgICBjb25zdCB7IHBhcnNlciwgc2NoZW1hOiBwYXJhbWV0ZXJzIH0gPSBnZXRTY2hlbWFBbmRQYXJzZXJGcm9tSW5wdXRUeXBlKG9wdGlvbnMucGFyYW1ldGVycywgbmFtZSk7XG4gICAgYXN5bmMgZnVuY3Rpb24gX2ludm9rZShydW5Db250ZXh0LCBpbnB1dCwgZGV0YWlscykge1xuICAgICAgICBjb25zdCBbZXJyb3IsIHBhcnNlZF0gPSBhd2FpdCBzYWZlRXhlY3V0ZSgoKSA9PiBwYXJzZXIoaW5wdXQpKTtcbiAgICAgICAgaWYgKGVycm9yICE9PSBudWxsKSB7XG4gICAgICAgICAgICBpZiAobG9nZ2VyLmRvbnRMb2dUb29sRGF0YSkge1xuICAgICAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZyhgSW52YWxpZCBKU09OIGlucHV0IGZvciB0b29sICR7bmFtZX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZyhgSW52YWxpZCBKU09OIGlucHV0IGZvciB0b29sICR7bmFtZX06ICR7aW5wdXR9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBuZXcgTW9kZWxCZWhhdmlvckVycm9yKCdJbnZhbGlkIEpTT04gaW5wdXQgZm9yIHRvb2wnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobG9nZ2VyLmRvbnRMb2dUb29sRGF0YSkge1xuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKGBJbnZva2luZyB0b29sICR7bmFtZX1gKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZyhgSW52b2tpbmcgdG9vbCAke25hbWV9IHdpdGggaW5wdXQgJHtpbnB1dH1gKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBvcHRpb25zLmV4ZWN1dGUocGFyc2VkLCBydW5Db250ZXh0LCBkZXRhaWxzKTtcbiAgICAgICAgY29uc3Qgc3RyaW5nUmVzdWx0ID0gdG9TbWFydFN0cmluZyhyZXN1bHQpO1xuICAgICAgICBpZiAobG9nZ2VyLmRvbnRMb2dUb29sRGF0YSkge1xuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKGBUb29sICR7bmFtZX0gY29tcGxldGVkYCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsb2dnZXIuZGVidWcoYFRvb2wgJHtuYW1lfSByZXR1cm5lZDogJHtzdHJpbmdSZXN1bHR9YCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgYXN5bmMgZnVuY3Rpb24gaW52b2tlKHJ1bkNvbnRleHQsIGlucHV0LCBkZXRhaWxzKSB7XG4gICAgICAgIHJldHVybiBfaW52b2tlKHJ1bkNvbnRleHQsIGlucHV0LCBkZXRhaWxzKS5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgICAgIGlmICh0b29sRXJyb3JGdW5jdGlvbikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRTcGFuID0gZ2V0Q3VycmVudFNwYW4oKTtcbiAgICAgICAgICAgICAgICBjdXJyZW50U3Bhbj8uc2V0RXJyb3Ioe1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnRXJyb3IgcnVubmluZyB0b29sIChub24tZmF0YWwpJyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9vbF9uYW1lOiBuYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGVycm9yLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRvb2xFcnJvckZ1bmN0aW9uKHJ1bkNvbnRleHQsIGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgY29uc3QgbmVlZHNBcHByb3ZhbCA9IHR5cGVvZiBvcHRpb25zLm5lZWRzQXBwcm92YWwgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyBvcHRpb25zLm5lZWRzQXBwcm92YWxcbiAgICAgICAgOiBhc3luYyAoKSA9PiB0eXBlb2Ygb3B0aW9ucy5uZWVkc0FwcHJvdmFsID09PSAnYm9vbGVhbidcbiAgICAgICAgICAgID8gb3B0aW9ucy5uZWVkc0FwcHJvdmFsXG4gICAgICAgICAgICA6IGZhbHNlO1xuICAgIGNvbnN0IGlzRW5hYmxlZCA9IHR5cGVvZiBvcHRpb25zLmlzRW5hYmxlZCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IGFzeW5jIChydW5Db250ZXh0LCBhZ2VudCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcHJlZGljYXRlID0gb3B0aW9ucy5pc0VuYWJsZWQ7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBwcmVkaWNhdGUoeyBydW5Db250ZXh0LCBhZ2VudCB9KTtcbiAgICAgICAgICAgIHJldHVybiBCb29sZWFuKHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgICAgOiBhc3luYyAoKSA9PiB0eXBlb2Ygb3B0aW9ucy5pc0VuYWJsZWQgPT09ICdib29sZWFuJyA/IG9wdGlvbnMuaXNFbmFibGVkIDogdHJ1ZTtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiAnZnVuY3Rpb24nLFxuICAgICAgICBuYW1lLFxuICAgICAgICBkZXNjcmlwdGlvbjogb3B0aW9ucy5kZXNjcmlwdGlvbixcbiAgICAgICAgcGFyYW1ldGVycyxcbiAgICAgICAgc3RyaWN0OiBzdHJpY3RNb2RlLFxuICAgICAgICBpbnZva2UsXG4gICAgICAgIG5lZWRzQXBwcm92YWwsXG4gICAgICAgIGlzRW5hYmxlZCxcbiAgICB9O1xufVxuZnVuY3Rpb24gYnVpbGRSZXF1aXJlQXBwcm92YWwocmVxdWlyZUFwcHJvdmFsKSB7XG4gICAgY29uc3QgcmVzdWx0ID0ge307XG4gICAgaWYgKHJlcXVpcmVBcHByb3ZhbC5hbHdheXMpIHtcbiAgICAgICAgcmVzdWx0LmFsd2F5cyA9IHsgdG9vbF9uYW1lczogcmVxdWlyZUFwcHJvdmFsLmFsd2F5cy50b29sTmFtZXMgfTtcbiAgICB9XG4gICAgaWYgKHJlcXVpcmVBcHByb3ZhbC5uZXZlcikge1xuICAgICAgICByZXN1bHQubmV2ZXIgPSB7IHRvb2xfbmFtZXM6IHJlcXVpcmVBcHByb3ZhbC5uZXZlci50b29sTmFtZXMgfTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIHRvTWNwQWxsb3dlZFRvb2xzRmlsdGVyKGFsbG93ZWRUb29scykge1xuICAgIGlmICh0eXBlb2YgYWxsb3dlZFRvb2xzID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheShhbGxvd2VkVG9vbHMpKSB7XG4gICAgICAgIHJldHVybiB7IHRvb2xfbmFtZXM6IGFsbG93ZWRUb29scyB9O1xuICAgIH1cbiAgICByZXR1cm4geyB0b29sX25hbWVzOiBhbGxvd2VkVG9vbHM/LnRvb2xOYW1lcyA/PyBbXSB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dG9vbC5tanMubWFwIiwiaW1wb3J0IHsgdG9vbCB9IGZyb20gXCIuL3Rvb2wubWpzXCI7XG5pbXBvcnQgeyBVc2VyRXJyb3IgfSBmcm9tIFwiLi9lcnJvcnMubWpzXCI7XG5pbXBvcnQgeyBNQ1BTZXJ2ZXJTdGRpbyBhcyBVbmRlcmx5aW5nTUNQU2VydmVyU3RkaW8sIE1DUFNlcnZlclN0cmVhbWFibGVIdHRwIGFzIFVuZGVybHlpbmdNQ1BTZXJ2ZXJTdHJlYW1hYmxlSHR0cCwgTUNQU2VydmVyU1NFIGFzIFVuZGVybHlpbmdNQ1BTZXJ2ZXJTU0UsIH0gZnJvbSAnQG9wZW5haS9hZ2VudHMtY29yZS9fc2hpbXMnO1xuaW1wb3J0IHsgZ2V0Q3VycmVudFNwYW4sIHdpdGhNQ1BMaXN0VG9vbHNTcGFuIH0gZnJvbSBcIi4vdHJhY2luZy9pbmRleC5tanNcIjtcbmltcG9ydCB7IGxvZ2dlciBhcyBnbG9iYWxMb2dnZXIsIGdldExvZ2dlciB9IGZyb20gXCIuL2xvZ2dlci5tanNcIjtcbmltcG9ydCBkZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5pbXBvcnQgeyB6IH0gZnJvbSAnem9kJztcbmV4cG9ydCBjb25zdCBERUZBVUxUX1NURElPX01DUF9DTElFTlRfTE9HR0VSX05BTUUgPSAnb3BlbmFpLWFnZW50czpzdGRpby1tY3AtY2xpZW50JztcbmV4cG9ydCBjb25zdCBERUZBVUxUX1NUUkVBTUFCTEVfSFRUUF9NQ1BfQ0xJRU5UX0xPR0dFUl9OQU1FID0gJ29wZW5haS1hZ2VudHM6c3RyZWFtYWJsZS1odHRwLW1jcC1jbGllbnQnO1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfU1NFX01DUF9DTElFTlRfTE9HR0VSX05BTUUgPSAnb3BlbmFpLWFnZW50czpzc2UtbWNwLWNsaWVudCc7XG5leHBvcnQgY2xhc3MgQmFzZU1DUFNlcnZlclN0ZGlvIHtcbiAgICBjYWNoZVRvb2xzTGlzdDtcbiAgICBfY2FjaGVkVG9vbHMgPSB1bmRlZmluZWQ7XG4gICAgdG9vbEZpbHRlcjtcbiAgICBsb2dnZXI7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICB0aGlzLmxvZ2dlciA9XG4gICAgICAgICAgICBvcHRpb25zLmxvZ2dlciA/PyBnZXRMb2dnZXIoREVGQVVMVF9TVERJT19NQ1BfQ0xJRU5UX0xPR0dFUl9OQU1FKTtcbiAgICAgICAgdGhpcy5jYWNoZVRvb2xzTGlzdCA9IG9wdGlvbnMuY2FjaGVUb29sc0xpc3QgPz8gZmFsc2U7XG4gICAgICAgIHRoaXMudG9vbEZpbHRlciA9IG9wdGlvbnMudG9vbEZpbHRlcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTG9ncyBhIGRlYnVnIG1lc3NhZ2Ugd2hlbiBkZWJ1ZyBsb2dnaW5nIGlzIGVuYWJsZWQuXG4gICAgICogQHBhcmFtIGJ1aWxkTWVzc2FnZSBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgbWVzc2FnZSB0byBsb2cuXG4gICAgICovXG4gICAgZGVidWdMb2coYnVpbGRNZXNzYWdlKSB7XG4gICAgICAgIGlmIChkZWJ1Zy5lbmFibGVkKHRoaXMubG9nZ2VyLm5hbWVzcGFjZSkpIHtcbiAgICAgICAgICAgIC8vIG9ubHkgd2hlbiB0aGlzIGlzIHRydWUsIHRoZSBmdW5jdGlvbiB0byBidWlsZCB0aGUgc3RyaW5nIGlzIGNhbGxlZFxuICAgICAgICAgICAgdGhpcy5sb2dnZXIuZGVidWcoYnVpbGRNZXNzYWdlKCkpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEJhc2VNQ1BTZXJ2ZXJTdHJlYW1hYmxlSHR0cCB7XG4gICAgY2FjaGVUb29sc0xpc3Q7XG4gICAgX2NhY2hlZFRvb2xzID0gdW5kZWZpbmVkO1xuICAgIHRvb2xGaWx0ZXI7XG4gICAgbG9nZ2VyO1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5sb2dnZXIgPVxuICAgICAgICAgICAgb3B0aW9ucy5sb2dnZXIgPz9cbiAgICAgICAgICAgICAgICBnZXRMb2dnZXIoREVGQVVMVF9TVFJFQU1BQkxFX0hUVFBfTUNQX0NMSUVOVF9MT0dHRVJfTkFNRSk7XG4gICAgICAgIHRoaXMuY2FjaGVUb29sc0xpc3QgPSBvcHRpb25zLmNhY2hlVG9vbHNMaXN0ID8/IGZhbHNlO1xuICAgICAgICB0aGlzLnRvb2xGaWx0ZXIgPSBvcHRpb25zLnRvb2xGaWx0ZXI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIExvZ3MgYSBkZWJ1ZyBtZXNzYWdlIHdoZW4gZGVidWcgbG9nZ2luZyBpcyBlbmFibGVkLlxuICAgICAqIEBwYXJhbSBidWlsZE1lc3NhZ2UgQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIG1lc3NhZ2UgdG8gbG9nLlxuICAgICAqL1xuICAgIGRlYnVnTG9nKGJ1aWxkTWVzc2FnZSkge1xuICAgICAgICBpZiAoZGVidWcuZW5hYmxlZCh0aGlzLmxvZ2dlci5uYW1lc3BhY2UpKSB7XG4gICAgICAgICAgICAvLyBvbmx5IHdoZW4gdGhpcyBpcyB0cnVlLCB0aGUgZnVuY3Rpb24gdG8gYnVpbGQgdGhlIHN0cmluZyBpcyBjYWxsZWRcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLmRlYnVnKGJ1aWxkTWVzc2FnZSgpKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBCYXNlTUNQU2VydmVyU1NFIHtcbiAgICBjYWNoZVRvb2xzTGlzdDtcbiAgICBfY2FjaGVkVG9vbHMgPSB1bmRlZmluZWQ7XG4gICAgdG9vbEZpbHRlcjtcbiAgICBsb2dnZXI7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICB0aGlzLmxvZ2dlciA9XG4gICAgICAgICAgICBvcHRpb25zLmxvZ2dlciA/PyBnZXRMb2dnZXIoREVGQVVMVF9TU0VfTUNQX0NMSUVOVF9MT0dHRVJfTkFNRSk7XG4gICAgICAgIHRoaXMuY2FjaGVUb29sc0xpc3QgPSBvcHRpb25zLmNhY2hlVG9vbHNMaXN0ID8/IGZhbHNlO1xuICAgICAgICB0aGlzLnRvb2xGaWx0ZXIgPSBvcHRpb25zLnRvb2xGaWx0ZXI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIExvZ3MgYSBkZWJ1ZyBtZXNzYWdlIHdoZW4gZGVidWcgbG9nZ2luZyBpcyBlbmFibGVkLlxuICAgICAqIEBwYXJhbSBidWlsZE1lc3NhZ2UgQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIG1lc3NhZ2UgdG8gbG9nLlxuICAgICAqL1xuICAgIGRlYnVnTG9nKGJ1aWxkTWVzc2FnZSkge1xuICAgICAgICBpZiAoZGVidWcuZW5hYmxlZCh0aGlzLmxvZ2dlci5uYW1lc3BhY2UpKSB7XG4gICAgICAgICAgICAvLyBvbmx5IHdoZW4gdGhpcyBpcyB0cnVlLCB0aGUgZnVuY3Rpb24gdG8gYnVpbGQgdGhlIHN0cmluZyBpcyBjYWxsZWRcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLmRlYnVnKGJ1aWxkTWVzc2FnZSgpKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogTWluaW11bSBNQ1AgdG9vbCBkYXRhIGRlZmluaXRpb24uXG4gKiBUaGlzIHR5cGUgZGVmaW5pdGlvbiBkb2VzIG5vdCBpbnRlbmQgdG8gY292ZXIgYWxsIHBvc3NpYmxlIHByb3BlcnRpZXMuXG4gKiBJdCBzdXBwb3J0cyB0aGUgcHJvcGVydGllcyB0aGF0IGFyZSB1c2VkIGluIHRoaXMgU0RLLlxuICovXG5leHBvcnQgY29uc3QgTUNQVG9vbCA9IHoub2JqZWN0KHtcbiAgICBuYW1lOiB6LnN0cmluZygpLFxuICAgIGRlc2NyaXB0aW9uOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgaW5wdXRTY2hlbWE6IHoub2JqZWN0KHtcbiAgICAgICAgdHlwZTogei5saXRlcmFsKCdvYmplY3QnKSxcbiAgICAgICAgcHJvcGVydGllczogei5yZWNvcmQoei5zdHJpbmcoKSwgei5hbnkoKSksXG4gICAgICAgIHJlcXVpcmVkOiB6LmFycmF5KHouc3RyaW5nKCkpLFxuICAgICAgICBhZGRpdGlvbmFsUHJvcGVydGllczogei5ib29sZWFuKCksXG4gICAgfSksXG59KTtcbi8qKlxuICogUHVibGljIGludGVyZmFjZSBvZiBhbiBNQ1Agc2VydmVyIHRoYXQgcHJvdmlkZXMgdG9vbHMuXG4gKiBZb3UgY2FuIHVzZSB0aGlzIGNsYXNzIHRvIHBhc3MgTUNQIHNlcnZlciBzZXR0aW5ncyB0byB5b3VyIGFnZW50LlxuICovXG5leHBvcnQgY2xhc3MgTUNQU2VydmVyU3RkaW8gZXh0ZW5kcyBCYXNlTUNQU2VydmVyU3RkaW8ge1xuICAgIHVuZGVybHlpbmc7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcbiAgICAgICAgdGhpcy51bmRlcmx5aW5nID0gbmV3IFVuZGVybHlpbmdNQ1BTZXJ2ZXJTdGRpbyhvcHRpb25zKTtcbiAgICB9XG4gICAgZ2V0IG5hbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVuZGVybHlpbmcubmFtZTtcbiAgICB9XG4gICAgY29ubmVjdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5kZXJseWluZy5jb25uZWN0KCk7XG4gICAgfVxuICAgIGNsb3NlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmRlcmx5aW5nLmNsb3NlKCk7XG4gICAgfVxuICAgIGFzeW5jIGxpc3RUb29scygpIHtcbiAgICAgICAgaWYgKHRoaXMuY2FjaGVUb29sc0xpc3QgJiYgdGhpcy5fY2FjaGVkVG9vbHMpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jYWNoZWRUb29scztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0b29scyA9IGF3YWl0IHRoaXMudW5kZXJseWluZy5saXN0VG9vbHMoKTtcbiAgICAgICAgaWYgKHRoaXMuY2FjaGVUb29sc0xpc3QpIHtcbiAgICAgICAgICAgIHRoaXMuX2NhY2hlZFRvb2xzID0gdG9vbHM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvb2xzO1xuICAgIH1cbiAgICBjYWxsVG9vbCh0b29sTmFtZSwgYXJncykge1xuICAgICAgICByZXR1cm4gdGhpcy51bmRlcmx5aW5nLmNhbGxUb29sKHRvb2xOYW1lLCBhcmdzKTtcbiAgICB9XG4gICAgaW52YWxpZGF0ZVRvb2xzQ2FjaGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVuZGVybHlpbmcuaW52YWxpZGF0ZVRvb2xzQ2FjaGUoKTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgTUNQU2VydmVyU3RyZWFtYWJsZUh0dHAgZXh0ZW5kcyBCYXNlTUNQU2VydmVyU3RyZWFtYWJsZUh0dHAge1xuICAgIHVuZGVybHlpbmc7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcbiAgICAgICAgdGhpcy51bmRlcmx5aW5nID0gbmV3IFVuZGVybHlpbmdNQ1BTZXJ2ZXJTdHJlYW1hYmxlSHR0cChvcHRpb25zKTtcbiAgICB9XG4gICAgZ2V0IG5hbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVuZGVybHlpbmcubmFtZTtcbiAgICB9XG4gICAgY29ubmVjdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5kZXJseWluZy5jb25uZWN0KCk7XG4gICAgfVxuICAgIGNsb3NlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmRlcmx5aW5nLmNsb3NlKCk7XG4gICAgfVxuICAgIGFzeW5jIGxpc3RUb29scygpIHtcbiAgICAgICAgaWYgKHRoaXMuY2FjaGVUb29sc0xpc3QgJiYgdGhpcy5fY2FjaGVkVG9vbHMpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jYWNoZWRUb29scztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0b29scyA9IGF3YWl0IHRoaXMudW5kZXJseWluZy5saXN0VG9vbHMoKTtcbiAgICAgICAgaWYgKHRoaXMuY2FjaGVUb29sc0xpc3QpIHtcbiAgICAgICAgICAgIHRoaXMuX2NhY2hlZFRvb2xzID0gdG9vbHM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvb2xzO1xuICAgIH1cbiAgICBjYWxsVG9vbCh0b29sTmFtZSwgYXJncykge1xuICAgICAgICByZXR1cm4gdGhpcy51bmRlcmx5aW5nLmNhbGxUb29sKHRvb2xOYW1lLCBhcmdzKTtcbiAgICB9XG4gICAgaW52YWxpZGF0ZVRvb2xzQ2FjaGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVuZGVybHlpbmcuaW52YWxpZGF0ZVRvb2xzQ2FjaGUoKTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgTUNQU2VydmVyU1NFIGV4dGVuZHMgQmFzZU1DUFNlcnZlclNTRSB7XG4gICAgdW5kZXJseWluZztcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgICAgICB0aGlzLnVuZGVybHlpbmcgPSBuZXcgVW5kZXJseWluZ01DUFNlcnZlclNTRShvcHRpb25zKTtcbiAgICB9XG4gICAgZ2V0IG5hbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVuZGVybHlpbmcubmFtZTtcbiAgICB9XG4gICAgY29ubmVjdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5kZXJseWluZy5jb25uZWN0KCk7XG4gICAgfVxuICAgIGNsb3NlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmRlcmx5aW5nLmNsb3NlKCk7XG4gICAgfVxuICAgIGFzeW5jIGxpc3RUb29scygpIHtcbiAgICAgICAgaWYgKHRoaXMuY2FjaGVUb29sc0xpc3QgJiYgdGhpcy5fY2FjaGVkVG9vbHMpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jYWNoZWRUb29scztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0b29scyA9IGF3YWl0IHRoaXMudW5kZXJseWluZy5saXN0VG9vbHMoKTtcbiAgICAgICAgaWYgKHRoaXMuY2FjaGVUb29sc0xpc3QpIHtcbiAgICAgICAgICAgIHRoaXMuX2NhY2hlZFRvb2xzID0gdG9vbHM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvb2xzO1xuICAgIH1cbiAgICBjYWxsVG9vbCh0b29sTmFtZSwgYXJncykge1xuICAgICAgICByZXR1cm4gdGhpcy51bmRlcmx5aW5nLmNhbGxUb29sKHRvb2xOYW1lLCBhcmdzKTtcbiAgICB9XG4gICAgaW52YWxpZGF0ZVRvb2xzQ2FjaGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVuZGVybHlpbmcuaW52YWxpZGF0ZVRvb2xzQ2FjaGUoKTtcbiAgICB9XG59XG4vKipcbiAqIEZldGNoZXMgYW5kIGZsYXR0ZW5zIGFsbCB0b29scyBmcm9tIG11bHRpcGxlIE1DUCBzZXJ2ZXJzLlxuICogTG9ncyBhbmQgc2tpcHMgYW55IHNlcnZlcnMgdGhhdCBmYWlsIHRvIHJlc3BvbmQuXG4gKi9cbmNvbnN0IF9jYWNoZWRUb29scyA9IHt9O1xuLyoqXG4gKiBSZW1vdmUgY2FjaGVkIHRvb2xzIGZvciB0aGUgZ2l2ZW4gc2VydmVyIHNvIHRoZSBuZXh0IGxvb2t1cCBmZXRjaGVzIGZyZXNoIGRhdGEuXG4gKlxuICogQHBhcmFtIHNlcnZlck5hbWUgLSBOYW1lIG9mIHRoZSBNQ1Agc2VydmVyIHdob3NlIGNhY2hlIHNob3VsZCBiZSBjbGVhcmVkLlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaW52YWxpZGF0ZVNlcnZlclRvb2xzQ2FjaGUoc2VydmVyTmFtZSkge1xuICAgIGRlbGV0ZSBfY2FjaGVkVG9vbHNbc2VydmVyTmFtZV07XG59XG4vKipcbiAqIEZldGNoZXMgYWxsIGZ1bmN0aW9uIHRvb2xzIGZyb20gYSBzaW5nbGUgTUNQIHNlcnZlci5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gZ2V0RnVuY3Rpb25Ub29sc0Zyb21TZXJ2ZXIoeyBzZXJ2ZXIsIGNvbnZlcnRTY2hlbWFzVG9TdHJpY3QsIHJ1bkNvbnRleHQsIGFnZW50LCB9KSB7XG4gICAgaWYgKHNlcnZlci5jYWNoZVRvb2xzTGlzdCAmJiBfY2FjaGVkVG9vbHNbc2VydmVyLm5hbWVdKSB7XG4gICAgICAgIHJldHVybiBfY2FjaGVkVG9vbHNbc2VydmVyLm5hbWVdLm1hcCgodCkgPT4gbWNwVG9GdW5jdGlvblRvb2wodCwgc2VydmVyLCBjb252ZXJ0U2NoZW1hc1RvU3RyaWN0KSk7XG4gICAgfVxuICAgIHJldHVybiB3aXRoTUNQTGlzdFRvb2xzU3Bhbihhc3luYyAoc3BhbikgPT4ge1xuICAgICAgICBjb25zdCBmZXRjaGVkTWNwVG9vbHMgPSBhd2FpdCBzZXJ2ZXIubGlzdFRvb2xzKCk7XG4gICAgICAgIGxldCBtY3BUb29scyA9IGZldGNoZWRNY3BUb29scztcbiAgICAgICAgaWYgKHJ1bkNvbnRleHQgJiYgYWdlbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRleHQgPSB7IHJ1bkNvbnRleHQsIGFnZW50LCBzZXJ2ZXJOYW1lOiBzZXJ2ZXIubmFtZSB9O1xuICAgICAgICAgICAgY29uc3QgZmlsdGVyZWRUb29scyA9IFtdO1xuICAgICAgICAgICAgZm9yIChjb25zdCB0b29sIG9mIGZldGNoZWRNY3BUb29scykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZpbHRlciA9IHNlcnZlci50b29sRmlsdGVyO1xuICAgICAgICAgICAgICAgIGlmIChmaWx0ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBmaWx0ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbHRlcmVkID0gYXdhaXQgZmlsdGVyKGNvbnRleHQsIHRvb2wpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFmaWx0ZXJlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbExvZ2dlci5kZWJ1ZyhgTUNQIFRvb2wgKHNlcnZlcjogJHtzZXJ2ZXIubmFtZX0sIHRvb2w6ICR7dG9vbC5uYW1lfSkgaXMgYmxvY2tlZCBieSB0aGUgY2FsbGFibGUgZmlsdGVyLmApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYWxsb3dlZFRvb2xOYW1lcyA9IGZpbHRlci5hbGxvd2VkVG9vbE5hbWVzID8/IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYmxvY2tlZFRvb2xOYW1lcyA9IGZpbHRlci5ibG9ja2VkVG9vbE5hbWVzID8/IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFsbG93ZWRUb29sTmFtZXMubGVuZ3RoID4gMCB8fCBibG9ja2VkVG9vbE5hbWVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhbGxvd2VkID0gYWxsb3dlZFRvb2xOYW1lcy5sZW5ndGggPiAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gYWxsb3dlZFRvb2xOYW1lcy5pbmNsdWRlcyh0b29sLm5hbWUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBibG9ja2VkID0gYmxvY2tlZFRvb2xOYW1lcy5sZW5ndGggPiAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gYmxvY2tlZFRvb2xOYW1lcy5pbmNsdWRlcyh0b29sLm5hbWUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFhbGxvd2VkIHx8IGJsb2NrZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJsb2NrZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbExvZ2dlci5kZWJ1ZyhgTUNQIFRvb2wgKHNlcnZlcjogJHtzZXJ2ZXIubmFtZX0sIHRvb2w6ICR7dG9vbC5uYW1lfSkgaXMgYmxvY2tlZCBieSB0aGUgc3RhdGljIGZpbHRlci5gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICghYWxsb3dlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsTG9nZ2VyLmRlYnVnKGBNQ1AgVG9vbCAoc2VydmVyOiAke3NlcnZlci5uYW1lfSwgdG9vbDogJHt0b29sLm5hbWV9KSBpcyBub3QgYWxsb3dlZCBieSB0aGUgc3RhdGljIGZpbHRlci5gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZmlsdGVyZWRUb29scy5wdXNoKHRvb2wpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbWNwVG9vbHMgPSBmaWx0ZXJlZFRvb2xzO1xuICAgICAgICB9XG4gICAgICAgIHNwYW4uc3BhbkRhdGEucmVzdWx0ID0gbWNwVG9vbHMubWFwKCh0KSA9PiB0Lm5hbWUpO1xuICAgICAgICBjb25zdCB0b29scyA9IG1jcFRvb2xzLm1hcCgodCkgPT4gbWNwVG9GdW5jdGlvblRvb2wodCwgc2VydmVyLCBjb252ZXJ0U2NoZW1hc1RvU3RyaWN0KSk7XG4gICAgICAgIGlmIChzZXJ2ZXIuY2FjaGVUb29sc0xpc3QpIHtcbiAgICAgICAgICAgIF9jYWNoZWRUb29sc1tzZXJ2ZXIubmFtZV0gPSBtY3BUb29scztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG9vbHM7XG4gICAgfSwgeyBkYXRhOiB7IHNlcnZlcjogc2VydmVyLm5hbWUgfSB9KTtcbn1cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRBbGxNY3BUb29scyhtY3BTZXJ2ZXJzT3JPcHRzLCBydW5Db250ZXh0LCBhZ2VudCwgY29udmVydFNjaGVtYXNUb1N0cmljdCA9IGZhbHNlKSB7XG4gICAgY29uc3Qgb3B0cyA9IEFycmF5LmlzQXJyYXkobWNwU2VydmVyc09yT3B0cylcbiAgICAgICAgPyB7XG4gICAgICAgICAgICBtY3BTZXJ2ZXJzOiBtY3BTZXJ2ZXJzT3JPcHRzLFxuICAgICAgICAgICAgcnVuQ29udGV4dCxcbiAgICAgICAgICAgIGFnZW50LFxuICAgICAgICAgICAgY29udmVydFNjaGVtYXNUb1N0cmljdCxcbiAgICAgICAgfVxuICAgICAgICA6IG1jcFNlcnZlcnNPck9wdHM7XG4gICAgY29uc3QgeyBtY3BTZXJ2ZXJzLCBjb252ZXJ0U2NoZW1hc1RvU3RyaWN0OiBjb252ZXJ0U2NoZW1hc1RvU3RyaWN0RnJvbU9wdHMgPSBmYWxzZSwgcnVuQ29udGV4dDogcnVuQ29udGV4dEZyb21PcHRzLCBhZ2VudDogYWdlbnRGcm9tT3B0cywgfSA9IG9wdHM7XG4gICAgY29uc3QgYWxsVG9vbHMgPSBbXTtcbiAgICBjb25zdCB0b29sTmFtZXMgPSBuZXcgU2V0KCk7XG4gICAgZm9yIChjb25zdCBzZXJ2ZXIgb2YgbWNwU2VydmVycykge1xuICAgICAgICBjb25zdCBzZXJ2ZXJUb29scyA9IGF3YWl0IGdldEZ1bmN0aW9uVG9vbHNGcm9tU2VydmVyKHtcbiAgICAgICAgICAgIHNlcnZlcixcbiAgICAgICAgICAgIGNvbnZlcnRTY2hlbWFzVG9TdHJpY3Q6IGNvbnZlcnRTY2hlbWFzVG9TdHJpY3RGcm9tT3B0cyxcbiAgICAgICAgICAgIHJ1bkNvbnRleHQ6IHJ1bkNvbnRleHRGcm9tT3B0cyxcbiAgICAgICAgICAgIGFnZW50OiBhZ2VudEZyb21PcHRzLFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3Qgc2VydmVyVG9vbE5hbWVzID0gbmV3IFNldChzZXJ2ZXJUb29scy5tYXAoKHQpID0+IHQubmFtZSkpO1xuICAgICAgICBjb25zdCBpbnRlcnNlY3Rpb24gPSBbLi4uc2VydmVyVG9vbE5hbWVzXS5maWx0ZXIoKG4pID0+IHRvb2xOYW1lcy5oYXMobikpO1xuICAgICAgICBpZiAoaW50ZXJzZWN0aW9uLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBVc2VyRXJyb3IoYER1cGxpY2F0ZSB0b29sIG5hbWVzIGZvdW5kIGFjcm9zcyBNQ1Agc2VydmVyczogJHtpbnRlcnNlY3Rpb24uam9pbignLCAnKX1gKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IHQgb2Ygc2VydmVyVG9vbHMpIHtcbiAgICAgICAgICAgIHRvb2xOYW1lcy5hZGQodC5uYW1lKTtcbiAgICAgICAgICAgIGFsbFRvb2xzLnB1c2godCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFsbFRvb2xzO1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhbiBNQ1AgdG9vbCBkZWZpbml0aW9uIHRvIGEgZnVuY3Rpb24gdG9vbCBmb3IgdGhlIEFnZW50cyBTREsuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtY3BUb0Z1bmN0aW9uVG9vbChtY3BUb29sLCBzZXJ2ZXIsIGNvbnZlcnRTY2hlbWFzVG9TdHJpY3QpIHtcbiAgICBhc3luYyBmdW5jdGlvbiBpbnZva2UoaW5wdXQsIF9jb250ZXh0KSB7XG4gICAgICAgIGxldCBhcmdzID0ge307XG4gICAgICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnICYmIGlucHV0KSB7XG4gICAgICAgICAgICBhcmdzID0gSlNPTi5wYXJzZShpbnB1dCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSAnb2JqZWN0JyAmJiBpbnB1dCAhPSBudWxsKSB7XG4gICAgICAgICAgICBhcmdzID0gaW5wdXQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY3VycmVudFNwYW4gPSBnZXRDdXJyZW50U3BhbigpO1xuICAgICAgICBpZiAoY3VycmVudFNwYW4pIHtcbiAgICAgICAgICAgIGN1cnJlbnRTcGFuLnNwYW5EYXRhWydtY3BfZGF0YSddID0geyBzZXJ2ZXI6IHNlcnZlci5uYW1lIH07XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29udGVudCA9IGF3YWl0IHNlcnZlci5jYWxsVG9vbChtY3BUb29sLm5hbWUsIGFyZ3MpO1xuICAgICAgICByZXR1cm4gY29udGVudC5sZW5ndGggPT09IDEgPyBjb250ZW50WzBdIDogY29udGVudDtcbiAgICB9XG4gICAgY29uc3Qgc2NoZW1hID0ge1xuICAgICAgICAuLi5tY3BUb29sLmlucHV0U2NoZW1hLFxuICAgICAgICB0eXBlOiBtY3BUb29sLmlucHV0U2NoZW1hPy50eXBlID8/ICdvYmplY3QnLFxuICAgICAgICBwcm9wZXJ0aWVzOiBtY3BUb29sLmlucHV0U2NoZW1hPy5wcm9wZXJ0aWVzID8/IHt9LFxuICAgICAgICByZXF1aXJlZDogbWNwVG9vbC5pbnB1dFNjaGVtYT8ucmVxdWlyZWQgPz8gW10sXG4gICAgICAgIGFkZGl0aW9uYWxQcm9wZXJ0aWVzOiBtY3BUb29sLmlucHV0U2NoZW1hPy5hZGRpdGlvbmFsUHJvcGVydGllcyA/PyBmYWxzZSxcbiAgICB9O1xuICAgIGlmIChjb252ZXJ0U2NoZW1hc1RvU3RyaWN0IHx8IHNjaGVtYS5hZGRpdGlvbmFsUHJvcGVydGllcyA9PT0gdHJ1ZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3Qgc3RyaWN0U2NoZW1hID0gZW5zdXJlU3RyaWN0SnNvblNjaGVtYShzY2hlbWEpO1xuICAgICAgICAgICAgcmV0dXJuIHRvb2woe1xuICAgICAgICAgICAgICAgIG5hbWU6IG1jcFRvb2wubmFtZSxcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogbWNwVG9vbC5kZXNjcmlwdGlvbiB8fCAnJyxcbiAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzOiBzdHJpY3RTY2hlbWEsXG4gICAgICAgICAgICAgICAgc3RyaWN0OiB0cnVlLFxuICAgICAgICAgICAgICAgIGV4ZWN1dGU6IGludm9rZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICBnbG9iYWxMb2dnZXIud2FybihgRXJyb3IgY29udmVydGluZyBNQ1Agc2NoZW1hIHRvIHN0cmljdCBtb2RlOiAke2V9YCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3Qgbm9uU3RyaWN0U2NoZW1hID0ge1xuICAgICAgICAuLi5zY2hlbWEsXG4gICAgICAgIGFkZGl0aW9uYWxQcm9wZXJ0aWVzOiB0cnVlLFxuICAgIH07XG4gICAgcmV0dXJuIHRvb2woe1xuICAgICAgICBuYW1lOiBtY3BUb29sLm5hbWUsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBtY3BUb29sLmRlc2NyaXB0aW9uIHx8ICcnLFxuICAgICAgICBwYXJhbWV0ZXJzOiBub25TdHJpY3RTY2hlbWEsXG4gICAgICAgIHN0cmljdDogZmFsc2UsXG4gICAgICAgIGV4ZWN1dGU6IGludm9rZSxcbiAgICB9KTtcbn1cbi8qKlxuICogRW5zdXJlcyB0aGUgZ2l2ZW4gSlNPTiBzY2hlbWEgaXMgc3RyaWN0IChubyBhZGRpdGlvbmFsIHByb3BlcnRpZXMsIHJlcXVpcmVkIGZpZWxkcyBzZXQpLlxuICovXG5mdW5jdGlvbiBlbnN1cmVTdHJpY3RKc29uU2NoZW1hKHNjaGVtYSkge1xuICAgIGNvbnN0IG91dCA9IHtcbiAgICAgICAgLi4uc2NoZW1hLFxuICAgICAgICBhZGRpdGlvbmFsUHJvcGVydGllczogZmFsc2UsXG4gICAgfTtcbiAgICBpZiAoIW91dC5yZXF1aXJlZClcbiAgICAgICAgb3V0LnJlcXVpcmVkID0gW107XG4gICAgcmV0dXJuIG91dDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1jcC5tanMubWFwIiwiLy8vIDxyZWZlcmVuY2UgbGliPVwiZG9tXCIgLz5cbi8vIFVzZSBmdW5jdGlvbiBpbnN0ZWFkIG9mIGV4cG9ydGluZyB0aGUgdmFsdWUgdG8gcHJldmVudFxuLy8gY2lyY3VsYXIgZGVwZW5kZW5jeSByZXNvbHV0aW9uIGlzc3VlcyBjYXVzZWQgYnkgb3RoZXIgZXhwb3J0cyBpbiAnQG9wZW5haS9hZ2VudHMtY29yZS9fc2hpbXMnXG5leHBvcnQgZnVuY3Rpb24gbG9hZEVudigpIHtcbiAgICByZXR1cm4ge307XG59XG5leHBvcnQgY2xhc3MgQnJvd3NlckV2ZW50RW1pdHRlciB7XG4gICAgI3RhcmdldCA9IG5ldyBFdmVudFRhcmdldCgpO1xuICAgICNsaXN0ZW5lcldyYXBwZXJzID0gbmV3IE1hcCgpO1xuICAgIG9uKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICAgIGNvbnN0IGV2ZW50VHlwZSA9IHR5cGU7XG4gICAgICAgIGxldCBsaXN0ZW5lcnNGb3JUeXBlID0gdGhpcy4jbGlzdGVuZXJXcmFwcGVycy5nZXQoZXZlbnRUeXBlKTtcbiAgICAgICAgaWYgKCFsaXN0ZW5lcnNGb3JUeXBlKSB7XG4gICAgICAgICAgICBsaXN0ZW5lcnNGb3JUeXBlID0gbmV3IE1hcCgpO1xuICAgICAgICAgICAgdGhpcy4jbGlzdGVuZXJXcmFwcGVycy5zZXQoZXZlbnRUeXBlLCBsaXN0ZW5lcnNGb3JUeXBlKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgd3JhcHBlcnMgPSBsaXN0ZW5lcnNGb3JUeXBlLmdldChsaXN0ZW5lcik7XG4gICAgICAgIGlmICghd3JhcHBlcnMpIHtcbiAgICAgICAgICAgIHdyYXBwZXJzID0gbmV3IFNldCgpO1xuICAgICAgICAgICAgbGlzdGVuZXJzRm9yVHlwZS5zZXQobGlzdGVuZXIsIHdyYXBwZXJzKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB3cmFwcGVyID0gKChldmVudCkgPT4gbGlzdGVuZXIoLi4uKGV2ZW50LmRldGFpbCA/PyBbXSkpKTtcbiAgICAgICAgd3JhcHBlcnMuYWRkKHdyYXBwZXIpO1xuICAgICAgICB0aGlzLiN0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIHdyYXBwZXIpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgb2ZmKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICAgIGNvbnN0IGV2ZW50VHlwZSA9IHR5cGU7XG4gICAgICAgIGNvbnN0IGxpc3RlbmVyc0ZvclR5cGUgPSB0aGlzLiNsaXN0ZW5lcldyYXBwZXJzLmdldChldmVudFR5cGUpO1xuICAgICAgICBjb25zdCB3cmFwcGVycyA9IGxpc3RlbmVyc0ZvclR5cGU/LmdldChsaXN0ZW5lcik7XG4gICAgICAgIGlmICh3cmFwcGVycz8uc2l6ZSkge1xuICAgICAgICAgICAgZm9yIChjb25zdCB3cmFwcGVyIG9mIHdyYXBwZXJzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4jdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCB3cmFwcGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxpc3RlbmVyc0ZvclR5cGU/LmRlbGV0ZShsaXN0ZW5lcik7XG4gICAgICAgICAgICBpZiAobGlzdGVuZXJzRm9yVHlwZT8uc2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuI2xpc3RlbmVyV3JhcHBlcnMuZGVsZXRlKGV2ZW50VHlwZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGVtaXQodHlwZSwgLi4uYXJncykge1xuICAgICAgICBjb25zdCBldmVudCA9IG5ldyBDdXN0b21FdmVudCh0eXBlLCB7IGRldGFpbDogYXJncyB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuI3RhcmdldC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICB9XG4gICAgb25jZSh0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgICBjb25zdCBoYW5kbGVyID0gKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgICAgIHRoaXMub2ZmKHR5cGUsIGhhbmRsZXIpO1xuICAgICAgICAgICAgbGlzdGVuZXIoLi4uYXJncyk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMub24odHlwZSwgaGFuZGxlcik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn1cbmV4cG9ydCB7IEJyb3dzZXJFdmVudEVtaXR0ZXIgYXMgUnVudGltZUV2ZW50RW1pdHRlciB9O1xuZXhwb3J0IGNvbnN0IHJhbmRvbVVVSUQgPSAoKSA9PiB7XG4gICAgaWYgKHR5cGVvZiBjcnlwdG8gIT09ICd1bmRlZmluZWQnICYmIGNyeXB0by5yYW5kb21VVUlEKSB7XG4gICAgICAgIHJldHVybiBjcnlwdG8ucmFuZG9tVVVJRCgpO1xuICAgIH1cbiAgICByZXR1cm4gJ3h4eHh4eHh4LXh4eHgtNHh4eC15eHh4LXh4eHh4eHh4eHh4eCcucmVwbGFjZSgvW3h5XS9nLCBmdW5jdGlvbiAoYykge1xuICAgICAgICBjb25zdCByID0gKE1hdGgucmFuZG9tKCkgKiAxNikgfCAwO1xuICAgICAgICBjb25zdCB2ID0gYyA9PT0gJ3gnID8gciA6IChyICYgMHgzKSB8IDB4ODtcbiAgICAgICAgcmV0dXJuIHYudG9TdHJpbmcoMTYpO1xuICAgIH0pO1xufTtcbmV4cG9ydCBjb25zdCBSZWFkYWJsZSA9IGNsYXNzIFJlYWRhYmxlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHsgfVxuICAgIHBpcGVUbyhfZGVzdGluYXRpb24sIF9vcHRpb25zKSB7IH1cbiAgICBwaXBlVGhyb3VnaChfdHJhbnNmb3JtLCBfb3B0aW9ucykgeyB9XG59O1xuZXhwb3J0IGNvbnN0IFJlYWRhYmxlU3RyZWFtID0gZ2xvYmFsVGhpcy5SZWFkYWJsZVN0cmVhbTtcbmV4cG9ydCBjb25zdCBSZWFkYWJsZVN0cmVhbUNvbnRyb2xsZXIgPSBnbG9iYWxUaGlzLlJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXI7XG5leHBvcnQgY29uc3QgVHJhbnNmb3JtU3RyZWFtID0gZ2xvYmFsVGhpcy5UcmFuc2Zvcm1TdHJlYW07XG5leHBvcnQgY2xhc3MgQXN5bmNMb2NhbFN0b3JhZ2Uge1xuICAgIGNvbnRleHQgPSBudWxsO1xuICAgIGNvbnN0cnVjdG9yKCkgeyB9XG4gICAgcnVuKGNvbnRleHQsIGZuKSB7XG4gICAgICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gICAgICAgIHJldHVybiBmbigpO1xuICAgIH1cbiAgICBnZXRTdG9yZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGV4dDtcbiAgICB9XG4gICAgZW50ZXJXaXRoKGNvbnRleHQpIHtcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gaXNCcm93c2VyRW52aXJvbm1lbnQoKSB7XG4gICAgcmV0dXJuIHRydWU7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNUcmFjaW5nTG9vcFJ1bm5pbmdCeURlZmF1bHQoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZXhwb3J0IHsgTUNQU2VydmVyU3RkaW8sIE1DUFNlcnZlclN0cmVhbWFibGVIdHRwLCBNQ1BTZXJ2ZXJTU0UsIH0gZnJvbSBcIi4vbWNwLXNlcnZlci9icm93c2VyLm1qc1wiO1xuY2xhc3MgQnJvd3NlclRpbWVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHsgfVxuICAgIHNldFRpbWVvdXQoY2FsbGJhY2ssIG1zKSB7XG4gICAgICAgIGNvbnN0IHRpbWVvdXQgPSBzZXRUaW1lb3V0KGNhbGxiYWNrLCBtcyk7XG4gICAgICAgIHRpbWVvdXQucmVmID1cbiAgICAgICAgICAgIHR5cGVvZiB0aW1lb3V0LnJlZiA9PT0gJ2Z1bmN0aW9uJyA/IHRpbWVvdXQucmVmIDogKCkgPT4gdGltZW91dDtcbiAgICAgICAgdGltZW91dC51bnJlZiA9XG4gICAgICAgICAgICB0eXBlb2YgdGltZW91dC51bnJlZiA9PT0gJ2Z1bmN0aW9uJyA/IHRpbWVvdXQudW5yZWYgOiAoKSA9PiB0aW1lb3V0O1xuICAgICAgICB0aW1lb3V0Lmhhc1JlZiA9XG4gICAgICAgICAgICB0eXBlb2YgdGltZW91dC5oYXNSZWYgPT09ICdmdW5jdGlvbicgPyB0aW1lb3V0Lmhhc1JlZiA6ICgpID0+IHRydWU7XG4gICAgICAgIHRpbWVvdXQucmVmcmVzaCA9XG4gICAgICAgICAgICB0eXBlb2YgdGltZW91dC5yZWZyZXNoID09PSAnZnVuY3Rpb24nID8gdGltZW91dC5yZWZyZXNoIDogKCkgPT4gdGltZW91dDtcbiAgICAgICAgcmV0dXJuIHRpbWVvdXQ7XG4gICAgfVxuICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SWQpIHtcbiAgICAgICAgd2luZG93LmNsZWFyVGltZW91dCh0aW1lb3V0SWQpO1xuICAgIH1cbn1cbmNvbnN0IHRpbWVyID0gbmV3IEJyb3dzZXJUaW1lcigpO1xuZXhwb3J0IHsgdGltZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNoaW1zLWJyb3dzZXIubWpzLm1hcCIsImltcG9ydCB7IFJ1bnRpbWVFdmVudEVtaXR0ZXIsIH0gZnJvbSAnQG9wZW5haS9hZ2VudHMtY29yZS9fc2hpbXMnO1xuZXhwb3J0IGNsYXNzIEV2ZW50RW1pdHRlckRlbGVnYXRlIHtcbiAgICBvbih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLmV2ZW50RW1pdHRlci5vbih0eXBlLCBsaXN0ZW5lcik7XG4gICAgICAgIHJldHVybiB0aGlzLmV2ZW50RW1pdHRlcjtcbiAgICB9XG4gICAgb2ZmKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuZXZlbnRFbWl0dGVyLm9mZih0eXBlLCBsaXN0ZW5lcik7XG4gICAgICAgIHJldHVybiB0aGlzLmV2ZW50RW1pdHRlcjtcbiAgICB9XG4gICAgZW1pdCh0eXBlLCAuLi5hcmdzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmV2ZW50RW1pdHRlci5lbWl0KHR5cGUsIC4uLmFyZ3MpO1xuICAgIH1cbiAgICBvbmNlKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuZXZlbnRFbWl0dGVyLm9uY2UodHlwZSwgbGlzdGVuZXIpO1xuICAgICAgICByZXR1cm4gdGhpcy5ldmVudEVtaXR0ZXI7XG4gICAgfVxufVxuLyoqXG4gKiBFdmVudCBlbWl0dGVyIHRoYXQgZXZlcnkgQWdlbnQgaW5zdGFuY2UgaW5oZXJpdHMgZnJvbSBhbmQgdGhhdCBlbWl0cyBldmVudHMgZm9yIHRoZSBsaWZlY3ljbGVcbiAqIG9mIHRoZSBhZ2VudC5cbiAqL1xuZXhwb3J0IGNsYXNzIEFnZW50SG9va3MgZXh0ZW5kcyBFdmVudEVtaXR0ZXJEZWxlZ2F0ZSB7XG4gICAgZXZlbnRFbWl0dGVyID0gbmV3IFJ1bnRpbWVFdmVudEVtaXR0ZXIoKTtcbn1cbi8qKlxuICogRXZlbnQgZW1pdHRlciB0aGF0IGV2ZXJ5IFJ1bm5lciBpbnN0YW5jZSBpbmhlcml0cyBmcm9tIGFuZCB0aGF0IGVtaXRzIGV2ZW50cyBmb3IgdGhlIGxpZmVjeWNsZVxuICogb2YgdGhlIG92ZXJhbGwgcnVuLlxuICovXG5leHBvcnQgY2xhc3MgUnVuSG9va3MgZXh0ZW5kcyBFdmVudEVtaXR0ZXJEZWxlZ2F0ZSB7XG4gICAgZXZlbnRFbWl0dGVyID0gbmV3IFJ1bnRpbWVFdmVudEVtaXR0ZXIoKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpZmVjeWNsZS5tanMubWFwIiwiaW1wb3J0IHsgbG9hZEVudiB9IGZyb20gXCIuL2NvbmZpZy5tanNcIjtcbmV4cG9ydCBjb25zdCBPUEVOQUlfREVGQVVMVF9NT0RFTF9FTlZfVkFSSUFCTEVfTkFNRSA9ICdPUEVOQUlfREVGQVVMVF9NT0RFTCc7XG4vKipcbiAqIFJldHVybnMgVHJ1ZSBpZiB0aGUgbW9kZWwgbmFtZSBpcyBhIEdQVC01IG1vZGVsIGFuZCByZWFzb25pbmcgc2V0dGluZ3MgYXJlIHJlcXVpcmVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ3B0NVJlYXNvbmluZ1NldHRpbmdzUmVxdWlyZWQobW9kZWxOYW1lKSB7XG4gICAgaWYgKG1vZGVsTmFtZS5zdGFydHNXaXRoKCdncHQtNS1jaGF0JykpIHtcbiAgICAgICAgLy8gZ3B0LTUtY2hhdC1sYXRlc3QgZG9lcyBub3QgcmVxdWlyZSByZWFzb25pbmcgc2V0dGluZ3NcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvLyBtYXRjaGVzIGFueSBvZiBncHQtNSBtb2RlbHNcbiAgICByZXR1cm4gbW9kZWxOYW1lLnN0YXJ0c1dpdGgoJ2dwdC01Jyk7XG59XG4vKipcbiAqIFJldHVybnMgVHJ1ZSBpZiB0aGUgZGVmYXVsdCBtb2RlbCBpcyBhIEdQVC01IG1vZGVsLlxuICogVGhpcyBpcyB1c2VkIHRvIGRldGVybWluZSBpZiB0aGUgZGVmYXVsdCBtb2RlbCBzZXR0aW5ncyBhcmUgY29tcGF0aWJsZSB3aXRoIEdQVC01IG1vZGVscy5cbiAqIElmIHRoZSBkZWZhdWx0IG1vZGVsIGlzIG5vdCBhIEdQVC01IG1vZGVsLCB0aGUgbW9kZWwgc2V0dGluZ3MgYXJlIGNvbXBhdGlibGUgd2l0aCBvdGhlciBtb2RlbHMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0dwdDVEZWZhdWx0KCkge1xuICAgIHJldHVybiBncHQ1UmVhc29uaW5nU2V0dGluZ3NSZXF1aXJlZChnZXREZWZhdWx0TW9kZWwoKSk7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIGRlZmF1bHQgbW9kZWwgbmFtZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldERlZmF1bHRNb2RlbCgpIHtcbiAgICBjb25zdCBlbnYgPSBsb2FkRW52KCk7XG4gICAgcmV0dXJuIChlbnZbT1BFTkFJX0RFRkFVTFRfTU9ERUxfRU5WX1ZBUklBQkxFX05BTUVdPy50b0xvd2VyQ2FzZSgpID8/ICdncHQtNC4xJyk7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIGRlZmF1bHQgbW9kZWwgc2V0dGluZ3MuXG4gKiBJZiB0aGUgZGVmYXVsdCBtb2RlbCBpcyBhIEdQVC01IG1vZGVsLCByZXR1cm5zIHRoZSBHUFQtNSBkZWZhdWx0IG1vZGVsIHNldHRpbmdzLlxuICogT3RoZXJ3aXNlLCByZXR1cm5zIHRoZSBsZWdhY3kgZGVmYXVsdCBtb2RlbCBzZXR0aW5ncy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldERlZmF1bHRNb2RlbFNldHRpbmdzKG1vZGVsKSB7XG4gICAgY29uc3QgX21vZGVsID0gbW9kZWwgPz8gZ2V0RGVmYXVsdE1vZGVsKCk7XG4gICAgaWYgKGdwdDVSZWFzb25pbmdTZXR0aW5nc1JlcXVpcmVkKF9tb2RlbCkpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC8vIFdlIGNob3NlIFwibG93XCIgaW5zdGVhZCBvZiBcIm1pbmltYWxcIiBiZWNhdXNlIHNvbWUgb2YgdGhlIGJ1aWx0LWluIHRvb2xzXG4gICAgICAgICAgICAvLyAoZS5nLiwgZmlsZSBzZWFyY2gsIGltYWdlIGdlbmVyYXRpb24sIGV0Yy4pIGRvIG5vdCBzdXBwb3J0IFwibWluaW1hbFwiXG4gICAgICAgICAgICAvLyBJZiB5b3Ugd2FudCB0byB1c2UgXCJtaW5pbWFsXCIgcmVhc29uaW5nIGVmZm9ydCwgeW91IGNhbiBwYXNzIHlvdXIgb3duIG1vZGVsIHNldHRpbmdzXG4gICAgICAgICAgICByZWFzb25pbmc6IHsgZWZmb3J0OiAnbG93JyB9LFxuICAgICAgICAgICAgdGV4dDogeyB2ZXJib3NpdHk6ICdsb3cnIH0sXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB7fTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlZmF1bHRNb2RlbC5tanMubWFwIiwiaW1wb3J0IHsgTW9kZWxCZWhhdmlvckVycm9yLCBVc2VyRXJyb3IgfSBmcm9tIFwiLi9lcnJvcnMubWpzXCI7XG5pbXBvcnQgeyB0b0Z1bmN0aW9uVG9vbE5hbWUgfSBmcm9tIFwiLi91dGlscy90b29scy5tanNcIjtcbmltcG9ydCB7IGdldFNjaGVtYUFuZFBhcnNlckZyb21JbnB1dFR5cGUgfSBmcm9tIFwiLi91dGlscy90b29scy5tanNcIjtcbmltcG9ydCB7IGFkZEVycm9yVG9DdXJyZW50U3BhbiB9IGZyb20gXCIuL3RyYWNpbmcvY29udGV4dC5tanNcIjtcbmltcG9ydCBsb2dnZXIgZnJvbSBcIi4vbG9nZ2VyLm1qc1wiO1xuLyoqXG4gKiBHZW5lcmF0ZXMgdGhlIG1lc3NhZ2UgdGhhdCB3aWxsIGJlIGdpdmVuIGFzIHRvb2wgb3V0cHV0IHRvIHRoZSBtb2RlbCB0aGF0IHJlcXVlc3RlZCB0aGUgaGFuZG9mZi5cbiAqXG4gKiBAcGFyYW0gYWdlbnQgVGhlIGFnZW50IHRvIHRyYW5zZmVyIHRvXG4gKiBAcmV0dXJucyBUaGUgbWVzc2FnZSB0aGF0IHdpbGwgYmUgZ2l2ZW4gYXMgdG9vbCBvdXRwdXQgdG8gdGhlIG1vZGVsIHRoYXQgcmVxdWVzdGVkIHRoZSBoYW5kb2ZmXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRUcmFuc2Zlck1lc3NhZ2UoYWdlbnQpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoeyBhc3Npc3RhbnQ6IGFnZW50Lm5hbWUgfSk7XG59XG4vKipcbiAqIFRoZSBkZWZhdWx0IG5hbWUgb2YgdGhlIHRvb2wgdGhhdCByZXByZXNlbnRzIHRoZSBoYW5kb2ZmLlxuICpcbiAqIEBwYXJhbSBhZ2VudCBUaGUgYWdlbnQgdG8gdHJhbnNmZXIgdG9cbiAqIEByZXR1cm5zIFRoZSBuYW1lIG9mIHRoZSB0b29sIHRoYXQgcmVwcmVzZW50cyB0aGUgaGFuZG9mZlxuICovXG5mdW5jdGlvbiBkZWZhdWx0SGFuZG9mZlRvb2xOYW1lKGFnZW50KSB7XG4gICAgcmV0dXJuIGB0cmFuc2Zlcl90b18ke3RvRnVuY3Rpb25Ub29sTmFtZShhZ2VudC5uYW1lKX1gO1xufVxuLyoqXG4gKiBHZW5lcmF0ZXMgdGhlIGRlc2NyaXB0aW9uIG9mIHRoZSB0b29sIHRoYXQgcmVwcmVzZW50cyB0aGUgaGFuZG9mZi5cbiAqXG4gKiBAcGFyYW0gYWdlbnQgVGhlIGFnZW50IHRvIHRyYW5zZmVyIHRvXG4gKiBAcmV0dXJucyBUaGUgZGVzY3JpcHRpb24gb2YgdGhlIHRvb2wgdGhhdCByZXByZXNlbnRzIHRoZSBoYW5kb2ZmXG4gKi9cbmZ1bmN0aW9uIGRlZmF1bHRIYW5kb2ZmVG9vbERlc2NyaXB0aW9uKGFnZW50KSB7XG4gICAgcmV0dXJuIGBIYW5kb2ZmIHRvIHRoZSAke2FnZW50Lm5hbWV9IGFnZW50IHRvIGhhbmRsZSB0aGUgcmVxdWVzdC4gJHthZ2VudC5oYW5kb2ZmRGVzY3JpcHRpb24gPz8gJyd9YDtcbn1cbmV4cG9ydCBjbGFzcyBIYW5kb2ZmIHtcbiAgICAvKipcbiAgICAgKiBUaGUgbmFtZSBvZiB0aGUgdG9vbCB0aGF0IHJlcHJlc2VudHMgdGhlIGhhbmRvZmYuXG4gICAgICovXG4gICAgdG9vbE5hbWU7XG4gICAgLyoqXG4gICAgICogVGhlIGRlc2NyaXB0aW9uIG9mIHRoZSB0b29sIHRoYXQgcmVwcmVzZW50cyB0aGUgaGFuZG9mZi5cbiAgICAgKi9cbiAgICB0b29sRGVzY3JpcHRpb247XG4gICAgLyoqXG4gICAgICogVGhlIEpTT04gc2NoZW1hIGZvciB0aGUgaGFuZG9mZiBpbnB1dC4gQ2FuIGJlIGVtcHR5IGlmIHRoZSBoYW5kb2ZmIGRvZXMgbm90IHRha2UgYW4gaW5wdXRcbiAgICAgKi9cbiAgICBpbnB1dEpzb25TY2hlbWEgPSB7XG4gICAgICAgIHR5cGU6ICdvYmplY3QnLFxuICAgICAgICBwcm9wZXJ0aWVzOiB7fSxcbiAgICAgICAgcmVxdWlyZWQ6IFtdLFxuICAgICAgICBhZGRpdGlvbmFsUHJvcGVydGllczogZmFsc2UsXG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRoZSBpbnB1dCBKU09OIHNjaGVtYSBpcyBpbiBzdHJpY3QgbW9kZS4gV2UgKipzdHJvbmdseSoqIHJlY29tbWVuZCBzZXR0aW5nIHRoaXMgdG9cbiAgICAgKiB0cnVlLCBhcyBpdCBpbmNyZWFzZXMgdGhlIGxpa2VsaWhvb2Qgb2YgY29ycmVjdCBKU09OIGlucHV0LlxuICAgICAqL1xuICAgIHN0cmljdEpzb25TY2hlbWEgPSB0cnVlO1xuICAgIC8qKlxuICAgICAqIFRoZSBmdW5jdGlvbiB0aGF0IGludm9rZXMgdGhlIGhhbmRvZmYuIFRoZSBwYXJhbWV0ZXJzIHBhc3NlZCBhcmU6XG4gICAgICogMS4gVGhlIGhhbmRvZmYgcnVuIGNvbnRleHRcbiAgICAgKiAyLiBUaGUgYXJndW1lbnRzIGZyb20gdGhlIExMTSwgYXMgYSBKU09OIHN0cmluZy4gRW1wdHkgc3RyaW5nIGlmIGlucHV0SnNvblNjaGVtYSBpcyBlbXB0eS5cbiAgICAgKlxuICAgICAqIE11c3QgcmV0dXJuIGFuIGFnZW50XG4gICAgICovXG4gICAgb25JbnZva2VIYW5kb2ZmO1xuICAgIC8qKlxuICAgICAqIFRoZSBuYW1lIG9mIHRoZSBhZ2VudCB0aGF0IGlzIGJlaW5nIGhhbmRlZCBvZmYgdG8uXG4gICAgICovXG4gICAgYWdlbnROYW1lO1xuICAgIC8qKlxuICAgICAqIEEgZnVuY3Rpb24gdGhhdCBmaWx0ZXJzIHRoZSBpbnB1dHMgdGhhdCBhcmUgcGFzc2VkIHRvIHRoZSBuZXh0IGFnZW50LiBCeSBkZWZhdWx0LCB0aGUgbmV3IGFnZW50XG4gICAgICogc2VlcyB0aGUgZW50aXJlIGNvbnZlcnNhdGlvbiBoaXN0b3J5LiBJbiBzb21lIGNhc2VzLCB5b3UgbWF5IHdhbnQgdG8gZmlsdGVyIGlucHV0cyBlLmcuIHRvXG4gICAgICogcmVtb3ZlIG9sZGVyIGlucHV0cywgb3IgcmVtb3ZlIHRvb2xzIGZyb20gZXhpc3RpbmcgaW5wdXRzLlxuICAgICAqXG4gICAgICogVGhlIGZ1bmN0aW9uIHdpbGwgcmVjZWl2ZSB0aGUgZW50aXJlIGNvbnZlcnNhdGlvbiBoaXNzdG9yeSBzbyBmYXIsIGluY2x1ZGluZyB0aGUgaW5wdXQgaXRlbVxuICAgICAqIHRoYXQgdHJpZ2dlcmVkIHRoZSBoYW5kb2ZmIGFuZCBhIHRvb2wgY2FsbCBvdXRwdXQgaXRlbSByZXByZXNlbnRpbmcgdGhlIGhhbmRvZmYgdG9vbCdzIG91dHB1dC5cbiAgICAgKlxuICAgICAqIFlvdSBhcmUgZnJlZSB0byBtb2RpZnkgdGhlIGlucHV0IGhpc3Rvcnkgb3IgbmV3IGl0ZW1zIGFzIHlvdSBzZWUgZml0LiBUaGUgbmV4dCBhZ2VudCB0aGF0IHJ1bnNcbiAgICAgKiB3aWxsIHJlY2VpdmUgYGhhbmRvZmZJbnB1dERhdGEuYWxsSXRlbXNcbiAgICAgKi9cbiAgICBpbnB1dEZpbHRlcjtcbiAgICAvKipcbiAgICAgKiBUaGUgYWdlbnQgdGhhdCBpcyBiZWluZyBoYW5kZWQgb2ZmIHRvLlxuICAgICAqL1xuICAgIGFnZW50O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBmdW5jdGlvbiB0b29sIGRlZmluaXRpb24gdGhhdCBjYW4gYmUgdXNlZCB0byBpbnZva2UgdGhlIGhhbmRvZmYuXG4gICAgICovXG4gICAgZ2V0SGFuZG9mZkFzRnVuY3Rpb25Ub29sKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogJ2Z1bmN0aW9uJyxcbiAgICAgICAgICAgIG5hbWU6IHRoaXMudG9vbE5hbWUsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogdGhpcy50b29sRGVzY3JpcHRpb24sXG4gICAgICAgICAgICBwYXJhbWV0ZXJzOiB0aGlzLmlucHV0SnNvblNjaGVtYSxcbiAgICAgICAgICAgIHN0cmljdDogdGhpcy5zdHJpY3RKc29uU2NoZW1hLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBpc0VuYWJsZWQgPSBhc3luYyAoKSA9PiB0cnVlO1xuICAgIGNvbnN0cnVjdG9yKGFnZW50LCBvbkludm9rZUhhbmRvZmYpIHtcbiAgICAgICAgdGhpcy5hZ2VudE5hbWUgPSBhZ2VudC5uYW1lO1xuICAgICAgICB0aGlzLm9uSW52b2tlSGFuZG9mZiA9IG9uSW52b2tlSGFuZG9mZjtcbiAgICAgICAgdGhpcy50b29sTmFtZSA9IGRlZmF1bHRIYW5kb2ZmVG9vbE5hbWUoYWdlbnQpO1xuICAgICAgICB0aGlzLnRvb2xEZXNjcmlwdGlvbiA9IGRlZmF1bHRIYW5kb2ZmVG9vbERlc2NyaXB0aW9uKGFnZW50KTtcbiAgICAgICAgdGhpcy5hZ2VudCA9IGFnZW50O1xuICAgIH1cbn1cbi8qKlxuICogQ3JlYXRlcyBhIGhhbmRvZmYgZnJvbSBhbiBhZ2VudC4gSGFuZG9mZnMgYXJlIGF1dG9tYXRpY2FsbHkgY3JlYXRlZCB3aGVuIHlvdSBwYXNzIGFuIGFnZW50XG4gKiBpbnRvIHRoZSBgaGFuZG9mZnNgIG9wdGlvbiBvZiB0aGUgYEFnZW50YCBjb25zdHJ1Y3Rvci4gQWx0ZXJuYXRpdmVseSwgeW91IGNhbiB1c2UgdGhpcyBmdW5jdGlvblxuICogdG8gY3JlYXRlIGEgaGFuZG9mZiBtYW51YWxseSwgZ2l2aW5nIHlvdSBtb3JlIGNvbnRyb2wgb3ZlciBjb25maWd1cmF0aW9uLlxuICpcbiAqIEB0ZW1wbGF0ZSBUQ29udGV4dCBUaGUgY29udGV4dCBvZiB0aGUgaGFuZG9mZlxuICogQHRlbXBsYXRlIFRPdXRwdXQgVGhlIG91dHB1dCB0eXBlIG9mIHRoZSBoYW5kb2ZmXG4gKiBAdGVtcGxhdGUgVElucHV0VHlwZSBUaGUgaW5wdXQgdHlwZSBvZiB0aGUgaGFuZG9mZlxuICovXG5leHBvcnQgZnVuY3Rpb24gaGFuZG9mZihhZ2VudCwgY29uZmlnID0ge30pIHtcbiAgICBsZXQgcGFyc2VyID0gdW5kZWZpbmVkO1xuICAgIGNvbnN0IGhhc09uSGFuZG9mZiA9ICEhY29uZmlnLm9uSGFuZG9mZjtcbiAgICBjb25zdCBoYXNJbnB1dFR5cGUgPSAhIWNvbmZpZy5pbnB1dFR5cGU7XG4gICAgY29uc3QgaGFzQm90aE9yTmVpdGhlckhhbmRvZmZBbmRJbnB1dFR5cGUgPSBoYXNPbkhhbmRvZmYgPT09IGhhc0lucHV0VHlwZTtcbiAgICBpZiAoIWhhc0JvdGhPck5laXRoZXJIYW5kb2ZmQW5kSW5wdXRUeXBlKSB7XG4gICAgICAgIHRocm93IG5ldyBVc2VyRXJyb3IoJ1lvdSBtdXN0IHByb3ZpZGUgZWl0aGVyIGJvdGggYG9uSGFuZG9mZmAgYW5kIGBpbnB1dFR5cGVgIG9yIG5laXRoZXIuJyk7XG4gICAgfVxuICAgIGFzeW5jIGZ1bmN0aW9uIG9uSW52b2tlSGFuZG9mZihjb250ZXh0LCBpbnB1dEpzb25TdHJpbmcpIHtcbiAgICAgICAgaWYgKHBhcnNlcikge1xuICAgICAgICAgICAgaWYgKCFpbnB1dEpzb25TdHJpbmcpIHtcbiAgICAgICAgICAgICAgICBhZGRFcnJvclRvQ3VycmVudFNwYW4oe1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBgSGFuZG9mZiBmdW5jdGlvbiBleHBlY3RlZCBub24gZW1wdHkgaW5wdXQgYnV0IGdvdDogJHtpbnB1dEpzb25TdHJpbmd9YCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGV0YWlsczogYGlucHV0IGlzIGVtcHR5YCxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgTW9kZWxCZWhhdmlvckVycm9yKCdIYW5kb2ZmIGZ1bmN0aW9uIGV4cGVjdGVkIG5vbiBlbXB0eSBpbnB1dCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAvLyB2ZXJpZnkgdGhhdCBpdCdzIHZhbGlkIGlucHV0IGJ1dCB3ZSBkb24ndCBjYXJlIGFib3V0IHRoZSByZXN1bHRcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJzZWQgPSBhd2FpdCBwYXJzZXIoaW5wdXRKc29uU3RyaW5nKTtcbiAgICAgICAgICAgICAgICBpZiAoY29uZmlnLm9uSGFuZG9mZikge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCBjb25maWcub25IYW5kb2ZmKGNvbnRleHQsIHBhcnNlZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgYWRkRXJyb3JUb0N1cnJlbnRTcGFuKHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogYEludmFsaWQgSlNPTiBwcm92aWRlZGAsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHt9LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmICghbG9nZ2VyLmRvbnRMb2dUb29sRGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IoYEludmFsaWQgSlNPTiB3aGVuIHBhcnNpbmc6ICR7aW5wdXRKc29uU3RyaW5nfS4gRXJyb3I6ICR7ZXJyb3J9YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBNb2RlbEJlaGF2aW9yRXJyb3IoJ0ludmFsaWQgSlNPTiBwcm92aWRlZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYXdhaXQgY29uZmlnLm9uSGFuZG9mZj8uKGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhZ2VudDtcbiAgICB9XG4gICAgY29uc3QgaGFuZG9mZiA9IG5ldyBIYW5kb2ZmKGFnZW50LCBvbkludm9rZUhhbmRvZmYpO1xuICAgIGlmICh0eXBlb2YgY29uZmlnLmlzRW5hYmxlZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBjb25zdCBwcmVkaWNhdGUgPSBjb25maWcuaXNFbmFibGVkO1xuICAgICAgICBoYW5kb2ZmLmlzRW5hYmxlZCA9IGFzeW5jICh7IHJ1bkNvbnRleHQsIGFnZW50IH0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHByZWRpY2F0ZSh7IHJ1bkNvbnRleHQsIGFnZW50IH0pO1xuICAgICAgICAgICAgcmV0dXJuIEJvb2xlYW4ocmVzdWx0KTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGNvbmZpZy5pc0VuYWJsZWQgPT09ICdib29sZWFuJykge1xuICAgICAgICBoYW5kb2ZmLmlzRW5hYmxlZCA9IGFzeW5jICgpID0+IGNvbmZpZy5pc0VuYWJsZWQ7XG4gICAgfVxuICAgIGlmIChjb25maWcuaW5wdXRUeXBlKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGdldFNjaGVtYUFuZFBhcnNlckZyb21JbnB1dFR5cGUoY29uZmlnLmlucHV0VHlwZSwgaGFuZG9mZi50b29sTmFtZSk7XG4gICAgICAgIGhhbmRvZmYuaW5wdXRKc29uU2NoZW1hID0gcmVzdWx0LnNjaGVtYTtcbiAgICAgICAgaGFuZG9mZi5zdHJpY3RKc29uU2NoZW1hID0gdHJ1ZTtcbiAgICAgICAgcGFyc2VyID0gcmVzdWx0LnBhcnNlcjtcbiAgICB9XG4gICAgaWYgKGNvbmZpZy50b29sTmFtZU92ZXJyaWRlKSB7XG4gICAgICAgIGhhbmRvZmYudG9vbE5hbWUgPSBjb25maWcudG9vbE5hbWVPdmVycmlkZTtcbiAgICB9XG4gICAgaWYgKGNvbmZpZy50b29sRGVzY3JpcHRpb25PdmVycmlkZSkge1xuICAgICAgICBoYW5kb2ZmLnRvb2xEZXNjcmlwdGlvbiA9IGNvbmZpZy50b29sRGVzY3JpcHRpb25PdmVycmlkZTtcbiAgICB9XG4gICAgaWYgKGNvbmZpZy5pbnB1dEZpbHRlcikge1xuICAgICAgICBoYW5kb2ZmLmlucHV0RmlsdGVyID0gY29uZmlnLmlucHV0RmlsdGVyO1xuICAgIH1cbiAgICByZXR1cm4gaGFuZG9mZjtcbn1cbi8qKlxuICogUmV0dXJucyBhIGhhbmRvZmYgZm9yIHRoZSBnaXZlbiBhZ2VudC4gSWYgdGhlIGFnZW50IGlzIGFscmVhZHkgd3JhcHBlZCBpbnRvIGEgaGFuZG9mZixcbiAqIGl0IHdpbGwgYmUgcmV0dXJuZWQgYXMgaXMuIE90aGVyd2lzZSwgYSBuZXcgaGFuZG9mZiBpbnN0YW5jZSB3aWxsIGJlIGNyZWF0ZWQuXG4gKlxuICogQHRlbXBsYXRlIFRDb250ZXh0IFRoZSBjb250ZXh0IG9mIHRoZSBoYW5kb2ZmXG4gKiBAdGVtcGxhdGUgVE91dHB1dCBUaGUgb3V0cHV0IHR5cGUgb2YgdGhlIGhhbmRvZmZcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEhhbmRvZmYoYWdlbnQpIHtcbiAgICBpZiAoYWdlbnQgaW5zdGFuY2VvZiBIYW5kb2ZmKSB7XG4gICAgICAgIHJldHVybiBhZ2VudDtcbiAgICB9XG4gICAgcmV0dXJuIGhhbmRvZmYoYWdlbnQpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGFuZG9mZi5tanMubWFwIiwiLyoqXG4gKiBHZXQgdGhlIGxhc3QgdGV4dCBmcm9tIHRoZSBvdXRwdXQgbWVzc2FnZS5cbiAqIEBwYXJhbSBvdXRwdXRNZXNzYWdlXG4gKiBAcmV0dXJuc1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TGFzdFRleHRGcm9tT3V0cHV0TWVzc2FnZShvdXRwdXRNZXNzYWdlKSB7XG4gICAgaWYgKG91dHB1dE1lc3NhZ2UudHlwZSAhPT0gJ21lc3NhZ2UnKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmIChvdXRwdXRNZXNzYWdlLnJvbGUgIT09ICdhc3Npc3RhbnQnKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGNvbnN0IGxhc3RJdGVtID0gb3V0cHV0TWVzc2FnZS5jb250ZW50W291dHB1dE1lc3NhZ2UuY29udGVudC5sZW5ndGggLSAxXTtcbiAgICBpZiAobGFzdEl0ZW0udHlwZSAhPT0gJ291dHB1dF90ZXh0Jykge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZXR1cm4gbGFzdEl0ZW0udGV4dDtcbn1cbi8qKlxuICogR2V0IHRoZSBsYXN0IHRleHQgZnJvbSB0aGUgb3V0cHV0IG1lc3NhZ2UuXG4gKiBAcGFyYW0gb3V0cHV0XG4gKiBAcmV0dXJuc1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0T3V0cHV0VGV4dChvdXRwdXQpIHtcbiAgICBpZiAob3V0cHV0Lm91dHB1dC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICByZXR1cm4gKGdldExhc3RUZXh0RnJvbU91dHB1dE1lc3NhZ2Uob3V0cHV0Lm91dHB1dFtvdXRwdXQub3V0cHV0Lmxlbmd0aCAtIDFdKSB8fCAnJyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXNzYWdlcy5tanMubWFwIiwiaW1wb3J0IHsgeiB9IGZyb20gJ3pvZCc7XG5pbXBvcnQgeyBBZ2VudEhvb2tzIH0gZnJvbSBcIi4vbGlmZWN5Y2xlLm1qc1wiO1xuaW1wb3J0IHsgZ2V0QWxsTWNwVG9vbHMgfSBmcm9tIFwiLi9tY3AubWpzXCI7XG5pbXBvcnQgeyBnZXREZWZhdWx0TW9kZWxTZXR0aW5ncywgZ3B0NVJlYXNvbmluZ1NldHRpbmdzUmVxdWlyZWQsIGlzR3B0NURlZmF1bHQsIH0gZnJvbSBcIi4vZGVmYXVsdE1vZGVsLm1qc1wiO1xuaW1wb3J0IHsgdG9vbCwgfSBmcm9tIFwiLi90b29sLm1qc1wiO1xuaW1wb3J0IHsgZ2V0SGFuZG9mZiB9IGZyb20gXCIuL2hhbmRvZmYubWpzXCI7XG5pbXBvcnQgeyBSdW5uZXIgfSBmcm9tIFwiLi9ydW4ubWpzXCI7XG5pbXBvcnQgeyB0b0Z1bmN0aW9uVG9vbE5hbWUgfSBmcm9tIFwiLi91dGlscy90b29scy5tanNcIjtcbmltcG9ydCB7IGdldE91dHB1dFRleHQgfSBmcm9tIFwiLi91dGlscy9tZXNzYWdlcy5tanNcIjtcbmltcG9ydCB7IGlzQWdlbnRUb29sSW5wdXQgfSBmcm9tIFwiLi91dGlscy90eXBlR3VhcmRzLm1qc1wiO1xuaW1wb3J0IHsgaXNab2RPYmplY3QgfSBmcm9tIFwiLi91dGlscy90eXBlR3VhcmRzLm1qc1wiO1xuaW1wb3J0IHsgTW9kZWxCZWhhdmlvckVycm9yLCBVc2VyRXJyb3IgfSBmcm9tIFwiLi9lcnJvcnMubWpzXCI7XG5pbXBvcnQgbG9nZ2VyIGZyb20gXCIuL2xvZ2dlci5tanNcIjtcbi8vIFBlci1wcm9jZXNzLCBlcGhlbWVyYWwgbWFwIGxpbmtpbmcgYSBmdW5jdGlvbiB0b29sIGNhbGwgdG8gaXRzIG5lc3RlZFxuLy8gQWdlbnQgcnVuIHJlc3VsdCB3aXRoaW4gdGhlIHNhbWUgcnVuOyBlbnRyeSBpcyByZW1vdmVkIGFmdGVyIGNvbnN1bXB0aW9uLlxuY29uc3QgYWdlbnRUb29sUnVuUmVzdWx0cyA9IG5ldyBXZWFrTWFwKCk7XG5leHBvcnQgZnVuY3Rpb24gc2F2ZUFnZW50VG9vbFJ1blJlc3VsdCh0b29sQ2FsbCwgcnVuUmVzdWx0KSB7XG4gICAgaWYgKHRvb2xDYWxsKSB7XG4gICAgICAgIGFnZW50VG9vbFJ1blJlc3VsdHMuc2V0KHRvb2xDYWxsLCBydW5SZXN1bHQpO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBjb25zdW1lQWdlbnRUb29sUnVuUmVzdWx0KHRvb2xDYWxsKSB7XG4gICAgY29uc3QgcnVuUmVzdWx0ID0gYWdlbnRUb29sUnVuUmVzdWx0cy5nZXQodG9vbENhbGwpO1xuICAgIGlmIChydW5SZXN1bHQpIHtcbiAgICAgICAgYWdlbnRUb29sUnVuUmVzdWx0cy5kZWxldGUodG9vbENhbGwpO1xuICAgIH1cbiAgICByZXR1cm4gcnVuUmVzdWx0O1xufVxuLy8gVGhlIHBhcmFtZXRlciB0eXBlIGZvIG5lZWRBcHByb3ZhbCBmdW5jdGlvbiBmb3IgdGhlIHRvb2wgY3JlYXRlZCBieSBBZ2VudC5hc1Rvb2woKSBtZXRob2RcbmNvbnN0IEFnZW50QXNUb29sTmVlZEFwcHJvdmFsU2NoYW1lID0gei5vYmplY3QoeyBpbnB1dDogei5zdHJpbmcoKSB9KTtcbi8qKlxuICogVGhlIGNsYXNzIHJlcHJlc2VudGluZyBhbiBBSSBhZ2VudCBjb25maWd1cmVkIHdpdGggaW5zdHJ1Y3Rpb25zLCB0b29scywgZ3VhcmRyYWlscywgaGFuZG9mZnMgYW5kIG1vcmUuXG4gKlxuICogV2Ugc3Ryb25nbHkgcmVjb21tZW5kIHBhc3NpbmcgYGluc3RydWN0aW9uc2AsIHdoaWNoIGlzIHRoZSBcInN5c3RlbSBwcm9tcHRcIiBmb3IgdGhlIGFnZW50LiBJblxuICogYWRkaXRpb24sIHlvdSBjYW4gcGFzcyBgaGFuZG9mZkRlc2NyaXB0aW9uYCwgd2hpY2ggaXMgYSBodW1hbi1yZWFkYWJsZSBkZXNjcmlwdGlvbiBvZiB0aGVcbiAqIGFnZW50LCB1c2VkIHdoZW4gdGhlIGFnZW50IGlzIHVzZWQgaW5zaWRlIHRvb2xzL2hhbmRvZmZzLlxuICpcbiAqIEFnZW50cyBhcmUgZ2VuZXJpYyBvbiB0aGUgY29udGV4dCB0eXBlLiBUaGUgY29udGV4dCBpcyBhIChtdXRhYmxlKSBvYmplY3QgeW91IGNyZWF0ZS4gSXQgaXNcbiAqIHBhc3NlZCB0byB0b29sIGZ1bmN0aW9ucywgaGFuZG9mZnMsIGd1YXJkcmFpbHMsIGV0Yy5cbiAqL1xuZXhwb3J0IGNsYXNzIEFnZW50IGV4dGVuZHMgQWdlbnRIb29rcyB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGFuIEFnZW50IHdpdGggaGFuZG9mZnMgYW5kIGF1dG9tYXRpY2FsbHkgaW5mZXIgdGhlIHVuaW9uIHR5cGUgZm9yIFRPdXRwdXQgZnJvbSB0aGUgaGFuZG9mZiBhZ2VudHMnIG91dHB1dCB0eXBlcy5cbiAgICAgKi9cbiAgICBzdGF0aWMgY3JlYXRlKGNvbmZpZykge1xuICAgICAgICByZXR1cm4gbmV3IEFnZW50KHtcbiAgICAgICAgICAgIC4uLmNvbmZpZyxcbiAgICAgICAgICAgIGhhbmRvZmZzOiBjb25maWcuaGFuZG9mZnMsXG4gICAgICAgICAgICBvdXRwdXRUeXBlOiBjb25maWcub3V0cHV0VHlwZSxcbiAgICAgICAgICAgIGhhbmRvZmZPdXRwdXRUeXBlV2FybmluZ0VuYWJsZWQ6IGZhbHNlLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgc3RhdGljIERFRkFVTFRfTU9ERUxfUExBQ0VIT0xERVIgPSAnJztcbiAgICBuYW1lO1xuICAgIGluc3RydWN0aW9ucztcbiAgICBwcm9tcHQ7XG4gICAgaGFuZG9mZkRlc2NyaXB0aW9uO1xuICAgIGhhbmRvZmZzO1xuICAgIG1vZGVsO1xuICAgIG1vZGVsU2V0dGluZ3M7XG4gICAgdG9vbHM7XG4gICAgbWNwU2VydmVycztcbiAgICBpbnB1dEd1YXJkcmFpbHM7XG4gICAgb3V0cHV0R3VhcmRyYWlscztcbiAgICBvdXRwdXRUeXBlID0gJ3RleHQnO1xuICAgIHRvb2xVc2VCZWhhdmlvcjtcbiAgICByZXNldFRvb2xDaG9pY2U7XG4gICAgY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIGlmICh0eXBlb2YgY29uZmlnLm5hbWUgIT09ICdzdHJpbmcnIHx8IGNvbmZpZy5uYW1lLnRyaW0oKSA9PT0gJycpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBVc2VyRXJyb3IoJ0FnZW50IG11c3QgaGF2ZSBhIG5hbWUuJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5uYW1lID0gY29uZmlnLm5hbWU7XG4gICAgICAgIHRoaXMuaW5zdHJ1Y3Rpb25zID0gY29uZmlnLmluc3RydWN0aW9ucyA/PyBBZ2VudC5ERUZBVUxUX01PREVMX1BMQUNFSE9MREVSO1xuICAgICAgICB0aGlzLnByb21wdCA9IGNvbmZpZy5wcm9tcHQ7XG4gICAgICAgIHRoaXMuaGFuZG9mZkRlc2NyaXB0aW9uID0gY29uZmlnLmhhbmRvZmZEZXNjcmlwdGlvbiA/PyAnJztcbiAgICAgICAgdGhpcy5oYW5kb2ZmcyA9IGNvbmZpZy5oYW5kb2ZmcyA/PyBbXTtcbiAgICAgICAgdGhpcy5tb2RlbCA9IGNvbmZpZy5tb2RlbCA/PyAnJztcbiAgICAgICAgdGhpcy5tb2RlbFNldHRpbmdzID0gY29uZmlnLm1vZGVsU2V0dGluZ3MgPz8gZ2V0RGVmYXVsdE1vZGVsU2V0dGluZ3MoKTtcbiAgICAgICAgdGhpcy50b29scyA9IGNvbmZpZy50b29scyA/PyBbXTtcbiAgICAgICAgdGhpcy5tY3BTZXJ2ZXJzID0gY29uZmlnLm1jcFNlcnZlcnMgPz8gW107XG4gICAgICAgIHRoaXMuaW5wdXRHdWFyZHJhaWxzID0gY29uZmlnLmlucHV0R3VhcmRyYWlscyA/PyBbXTtcbiAgICAgICAgdGhpcy5vdXRwdXRHdWFyZHJhaWxzID0gY29uZmlnLm91dHB1dEd1YXJkcmFpbHMgPz8gW107XG4gICAgICAgIGlmIChjb25maWcub3V0cHV0VHlwZSkge1xuICAgICAgICAgICAgdGhpcy5vdXRwdXRUeXBlID0gY29uZmlnLm91dHB1dFR5cGU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50b29sVXNlQmVoYXZpb3IgPSBjb25maWcudG9vbFVzZUJlaGF2aW9yID8/ICdydW5fbGxtX2FnYWluJztcbiAgICAgICAgdGhpcy5yZXNldFRvb2xDaG9pY2UgPSBjb25maWcucmVzZXRUb29sQ2hvaWNlID8/IHRydWU7XG4gICAgICAgIGlmIChcbiAgICAgICAgLy8gVGhlIHVzZXIgc2V0cyBhIG5vbi1kZWZhdWx0IG1vZGVsXG4gICAgICAgIGNvbmZpZy5tb2RlbCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAvLyBUaGUgZGVmYXVsdCBtb2RlbCBpcyBncHQtNVxuICAgICAgICAgICAgaXNHcHQ1RGVmYXVsdCgpICYmXG4gICAgICAgICAgICAvLyBIb3dldmVyLCB0aGUgc3BlY2lmaWVkIG1vZGVsIGlzIG5vdCBhIGdwdC01IG1vZGVsXG4gICAgICAgICAgICAodHlwZW9mIGNvbmZpZy5tb2RlbCAhPT0gJ3N0cmluZycgfHxcbiAgICAgICAgICAgICAgICAhZ3B0NVJlYXNvbmluZ1NldHRpbmdzUmVxdWlyZWQoY29uZmlnLm1vZGVsKSkgJiZcbiAgICAgICAgICAgIC8vIFRoZSBtb2RlbCBzZXR0aW5ncyBhcmUgbm90IGN1c3RvbWl6ZWQgZm9yIHRoZSBzcGVjaWZpZWQgbW9kZWxcbiAgICAgICAgICAgIGNvbmZpZy5tb2RlbFNldHRpbmdzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIEluIHRoaXMgc2NlbmFyaW8sIHdlIHNob3VsZCB1c2UgYSBnZW5lcmljIG1vZGVsIHNldHRpbmdzXG4gICAgICAgICAgICAvLyBiZWNhdXNlIG5vbi1ncHQtNSBtb2RlbHMgYXJlIG5vdCBjb21wYXRpYmxlIHdpdGggdGhlIGRlZmF1bHQgZ3B0LTUgbW9kZWwgc2V0dGluZ3MuXG4gICAgICAgICAgICAvLyBUaGlzIGlzIGEgYmVzdC1lZmZvcnQgYXR0ZW1wdCB0byBtYWtlIHRoZSBhZ2VudCB3b3JrIHdpdGggbm9uLWdwdC01IG1vZGVscy5cbiAgICAgICAgICAgIHRoaXMubW9kZWxTZXR0aW5ncyA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIC8vIC0tLSBSdW50aW1lIHdhcm5pbmcgZm9yIGhhbmRvZmYgb3V0cHV0IHR5cGUgY29tcGF0aWJpbGl0eSAtLS1cbiAgICAgICAgaWYgKGNvbmZpZy5oYW5kb2ZmT3V0cHV0VHlwZVdhcm5pbmdFbmFibGVkID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgIGNvbmZpZy5oYW5kb2ZmT3V0cHV0VHlwZVdhcm5pbmdFbmFibGVkKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5oYW5kb2ZmcyAmJiB0aGlzLm91dHB1dFR5cGUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBvdXRwdXRUeXBlcyA9IG5ldyBTZXQoW0pTT04uc3RyaW5naWZ5KHRoaXMub3V0cHV0VHlwZSldKTtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGggb2YgdGhpcy5oYW5kb2Zmcykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoJ291dHB1dFR5cGUnIGluIGggJiYgaC5vdXRwdXRUeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXRUeXBlcy5hZGQoSlNPTi5zdHJpbmdpZnkoaC5vdXRwdXRUeXBlKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoJ2FnZW50JyBpbiBoICYmIGguYWdlbnQub3V0cHV0VHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0VHlwZXMuYWRkKEpTT04uc3RyaW5naWZ5KGguYWdlbnQub3V0cHV0VHlwZSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChvdXRwdXRUeXBlcy5zaXplID4gMSkge1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXIud2FybihgW0FnZW50XSBXYXJuaW5nOiBIYW5kb2ZmIGFnZW50cyBoYXZlIGRpZmZlcmVudCBvdXRwdXQgdHlwZXM6ICR7QXJyYXkuZnJvbShvdXRwdXRUeXBlcykuam9pbignLCAnKX0uIFlvdSBjYW4gbWFrZSBpdCB0eXBlLXNhZmUgYnkgdXNpbmcgQWdlbnQuY3JlYXRlKHsgLi4uIH0pIG1ldGhvZCBpbnN0ZWFkLmApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBPdXRwdXQgc2NoZW1hIG5hbWUuXG4gICAgICovXG4gICAgZ2V0IG91dHB1dFNjaGVtYU5hbWUoKSB7XG4gICAgICAgIGlmICh0aGlzLm91dHB1dFR5cGUgPT09ICd0ZXh0Jykge1xuICAgICAgICAgICAgcmV0dXJuICd0ZXh0JztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc1pvZE9iamVjdCh0aGlzLm91dHB1dFR5cGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gJ1pvZE91dHB1dCc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHRoaXMub3V0cHV0VHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm91dHB1dFR5cGUubmFtZTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gb3V0cHV0IHR5cGU6ICR7dGhpcy5vdXRwdXRUeXBlfWApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNYWtlcyBhIGNvcHkgb2YgdGhlIGFnZW50LCB3aXRoIHRoZSBnaXZlbiBhcmd1bWVudHMgY2hhbmdlZC4gRm9yIGV4YW1wbGUsIHlvdSBjb3VsZCBkbzpcbiAgICAgKlxuICAgICAqIGBgYFxuICAgICAqIGNvbnN0IG5ld0FnZW50ID0gYWdlbnQuY2xvbmUoeyBpbnN0cnVjdGlvbnM6ICdOZXcgaW5zdHJ1Y3Rpb25zJyB9KVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbmZpZyAtIEEgcGFydGlhbCBjb25maWd1cmF0aW9uIHRvIGNoYW5nZS5cbiAgICAgKiBAcmV0dXJucyBBIG5ldyBhZ2VudCB3aXRoIHRoZSBnaXZlbiBjaGFuZ2VzLlxuICAgICAqL1xuICAgIGNsb25lKGNvbmZpZykge1xuICAgICAgICByZXR1cm4gbmV3IEFnZW50KHtcbiAgICAgICAgICAgIC4uLnRoaXMsXG4gICAgICAgICAgICAuLi5jb25maWcsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUcmFuc2Zvcm0gdGhpcyBhZ2VudCBpbnRvIGEgdG9vbCwgY2FsbGFibGUgYnkgb3RoZXIgYWdlbnRzLlxuICAgICAqXG4gICAgICogVGhpcyBpcyBkaWZmZXJlbnQgZnJvbSBoYW5kb2ZmcyBpbiB0d28gd2F5czpcbiAgICAgKiAxLiBJbiBoYW5kb2ZmcywgdGhlIG5ldyBhZ2VudCByZWNlaXZlcyB0aGUgY29udmVyc2F0aW9uIGhpc3RvcnkuIEluIHRoaXMgdG9vbCwgdGhlIG5ldyBhZ2VudFxuICAgICAqICAgIHJlY2VpdmVzIGdlbmVyYXRlZCBpbnB1dC5cbiAgICAgKiAyLiBJbiBoYW5kb2ZmcywgdGhlIG5ldyBhZ2VudCB0YWtlcyBvdmVyIHRoZSBjb252ZXJzYXRpb24uIEluIHRoaXMgdG9vbCwgdGhlIG5ldyBhZ2VudCBpc1xuICAgICAqICAgIGNhbGxlZCBhcyBhIHRvb2wsIGFuZCB0aGUgY29udmVyc2F0aW9uIGlzIGNvbnRpbnVlZCBieSB0aGUgb3JpZ2luYWwgYWdlbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbnMgZm9yIHRoZSB0b29sLlxuICAgICAqIEByZXR1cm5zIEEgdG9vbCB0aGF0IHJ1bnMgdGhlIGFnZW50IGFuZCByZXR1cm5zIHRoZSBvdXRwdXQgdGV4dC5cbiAgICAgKi9cbiAgICBhc1Rvb2wob3B0aW9ucykge1xuICAgICAgICBjb25zdCB7IHRvb2xOYW1lLCB0b29sRGVzY3JpcHRpb24sIGN1c3RvbU91dHB1dEV4dHJhY3RvciwgbmVlZHNBcHByb3ZhbCwgcnVuQ29uZmlnLCBydW5PcHRpb25zLCBpc0VuYWJsZWQsIH0gPSBvcHRpb25zO1xuICAgICAgICByZXR1cm4gdG9vbCh7XG4gICAgICAgICAgICBuYW1lOiB0b29sTmFtZSA/PyB0b0Z1bmN0aW9uVG9vbE5hbWUodGhpcy5uYW1lKSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiB0b29sRGVzY3JpcHRpb24gPz8gJycsXG4gICAgICAgICAgICBwYXJhbWV0ZXJzOiBBZ2VudEFzVG9vbE5lZWRBcHByb3ZhbFNjaGFtZSxcbiAgICAgICAgICAgIHN0cmljdDogdHJ1ZSxcbiAgICAgICAgICAgIG5lZWRzQXBwcm92YWwsXG4gICAgICAgICAgICBpc0VuYWJsZWQsXG4gICAgICAgICAgICBleGVjdXRlOiBhc3luYyAoZGF0YSwgY29udGV4dCwgZGV0YWlscykgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghaXNBZ2VudFRvb2xJbnB1dChkYXRhKSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgTW9kZWxCZWhhdmlvckVycm9yKCdBZ2VudCB0b29sIGNhbGxlZCB3aXRoIGludmFsaWQgaW5wdXQnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgcnVubmVyID0gbmV3IFJ1bm5lcihydW5Db25maWcgPz8ge30pO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHJ1bm5lci5ydW4odGhpcywgZGF0YS5pbnB1dCwge1xuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LFxuICAgICAgICAgICAgICAgICAgICAuLi4ocnVuT3B0aW9ucyA/PyB7fSksXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY29uc3QgdXNlc1N0b3BBdFRvb2xOYW1lcyA9IHR5cGVvZiB0aGlzLnRvb2xVc2VCZWhhdmlvciA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b29sVXNlQmVoYXZpb3IgIT09IG51bGwgJiZcbiAgICAgICAgICAgICAgICAgICAgJ3N0b3BBdFRvb2xOYW1lcycgaW4gdGhpcy50b29sVXNlQmVoYXZpb3I7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjdXN0b21PdXRwdXRFeHRyYWN0b3IgIT09ICdmdW5jdGlvbicgJiZcbiAgICAgICAgICAgICAgICAgICAgdXNlc1N0b3BBdFRvb2xOYW1lcykge1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXIuZGVidWcoYFlvdSdyZSBwYXNzaW5nIHRoZSBhZ2VudCAobmFtZTogJHt0aGlzLm5hbWV9KSB3aXRoIHRvb2xVc2VCZWhhdmlvci5zdG9wQXRUb29sTmFtZXMgY29uZmlndXJlZCBhcyBhIHRvb2wgdG8gYSBkaWZmZXJlbnQgYWdlbnQ7IHRoaXMgbWF5IG5vdCB3b3JrIGFzIHlvdSBleHBlY3QuIFlvdSBtYXkgd2FudCB0byBoYXZlIGEgd3JhcHBlciBmdW5jdGlvbiB0b29sIHRvIGNvbnNpc3RlbnRseSByZXR1cm4gdGhlIGZpbmFsIG91dHB1dC5gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3Qgb3V0cHV0VGV4dCA9IHR5cGVvZiBjdXN0b21PdXRwdXRFeHRyYWN0b3IgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgICAgICAgICAgPyBhd2FpdCBjdXN0b21PdXRwdXRFeHRyYWN0b3IocmVzdWx0KVxuICAgICAgICAgICAgICAgICAgICA6IGdldE91dHB1dFRleHQocmVzdWx0LnJhd1Jlc3BvbnNlc1tyZXN1bHQucmF3UmVzcG9uc2VzLmxlbmd0aCAtIDFdKTtcbiAgICAgICAgICAgICAgICBpZiAoZGV0YWlscz8udG9vbENhbGwpIHtcbiAgICAgICAgICAgICAgICAgICAgc2F2ZUFnZW50VG9vbFJ1blJlc3VsdChkZXRhaWxzLnRvb2xDYWxsLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gb3V0cHV0VGV4dDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBzeXN0ZW0gcHJvbXB0IGZvciB0aGUgYWdlbnQuXG4gICAgICpcbiAgICAgKiBJZiB0aGUgYWdlbnQgaGFzIGEgZnVuY3Rpb24gYXMgaXRzIGluc3RydWN0aW9ucywgdGhpcyBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZVxuICAgICAqIHJ1bkNvbnRleHQgYW5kIHRoZSBhZ2VudCBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBhc3luYyBnZXRTeXN0ZW1Qcm9tcHQocnVuQ29udGV4dCkge1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMuaW5zdHJ1Y3Rpb25zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5pbnN0cnVjdGlvbnMocnVuQ29udGV4dCwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuaW5zdHJ1Y3Rpb25zO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBwcm9tcHQgdGVtcGxhdGUgZm9yIHRoZSBhZ2VudCwgaWYgZGVmaW5lZC5cbiAgICAgKlxuICAgICAqIElmIHRoZSBhZ2VudCBoYXMgYSBmdW5jdGlvbiBhcyBpdHMgcHJvbXB0LCB0aGlzIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlXG4gICAgICogcnVuQ29udGV4dCBhbmQgdGhlIGFnZW50IGluc3RhbmNlLlxuICAgICAqL1xuICAgIGFzeW5jIGdldFByb21wdChydW5Db250ZXh0KSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5wcm9tcHQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnByb21wdChydW5Db250ZXh0LCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5wcm9tcHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZldGNoZXMgdGhlIGF2YWlsYWJsZSB0b29scyBmcm9tIHRoZSBNQ1Agc2VydmVycy5cbiAgICAgKiBAcmV0dXJucyB0aGUgTUNQIHBvd2VyZWQgdG9vbHNcbiAgICAgKi9cbiAgICBhc3luYyBnZXRNY3BUb29scyhydW5Db250ZXh0KSB7XG4gICAgICAgIGlmICh0aGlzLm1jcFNlcnZlcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGdldEFsbE1jcFRvb2xzKHtcbiAgICAgICAgICAgICAgICBtY3BTZXJ2ZXJzOiB0aGlzLm1jcFNlcnZlcnMsXG4gICAgICAgICAgICAgICAgcnVuQ29udGV4dCxcbiAgICAgICAgICAgICAgICBhZ2VudDogdGhpcyxcbiAgICAgICAgICAgICAgICBjb252ZXJ0U2NoZW1hc1RvU3RyaWN0OiBmYWxzZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQUxsIGFnZW50IHRvb2xzLCBpbmNsdWRpbmcgdGhlIE1DUGwgYW5kIGZ1bmN0aW9uIHRvb2xzLlxuICAgICAqXG4gICAgICogQHJldHVybnMgYWxsIGNvbmZpZ3VyZWQgdG9vbHNcbiAgICAgKi9cbiAgICBhc3luYyBnZXRBbGxUb29scyhydW5Db250ZXh0KSB7XG4gICAgICAgIGNvbnN0IG1jcFRvb2xzID0gYXdhaXQgdGhpcy5nZXRNY3BUb29scyhydW5Db250ZXh0KTtcbiAgICAgICAgY29uc3QgZW5hYmxlZFRvb2xzID0gW107XG4gICAgICAgIGZvciAoY29uc3QgY2FuZGlkYXRlIG9mIHRoaXMudG9vbHMpIHtcbiAgICAgICAgICAgIGlmIChjYW5kaWRhdGUudHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1heWJlSXNFbmFibGVkID0gY2FuZGlkYXRlLmlzRW5hYmxlZDtcbiAgICAgICAgICAgICAgICBjb25zdCBlbmFibGVkID0gdHlwZW9mIG1heWJlSXNFbmFibGVkID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICAgICAgICAgID8gYXdhaXQgbWF5YmVJc0VuYWJsZWQocnVuQ29udGV4dCwgdGhpcylcbiAgICAgICAgICAgICAgICAgICAgOiB0eXBlb2YgbWF5YmVJc0VuYWJsZWQgPT09ICdib29sZWFuJ1xuICAgICAgICAgICAgICAgICAgICAgICAgPyBtYXliZUlzRW5hYmxlZFxuICAgICAgICAgICAgICAgICAgICAgICAgOiB0cnVlO1xuICAgICAgICAgICAgICAgIGlmICghZW5hYmxlZCkge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbmFibGVkVG9vbHMucHVzaChjYW5kaWRhdGUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbLi4ubWNwVG9vbHMsIC4uLmVuYWJsZWRUb29sc107XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGhhbmRvZmZzIHRoYXQgc2hvdWxkIGJlIGV4cG9zZWQgdG8gdGhlIG1vZGVsIGZvciB0aGUgY3VycmVudCBydW4uXG4gICAgICpcbiAgICAgKiBIYW5kb2ZmcyB0aGF0IHByb3ZpZGUgYW4gYGlzRW5hYmxlZGAgZnVuY3Rpb24gcmV0dXJuaW5nIGBmYWxzZWAgYXJlIG9taXR0ZWQuXG4gICAgICovXG4gICAgYXN5bmMgZ2V0RW5hYmxlZEhhbmRvZmZzKHJ1bkNvbnRleHQpIHtcbiAgICAgICAgY29uc3QgaGFuZG9mZnMgPSB0aGlzLmhhbmRvZmZzPy5tYXAoKGgpID0+IGdldEhhbmRvZmYoaCkpID8/IFtdO1xuICAgICAgICBjb25zdCBlbmFibGVkID0gW107XG4gICAgICAgIGZvciAoY29uc3QgaGFuZG9mZiBvZiBoYW5kb2Zmcykge1xuICAgICAgICAgICAgaWYgKGF3YWl0IGhhbmRvZmYuaXNFbmFibGVkKHsgcnVuQ29udGV4dCwgYWdlbnQ6IHRoaXMgfSkpIHtcbiAgICAgICAgICAgICAgICBlbmFibGVkLnB1c2goaGFuZG9mZik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVuYWJsZWQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFByb2Nlc3NlcyB0aGUgZmluYWwgb3V0cHV0IG9mIHRoZSBhZ2VudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvdXRwdXQgLSBUaGUgb3V0cHV0IG9mIHRoZSBhZ2VudC5cbiAgICAgKiBAcmV0dXJucyBUaGUgcGFyc2VkIG91dC5cbiAgICAgKi9cbiAgICBwcm9jZXNzRmluYWxPdXRwdXQob3V0cHV0KSB7XG4gICAgICAgIGlmICh0aGlzLm91dHB1dFR5cGUgPT09ICd0ZXh0Jykge1xuICAgICAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHRoaXMub3V0cHV0VHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGNvbnN0IHBhcnNlZCA9IEpTT04ucGFyc2Uob3V0cHV0KTtcbiAgICAgICAgICAgIGlmIChpc1pvZE9iamVjdCh0aGlzLm91dHB1dFR5cGUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMub3V0cHV0VHlwZS5wYXJzZShwYXJzZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlZDtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gb3V0cHV0IHR5cGU6ICR7dGhpcy5vdXRwdXRUeXBlfWApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgSlNPTiByZXByZXNlbnRhdGlvbiBvZiB0aGUgYWdlbnQsIHdoaWNoIGlzIHNlcmlhbGl6YWJsZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIEEgSlNPTiBvYmplY3QgY29udGFpbmluZyB0aGUgYWdlbnQncyBuYW1lLlxuICAgICAqL1xuICAgIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgICAgfTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hZ2VudC5tanMubWFwIiwiLyoqXG4gKiBEZWZpbmVzIGFuIGlucHV0IGd1YXJkcmFpbCBkZWZpbml0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVmaW5lSW5wdXRHdWFyZHJhaWwoeyBuYW1lLCBleGVjdXRlLCB9KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogJ2lucHV0JyxcbiAgICAgICAgbmFtZSxcbiAgICAgICAgZ3VhcmRyYWlsRnVuY3Rpb246IGV4ZWN1dGUsXG4gICAgICAgIGFzeW5jIHJ1bihhcmdzKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGd1YXJkcmFpbDogeyB0eXBlOiAnaW5wdXQnLCBuYW1lIH0sXG4gICAgICAgICAgICAgICAgb3V0cHV0OiBhd2FpdCBleGVjdXRlKGFyZ3MpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuLyoqXG4gKiBDcmVhdGVzIGFuIG91dHB1dCBndWFyZHJhaWwgZGVmaW5pdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlZmluZU91dHB1dEd1YXJkcmFpbCh7IG5hbWUsIGV4ZWN1dGUsIH0pIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiAnb3V0cHV0JyxcbiAgICAgICAgbmFtZSxcbiAgICAgICAgZ3VhcmRyYWlsRnVuY3Rpb246IGV4ZWN1dGUsXG4gICAgICAgIGFzeW5jIHJ1bihhcmdzKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGd1YXJkcmFpbDogeyB0eXBlOiAnb3V0cHV0JywgbmFtZSB9LFxuICAgICAgICAgICAgICAgIGFnZW50OiBhcmdzLmFnZW50LFxuICAgICAgICAgICAgICAgIGFnZW50T3V0cHV0OiBhcmdzLmFnZW50T3V0cHV0LFxuICAgICAgICAgICAgICAgIG91dHB1dDogYXdhaXQgZXhlY3V0ZShhcmdzKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWd1YXJkcmFpbC5tanMubWFwIiwibGV0IERFRkFVTFRfUFJPVklERVI7XG4vKipcbiAqIFNldCB0aGUgbW9kZWwgcHJvdmlkZXIgdXNlZCB3aGVuIG5vIGV4cGxpY2l0IHByb3ZpZGVyIGlzIHN1cHBsaWVkLlxuICpcbiAqIEBwYXJhbSBwcm92aWRlciAtIFRoZSBwcm92aWRlciB0byB1c2UgYnkgZGVmYXVsdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldERlZmF1bHRNb2RlbFByb3ZpZGVyKHByb3ZpZGVyKSB7XG4gICAgREVGQVVMVF9QUk9WSURFUiA9IHByb3ZpZGVyO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBkZWZhdWx0IG1vZGVsIHByb3ZpZGVyLlxuICpcbiAqIEByZXR1cm5zIFRoZSBkZWZhdWx0IG1vZGVsIHByb3ZpZGVyLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVmYXVsdE1vZGVsUHJvdmlkZXIoKSB7XG4gICAgaWYgKHR5cGVvZiBERUZBVUxUX1BST1ZJREVSID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGRlZmF1bHQgbW9kZWwgcHJvdmlkZXIgc2V0LiBNYWtlIHN1cmUgdG8gc2V0IGEgcHJvdmlkZXIgdXNpbmcgc2V0RGVmYXVsdE1vZGVsUHJvdmlkZXIgYmVmb3JlIGNhbGxpbmcgZ2V0RGVmYXVsdE1vZGVsUHJvdmlkZXIgb3IgcGFzcyBhbiBleHBsaWNpdCBwcm92aWRlci4nKTtcbiAgICB9XG4gICAgcmV0dXJuIERFRkFVTFRfUFJPVklERVI7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm92aWRlcnMubWpzLm1hcCIsImltcG9ydCB7IHogfSBmcm9tICd6b2QnO1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gU2hhcmVkIGJhc2UgdHlwZXNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8qKlxuICogRXZlcnkgaXRlbSBpbiB0aGUgcHJvdG9jb2wgcHJvdmlkZXMgYSBgcHJvdmlkZXJEYXRhYCBmaWVsZCB0byBhY2NvbW1vZGF0ZSBjdXN0b20gZnVuY3Rpb25hbGl0eVxuICogb3IgbmV3IGZpZWxkc1xuICovXG5leHBvcnQgY29uc3QgU2hhcmVkQmFzZSA9IHoub2JqZWN0KHtcbiAgICAvKipcbiAgICAgKiBBZGRpdGlvbmFsIG9wdGlvbmFsIHByb3ZpZGVyIHNwZWNpZmljIGRhdGEuIFVzZWQgZm9yIGN1c3RvbSBmdW5jdGlvbmFsaXR5IG9yIG1vZGVsIHByb3ZpZGVyXG4gICAgICogc3BlY2lmaWMgZmllbGRzLlxuICAgICAqL1xuICAgIHByb3ZpZGVyRGF0YTogei5yZWNvcmQoei5zdHJpbmcoKSwgei5hbnkoKSkub3B0aW9uYWwoKSxcbn0pO1xuLyoqXG4gKiBFdmVyeSBpdGVtIGhhcyBhIHNoYXJlZCBvZiBzaGFyZWQgaXRlbSBkYXRhIGluY2x1ZGluZyBhbiBvcHRpb25hbCBJRC5cbiAqL1xuZXhwb3J0IGNvbnN0IEl0ZW1CYXNlID0gU2hhcmVkQmFzZS5leHRlbmQoe1xuICAgIC8qKlxuICAgICAqIEFuIElEIHRvIGlkZW50aWZ5IHRoZSBpdGVtLiBUaGlzIGlzIG9wdGlvbmFsIGJ5IGRlZmF1bHQuIElmIGEgbW9kZWwgcHJvdmlkZXIgYWJzb2x1dGVseVxuICAgICAqIHJlcXVpcmVzIHRoaXMgZmllbGQsIGl0IHdpbGwgYmUgdmFsaWRhdGVkIG9uIHRoZSBtb2RlbCBsZXZlbC5cbiAgICAgKi9cbiAgICBpZDogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxufSk7XG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBDb250ZW50IHR5cGVzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5leHBvcnQgY29uc3QgUmVmdXNhbCA9IFNoYXJlZEJhc2UuZXh0ZW5kKHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ3JlZnVzYWwnKSxcbiAgICAvKipcbiAgICAgKiBUaGUgcmVmdXNhbCBleHBsYW5hdGlvbiBmcm9tIHRoZSBtb2RlbC5cbiAgICAgKi9cbiAgICByZWZ1c2FsOiB6LnN0cmluZygpLFxufSk7XG5leHBvcnQgY29uc3QgT3V0cHV0VGV4dCA9IFNoYXJlZEJhc2UuZXh0ZW5kKHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ291dHB1dF90ZXh0JyksXG4gICAgLyoqXG4gICAgICogVGhlIHRleHQgb3V0cHV0IGZyb20gdGhlIG1vZGVsLlxuICAgICAqL1xuICAgIHRleHQ6IHouc3RyaW5nKCksXG59KTtcbmV4cG9ydCBjb25zdCBJbnB1dFRleHQgPSBTaGFyZWRCYXNlLmV4dGVuZCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdpbnB1dF90ZXh0JyksXG4gICAgLyoqXG4gICAgICogQSB0ZXh0IGlucHV0IGZvciBleGFtcGxlIGEgbWVzc2FnZSBmcm9tIGEgdXNlclxuICAgICAqL1xuICAgIHRleHQ6IHouc3RyaW5nKCksXG59KTtcbmV4cG9ydCBjb25zdCBSZWFzb25pbmdUZXh0ID0gU2hhcmVkQmFzZS5leHRlbmQoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgncmVhc29uaW5nX3RleHQnKSxcbiAgICAvKipcbiAgICAgKiBBIHRleHQgaW5wdXQgZm9yIGV4YW1wbGUgYSBtZXNzYWdlIGZyb20gYSB1c2VyXG4gICAgICovXG4gICAgdGV4dDogei5zdHJpbmcoKSxcbn0pO1xuZXhwb3J0IGNvbnN0IElucHV0SW1hZ2UgPSBTaGFyZWRCYXNlLmV4dGVuZCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdpbnB1dF9pbWFnZScpLFxuICAgIC8qKlxuICAgICAqIFRoZSBpbWFnZSBpbnB1dCB0byB0aGUgbW9kZWwuIENvdWxkIGJlIGEgVVJMLCBiYXNlNjQgb3IgYW4gb2JqZWN0IHdpdGggYSBmaWxlIElELlxuICAgICAqL1xuICAgIGltYWdlOiB6XG4gICAgICAgIC5zdHJpbmcoKVxuICAgICAgICAub3Ioei5vYmplY3Qoe1xuICAgICAgICBpZDogei5zdHJpbmcoKSxcbiAgICB9KSlcbiAgICAgICAgLmRlc2NyaWJlKCdDb3VsZCBiZSBhIFVSTCwgYmFzZTY0IG9yIGFuIG9iamVjdCB3aXRoIGEgZmlsZSBJRC4nKSxcbn0pO1xuZXhwb3J0IGNvbnN0IElucHV0RmlsZSA9IFNoYXJlZEJhc2UuZXh0ZW5kKHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ2lucHV0X2ZpbGUnKSxcbiAgICAvKipcbiAgICAgKiBUaGUgZmlsZSBpbnB1dCB0byB0aGUgbW9kZWwuIENvdWxkIGJlIGEgVVJMLCBiYXNlNjQgb3IgYW4gb2JqZWN0IHdpdGggYSBmaWxlIElELlxuICAgICAqL1xuICAgIGZpbGU6IHpcbiAgICAgICAgLnN0cmluZygpXG4gICAgICAgIC5kZXNjcmliZSgnRWl0aGVyIGJhc2U2NCBlbmNvZGVkIGZpbGUgZGF0YSBvciBhIHB1YmxpY2x5IGFjY2Vzc2libGUgZmlsZSBVUkwnKVxuICAgICAgICAub3Ioei5vYmplY3Qoe1xuICAgICAgICBpZDogei5zdHJpbmcoKS5kZXNjcmliZSgnT3BlbkFJIGZpbGUgSUQnKSxcbiAgICB9KSlcbiAgICAgICAgLm9yKHoub2JqZWN0KHtcbiAgICAgICAgdXJsOiB6LnN0cmluZygpLmRlc2NyaWJlKCdQdWJsaWNseSBhY2Nlc3NpYmxlIFBERiBmaWxlIFVSTCcpLFxuICAgIH0pKVxuICAgICAgICAuZGVzY3JpYmUoJ0NvbnRlbnRzIG9mIHRoZSBmaWxlIG9yIGFuIG9iamVjdCB3aXRoIGEgZmlsZSBJRC4nKSxcbn0pO1xuZXhwb3J0IGNvbnN0IEF1ZGlvQ29udGVudCA9IFNoYXJlZEJhc2UuZXh0ZW5kKHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ2F1ZGlvJyksXG4gICAgLyoqXG4gICAgICogVGhlIGF1ZGlvIGlucHV0IHRvIHRoZSBtb2RlbC4gQ291bGQgYmUgYmFzZTY0IGVuY29kZWQgYXVkaW8gZGF0YSBvciBhbiBvYmplY3Qgd2l0aCBhIGZpbGUgSUQuXG4gICAgICovXG4gICAgYXVkaW86IHpcbiAgICAgICAgLnN0cmluZygpXG4gICAgICAgIC5vcih6Lm9iamVjdCh7XG4gICAgICAgIGlkOiB6LnN0cmluZygpLFxuICAgIH0pKVxuICAgICAgICAuZGVzY3JpYmUoJ0Jhc2U2NCBlbmNvZGVkIGF1ZGlvIGRhdGEgb3IgZmlsZSBpZCcpLFxuICAgIC8qKlxuICAgICAqIFRoZSBmb3JtYXQgb2YgdGhlIGF1ZGlvLlxuICAgICAqL1xuICAgIGZvcm1hdDogei5zdHJpbmcoKS5udWxsYWJsZSgpLm9wdGlvbmFsKCksXG4gICAgLyoqXG4gICAgICogVGhlIHRyYW5zY3JpcHQgb2YgdGhlIGF1ZGlvLlxuICAgICAqL1xuICAgIHRyYW5zY3JpcHQ6IHouc3RyaW5nKCkubnVsbGFibGUoKS5vcHRpb25hbCgpLFxufSk7XG5leHBvcnQgY29uc3QgSW1hZ2VDb250ZW50ID0gU2hhcmVkQmFzZS5leHRlbmQoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgnaW1hZ2UnKSxcbiAgICAvKipcbiAgICAgKiBUaGUgaW1hZ2UgaW5wdXQgdG8gdGhlIG1vZGVsLiBDb3VsZCBiZSBiYXNlNjQgZW5jb2RlZCBpbWFnZSBkYXRhIG9yIGFuIG9iamVjdCB3aXRoIGEgZmlsZSBJRC5cbiAgICAgKi9cbiAgICBpbWFnZTogei5zdHJpbmcoKS5kZXNjcmliZSgnQmFzZTY0IGVuY29kZWQgaW1hZ2UgZGF0YScpLFxufSk7XG5leHBvcnQgY29uc3QgVG9vbE91dHB1dFRleHQgPSBTaGFyZWRCYXNlLmV4dGVuZCh7XG4gICAgdHlwZTogei5saXRlcmFsKCd0ZXh0JyksXG4gICAgLyoqXG4gICAgICogVGhlIHRleHQgb3V0cHV0IGZyb20gdGhlIG1vZGVsLlxuICAgICAqL1xuICAgIHRleHQ6IHouc3RyaW5nKCksXG59KTtcbmV4cG9ydCBjb25zdCBUb29sT3V0cHV0SW1hZ2UgPSBTaGFyZWRCYXNlLmV4dGVuZCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdpbWFnZScpLFxuICAgIC8qKlxuICAgICAqIFRoZSBpbWFnZSBkYXRhLiBDb3VsZCBiZSBiYXNlNjQgZW5jb2RlZCBpbWFnZSBkYXRhIG9yIGFuIG9iamVjdCB3aXRoIGEgZmlsZSBJRC5cbiAgICAgKi9cbiAgICBkYXRhOiB6LnN0cmluZygpLmRlc2NyaWJlKCdCYXNlNjQgZW5jb2RlZCBpbWFnZSBkYXRhJyksXG4gICAgLyoqXG4gICAgICogVGhlIG1lZGlhIHR5cGUgb2YgdGhlIGltYWdlLlxuICAgICAqL1xuICAgIG1lZGlhVHlwZTogei5zdHJpbmcoKS5kZXNjcmliZSgnSUFOQSBtZWRpYSB0eXBlIG9mIHRoZSBpbWFnZScpLFxufSk7XG5leHBvcnQgY29uc3QgQ29tcHV0ZXJUb29sT3V0cHV0ID0gU2hhcmVkQmFzZS5leHRlbmQoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgnY29tcHV0ZXJfc2NyZWVuc2hvdCcpLFxuICAgIC8qKlxuICAgICAqIEEgYmFzZTY0IGVuY29kZWQgaW1hZ2UgZGF0YSBvciBhIFVSTCByZXByZXNlbnRpbmcgdGhlIHNjcmVlbnNob3QuXG4gICAgICovXG4gICAgZGF0YTogei5zdHJpbmcoKS5kZXNjcmliZSgnQmFzZTY0IGVuY29kZWQgaW1hZ2UgZGF0YSBvciBVUkwnKSxcbn0pO1xuZXhwb3J0IGNvbnN0IGNvbXB1dGVyQWN0aW9ucyA9IHouZGlzY3JpbWluYXRlZFVuaW9uKCd0eXBlJywgW1xuICAgIHoub2JqZWN0KHsgdHlwZTogei5saXRlcmFsKCdzY3JlZW5zaG90JykgfSksXG4gICAgei5vYmplY3Qoe1xuICAgICAgICB0eXBlOiB6LmxpdGVyYWwoJ2NsaWNrJyksXG4gICAgICAgIHg6IHoubnVtYmVyKCksXG4gICAgICAgIHk6IHoubnVtYmVyKCksXG4gICAgICAgIGJ1dHRvbjogei5lbnVtKFsnbGVmdCcsICdyaWdodCcsICd3aGVlbCcsICdiYWNrJywgJ2ZvcndhcmQnXSksXG4gICAgfSksXG4gICAgei5vYmplY3Qoe1xuICAgICAgICB0eXBlOiB6LmxpdGVyYWwoJ2RvdWJsZV9jbGljaycpLFxuICAgICAgICB4OiB6Lm51bWJlcigpLFxuICAgICAgICB5OiB6Lm51bWJlcigpLFxuICAgIH0pLFxuICAgIHoub2JqZWN0KHtcbiAgICAgICAgdHlwZTogei5saXRlcmFsKCdzY3JvbGwnKSxcbiAgICAgICAgeDogei5udW1iZXIoKSxcbiAgICAgICAgeTogei5udW1iZXIoKSxcbiAgICAgICAgc2Nyb2xsX3g6IHoubnVtYmVyKCksXG4gICAgICAgIHNjcm9sbF95OiB6Lm51bWJlcigpLFxuICAgIH0pLFxuICAgIHoub2JqZWN0KHtcbiAgICAgICAgdHlwZTogei5saXRlcmFsKCd0eXBlJyksXG4gICAgICAgIHRleHQ6IHouc3RyaW5nKCksXG4gICAgfSksXG4gICAgei5vYmplY3QoeyB0eXBlOiB6LmxpdGVyYWwoJ3dhaXQnKSB9KSxcbiAgICB6Lm9iamVjdCh7XG4gICAgICAgIHR5cGU6IHoubGl0ZXJhbCgnbW92ZScpLFxuICAgICAgICB4OiB6Lm51bWJlcigpLFxuICAgICAgICB5OiB6Lm51bWJlcigpLFxuICAgIH0pLFxuICAgIHoub2JqZWN0KHtcbiAgICAgICAgdHlwZTogei5saXRlcmFsKCdrZXlwcmVzcycpLFxuICAgICAgICBrZXlzOiB6LmFycmF5KHouc3RyaW5nKCkpLFxuICAgIH0pLFxuICAgIHoub2JqZWN0KHtcbiAgICAgICAgdHlwZTogei5saXRlcmFsKCdkcmFnJyksXG4gICAgICAgIHBhdGg6IHouYXJyYXkoei5vYmplY3QoeyB4OiB6Lm51bWJlcigpLCB5OiB6Lm51bWJlcigpIH0pKSxcbiAgICB9KSxcbl0pO1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gTWVzc2FnZSB0eXBlc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuZXhwb3J0IGNvbnN0IEFzc2lzdGFudENvbnRlbnQgPSB6LmRpc2NyaW1pbmF0ZWRVbmlvbigndHlwZScsIFtcbiAgICBPdXRwdXRUZXh0LFxuICAgIFJlZnVzYWwsXG4gICAgQXVkaW9Db250ZW50LFxuICAgIEltYWdlQ29udGVudCxcbl0pO1xuY29uc3QgTWVzc2FnZUJhc2UgPSBJdGVtQmFzZS5leHRlbmQoe1xuICAgIC8qKlxuICAgICAqIEFueSBpdGVtIHdpdGhvdXQgYSB0eXBlIGlzIHRyZWF0ZWQgYXMgYSBtZXNzYWdlXG4gICAgICovXG4gICAgdHlwZTogei5saXRlcmFsKCdtZXNzYWdlJykub3B0aW9uYWwoKSxcbn0pO1xuZXhwb3J0IGNvbnN0IEFzc2lzdGFudE1lc3NhZ2VJdGVtID0gTWVzc2FnZUJhc2UuZXh0ZW5kKHtcbiAgICAvKipcbiAgICAgKiBSZXByZXNlbnRpbmcgYSBtZXNzYWdlIGZyb20gdGhlIGFzc2lzdGFudCAoaS5lLiB0aGUgbW9kZWwpXG4gICAgICovXG4gICAgcm9sZTogei5saXRlcmFsKCdhc3Npc3RhbnQnKSxcbiAgICAvKipcbiAgICAgKiBUaGUgc3RhdHVzIG9mIHRoZSBtZXNzYWdlLlxuICAgICAqL1xuICAgIHN0YXR1czogei5lbnVtKFsnaW5fcHJvZ3Jlc3MnLCAnY29tcGxldGVkJywgJ2luY29tcGxldGUnXSksXG4gICAgLyoqXG4gICAgICogVGhlIGNvbnRlbnQgb2YgdGhlIG1lc3NhZ2UuXG4gICAgICovXG4gICAgY29udGVudDogei5hcnJheShBc3Npc3RhbnRDb250ZW50KSxcbn0pO1xuZXhwb3J0IGNvbnN0IFVzZXJDb250ZW50ID0gei5kaXNjcmltaW5hdGVkVW5pb24oJ3R5cGUnLCBbXG4gICAgSW5wdXRUZXh0LFxuICAgIElucHV0SW1hZ2UsXG4gICAgSW5wdXRGaWxlLFxuICAgIEF1ZGlvQ29udGVudCxcbl0pO1xuZXhwb3J0IGNvbnN0IFVzZXJNZXNzYWdlSXRlbSA9IE1lc3NhZ2VCYXNlLmV4dGVuZCh7XG4gICAgLy8gdHlwZTogei5saXRlcmFsKCdtZXNzYWdlJyksXG4gICAgLyoqXG4gICAgICogUmVwcmVzZW50aW5nIGEgbWVzc2FnZSBmcm9tIHRoZSB1c2VyXG4gICAgICovXG4gICAgcm9sZTogei5saXRlcmFsKCd1c2VyJyksXG4gICAgLyoqXG4gICAgICogVGhlIGNvbnRlbnQgb2YgdGhlIG1lc3NhZ2UuXG4gICAgICovXG4gICAgY29udGVudDogei5hcnJheShVc2VyQ29udGVudCkub3Ioei5zdHJpbmcoKSksXG59KTtcbmNvbnN0IFN5c3RlbU1lc3NhZ2VJdGVtID0gTWVzc2FnZUJhc2UuZXh0ZW5kKHtcbiAgICAvLyB0eXBlOiB6LmxpdGVyYWwoJ21lc3NhZ2UnKSxcbiAgICAvKipcbiAgICAgKiBSZXByZXNlbnRpbmcgYSBzeXN0ZW0gbWVzc2FnZSB0byB0aGUgdXNlclxuICAgICAqL1xuICAgIHJvbGU6IHoubGl0ZXJhbCgnc3lzdGVtJyksXG4gICAgLyoqXG4gICAgICogVGhlIGNvbnRlbnQgb2YgdGhlIG1lc3NhZ2UuXG4gICAgICovXG4gICAgY29udGVudDogei5zdHJpbmcoKSxcbn0pO1xuZXhwb3J0IGNvbnN0IE1lc3NhZ2VJdGVtID0gei5kaXNjcmltaW5hdGVkVW5pb24oJ3JvbGUnLCBbXG4gICAgU3lzdGVtTWVzc2FnZUl0ZW0sXG4gICAgQXNzaXN0YW50TWVzc2FnZUl0ZW0sXG4gICAgVXNlck1lc3NhZ2VJdGVtLFxuXSk7XG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBUb29sIGNhbGwgdHlwZXNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmV4cG9ydCBjb25zdCBIb3N0ZWRUb29sQ2FsbEl0ZW0gPSBJdGVtQmFzZS5leHRlbmQoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgnaG9zdGVkX3Rvb2xfY2FsbCcpLFxuICAgIC8qKlxuICAgICAqIFRoZSBuYW1lIG9mIHRoZSBob3N0ZWQgdG9vbC4gRm9yIGV4YW1wbGUgYHdlYl9zZWFyY2hfY2FsbGAgb3IgYGZpbGVfc2VhcmNoX2NhbGxgXG4gICAgICovXG4gICAgbmFtZTogei5zdHJpbmcoKS5kZXNjcmliZSgnVGhlIG5hbWUgb2YgdGhlIGhvc3RlZCB0b29sJyksXG4gICAgLyoqXG4gICAgICogVGhlIGFyZ3VtZW50cyBvZiB0aGUgaG9zdGVkIHRvb2wgY2FsbC5cbiAgICAgKi9cbiAgICBhcmd1bWVudHM6IHpcbiAgICAgICAgLnN0cmluZygpXG4gICAgICAgIC5kZXNjcmliZSgnVGhlIGFyZ3VtZW50cyBvZiB0aGUgaG9zdGVkIHRvb2wgY2FsbCcpXG4gICAgICAgIC5vcHRpb25hbCgpLFxuICAgIC8qKlxuICAgICAqIFRoZSBzdGF0dXMgb2YgdGhlIHRvb2wgY2FsbC5cbiAgICAgKi9cbiAgICBzdGF0dXM6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICAvKipcbiAgICAgKiBUaGUgcHJpbWFyeSBvdXRwdXQgb2YgdGhlIHRvb2wgY2FsbC4gQWRkaXRpb25hbCBvdXRwdXQgbWlnaHQgYmUgaW4gdGhlIGBwcm92aWRlckRhdGFgIGZpZWxkLlxuICAgICAqL1xuICAgIG91dHB1dDogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxufSk7XG5leHBvcnQgY29uc3QgRnVuY3Rpb25DYWxsSXRlbSA9IEl0ZW1CYXNlLmV4dGVuZCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdmdW5jdGlvbl9jYWxsJyksXG4gICAgLyoqXG4gICAgICogVGhlIElEIG9mIHRoZSB0b29sIGNhbGwuIFJlcXVpcmVkIHRvIG1hdGNoIHVwIHRoZSByZXNwZWN0aXZlIHRvb2wgY2FsbCByZXN1bHQuXG4gICAgICovXG4gICAgY2FsbElkOiB6LnN0cmluZygpLmRlc2NyaWJlKCdUaGUgSUQgb2YgdGhlIHRvb2wgY2FsbCcpLFxuICAgIC8qKlxuICAgICAqIFRoZSBuYW1lIG9mIHRoZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBuYW1lOiB6LnN0cmluZygpLmRlc2NyaWJlKCdUaGUgbmFtZSBvZiB0aGUgZnVuY3Rpb24nKSxcbiAgICAvKipcbiAgICAgKiBUaGUgc3RhdHVzIG9mIHRoZSBmdW5jdGlvbiBjYWxsLlxuICAgICAqL1xuICAgIHN0YXR1czogei5lbnVtKFsnaW5fcHJvZ3Jlc3MnLCAnY29tcGxldGVkJywgJ2luY29tcGxldGUnXSkub3B0aW9uYWwoKSxcbiAgICAvKipcbiAgICAgKiBUaGUgYXJndW1lbnRzIG9mIHRoZSBmdW5jdGlvbiBjYWxsLlxuICAgICAqL1xuICAgIGFyZ3VtZW50czogei5zdHJpbmcoKSxcbn0pO1xuZXhwb3J0IGNvbnN0IEZ1bmN0aW9uQ2FsbFJlc3VsdEl0ZW0gPSBJdGVtQmFzZS5leHRlbmQoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgnZnVuY3Rpb25fY2FsbF9yZXN1bHQnKSxcbiAgICAvKipcbiAgICAgKiBUaGUgbmFtZSBvZiB0aGUgdG9vbCB0aGF0IHdhcyBjYWxsZWRcbiAgICAgKi9cbiAgICBuYW1lOiB6LnN0cmluZygpLmRlc2NyaWJlKCdUaGUgbmFtZSBvZiB0aGUgdG9vbCcpLFxuICAgIC8qKlxuICAgICAqIFRoZSBJRCBvZiB0aGUgdG9vbCBjYWxsLiBSZXF1aXJlZCB0byBtYXRjaCB1cCB0aGUgcmVzcGVjdGl2ZSB0b29sIGNhbGwgcmVzdWx0LlxuICAgICAqL1xuICAgIGNhbGxJZDogei5zdHJpbmcoKS5kZXNjcmliZSgnVGhlIElEIG9mIHRoZSB0b29sIGNhbGwnKSxcbiAgICAvKipcbiAgICAgKiBUaGUgc3RhdHVzIG9mIHRoZSB0b29sIGNhbGwuXG4gICAgICovXG4gICAgc3RhdHVzOiB6LmVudW0oWydpbl9wcm9ncmVzcycsICdjb21wbGV0ZWQnLCAnaW5jb21wbGV0ZSddKSxcbiAgICAvKipcbiAgICAgKiBUaGUgb3V0cHV0IG9mIHRoZSB0b29sIGNhbGwuXG4gICAgICovXG4gICAgb3V0cHV0OiB6LmRpc2NyaW1pbmF0ZWRVbmlvbigndHlwZScsIFtUb29sT3V0cHV0VGV4dCwgVG9vbE91dHB1dEltYWdlXSksXG59KTtcbmV4cG9ydCBjb25zdCBDb21wdXRlclVzZUNhbGxJdGVtID0gSXRlbUJhc2UuZXh0ZW5kKHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ2NvbXB1dGVyX2NhbGwnKSxcbiAgICAvKipcbiAgICAgKiBUaGUgSUQgb2YgdGhlIGNvbXB1dGVyIGNhbGwuIFJlcXVpcmVkIHRvIG1hdGNoIHVwIHRoZSByZXNwZWN0aXZlIGNvbXB1dGVyIGNhbGwgcmVzdWx0LlxuICAgICAqL1xuICAgIGNhbGxJZDogei5zdHJpbmcoKS5kZXNjcmliZSgnVGhlIElEIG9mIHRoZSBjb21wdXRlciBjYWxsJyksXG4gICAgLyoqXG4gICAgICogVGhlIHN0YXR1cyBvZiB0aGUgY29tcHV0ZXIgY2FsbC5cbiAgICAgKi9cbiAgICBzdGF0dXM6IHouZW51bShbJ2luX3Byb2dyZXNzJywgJ2NvbXBsZXRlZCcsICdpbmNvbXBsZXRlJ10pLFxuICAgIC8qKlxuICAgICAqIFRoZSBhY3Rpb24gdG8gYmUgcGVyZm9ybWVkIGJ5IHRoZSBjb21wdXRlci5cbiAgICAgKi9cbiAgICBhY3Rpb246IGNvbXB1dGVyQWN0aW9ucyxcbn0pO1xuZXhwb3J0IGNvbnN0IENvbXB1dGVyQ2FsbFJlc3VsdEl0ZW0gPSBJdGVtQmFzZS5leHRlbmQoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgnY29tcHV0ZXJfY2FsbF9yZXN1bHQnKSxcbiAgICAvKipcbiAgICAgKiBUaGUgSUQgb2YgdGhlIGNvbXB1dGVyIGNhbGwuIFJlcXVpcmVkIHRvIG1hdGNoIHVwIHRoZSByZXNwZWN0aXZlIGNvbXB1dGVyIGNhbGwgcmVzdWx0LlxuICAgICAqL1xuICAgIGNhbGxJZDogei5zdHJpbmcoKS5kZXNjcmliZSgnVGhlIElEIG9mIHRoZSBjb21wdXRlciBjYWxsJyksXG4gICAgLyoqXG4gICAgICogVGhlIG91dHB1dCBvZiB0aGUgY29tcHV0ZXIgY2FsbC5cbiAgICAgKi9cbiAgICBvdXRwdXQ6IENvbXB1dGVyVG9vbE91dHB1dCxcbn0pO1xuZXhwb3J0IGNvbnN0IFRvb2xDYWxsSXRlbSA9IHouZGlzY3JpbWluYXRlZFVuaW9uKCd0eXBlJywgW1xuICAgIENvbXB1dGVyVXNlQ2FsbEl0ZW0sXG4gICAgRnVuY3Rpb25DYWxsSXRlbSxcbiAgICBIb3N0ZWRUb29sQ2FsbEl0ZW0sXG5dKTtcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFNwZWNpYWwgaXRlbSB0eXBlc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuZXhwb3J0IGNvbnN0IFJlYXNvbmluZ0l0ZW0gPSBTaGFyZWRCYXNlLmV4dGVuZCh7XG4gICAgaWQ6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ3JlYXNvbmluZycpLFxuICAgIC8qKlxuICAgICAqIFRoZSB1c2VyIGZhY2luZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgcmVhc29uaW5nLiBBZGRpdGlvbmFsIGluZm9ybWF0aW9uIG1pZ2h0IGJlIGluIHRoZSBgcHJvdmlkZXJEYXRhYCBmaWVsZC5cbiAgICAgKi9cbiAgICBjb250ZW50OiB6LmFycmF5KElucHV0VGV4dCksXG4gICAgLyoqXG4gICAgICogVGhlIHJhdyByZWFzb25pbmcgdGV4dCBmcm9tIHRoZSBtb2RlbC5cbiAgICAgKi9cbiAgICByYXdDb250ZW50OiB6LmFycmF5KFJlYXNvbmluZ1RleHQpLm9wdGlvbmFsKCksXG59KTtcbi8qKlxuICogVGhpcyBpcyBhIGNhdGNoIGFsbCBmb3IgaXRlbXMgdGhhdCBhcmUgbm90IHBhcnQgb2YgdGhlIHByb3RvY29sLlxuICpcbiAqIEZvciBleGFtcGxlLCBhIG1vZGVsIG1pZ2h0IHJldHVybiBhbiBpdGVtIHRoYXQgaXMgbm90IHBhcnQgb2YgdGhlIHByb3RvY29sIHVzaW5nIHRoaXMgdHlwZS5cbiAqXG4gKiBJbiB0aGF0IGNhc2UgZXZlcnl0aGluZyByZXR1cm5lZCBmcm9tIHRoZSBtb2RlbCBzaG91bGQgYmUgcGFzc2VkIGluIHRoZSBgcHJvdmlkZXJEYXRhYCBmaWVsZC5cbiAqXG4gKiBUaGlzIGVuYWJsZXMgbmV3IGZlYXR1cmVzIHRvIGJlIGFkZGVkIHRvIGJlIGFkZGVkIGJ5IGEgbW9kZWwgcHJvdmlkZXIgd2l0aG91dCBicmVha2luZyB0aGUgcHJvdG9jb2wuXG4gKi9cbmV4cG9ydCBjb25zdCBVbmtub3duSXRlbSA9IEl0ZW1CYXNlLmV4dGVuZCh7XG4gICAgdHlwZTogei5saXRlcmFsKCd1bmtub3duJyksXG59KTtcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEpvaW5lZCBpdGVtIHR5cGVzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5leHBvcnQgY29uc3QgT3V0cHV0TW9kZWxJdGVtID0gei5kaXNjcmltaW5hdGVkVW5pb24oJ3R5cGUnLCBbXG4gICAgQXNzaXN0YW50TWVzc2FnZUl0ZW0sXG4gICAgSG9zdGVkVG9vbENhbGxJdGVtLFxuICAgIEZ1bmN0aW9uQ2FsbEl0ZW0sXG4gICAgQ29tcHV0ZXJVc2VDYWxsSXRlbSxcbiAgICBSZWFzb25pbmdJdGVtLFxuICAgIFVua25vd25JdGVtLFxuXSk7XG5leHBvcnQgY29uc3QgTW9kZWxJdGVtID0gei51bmlvbihbXG4gICAgVXNlck1lc3NhZ2VJdGVtLFxuICAgIEFzc2lzdGFudE1lc3NhZ2VJdGVtLFxuICAgIFN5c3RlbU1lc3NhZ2VJdGVtLFxuICAgIEhvc3RlZFRvb2xDYWxsSXRlbSxcbiAgICBGdW5jdGlvbkNhbGxJdGVtLFxuICAgIENvbXB1dGVyVXNlQ2FsbEl0ZW0sXG4gICAgRnVuY3Rpb25DYWxsUmVzdWx0SXRlbSxcbiAgICBDb21wdXRlckNhbGxSZXN1bHRJdGVtLFxuICAgIFJlYXNvbmluZ0l0ZW0sXG4gICAgVW5rbm93bkl0ZW0sXG5dKTtcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIE1ldGEgZGF0YSB0eXBlc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuZXhwb3J0IGNvbnN0IFVzYWdlRGF0YSA9IHoub2JqZWN0KHtcbiAgICByZXF1ZXN0czogei5udW1iZXIoKS5vcHRpb25hbCgpLFxuICAgIGlucHV0VG9rZW5zOiB6Lm51bWJlcigpLFxuICAgIG91dHB1dFRva2Vuczogei5udW1iZXIoKSxcbiAgICB0b3RhbFRva2Vuczogei5udW1iZXIoKSxcbiAgICBpbnB1dFRva2Vuc0RldGFpbHM6IHoucmVjb3JkKHouc3RyaW5nKCksIHoubnVtYmVyKCkpLm9wdGlvbmFsKCksXG4gICAgb3V0cHV0VG9rZW5zRGV0YWlsczogei5yZWNvcmQoei5zdHJpbmcoKSwgei5udW1iZXIoKSkub3B0aW9uYWwoKSxcbn0pO1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gU3RyZWFtIGV2ZW50IHR5cGVzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vKipcbiAqIEV2ZW50IHJldHVybmVkIGJ5IHRoZSBtb2RlbCB3aGVuIG5ldyBvdXRwdXQgdGV4dCBpcyBhdmFpbGFibGUgdG8gc3RyZWFtIHRvIHRoZSB1c2VyLlxuICovXG5leHBvcnQgY29uc3QgU3RyZWFtRXZlbnRUZXh0U3RyZWFtID0gU2hhcmVkQmFzZS5leHRlbmQoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgnb3V0cHV0X3RleHRfZGVsdGEnKSxcbiAgICAvKipcbiAgICAgKiBUaGUgZGVsdGEgdGV4dCB0aGF0IHdhcyBzdHJlYW1lZCBieSB0aGUgbW9kZWx0byB0aGUgdXNlci5cbiAgICAgKi9cbiAgICBkZWx0YTogei5zdHJpbmcoKSxcbn0pO1xuLyoqXG4gKiBFdmVudCByZXR1cm5lZCBieSB0aGUgbW9kZWwgd2hlbiBhIG5ldyByZXNwb25zZSBpcyBzdGFydGVkLlxuICovXG5leHBvcnQgY29uc3QgU3RyZWFtRXZlbnRSZXNwb25zZVN0YXJ0ZWQgPSBTaGFyZWRCYXNlLmV4dGVuZCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdyZXNwb25zZV9zdGFydGVkJyksXG59KTtcbi8qKlxuICogRXZlbnQgcmV0dXJuZWQgYnkgdGhlIG1vZGVsIHdoZW4gYSByZXNwb25zZSBpcyBjb21wbGV0ZWQuXG4gKi9cbmV4cG9ydCBjb25zdCBTdHJlYW1FdmVudFJlc3BvbnNlQ29tcGxldGVkID0gU2hhcmVkQmFzZS5leHRlbmQoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgncmVzcG9uc2VfZG9uZScpLFxuICAgIC8qKlxuICAgICAqIFRoZSByZXNwb25zZSBmcm9tIHRoZSBtb2RlbC5cbiAgICAgKi9cbiAgICByZXNwb25zZTogU2hhcmVkQmFzZS5leHRlbmQoe1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIElEIG9mIHRoZSByZXNwb25zZS5cbiAgICAgICAgICovXG4gICAgICAgIGlkOiB6LnN0cmluZygpLFxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHVzYWdlIGRhdGEgZm9yIHRoZSByZXNwb25zZS5cbiAgICAgICAgICovXG4gICAgICAgIHVzYWdlOiBVc2FnZURhdGEsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgb3V0cHV0IGZyb20gdGhlIG1vZGVsLlxuICAgICAgICAgKi9cbiAgICAgICAgb3V0cHV0OiB6LmFycmF5KE91dHB1dE1vZGVsSXRlbSksXG4gICAgfSksXG59KTtcbi8qKlxuICogRXZlbnQgcmV0dXJuZWQgZm9yIGV2ZXJ5IGl0ZW0gdGhhdCBnZXRzIHN0cmVhbWVkIHRvIHRoZSBtb2RlbC4gVXNlZCB0byBleHBvc2UgdGhlIHJhdyBldmVudHNcbiAqIGZyb20gdGhlIG1vZGVsLlxuICovXG5leHBvcnQgY29uc3QgU3RyZWFtRXZlbnRHZW5lcmljSXRlbSA9IFNoYXJlZEJhc2UuZXh0ZW5kKHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ21vZGVsJyksXG4gICAgZXZlbnQ6IHouYW55KCkuZGVzY3JpYmUoJ1RoZSBldmVudCBmcm9tIHRoZSBtb2RlbCcpLFxufSk7XG5leHBvcnQgY29uc3QgU3RyZWFtRXZlbnQgPSB6LmRpc2NyaW1pbmF0ZWRVbmlvbigndHlwZScsIFtcbiAgICBTdHJlYW1FdmVudFRleHRTdHJlYW0sXG4gICAgU3RyZWFtRXZlbnRSZXNwb25zZUNvbXBsZXRlZCxcbiAgICBTdHJlYW1FdmVudFJlc3BvbnNlU3RhcnRlZCxcbiAgICBTdHJlYW1FdmVudEdlbmVyaWNJdGVtLFxuXSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm90b2NvbC5tanMubWFwIiwiaW1wb3J0IHsgVXNhZ2VEYXRhIH0gZnJvbSBcIi4vdHlwZXMvcHJvdG9jb2wubWpzXCI7XG4vKipcbiAqIFRyYWNrcyB0b2tlbiB1c2FnZSBhbmQgcmVxdWVzdCBjb3VudHMgZm9yIGFuIGFnZW50IHJ1bi5cbiAqL1xuZXhwb3J0IGNsYXNzIFVzYWdlIHtcbiAgICAvKipcbiAgICAgKiBUaGUgbnVtYmVyIG9mIHJlcXVlc3RzIG1hZGUgdG8gdGhlIExMTSBBUEkuXG4gICAgICovXG4gICAgcmVxdWVzdHM7XG4gICAgLyoqXG4gICAgICogVGhlIG51bWJlciBvZiBpbnB1dCB0b2tlbnMgdXNlZCBhY3Jvc3MgYWxsIHJlcXVlc3RzLlxuICAgICAqL1xuICAgIGlucHV0VG9rZW5zO1xuICAgIC8qKlxuICAgICAqIFRoZSBudW1iZXIgb2Ygb3V0cHV0IHRva2VucyB1c2VkIGFjcm9zcyBhbGwgcmVxdWVzdHMuXG4gICAgICovXG4gICAgb3V0cHV0VG9rZW5zO1xuICAgIC8qKlxuICAgICAqIFRoZSB0b3RhbCBudW1iZXIgb2YgdG9rZW5zIHNlbnQgYW5kIHJlY2VpdmVkLCBhY3Jvc3MgYWxsIHJlcXVlc3RzLlxuICAgICAqL1xuICAgIHRvdGFsVG9rZW5zO1xuICAgIC8qKlxuICAgICAqIERldGFpbHMgYWJvdXQgdGhlIGlucHV0IHRva2VucyB1c2VkIGFjcm9zcyBhbGwgcmVxdWVzdHMuXG4gICAgICovXG4gICAgaW5wdXRUb2tlbnNEZXRhaWxzID0gW107XG4gICAgLyoqXG4gICAgICogRGV0YWlscyBhYm91dCB0aGUgb3V0cHV0IHRva2VucyB1c2VkIGFjcm9zcyBhbGwgcmVxdWVzdHMuXG4gICAgICovXG4gICAgb3V0cHV0VG9rZW5zRGV0YWlscyA9IFtdO1xuICAgIGNvbnN0cnVjdG9yKGlucHV0KSB7XG4gICAgICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aGlzLnJlcXVlc3RzID0gMDtcbiAgICAgICAgICAgIHRoaXMuaW5wdXRUb2tlbnMgPSAwO1xuICAgICAgICAgICAgdGhpcy5vdXRwdXRUb2tlbnMgPSAwO1xuICAgICAgICAgICAgdGhpcy50b3RhbFRva2VucyA9IDA7XG4gICAgICAgICAgICB0aGlzLmlucHV0VG9rZW5zRGV0YWlscyA9IFtdO1xuICAgICAgICAgICAgdGhpcy5vdXRwdXRUb2tlbnNEZXRhaWxzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnJlcXVlc3RzID0gaW5wdXQ/LnJlcXVlc3RzID8/IDE7XG4gICAgICAgICAgICB0aGlzLmlucHV0VG9rZW5zID0gaW5wdXQ/LmlucHV0VG9rZW5zID8/IGlucHV0Py5pbnB1dF90b2tlbnMgPz8gMDtcbiAgICAgICAgICAgIHRoaXMub3V0cHV0VG9rZW5zID0gaW5wdXQ/Lm91dHB1dFRva2VucyA/PyBpbnB1dD8ub3V0cHV0X3Rva2VucyA/PyAwO1xuICAgICAgICAgICAgdGhpcy50b3RhbFRva2VucyA9IGlucHV0Py50b3RhbFRva2VucyA/PyBpbnB1dD8udG90YWxfdG9rZW5zID8/IDA7XG4gICAgICAgICAgICBjb25zdCBpbnB1dFRva2Vuc0RldGFpbHMgPSBpbnB1dD8uaW5wdXRUb2tlbnNEZXRhaWxzID8/IGlucHV0Py5pbnB1dF90b2tlbnNfZGV0YWlscztcbiAgICAgICAgICAgIHRoaXMuaW5wdXRUb2tlbnNEZXRhaWxzID0gaW5wdXRUb2tlbnNEZXRhaWxzXG4gICAgICAgICAgICAgICAgPyBbaW5wdXRUb2tlbnNEZXRhaWxzXVxuICAgICAgICAgICAgICAgIDogW107XG4gICAgICAgICAgICBjb25zdCBvdXRwdXRUb2tlbnNEZXRhaWxzID0gaW5wdXQ/Lm91dHB1dFRva2Vuc0RldGFpbHMgPz8gaW5wdXQ/Lm91dHB1dF90b2tlbnNfZGV0YWlscztcbiAgICAgICAgICAgIHRoaXMub3V0cHV0VG9rZW5zRGV0YWlscyA9IG91dHB1dFRva2Vuc0RldGFpbHNcbiAgICAgICAgICAgICAgICA/IFtvdXRwdXRUb2tlbnNEZXRhaWxzXVxuICAgICAgICAgICAgICAgIDogW107XG4gICAgICAgIH1cbiAgICB9XG4gICAgYWRkKG5ld1VzYWdlKSB7XG4gICAgICAgIHRoaXMucmVxdWVzdHMgKz0gbmV3VXNhZ2UucmVxdWVzdHM7XG4gICAgICAgIHRoaXMuaW5wdXRUb2tlbnMgKz0gbmV3VXNhZ2UuaW5wdXRUb2tlbnM7XG4gICAgICAgIHRoaXMub3V0cHV0VG9rZW5zICs9IG5ld1VzYWdlLm91dHB1dFRva2VucztcbiAgICAgICAgdGhpcy50b3RhbFRva2VucyArPSBuZXdVc2FnZS50b3RhbFRva2VucztcbiAgICAgICAgaWYgKG5ld1VzYWdlLmlucHV0VG9rZW5zRGV0YWlscykge1xuICAgICAgICAgICAgLy8gVGhlIHR5cGUgZG9lcyBub3QgYWxsb3cgdW5kZWZpbmVkLCBidXQgaXQgY291bGQgaGFwcGVuIHJ1bnRpbWVcbiAgICAgICAgICAgIHRoaXMuaW5wdXRUb2tlbnNEZXRhaWxzLnB1c2goLi4ubmV3VXNhZ2UuaW5wdXRUb2tlbnNEZXRhaWxzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobmV3VXNhZ2Uub3V0cHV0VG9rZW5zRGV0YWlscykge1xuICAgICAgICAgICAgLy8gVGhlIHR5cGUgZG9lcyBub3QgYWxsb3cgdW5kZWZpbmVkLCBidXQgaXQgY291bGQgaGFwcGVuIHJ1bnRpbWVcbiAgICAgICAgICAgIHRoaXMub3V0cHV0VG9rZW5zRGV0YWlscy5wdXNoKC4uLm5ld1VzYWdlLm91dHB1dFRva2Vuc0RldGFpbHMpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0IHsgVXNhZ2VEYXRhIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2FnZS5tanMubWFwIiwiaW1wb3J0IGxvZ2dlciBmcm9tIFwiLi9sb2dnZXIubWpzXCI7XG5pbXBvcnQgeyBVc2FnZSB9IGZyb20gXCIuL3VzYWdlLm1qc1wiO1xuLyoqXG4gKiBBIGNvbnRleHQgb2JqZWN0IHRoYXQgaXMgcGFzc2VkIHRvIHRoZSBgUnVubmVyLnJ1bigpYCBtZXRob2QuXG4gKi9cbmV4cG9ydCBjbGFzcyBSdW5Db250ZXh0IHtcbiAgICAvKipcbiAgICAgKiBUaGUgY29udGV4dCBvYmplY3QgeW91IHBhc3NlZCB0byB0aGUgYFJ1bm5lci5ydW4oKWAgbWV0aG9kLlxuICAgICAqL1xuICAgIGNvbnRleHQ7XG4gICAgLyoqXG4gICAgICogVGhlIHVzYWdlIG9mIHRoZSBhZ2VudCBydW4gc28gZmFyLiBGb3Igc3RyZWFtZWQgcmVzcG9uc2VzLCB0aGUgdXNhZ2Ugd2lsbCBiZSBzdGFsZSB1bnRpbCB0aGVcbiAgICAgKiBsYXN0IGNodW5rIG9mIHRoZSBzdHJlYW0gaXMgcHJvY2Vzc2VkLlxuICAgICAqL1xuICAgIHVzYWdlO1xuICAgIC8qKlxuICAgICAqIEEgbWFwIG9mIHRvb2wgbmFtZXMgdG8gd2hldGhlciB0aGV5IGhhdmUgYmVlbiBhcHByb3ZlZC5cbiAgICAgKi9cbiAgICAjYXBwcm92YWxzO1xuICAgIGNvbnN0cnVjdG9yKGNvbnRleHQgPSB7fSkge1xuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICAgICAgICB0aGlzLnVzYWdlID0gbmV3IFVzYWdlKCk7XG4gICAgICAgIHRoaXMuI2FwcHJvdmFscyA9IG5ldyBNYXAoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVidWlsZCB0aGUgYXBwcm92YWxzIG1hcCBmcm9tIGEgc2VyaWFsaXplZCBzdGF0ZS5cbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKlxuICAgICAqIEBwYXJhbSBhcHByb3ZhbHMgLSBUaGUgYXBwcm92YWxzIG1hcCB0byByZWJ1aWxkLlxuICAgICAqL1xuICAgIF9yZWJ1aWxkQXBwcm92YWxzKGFwcHJvdmFscykge1xuICAgICAgICB0aGlzLiNhcHByb3ZhbHMgPSBuZXcgTWFwKE9iamVjdC5lbnRyaWVzKGFwcHJvdmFscykpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiBhIHRvb2wgY2FsbCBoYXMgYmVlbiBhcHByb3ZlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBhcHByb3ZhbCAtIERldGFpbHMgYWJvdXQgdGhlIHRvb2wgY2FsbCBiZWluZyBldmFsdWF0ZWQuXG4gICAgICogQHJldHVybnMgYHRydWVgIGlmIHRoZSB0b29sIGNhbGwgaGFzIGJlZW4gYXBwcm92ZWQsIGBmYWxzZWAgaWYgYmxvY2tlZCBhbmQgYHVuZGVmaW5lZGAgaWYgbm90IHlldCBhcHByb3ZlZCBvciByZWplY3RlZC5cbiAgICAgKi9cbiAgICBpc1Rvb2xBcHByb3ZlZChhcHByb3ZhbCkge1xuICAgICAgICBjb25zdCB7IHRvb2xOYW1lLCBjYWxsSWQgfSA9IGFwcHJvdmFsO1xuICAgICAgICBjb25zdCBhcHByb3ZhbEVudHJ5ID0gdGhpcy4jYXBwcm92YWxzLmdldCh0b29sTmFtZSk7XG4gICAgICAgIGlmIChhcHByb3ZhbEVudHJ5Py5hcHByb3ZlZCA9PT0gdHJ1ZSAmJiBhcHByb3ZhbEVudHJ5LnJlamVjdGVkID09PSB0cnVlKSB7XG4gICAgICAgICAgICBsb2dnZXIud2FybignVG9vbCBpcyBwZXJtYW5lbnRseSBhcHByb3ZlZCBhbmQgcmVqZWN0ZWQgYXQgdGhlIHNhbWUgdGltZS4gQXBwcm92YWwgdGFrZXMgcHJlY2VkZW5jZScpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFwcHJvdmFsRW50cnk/LmFwcHJvdmVkID09PSB0cnVlKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYXBwcm92YWxFbnRyeT8ucmVqZWN0ZWQgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpbmRpdmlkdWFsQ2FsbEFwcHJvdmFsID0gQXJyYXkuaXNBcnJheShhcHByb3ZhbEVudHJ5Py5hcHByb3ZlZClcbiAgICAgICAgICAgID8gYXBwcm92YWxFbnRyeS5hcHByb3ZlZC5pbmNsdWRlcyhjYWxsSWQpXG4gICAgICAgICAgICA6IGZhbHNlO1xuICAgICAgICBjb25zdCBpbmRpdmlkdWFsQ2FsbFJlamVjdGlvbiA9IEFycmF5LmlzQXJyYXkoYXBwcm92YWxFbnRyeT8ucmVqZWN0ZWQpXG4gICAgICAgICAgICA/IGFwcHJvdmFsRW50cnkucmVqZWN0ZWQuaW5jbHVkZXMoY2FsbElkKVxuICAgICAgICAgICAgOiBmYWxzZTtcbiAgICAgICAgaWYgKGluZGl2aWR1YWxDYWxsQXBwcm92YWwgJiYgaW5kaXZpZHVhbENhbGxSZWplY3Rpb24pIHtcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKGBUb29sIGNhbGwgJHtjYWxsSWR9IGlzIGJvdGggYXBwcm92ZWQgYW5kIHJlamVjdGVkIGF0IHRoZSBzYW1lIHRpbWUuIEFwcHJvdmFsIHRha2VzIHByZWNlZGVuY2VgKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbmRpdmlkdWFsQ2FsbEFwcHJvdmFsKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5kaXZpZHVhbENhbGxSZWplY3Rpb24pIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBcHByb3ZlIGEgdG9vbCBjYWxsLlxuICAgICAqXG4gICAgICogQHBhcmFtIGFwcHJvdmFsSXRlbSAtIFRoZSB0b29sIGFwcHJvdmFsIGl0ZW0gdG8gYXBwcm92ZS5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIEFkZGl0aW9uYWwgYXBwcm92YWwgYmVoYXZpb3Igb3B0aW9ucy5cbiAgICAgKi9cbiAgICBhcHByb3ZlVG9vbChhcHByb3ZhbEl0ZW0sIHsgYWx3YXlzQXBwcm92ZSA9IGZhbHNlIH0gPSB7fSkge1xuICAgICAgICBjb25zdCB0b29sTmFtZSA9IGFwcHJvdmFsSXRlbS5yYXdJdGVtLm5hbWU7XG4gICAgICAgIGlmIChhbHdheXNBcHByb3ZlKSB7XG4gICAgICAgICAgICB0aGlzLiNhcHByb3ZhbHMuc2V0KHRvb2xOYW1lLCB7XG4gICAgICAgICAgICAgICAgYXBwcm92ZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgcmVqZWN0ZWQ6IFtdLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYXBwcm92YWxFbnRyeSA9IHRoaXMuI2FwcHJvdmFscy5nZXQodG9vbE5hbWUpID8/IHtcbiAgICAgICAgICAgIGFwcHJvdmVkOiBbXSxcbiAgICAgICAgICAgIHJlamVjdGVkOiBbXSxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXBwcm92YWxFbnRyeS5hcHByb3ZlZCkpIHtcbiAgICAgICAgICAgIC8vIGZ1bmN0aW9uIHRvb2wgaGFzIGNhbGxfaWQsIGhvc3RlZCB0b29sIGNhbGwgaGFzIGlkXG4gICAgICAgICAgICBjb25zdCBjYWxsSWQgPSAnY2FsbElkJyBpbiBhcHByb3ZhbEl0ZW0ucmF3SXRlbVxuICAgICAgICAgICAgICAgID8gYXBwcm92YWxJdGVtLnJhd0l0ZW0uY2FsbElkIC8vIGZ1bmN0aW9uIHRvb2xzXG4gICAgICAgICAgICAgICAgOiBhcHByb3ZhbEl0ZW0ucmF3SXRlbS5pZDsgLy8gaG9zdGVkIHRvb2xzXG4gICAgICAgICAgICBhcHByb3ZhbEVudHJ5LmFwcHJvdmVkLnB1c2goY2FsbElkKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLiNhcHByb3ZhbHMuc2V0KHRvb2xOYW1lLCBhcHByb3ZhbEVudHJ5KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVqZWN0IGEgdG9vbCBjYWxsLlxuICAgICAqXG4gICAgICogQHBhcmFtIGFwcHJvdmFsSXRlbSAtIFRoZSB0b29sIGFwcHJvdmFsIGl0ZW0gdG8gcmVqZWN0LlxuICAgICAqL1xuICAgIHJlamVjdFRvb2woYXBwcm92YWxJdGVtLCB7IGFsd2F5c1JlamVjdCA9IGZhbHNlIH0gPSB7fSkge1xuICAgICAgICBjb25zdCB0b29sTmFtZSA9IGFwcHJvdmFsSXRlbS5yYXdJdGVtLm5hbWU7XG4gICAgICAgIGlmIChhbHdheXNSZWplY3QpIHtcbiAgICAgICAgICAgIHRoaXMuI2FwcHJvdmFscy5zZXQodG9vbE5hbWUsIHtcbiAgICAgICAgICAgICAgICBhcHByb3ZlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgcmVqZWN0ZWQ6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhcHByb3ZhbEVudHJ5ID0gdGhpcy4jYXBwcm92YWxzLmdldCh0b29sTmFtZSkgPz8ge1xuICAgICAgICAgICAgYXBwcm92ZWQ6IFtdLFxuICAgICAgICAgICAgcmVqZWN0ZWQ6IFtdLFxuICAgICAgICB9O1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShhcHByb3ZhbEVudHJ5LnJlamVjdGVkKSkge1xuICAgICAgICAgICAgLy8gZnVuY3Rpb24gdG9vbCBoYXMgY2FsbF9pZCwgaG9zdGVkIHRvb2wgY2FsbCBoYXMgaWRcbiAgICAgICAgICAgIGNvbnN0IGNhbGxJZCA9ICdjYWxsSWQnIGluIGFwcHJvdmFsSXRlbS5yYXdJdGVtXG4gICAgICAgICAgICAgICAgPyBhcHByb3ZhbEl0ZW0ucmF3SXRlbS5jYWxsSWQgLy8gZnVuY3Rpb24gdG9vbHNcbiAgICAgICAgICAgICAgICA6IGFwcHJvdmFsSXRlbS5yYXdJdGVtLmlkOyAvLyBob3N0ZWQgdG9vbHNcbiAgICAgICAgICAgIGFwcHJvdmFsRW50cnkucmVqZWN0ZWQucHVzaChjYWxsSWQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuI2FwcHJvdmFscy5zZXQodG9vbE5hbWUsIGFwcHJvdmFsRW50cnkpO1xuICAgIH1cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjb250ZXh0OiB0aGlzLmNvbnRleHQsXG4gICAgICAgICAgICB1c2FnZTogdGhpcy51c2FnZSxcbiAgICAgICAgICAgIGFwcHJvdmFsczogT2JqZWN0LmZyb21FbnRyaWVzKHRoaXMuI2FwcHJvdmFscy5lbnRyaWVzKCkpLFxuICAgICAgICB9O1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJ1bkNvbnRleHQubWpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBzZXJpYWxpemVUb29sKHRvb2wpIHtcbiAgICBpZiAodG9vbC50eXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiAnZnVuY3Rpb24nLFxuICAgICAgICAgICAgbmFtZTogdG9vbC5uYW1lLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IHRvb2wuZGVzY3JpcHRpb24sXG4gICAgICAgICAgICBwYXJhbWV0ZXJzOiB0b29sLnBhcmFtZXRlcnMsXG4gICAgICAgICAgICBzdHJpY3Q6IHRvb2wuc3RyaWN0LFxuICAgICAgICB9O1xuICAgIH1cbiAgICBpZiAodG9vbC50eXBlID09PSAnY29tcHV0ZXInKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiAnY29tcHV0ZXInLFxuICAgICAgICAgICAgbmFtZTogdG9vbC5uYW1lLFxuICAgICAgICAgICAgZW52aXJvbm1lbnQ6IHRvb2wuY29tcHV0ZXIuZW52aXJvbm1lbnQsXG4gICAgICAgICAgICBkaW1lbnNpb25zOiB0b29sLmNvbXB1dGVyLmRpbWVuc2lvbnMsXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdob3N0ZWRfdG9vbCcsXG4gICAgICAgIG5hbWU6IHRvb2wubmFtZSxcbiAgICAgICAgcHJvdmlkZXJEYXRhOiB0b29sLnByb3ZpZGVyRGF0YSxcbiAgICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHNlcmlhbGl6ZUhhbmRvZmYoaCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHRvb2xOYW1lOiBoLnRvb2xOYW1lLFxuICAgICAgICB0b29sRGVzY3JpcHRpb246IGgudG9vbERlc2NyaXB0aW9uLFxuICAgICAgICBpbnB1dEpzb25TY2hlbWE6IGguaW5wdXRKc29uU2NoZW1hLFxuICAgICAgICBzdHJpY3RKc29uU2NoZW1hOiBoLnN0cmljdEpzb25TY2hlbWEsXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlcmlhbGl6ZS5tanMubWFwIiwiaW1wb3J0IHsgdG9TbWFydFN0cmluZyB9IGZyb20gXCIuL3V0aWxzL3NtYXJ0U3RyaW5nLm1qc1wiO1xuZXhwb3J0IGNsYXNzIFJ1bkl0ZW1CYXNlIHtcbiAgICB0eXBlID0gJ2Jhc2VfaXRlbSc7XG4gICAgcmF3SXRlbTtcbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiB0aGlzLnR5cGUsXG4gICAgICAgICAgICByYXdJdGVtOiB0aGlzLnJhd0l0ZW0sXG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFJ1bk1lc3NhZ2VPdXRwdXRJdGVtIGV4dGVuZHMgUnVuSXRlbUJhc2Uge1xuICAgIHJhd0l0ZW07XG4gICAgYWdlbnQ7XG4gICAgdHlwZSA9ICdtZXNzYWdlX291dHB1dF9pdGVtJztcbiAgICBjb25zdHJ1Y3RvcihyYXdJdGVtLCBhZ2VudCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnJhd0l0ZW0gPSByYXdJdGVtO1xuICAgICAgICB0aGlzLmFnZW50ID0gYWdlbnQ7XG4gICAgfVxuICAgIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLnN1cGVyLnRvSlNPTigpLFxuICAgICAgICAgICAgYWdlbnQ6IHRoaXMuYWdlbnQudG9KU09OKCksXG4gICAgICAgIH07XG4gICAgfVxuICAgIGdldCBjb250ZW50KCkge1xuICAgICAgICBsZXQgY29udGVudCA9ICcnO1xuICAgICAgICBmb3IgKGNvbnN0IHBhcnQgb2YgdGhpcy5yYXdJdGVtLmNvbnRlbnQpIHtcbiAgICAgICAgICAgIGlmIChwYXJ0LnR5cGUgPT09ICdvdXRwdXRfdGV4dCcpIHtcbiAgICAgICAgICAgICAgICBjb250ZW50ICs9IHBhcnQudGV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29udGVudDtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgUnVuVG9vbENhbGxJdGVtIGV4dGVuZHMgUnVuSXRlbUJhc2Uge1xuICAgIHJhd0l0ZW07XG4gICAgYWdlbnQ7XG4gICAgdHlwZSA9ICd0b29sX2NhbGxfaXRlbSc7XG4gICAgY29uc3RydWN0b3IocmF3SXRlbSwgYWdlbnQpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5yYXdJdGVtID0gcmF3SXRlbTtcbiAgICAgICAgdGhpcy5hZ2VudCA9IGFnZW50O1xuICAgIH1cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5zdXBlci50b0pTT04oKSxcbiAgICAgICAgICAgIGFnZW50OiB0aGlzLmFnZW50LnRvSlNPTigpLFxuICAgICAgICB9O1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBSdW5Ub29sQ2FsbE91dHB1dEl0ZW0gZXh0ZW5kcyBSdW5JdGVtQmFzZSB7XG4gICAgcmF3SXRlbTtcbiAgICBhZ2VudDtcbiAgICBvdXRwdXQ7XG4gICAgdHlwZSA9ICd0b29sX2NhbGxfb3V0cHV0X2l0ZW0nO1xuICAgIGNvbnN0cnVjdG9yKHJhd0l0ZW0sIGFnZW50LCBvdXRwdXQpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5yYXdJdGVtID0gcmF3SXRlbTtcbiAgICAgICAgdGhpcy5hZ2VudCA9IGFnZW50O1xuICAgICAgICB0aGlzLm91dHB1dCA9IG91dHB1dDtcbiAgICB9XG4gICAgdG9KU09OKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4uc3VwZXIudG9KU09OKCksXG4gICAgICAgICAgICBhZ2VudDogdGhpcy5hZ2VudC50b0pTT04oKSxcbiAgICAgICAgICAgIG91dHB1dDogdG9TbWFydFN0cmluZyh0aGlzLm91dHB1dCksXG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFJ1blJlYXNvbmluZ0l0ZW0gZXh0ZW5kcyBSdW5JdGVtQmFzZSB7XG4gICAgcmF3SXRlbTtcbiAgICBhZ2VudDtcbiAgICB0eXBlID0gJ3JlYXNvbmluZ19pdGVtJztcbiAgICBjb25zdHJ1Y3RvcihyYXdJdGVtLCBhZ2VudCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnJhd0l0ZW0gPSByYXdJdGVtO1xuICAgICAgICB0aGlzLmFnZW50ID0gYWdlbnQ7XG4gICAgfVxuICAgIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLnN1cGVyLnRvSlNPTigpLFxuICAgICAgICAgICAgYWdlbnQ6IHRoaXMuYWdlbnQudG9KU09OKCksXG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFJ1bkhhbmRvZmZDYWxsSXRlbSBleHRlbmRzIFJ1bkl0ZW1CYXNlIHtcbiAgICByYXdJdGVtO1xuICAgIGFnZW50O1xuICAgIHR5cGUgPSAnaGFuZG9mZl9jYWxsX2l0ZW0nO1xuICAgIGNvbnN0cnVjdG9yKHJhd0l0ZW0sIGFnZW50KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMucmF3SXRlbSA9IHJhd0l0ZW07XG4gICAgICAgIHRoaXMuYWdlbnQgPSBhZ2VudDtcbiAgICB9XG4gICAgdG9KU09OKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4uc3VwZXIudG9KU09OKCksXG4gICAgICAgICAgICBhZ2VudDogdGhpcy5hZ2VudC50b0pTT04oKSxcbiAgICAgICAgfTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgUnVuSGFuZG9mZk91dHB1dEl0ZW0gZXh0ZW5kcyBSdW5JdGVtQmFzZSB7XG4gICAgcmF3SXRlbTtcbiAgICBzb3VyY2VBZ2VudDtcbiAgICB0YXJnZXRBZ2VudDtcbiAgICB0eXBlID0gJ2hhbmRvZmZfb3V0cHV0X2l0ZW0nO1xuICAgIGNvbnN0cnVjdG9yKHJhd0l0ZW0sIHNvdXJjZUFnZW50LCB0YXJnZXRBZ2VudCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnJhd0l0ZW0gPSByYXdJdGVtO1xuICAgICAgICB0aGlzLnNvdXJjZUFnZW50ID0gc291cmNlQWdlbnQ7XG4gICAgICAgIHRoaXMudGFyZ2V0QWdlbnQgPSB0YXJnZXRBZ2VudDtcbiAgICB9XG4gICAgdG9KU09OKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4uc3VwZXIudG9KU09OKCksXG4gICAgICAgICAgICBzb3VyY2VBZ2VudDogdGhpcy5zb3VyY2VBZ2VudC50b0pTT04oKSxcbiAgICAgICAgICAgIHRhcmdldEFnZW50OiB0aGlzLnRhcmdldEFnZW50LnRvSlNPTigpLFxuICAgICAgICB9O1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBSdW5Ub29sQXBwcm92YWxJdGVtIGV4dGVuZHMgUnVuSXRlbUJhc2Uge1xuICAgIHJhd0l0ZW07XG4gICAgYWdlbnQ7XG4gICAgdHlwZSA9ICd0b29sX2FwcHJvdmFsX2l0ZW0nO1xuICAgIGNvbnN0cnVjdG9yKHJhd0l0ZW0sIGFnZW50KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMucmF3SXRlbSA9IHJhd0l0ZW07XG4gICAgICAgIHRoaXMuYWdlbnQgPSBhZ2VudDtcbiAgICB9XG4gICAgdG9KU09OKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4uc3VwZXIudG9KU09OKCksXG4gICAgICAgICAgICBhZ2VudDogdGhpcy5hZ2VudC50b0pTT04oKSxcbiAgICAgICAgfTtcbiAgICB9XG59XG4vKipcbiAqIEV4dHJhY3QgYWxsIHRleHQgb3V0cHV0IGZyb20gYSBsaXN0IG9mIHJ1biBpdGVtcyBieSBjb25jYXRlbmF0aW5nIHRoZSBjb250ZW50IG9mIGFsbFxuICogbWVzc2FnZSBvdXRwdXQgaXRlbXMuXG4gKlxuICogQHBhcmFtIGl0ZW1zIC0gVGhlIGxpc3Qgb2YgcnVuIGl0ZW1zIHRvIGV4dHJhY3QgdGV4dCBmcm9tLlxuICogQHJldHVybnMgQSBzdHJpbmcgb2YgYWxsIHRoZSB0ZXh0IG91dHB1dCBmcm9tIHRoZSBydW4gaXRlbXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0QWxsVGV4dE91dHB1dChpdGVtcykge1xuICAgIHJldHVybiBpdGVtc1xuICAgICAgICAuZmlsdGVyKChpdGVtKSA9PiBpdGVtLnR5cGUgPT09ICdtZXNzYWdlX291dHB1dF9pdGVtJylcbiAgICAgICAgLm1hcCgoaXRlbSkgPT4gaXRlbS5jb250ZW50KVxuICAgICAgICAuam9pbignJyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pdGVtcy5tanMubWFwIiwiaW1wb3J0IHsgcmVzZXRDdXJyZW50U3Bhbiwgc2V0Q3VycmVudFNwYW4sIHdpdGhOZXdTcGFuQ29udGV4dCwgfSBmcm9tIFwiLi9jb250ZXh0Lm1qc1wiO1xuaW1wb3J0IHsgZ2V0R2xvYmFsVHJhY2VQcm92aWRlciB9IGZyb20gXCIuL3Byb3ZpZGVyLm1qc1wiO1xuZnVuY3Rpb24gX3dpdGhTcGFuRmFjdG9yeShjcmVhdGVTcGFuKSB7XG4gICAgcmV0dXJuIGFzeW5jIChmbiwgLi4uYXJncykgPT4ge1xuICAgICAgICAvLyBDcmVhdGluZyBhIG5ldyBzcGFuIGNvbnRleHQgdG8gbWFrZSBzdXJlIHRoYXQgdGhlIHByZXZpb3VzIHNwYW4gaXMgY29ycmVjdGx5IHJlc2V0XG4gICAgICAgIHJldHVybiB3aXRoTmV3U3BhbkNvbnRleHQoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc3BhbiA9IGNyZWF0ZVNwYW4oLi4uYXJncyk7XG4gICAgICAgICAgICBzZXRDdXJyZW50U3BhbihzcGFuKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgc3Bhbi5zdGFydCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBhd2FpdCBmbihzcGFuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHNwYW4uc2V0RXJyb3Ioe1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBlcnJvci5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiBlcnJvci5kYXRhLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgc3Bhbi5lbmQoKTtcbiAgICAgICAgICAgICAgICByZXNldEN1cnJlbnRTcGFuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG59XG4vKipcbiAqIENyZWF0ZSBhIG5ldyByZXNwb25zZSBzcGFuLiBUaGUgc3BhbiB3aWxsIG5vdCBiZSBzdGFydGVkIGF1dG9tYXRpY2FsbHksIHlvdSBzaG91bGQgZWl0aGVyXG4gKiB1c2UgYHdpdGhSZXNwb25zZVNwYW4oKWAgb3IgY2FsbCBgc3Bhbi5zdGFydCgpYCBhbmQgYHNwYW4uZW5kKClgIG1hbnVhbGx5LlxuICpcbiAqIFRoaXMgc3BhbiBjYXB0dXJlcyB0aGUgZGV0YWlscyBvZiBhIG1vZGVsIHJlc3BvbnNlLCBwcmltYXJpbHkgdGhlIHJlc3BvbnNlIGlkZW50aWZpZXIuXG4gKiBJZiB5b3UgbmVlZCB0byBjYXB0dXJlIGRldGFpbGVkIGdlbmVyYXRpb24gaW5mb3JtYXRpb24gc3VjaCBhcyBpbnB1dC9vdXRwdXQgbWVzc2FnZXMsXG4gKiBtb2RlbCBjb25maWd1cmF0aW9uLCBvciB1c2FnZSBkYXRhLCB1c2UgYGNyZWF0ZUdlbmVyYXRpb25TcGFuKClgIGluc3RlYWQuXG4gKlxuICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25hbCBzcGFuIGNyZWF0aW9uIG9wdGlvbnMsIGluY2x1ZGluZyBzcGFuIGRhdGEgYW5kIGlkZW50aWZpZXJzLlxuICogQHBhcmFtIHBhcmVudCAtIFRoZSBwYXJlbnQgc3BhbiBvciB0cmFjZS4gSWYgbm90IHByb3ZpZGVkLCB0aGUgY3VycmVudCB0cmFjZS9zcGFuIHdpbGwgYmUgdXNlZFxuICogYXV0b21hdGljYWxseS5cbiAqXG4gKiBAcmV0dXJucyBUaGUgbmV3bHkgY3JlYXRlZCByZXNwb25zZSBzcGFuLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUmVzcG9uc2VTcGFuKG9wdGlvbnMsIHBhcmVudCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgICByZXR1cm4gZ2V0R2xvYmFsVHJhY2VQcm92aWRlcigpLmNyZWF0ZVNwYW4oe1xuICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICB0eXBlOiAncmVzcG9uc2UnLFxuICAgICAgICAgICAgLi4ub3B0aW9ucy5kYXRhLFxuICAgICAgICB9LFxuICAgIH0sIHBhcmVudCk7XG59XG4vKipcbiAqIENyZWF0ZSBhIG5ldyByZXNwb25zZSBzcGFuIGFuZCBhdXRvbWF0aWNhbGx5IHN0YXJ0IGFuZCBlbmQgaXQuXG4gKlxuICogVGhpcyBzcGFuIGNhcHR1cmVzIHRoZSBkZXRhaWxzIG9mIGEgbW9kZWwgcmVzcG9uc2UsIHByaW1hcmlseSB0aGUgcmVzcG9uc2UgaWRlbnRpZmllci5cbiAqIElmIHlvdSBuZWVkIHRvIGNhcHR1cmUgZGV0YWlsZWQgZ2VuZXJhdGlvbiBpbmZvcm1hdGlvbiBzdWNoIGFzIGlucHV0L291dHB1dCBtZXNzYWdlcyxcbiAqIG1vZGVsIGNvbmZpZ3VyYXRpb24sIG9yIHVzYWdlIGRhdGEsIHVzZSBgZ2VuZXJhdGlvblNwYW4oKWAgaW5zdGVhZC5cbiAqL1xuZXhwb3J0IGNvbnN0IHdpdGhSZXNwb25zZVNwYW4gPSBfd2l0aFNwYW5GYWN0b3J5KGNyZWF0ZVJlc3BvbnNlU3Bhbik7XG4vKipcbiAqIENyZWF0ZSBhIG5ldyBhZ2VudCBzcGFuLiBUaGUgc3BhbiB3aWxsIG5vdCBiZSBzdGFydGVkIGF1dG9tYXRpY2FsbHksIHlvdSBzaG91bGQgZWl0aGVyXG4gKiB1c2UgYHdpdGhBZ2VudFNwYW4oKWAgb3IgY2FsbCBgc3Bhbi5zdGFydCgpYCBhbmQgYHNwYW4uZW5kKClgIG1hbnVhbGx5LlxuICpcbiAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9uYWwgc3BhbiBjcmVhdGlvbiBvcHRpb25zLCBpbmNsdWRpbmcgc3BhbiBkYXRhIGFuZCBpZGVudGlmaWVycy5cbiAqIEBwYXJhbSBwYXJlbnQgLSBUaGUgcGFyZW50IHNwYW4gb3IgdHJhY2UuIElmIG5vdCBwcm92aWRlZCwgdGhlIGN1cnJlbnQgdHJhY2Uvc3BhbiB3aWxsIGJlIHVzZWRcbiAqIGF1dG9tYXRpY2FsbHkuXG4gKlxuICogQHJldHVybnMgVGhlIG5ld2x5IGNyZWF0ZWQgYWdlbnQgc3Bhbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUFnZW50U3BhbihvcHRpb25zLCBwYXJlbnQpIHtcbiAgICByZXR1cm4gZ2V0R2xvYmFsVHJhY2VQcm92aWRlcigpLmNyZWF0ZVNwYW4oe1xuICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICB0eXBlOiAnYWdlbnQnLFxuICAgICAgICAgICAgbmFtZTogb3B0aW9ucz8uZGF0YT8ubmFtZSA/PyAnQWdlbnQnLFxuICAgICAgICAgICAgLi4ub3B0aW9ucz8uZGF0YSxcbiAgICAgICAgfSxcbiAgICB9LCBwYXJlbnQpO1xufVxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgYWdlbnQgc3BhbiBhbmQgYXV0b21hdGljYWxseSBzdGFydCBhbmQgZW5kIGl0LlxuICovXG5leHBvcnQgY29uc3Qgd2l0aEFnZW50U3BhbiA9IF93aXRoU3BhbkZhY3RvcnkoY3JlYXRlQWdlbnRTcGFuKTtcbi8qKlxuICogQ3JlYXRlIGEgbmV3IGZ1bmN0aW9uIHNwYW4uIFRoZSBzcGFuIHdpbGwgbm90IGJlIHN0YXJ0ZWQgYXV0b21hdGljYWxseSwgeW91IHNob3VsZCBlaXRoZXJcbiAqIHVzZSBgd2l0aEZ1bmN0aW9uU3BhbigpYCBvciBjYWxsIGBzcGFuLnN0YXJ0KClgIGFuZCBgc3Bhbi5lbmQoKWAgbWFudWFsbHkuXG4gKlxuICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25hbCBzcGFuIGNyZWF0aW9uIG9wdGlvbnMsIGluY2x1ZGluZyBzcGFuIGRhdGEgYW5kIGlkZW50aWZpZXJzLlxuICogQHBhcmFtIHBhcmVudCAtIFRoZSBwYXJlbnQgc3BhbiBvciB0cmFjZS4gSWYgbm90IHByb3ZpZGVkLCB0aGUgY3VycmVudCB0cmFjZS9zcGFuIHdpbGwgYmUgdXNlZFxuICogYXV0b21hdGljYWxseS5cbiAqXG4gKiBAcmV0dXJucyBUaGUgbmV3bHkgY3JlYXRlZCBmdW5jdGlvbiBzcGFuLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRnVuY3Rpb25TcGFuKG9wdGlvbnMsIHBhcmVudCkge1xuICAgIHJldHVybiBnZXRHbG9iYWxUcmFjZVByb3ZpZGVyKCkuY3JlYXRlU3Bhbih7XG4gICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIHR5cGU6ICdmdW5jdGlvbicsXG4gICAgICAgICAgICBpbnB1dDogb3B0aW9ucz8uZGF0YT8uaW5wdXQgPz8gJycsXG4gICAgICAgICAgICBvdXRwdXQ6IG9wdGlvbnM/LmRhdGE/Lm91dHB1dCA/PyAnJyxcbiAgICAgICAgICAgIC4uLm9wdGlvbnM/LmRhdGEsXG4gICAgICAgIH0sXG4gICAgfSwgcGFyZW50KTtcbn1cbi8qKlxuICogQ3JlYXRlIGEgbmV3IGZ1bmN0aW9uIHNwYW4gYW5kIGF1dG9tYXRpY2FsbHkgc3RhcnQgYW5kIGVuZCBpdC5cbiAqL1xuZXhwb3J0IGNvbnN0IHdpdGhGdW5jdGlvblNwYW4gPSBfd2l0aFNwYW5GYWN0b3J5KGNyZWF0ZUZ1bmN0aW9uU3Bhbik7XG4vKipcbiAqIENyZWF0ZSBhIG5ldyBoYW5kb2ZmIHNwYW4uIFRoZSBzcGFuIHdpbGwgbm90IGJlIHN0YXJ0ZWQgYXV0b21hdGljYWxseSwgeW91IHNob3VsZCBlaXRoZXJcbiAqIHVzZSBgd2l0aEhhbmRvZmZTcGFuKClgIG9yIGNhbGwgYHNwYW4uc3RhcnQoKWAgYW5kIGBzcGFuLmVuZCgpYCBtYW51YWxseS5cbiAqXG4gKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbmFsIHNwYW4gY3JlYXRpb24gb3B0aW9ucywgaW5jbHVkaW5nIHNwYW4gZGF0YSBhbmQgaWRlbnRpZmllcnMuXG4gKiBAcGFyYW0gcGFyZW50IC0gVGhlIHBhcmVudCBzcGFuIG9yIHRyYWNlLiBJZiBub3QgcHJvdmlkZWQsIHRoZSBjdXJyZW50IHRyYWNlL3NwYW4gd2lsbCBiZSB1c2VkXG4gKiBhdXRvbWF0aWNhbGx5LlxuICpcbiAqIEByZXR1cm5zIFRoZSBuZXdseSBjcmVhdGVkIGhhbmRvZmYgc3Bhbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUhhbmRvZmZTcGFuKG9wdGlvbnMsIHBhcmVudCkge1xuICAgIHJldHVybiBnZXRHbG9iYWxUcmFjZVByb3ZpZGVyKCkuY3JlYXRlU3Bhbih7XG4gICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIGRhdGE6IHsgdHlwZTogJ2hhbmRvZmYnLCAuLi5vcHRpb25zPy5kYXRhIH0sXG4gICAgfSwgcGFyZW50KTtcbn1cbi8qKlxuICogQ3JlYXRlIGEgbmV3IGhhbmRvZmYgc3BhbiBhbmQgYXV0b21hdGljYWxseSBzdGFydCBhbmQgZW5kIGl0LlxuICovXG5leHBvcnQgY29uc3Qgd2l0aEhhbmRvZmZTcGFuID0gX3dpdGhTcGFuRmFjdG9yeShjcmVhdGVIYW5kb2ZmU3Bhbik7XG4vKipcbiAqIENyZWF0ZSBhIG5ldyBnZW5lcmF0aW9uIHNwYW4uIFRoZSBzcGFuIHdpbGwgbm90IGJlIHN0YXJ0ZWQgYXV0b21hdGljYWxseSwgeW91IHNob3VsZCBlaXRoZXJcbiAqIHVzZSBgd2l0aEdlbmVyYXRpb25TcGFuKClgIG9yIGNhbGwgYHNwYW4uc3RhcnQoKWAgYW5kIGBzcGFuLmVuZCgpYCBtYW51YWxseS5cbiAqXG4gKiBUaGlzIHNwYW4gY2FwdHVyZXMgdGhlIGRldGFpbHMgb2YgYSBtb2RlbCBnZW5lcmF0aW9uLCBpbmNsdWRpbmcgaW5wdXQvb3V0cHV0IG1lc3NhZ2VcbiAqIHNlcXVlbmNlcywgbW9kZWwgaW5mb3JtYXRpb24sIGFuZCB1c2FnZSBkYXRhLiBJZiB5b3Ugb25seSBuZWVkIHRvIGNhcHR1cmUgYSBtb2RlbCByZXNwb25zZVxuICogaWRlbnRpZmllciwgY29uc2lkZXIgdXNpbmcgYGNyZWF0ZVJlc3BvbnNlU3BhbigpYCBpbnN0ZWFkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlR2VuZXJhdGlvblNwYW4ob3B0aW9ucywgcGFyZW50KSB7XG4gICAgcmV0dXJuIGdldEdsb2JhbFRyYWNlUHJvdmlkZXIoKS5jcmVhdGVTcGFuKHtcbiAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgdHlwZTogJ2dlbmVyYXRpb24nLFxuICAgICAgICAgICAgLi4ub3B0aW9ucz8uZGF0YSxcbiAgICAgICAgfSxcbiAgICB9LCBwYXJlbnQpO1xufVxuLyoqIEF1dG9tYXRpY2FsbHkgY3JlYXRlIGEgZ2VuZXJhdGlvbiBzcGFuLCBydW4gZm4gYW5kIGNsb3NlIHRoZSBzcGFuICovXG5leHBvcnQgY29uc3Qgd2l0aEdlbmVyYXRpb25TcGFuID0gX3dpdGhTcGFuRmFjdG9yeShjcmVhdGVHZW5lcmF0aW9uU3Bhbik7XG4vKipcbiAqIENyZWF0ZSBhIG5ldyBjdXN0b20gc3Bhbi4gVGhlIHNwYW4gd2lsbCBub3QgYmUgc3RhcnRlZCBhdXRvbWF0aWNhbGx5LCB5b3Ugc2hvdWxkIGVpdGhlciB1c2VcbiAqIGB3aXRoQ3VzdG9tU3BhbigpYCBvciBjYWxsIGBzcGFuLnN0YXJ0KClgIGFuZCBgc3Bhbi5lbmQoKWAgbWFudWFsbHkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDdXN0b21TcGFuKG9wdGlvbnMsIHBhcmVudCkge1xuICAgIHJldHVybiBnZXRHbG9iYWxUcmFjZVByb3ZpZGVyKCkuY3JlYXRlU3Bhbih7XG4gICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIHR5cGU6ICdjdXN0b20nLFxuICAgICAgICAgICAgZGF0YToge30sXG4gICAgICAgICAgICAuLi5vcHRpb25zPy5kYXRhLFxuICAgICAgICB9LFxuICAgIH0sIHBhcmVudCk7XG59XG5leHBvcnQgY29uc3Qgd2l0aEN1c3RvbVNwYW4gPSBfd2l0aFNwYW5GYWN0b3J5KGNyZWF0ZUN1c3RvbVNwYW4pO1xuLyoqXG4gKiBDcmVhdGUgYSBuZXcgZ3VhcmRyYWlsIHNwYW4uIFRoZSBzcGFuIHdpbGwgbm90IGJlIHN0YXJ0ZWQgYXV0b21hdGljYWxseSwgeW91IHNob3VsZCBlaXRoZXIgdXNlXG4gKiBgd2l0aEd1YXJkcmFpbFNwYW4oKWAgb3IgY2FsbCBgc3Bhbi5zdGFydCgpYCBhbmQgYHNwYW4uZW5kKClgIG1hbnVhbGx5LlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlR3VhcmRyYWlsU3BhbihvcHRpb25zLCBwYXJlbnQpIHtcbiAgICByZXR1cm4gZ2V0R2xvYmFsVHJhY2VQcm92aWRlcigpLmNyZWF0ZVNwYW4oe1xuICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICB0eXBlOiAnZ3VhcmRyYWlsJyxcbiAgICAgICAgICAgIHRyaWdnZXJlZDogZmFsc2UsXG4gICAgICAgICAgICAuLi5vcHRpb25zPy5kYXRhLFxuICAgICAgICB9LFxuICAgIH0sIHBhcmVudCk7XG59XG5leHBvcnQgY29uc3Qgd2l0aEd1YXJkcmFpbFNwYW4gPSBfd2l0aFNwYW5GYWN0b3J5KGNyZWF0ZUd1YXJkcmFpbFNwYW4pO1xuLyoqXG4gKiBDcmVhdGUgYSBuZXcgdHJhbnNjcmlwdGlvbiBzcGFuLiBUaGUgc3BhbiB3aWxsIG5vdCBiZSBzdGFydGVkIGF1dG9tYXRpY2FsbHkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVUcmFuc2NyaXB0aW9uU3BhbihvcHRpb25zLCBwYXJlbnQpIHtcbiAgICByZXR1cm4gZ2V0R2xvYmFsVHJhY2VQcm92aWRlcigpLmNyZWF0ZVNwYW4oe1xuICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICB0eXBlOiAndHJhbnNjcmlwdGlvbicsXG4gICAgICAgICAgICAuLi5vcHRpb25zLmRhdGEsXG4gICAgICAgIH0sXG4gICAgfSwgcGFyZW50KTtcbn1cbmV4cG9ydCBjb25zdCB3aXRoVHJhbnNjcmlwdGlvblNwYW4gPSBfd2l0aFNwYW5GYWN0b3J5KGNyZWF0ZVRyYW5zY3JpcHRpb25TcGFuKTtcbi8qKlxuICogQ3JlYXRlIGEgbmV3IHNwZWVjaCBzcGFuLiBUaGUgc3BhbiB3aWxsIG5vdCBiZSBzdGFydGVkIGF1dG9tYXRpY2FsbHkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTcGVlY2hTcGFuKG9wdGlvbnMsIHBhcmVudCkge1xuICAgIHJldHVybiBnZXRHbG9iYWxUcmFjZVByb3ZpZGVyKCkuY3JlYXRlU3Bhbih7XG4gICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIHR5cGU6ICdzcGVlY2gnLFxuICAgICAgICAgICAgLi4ub3B0aW9ucy5kYXRhLFxuICAgICAgICB9LFxuICAgIH0sIHBhcmVudCk7XG59XG5leHBvcnQgY29uc3Qgd2l0aFNwZWVjaFNwYW4gPSBfd2l0aFNwYW5GYWN0b3J5KGNyZWF0ZVNwZWVjaFNwYW4pO1xuLyoqXG4gKiBDcmVhdGUgYSBuZXcgc3BlZWNoIGdyb3VwIHNwYW4uIFRoZSBzcGFuIHdpbGwgbm90IGJlIHN0YXJ0ZWQgYXV0b21hdGljYWxseS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNwZWVjaEdyb3VwU3BhbihvcHRpb25zLCBwYXJlbnQpIHtcbiAgICByZXR1cm4gZ2V0R2xvYmFsVHJhY2VQcm92aWRlcigpLmNyZWF0ZVNwYW4oe1xuICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICB0eXBlOiAnc3BlZWNoX2dyb3VwJyxcbiAgICAgICAgICAgIC4uLm9wdGlvbnM/LmRhdGEsXG4gICAgICAgIH0sXG4gICAgfSwgcGFyZW50KTtcbn1cbmV4cG9ydCBjb25zdCB3aXRoU3BlZWNoR3JvdXBTcGFuID0gX3dpdGhTcGFuRmFjdG9yeShjcmVhdGVTcGVlY2hHcm91cFNwYW4pO1xuLyoqXG4gKiBDcmVhdGUgYSBuZXcgTUNQIGxpc3QgdG9vbHMgc3Bhbi4gVGhlIHNwYW4gd2lsbCBub3QgYmUgc3RhcnRlZCBhdXRvbWF0aWNhbGx5LlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTUNQTGlzdFRvb2xzU3BhbihvcHRpb25zLCBwYXJlbnQpIHtcbiAgICByZXR1cm4gZ2V0R2xvYmFsVHJhY2VQcm92aWRlcigpLmNyZWF0ZVNwYW4oe1xuICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICB0eXBlOiAnbWNwX3Rvb2xzJyxcbiAgICAgICAgICAgIC4uLm9wdGlvbnM/LmRhdGEsXG4gICAgICAgIH0sXG4gICAgfSwgcGFyZW50KTtcbn1cbmV4cG9ydCBjb25zdCB3aXRoTUNQTGlzdFRvb2xzU3BhbiA9IF93aXRoU3BhbkZhY3RvcnkoY3JlYXRlTUNQTGlzdFRvb2xzU3Bhbik7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmVhdGVTcGFucy5tanMubWFwIiwiLyoqXG4gKiBTdHJlYW1pbmcgZXZlbnQgZnJvbSB0aGUgTExNLiBUaGVzZSBhcmUgYHJhd2AgZXZlbnRzLCBpLmUuIHRoZXkgYXJlIGRpcmVjdGx5IHBhc3NlZCB0aHJvdWdoIGZyb21cbiAqIHRoZSBMTE0uXG4gKi9cbmV4cG9ydCBjbGFzcyBSdW5SYXdNb2RlbFN0cmVhbUV2ZW50IHtcbiAgICBkYXRhO1xuICAgIC8qKlxuICAgICAqIFRoZSB0eXBlIG9mIHRoZSBldmVudC5cbiAgICAgKi9cbiAgICB0eXBlID0gJ3Jhd19tb2RlbF9zdHJlYW1fZXZlbnQnO1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBkYXRhIFRoZSByYXcgcmVzcG9uc2VzIHN0cmVhbSBldmVudHMgZnJvbSB0aGUgTExNLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGRhdGEpIHtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB9XG59XG4vKipcbiAqIFN0cmVhbWluZyBldmVudHMgdGhhdCB3cmFwIGEgYFJ1bkl0ZW1gLiBBcyB0aGUgYWdlbnQgcHJvY2Vzc2VzIHRoZSBMTE0gcmVzcG9uc2UsIGl0IHdpbGwgZ2VuZXJhdGVcbiAqIHRoZXNlIGV2ZW50cyBmcm9tIG5ldyBtZXNzYWdlcywgdG9vbCBjYWxscywgdG9vbCBvdXRwdXRzLCBoYW5kb2ZmcywgZXRjLlxuICovXG5leHBvcnQgY2xhc3MgUnVuSXRlbVN0cmVhbUV2ZW50IHtcbiAgICBuYW1lO1xuICAgIGl0ZW07XG4gICAgdHlwZSA9ICdydW5faXRlbV9zdHJlYW1fZXZlbnQnO1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBldmVudC5cbiAgICAgKiBAcGFyYW0gaXRlbSBUaGUgaXRlbSB0aGF0IHdhcyBjcmVhdGVkLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG5hbWUsIGl0ZW0pIHtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5pdGVtID0gaXRlbTtcbiAgICB9XG59XG4vKipcbiAqIEV2ZW50IHRoYXQgbm90aWZpZXMgdGhhdCB0aGVyZSBpcyBhIG5ldyBhZ2VudCBydW5uaW5nLlxuICovXG5leHBvcnQgY2xhc3MgUnVuQWdlbnRVcGRhdGVkU3RyZWFtRXZlbnQge1xuICAgIGFnZW50O1xuICAgIHR5cGUgPSAnYWdlbnRfdXBkYXRlZF9zdHJlYW1fZXZlbnQnO1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBhZ2VudCBUaGUgbmV3IGFnZW50XG4gICAgICovXG4gICAgY29uc3RydWN0b3IoYWdlbnQpIHtcbiAgICAgICAgdGhpcy5hZ2VudCA9IGFnZW50O1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV2ZW50cy5tanMubWFwIiwiaW1wb3J0IHsgY29uc3VtZUFnZW50VG9vbFJ1blJlc3VsdCwgfSBmcm9tIFwiLi9hZ2VudC5tanNcIjtcbmltcG9ydCB7IE1vZGVsQmVoYXZpb3JFcnJvciwgVG9vbENhbGxFcnJvciwgVXNlckVycm9yIH0gZnJvbSBcIi4vZXJyb3JzLm1qc1wiO1xuaW1wb3J0IHsgZ2V0VHJhbnNmZXJNZXNzYWdlIH0gZnJvbSBcIi4vaGFuZG9mZi5tanNcIjtcbmltcG9ydCB7IFJ1bkhhbmRvZmZDYWxsSXRlbSwgUnVuSGFuZG9mZk91dHB1dEl0ZW0sIFJ1bk1lc3NhZ2VPdXRwdXRJdGVtLCBSdW5SZWFzb25pbmdJdGVtLCBSdW5Ub29sQXBwcm92YWxJdGVtLCBSdW5Ub29sQ2FsbEl0ZW0sIFJ1blRvb2xDYWxsT3V0cHV0SXRlbSwgfSBmcm9tIFwiLi9pdGVtcy5tanNcIjtcbmltcG9ydCBsb2dnZXIgZnJvbSBcIi4vbG9nZ2VyLm1qc1wiO1xuaW1wb3J0IHsgZ2V0TGFzdFRleHRGcm9tT3V0cHV0TWVzc2FnZSB9IGZyb20gXCIuL3V0aWxzL21lc3NhZ2VzLm1qc1wiO1xuaW1wb3J0IHsgd2l0aEZ1bmN0aW9uU3Bhbiwgd2l0aEhhbmRvZmZTcGFuIH0gZnJvbSBcIi4vdHJhY2luZy9jcmVhdGVTcGFucy5tanNcIjtcbmltcG9ydCB7IGdldFNjaGVtYUFuZFBhcnNlckZyb21JbnB1dFR5cGUgfSBmcm9tIFwiLi91dGlscy90b29scy5tanNcIjtcbmltcG9ydCB7IHNhZmVFeGVjdXRlIH0gZnJvbSBcIi4vdXRpbHMvc2FmZUV4ZWN1dGUubWpzXCI7XG5pbXBvcnQgeyBhZGRFcnJvclRvQ3VycmVudFNwYW4gfSBmcm9tIFwiLi90cmFjaW5nL2NvbnRleHQubWpzXCI7XG5pbXBvcnQgeyBSdW5JdGVtU3RyZWFtRXZlbnQgfSBmcm9tIFwiLi9ldmVudHMubWpzXCI7XG5pbXBvcnQgeyB6IH0gZnJvbSAnem9kJztcbmltcG9ydCB7IHRvU21hcnRTdHJpbmcgfSBmcm9tIFwiLi91dGlscy9zbWFydFN0cmluZy5tanNcIjtcbmltcG9ydCB7IGlzWm9kT2JqZWN0IH0gZnJvbSBcIi4vdXRpbHMvaW5kZXgubWpzXCI7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gcHJvY2Vzc01vZGVsUmVzcG9uc2UobW9kZWxSZXNwb25zZSwgYWdlbnQsIHRvb2xzLCBoYW5kb2Zmcykge1xuICAgIGNvbnN0IGl0ZW1zID0gW107XG4gICAgY29uc3QgcnVuSGFuZG9mZnMgPSBbXTtcbiAgICBjb25zdCBydW5GdW5jdGlvbnMgPSBbXTtcbiAgICBjb25zdCBydW5Db21wdXRlckFjdGlvbnMgPSBbXTtcbiAgICBjb25zdCBydW5NQ1BBcHByb3ZhbFJlcXVlc3RzID0gW107XG4gICAgY29uc3QgdG9vbHNVc2VkID0gW107XG4gICAgY29uc3QgaGFuZG9mZk1hcCA9IG5ldyBNYXAoaGFuZG9mZnMubWFwKChoKSA9PiBbaC50b29sTmFtZSwgaF0pKTtcbiAgICBjb25zdCBmdW5jdGlvbk1hcCA9IG5ldyBNYXAodG9vbHMuZmlsdGVyKCh0KSA9PiB0LnR5cGUgPT09ICdmdW5jdGlvbicpLm1hcCgodCkgPT4gW3QubmFtZSwgdF0pKTtcbiAgICBjb25zdCBjb21wdXRlclRvb2wgPSB0b29scy5maW5kKCh0KSA9PiB0LnR5cGUgPT09ICdjb21wdXRlcicpO1xuICAgIGNvbnN0IG1jcFRvb2xNYXAgPSBuZXcgTWFwKHRvb2xzXG4gICAgICAgIC5maWx0ZXIoKHQpID0+IHQudHlwZSA9PT0gJ2hvc3RlZF90b29sJyAmJiB0LnByb3ZpZGVyRGF0YT8udHlwZSA9PT0gJ21jcCcpXG4gICAgICAgIC5tYXAoKHQpID0+IHQpXG4gICAgICAgIC5tYXAoKHQpID0+IFt0LnByb3ZpZGVyRGF0YS5zZXJ2ZXJfbGFiZWwsIHRdKSk7XG4gICAgZm9yIChjb25zdCBvdXRwdXQgb2YgbW9kZWxSZXNwb25zZS5vdXRwdXQpIHtcbiAgICAgICAgaWYgKG91dHB1dC50eXBlID09PSAnbWVzc2FnZScpIHtcbiAgICAgICAgICAgIGlmIChvdXRwdXQucm9sZSA9PT0gJ2Fzc2lzdGFudCcpIHtcbiAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKG5ldyBSdW5NZXNzYWdlT3V0cHV0SXRlbShvdXRwdXQsIGFnZW50KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAob3V0cHV0LnR5cGUgPT09ICdob3N0ZWRfdG9vbF9jYWxsJykge1xuICAgICAgICAgICAgaXRlbXMucHVzaChuZXcgUnVuVG9vbENhbGxJdGVtKG91dHB1dCwgYWdlbnQpKTtcbiAgICAgICAgICAgIGNvbnN0IHRvb2xOYW1lID0gb3V0cHV0Lm5hbWU7XG4gICAgICAgICAgICB0b29sc1VzZWQucHVzaCh0b29sTmFtZSk7XG4gICAgICAgICAgICBpZiAob3V0cHV0LnByb3ZpZGVyRGF0YT8udHlwZSA9PT0gJ21jcF9hcHByb3ZhbF9yZXF1ZXN0JyB8fFxuICAgICAgICAgICAgICAgIG91dHB1dC5uYW1lID09PSAnbWNwX2FwcHJvdmFsX3JlcXVlc3QnKSB7XG4gICAgICAgICAgICAgICAgLy8gSG9zdGVkIHJlbW90ZSBNQ1Agc2VydmVyJ3MgYXBwcm92YWwgcHJvY2Vzc1xuICAgICAgICAgICAgICAgIGNvbnN0IHByb3ZpZGVyRGF0YSA9IG91dHB1dC5wcm92aWRlckRhdGE7XG4gICAgICAgICAgICAgICAgY29uc3QgbWNwU2VydmVyTGFiZWwgPSBwcm92aWRlckRhdGEuc2VydmVyX2xhYmVsO1xuICAgICAgICAgICAgICAgIGNvbnN0IG1jcFNlcnZlclRvb2wgPSBtY3BUb29sTWFwLmdldChtY3BTZXJ2ZXJMYWJlbCk7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtY3BTZXJ2ZXJUb29sID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gYE1DUCBzZXJ2ZXIgKCR7bWNwU2VydmVyTGFiZWx9KSBub3QgZm91bmQgaW4gQWdlbnQgKCR7YWdlbnQubmFtZX0pYDtcbiAgICAgICAgICAgICAgICAgICAgYWRkRXJyb3JUb0N1cnJlbnRTcGFuKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7IG1jcF9zZXJ2ZXJfbGFiZWw6IG1jcFNlcnZlckxhYmVsIH0sXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgTW9kZWxCZWhhdmlvckVycm9yKG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBEbyB0aGlzIGFwcHJvdmFsIGxhdGVyOlxuICAgICAgICAgICAgICAgIC8vIFdlIHN1cHBvcnQgYm90aCBvbkFwcHJvdmFsIGNhbGxiYWNrIChsaWtlIHRoZSBQeXRob24gU0RLIGRvZXMpIGFuZCBISVRMIHBhdHRlcm5zLlxuICAgICAgICAgICAgICAgIGNvbnN0IGFwcHJvdmFsSXRlbSA9IG5ldyBSdW5Ub29sQXBwcm92YWxJdGVtKHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2hvc3RlZF90b29sX2NhbGwnLFxuICAgICAgICAgICAgICAgICAgICAvLyBXZSBtdXN0IHVzZSB0aGlzIG5hbWUgdG8gYWxpZ24gd2l0aCB0aGUgbmFtZSBzZW50IGZyb20gdGhlIHNlcnZlcnNcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogcHJvdmlkZXJEYXRhLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBwcm92aWRlckRhdGEuaWQsXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1czogJ2luX3Byb2dyZXNzJyxcbiAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXJEYXRhLFxuICAgICAgICAgICAgICAgIH0sIGFnZW50KTtcbiAgICAgICAgICAgICAgICBydW5NQ1BBcHByb3ZhbFJlcXVlc3RzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0SXRlbTogYXBwcm92YWxJdGVtLFxuICAgICAgICAgICAgICAgICAgICBtY3BUb29sOiBtY3BTZXJ2ZXJUb29sLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmICghbWNwU2VydmVyVG9vbC5wcm92aWRlckRhdGEub25fYXBwcm92YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gV2hlbiBvbkFwcHJvdmFsIGZ1bmN0aW9uIGV4aXN0cywgaXQgY29uZmlybXMgdGhlIGFwcHJvdmFsIHJpZ2h0IGFmdGVyIHRoaXMuXG4gICAgICAgICAgICAgICAgICAgIC8vIFRodXMsIHRoaXMgYXBwcm92YWwgaXRlbSBtdXN0IGJlIGFwcGVuZGVkIG9ubHkgZm9yIHRoZSBuZXh0IHR1cm4gaW50ZXJydXB0aW9uIHBhdHRlcm5zLlxuICAgICAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKGFwcHJvdmFsSXRlbSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG91dHB1dC50eXBlID09PSAncmVhc29uaW5nJykge1xuICAgICAgICAgICAgaXRlbXMucHVzaChuZXcgUnVuUmVhc29uaW5nSXRlbShvdXRwdXQsIGFnZW50KSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAob3V0cHV0LnR5cGUgPT09ICdjb21wdXRlcl9jYWxsJykge1xuICAgICAgICAgICAgaXRlbXMucHVzaChuZXcgUnVuVG9vbENhbGxJdGVtKG91dHB1dCwgYWdlbnQpKTtcbiAgICAgICAgICAgIHRvb2xzVXNlZC5wdXNoKCdjb21wdXRlcl91c2UnKTtcbiAgICAgICAgICAgIGlmICghY29tcHV0ZXJUb29sKSB7XG4gICAgICAgICAgICAgICAgYWRkRXJyb3JUb0N1cnJlbnRTcGFuKHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ01vZGVsIHByb2R1Y2VkIGNvbXB1dGVyIGFjdGlvbiB3aXRob3V0IGEgY29tcHV0ZXIgdG9vbC4nLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZ2VudF9uYW1lOiBhZ2VudC5uYW1lLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBNb2RlbEJlaGF2aW9yRXJyb3IoJ01vZGVsIHByb2R1Y2VkIGNvbXB1dGVyIGFjdGlvbiB3aXRob3V0IGEgY29tcHV0ZXIgdG9vbC4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJ1bkNvbXB1dGVyQWN0aW9ucy5wdXNoKHtcbiAgICAgICAgICAgICAgICB0b29sQ2FsbDogb3V0cHV0LFxuICAgICAgICAgICAgICAgIGNvbXB1dGVyOiBjb21wdXRlclRvb2wsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3V0cHV0LnR5cGUgIT09ICdmdW5jdGlvbl9jYWxsJykge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdG9vbHNVc2VkLnB1c2gob3V0cHV0Lm5hbWUpO1xuICAgICAgICBjb25zdCBoYW5kb2ZmID0gaGFuZG9mZk1hcC5nZXQob3V0cHV0Lm5hbWUpO1xuICAgICAgICBpZiAoaGFuZG9mZikge1xuICAgICAgICAgICAgaXRlbXMucHVzaChuZXcgUnVuSGFuZG9mZkNhbGxJdGVtKG91dHB1dCwgYWdlbnQpKTtcbiAgICAgICAgICAgIHJ1bkhhbmRvZmZzLnB1c2goe1xuICAgICAgICAgICAgICAgIHRvb2xDYWxsOiBvdXRwdXQsXG4gICAgICAgICAgICAgICAgaGFuZG9mZjogaGFuZG9mZixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgZnVuY3Rpb25Ub29sID0gZnVuY3Rpb25NYXAuZ2V0KG91dHB1dC5uYW1lKTtcbiAgICAgICAgICAgIGlmICghZnVuY3Rpb25Ub29sKSB7XG4gICAgICAgICAgICAgICAgYWRkRXJyb3JUb0N1cnJlbnRTcGFuKHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogYFRvb2wgJHtvdXRwdXQubmFtZX0gbm90IGZvdW5kIGluIGFnZW50ICR7YWdlbnQubmFtZX0uYCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9vbF9uYW1lOiBvdXRwdXQubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFnZW50X25hbWU6IGFnZW50Lm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IE1vZGVsQmVoYXZpb3JFcnJvcihgVG9vbCAke291dHB1dC5uYW1lfSBub3QgZm91bmQgaW4gYWdlbnQgJHthZ2VudC5uYW1lfS5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGl0ZW1zLnB1c2gobmV3IFJ1blRvb2xDYWxsSXRlbShvdXRwdXQsIGFnZW50KSk7XG4gICAgICAgICAgICBydW5GdW5jdGlvbnMucHVzaCh7XG4gICAgICAgICAgICAgICAgdG9vbENhbGw6IG91dHB1dCxcbiAgICAgICAgICAgICAgICB0b29sOiBmdW5jdGlvblRvb2wsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBuZXdJdGVtczogaXRlbXMsXG4gICAgICAgIGhhbmRvZmZzOiBydW5IYW5kb2ZmcyxcbiAgICAgICAgZnVuY3Rpb25zOiBydW5GdW5jdGlvbnMsXG4gICAgICAgIGNvbXB1dGVyQWN0aW9uczogcnVuQ29tcHV0ZXJBY3Rpb25zLFxuICAgICAgICBtY3BBcHByb3ZhbFJlcXVlc3RzOiBydW5NQ1BBcHByb3ZhbFJlcXVlc3RzLFxuICAgICAgICB0b29sc1VzZWQ6IHRvb2xzVXNlZCxcbiAgICAgICAgaGFzVG9vbHNPckFwcHJvdmFsc1RvUnVuKCkge1xuICAgICAgICAgICAgcmV0dXJuIChydW5IYW5kb2Zmcy5sZW5ndGggPiAwIHx8XG4gICAgICAgICAgICAgICAgcnVuRnVuY3Rpb25zLmxlbmd0aCA+IDAgfHxcbiAgICAgICAgICAgICAgICBydW5NQ1BBcHByb3ZhbFJlcXVlc3RzLmxlbmd0aCA+IDAgfHxcbiAgICAgICAgICAgICAgICBydW5Db21wdXRlckFjdGlvbnMubGVuZ3RoID4gMCk7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbmV4cG9ydCBjb25zdCBuZXh0U3RlcFNjaGVtYSA9IHouZGlzY3JpbWluYXRlZFVuaW9uKCd0eXBlJywgW1xuICAgIHoub2JqZWN0KHtcbiAgICAgICAgdHlwZTogei5saXRlcmFsKCduZXh0X3N0ZXBfaGFuZG9mZicpLFxuICAgICAgICBuZXdBZ2VudDogei5hbnkoKSxcbiAgICB9KSxcbiAgICB6Lm9iamVjdCh7XG4gICAgICAgIHR5cGU6IHoubGl0ZXJhbCgnbmV4dF9zdGVwX2ZpbmFsX291dHB1dCcpLFxuICAgICAgICBvdXRwdXQ6IHouc3RyaW5nKCksXG4gICAgfSksXG4gICAgei5vYmplY3Qoe1xuICAgICAgICB0eXBlOiB6LmxpdGVyYWwoJ25leHRfc3RlcF9ydW5fYWdhaW4nKSxcbiAgICB9KSxcbiAgICB6Lm9iamVjdCh7XG4gICAgICAgIHR5cGU6IHoubGl0ZXJhbCgnbmV4dF9zdGVwX2ludGVycnVwdGlvbicpLFxuICAgICAgICBkYXRhOiB6LnJlY29yZCh6LnN0cmluZygpLCB6LmFueSgpKSxcbiAgICB9KSxcbl0pO1xuY2xhc3MgU2luZ2xlU3RlcFJlc3VsdCB7XG4gICAgb3JpZ2luYWxJbnB1dDtcbiAgICBtb2RlbFJlc3BvbnNlO1xuICAgIHByZVN0ZXBJdGVtcztcbiAgICBuZXdTdGVwSXRlbXM7XG4gICAgbmV4dFN0ZXA7XG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqXG4gICAgICogVGhlIGlucHV0IGl0ZW1zIGkuZS4gdGhlIGl0ZW1zIGJlZm9yZSBydW4oKSB3YXMgY2FsbGVkLiBNYXkgYmUgbXV0ZWQgYnkgaGFuZG9mZiBpbnB1dCBmaWx0ZXJzXG4gICAgICovXG4gICAgb3JpZ2luYWxJbnB1dCwgXG4gICAgLyoqXG4gICAgICogVGhlIG1vZGVsIHJlc3BvbnNlIGZvciB0aGUgY3VycmVudCBzdGVwXG4gICAgICovXG4gICAgbW9kZWxSZXNwb25zZSwgXG4gICAgLyoqXG4gICAgICogVGhlIGl0ZW1zIGJlZm9yZSB0aGUgY3VycmVudCBzdGVwIHdhcyBleGVjdXRlZFxuICAgICAqL1xuICAgIHByZVN0ZXBJdGVtcywgXG4gICAgLyoqXG4gICAgICogVGhlIGl0ZW1zIGFmdGVyIHRoZSBjdXJyZW50IHN0ZXAgd2FzIGV4ZWN1dGVkXG4gICAgICovXG4gICAgbmV3U3RlcEl0ZW1zLCBcbiAgICAvKipcbiAgICAgKiBUaGUgbmV4dCBzdGVwIHRvIGV4ZWN1dGVcbiAgICAgKi9cbiAgICBuZXh0U3RlcCkge1xuICAgICAgICB0aGlzLm9yaWdpbmFsSW5wdXQgPSBvcmlnaW5hbElucHV0O1xuICAgICAgICB0aGlzLm1vZGVsUmVzcG9uc2UgPSBtb2RlbFJlc3BvbnNlO1xuICAgICAgICB0aGlzLnByZVN0ZXBJdGVtcyA9IHByZVN0ZXBJdGVtcztcbiAgICAgICAgdGhpcy5uZXdTdGVwSXRlbXMgPSBuZXdTdGVwSXRlbXM7XG4gICAgICAgIHRoaXMubmV4dFN0ZXAgPSBuZXh0U3RlcDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIGl0ZW1zIGdlbmVyYXRlZCBkdXJpbmcgdGhlIGFnZW50IHJ1biAoaS5lLiBldmVyeXRoaW5nIGdlbmVyYXRlZCBhZnRlciBvcmlnaW5hbElucHV0KVxuICAgICAqL1xuICAgIGdldCBnZW5lcmF0ZWRJdGVtcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJlU3RlcEl0ZW1zLmNvbmNhdCh0aGlzLm5ld1N0ZXBJdGVtcyk7XG4gICAgfVxufVxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1heWJlUmVzZXRUb29sQ2hvaWNlKGFnZW50LCB0b29sVXNlVHJhY2tlciwgbW9kZWxTZXR0aW5ncykge1xuICAgIGlmIChhZ2VudC5yZXNldFRvb2xDaG9pY2UgJiYgdG9vbFVzZVRyYWNrZXIuaGFzVXNlZFRvb2xzKGFnZW50KSkge1xuICAgICAgICByZXR1cm4geyAuLi5tb2RlbFNldHRpbmdzLCB0b29sQ2hvaWNlOiB1bmRlZmluZWQgfTtcbiAgICB9XG4gICAgcmV0dXJuIG1vZGVsU2V0dGluZ3M7XG59XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZXhlY3V0ZUludGVycnVwdGVkVG9vbHNBbmRTaWRlRWZmZWN0cyhhZ2VudCwgb3JpZ2luYWxJbnB1dCwgb3JpZ2luYWxQcmVTdGVwSXRlbXMsIG5ld1Jlc3BvbnNlLCBwcm9jZXNzZWRSZXNwb25zZSwgcnVubmVyLCBzdGF0ZSkge1xuICAgIC8vIGNhbGxfaWRzIGZvciBmdW5jdGlvbiB0b29sc1xuICAgIGNvbnN0IGZ1bmN0aW9uQ2FsbElkcyA9IG9yaWdpbmFsUHJlU3RlcEl0ZW1zXG4gICAgICAgIC5maWx0ZXIoKGl0ZW0pID0+IGl0ZW0gaW5zdGFuY2VvZiBSdW5Ub29sQXBwcm92YWxJdGVtICYmXG4gICAgICAgICdjYWxsSWQnIGluIGl0ZW0ucmF3SXRlbSAmJlxuICAgICAgICBpdGVtLnJhd0l0ZW0udHlwZSA9PT0gJ2Z1bmN0aW9uX2NhbGwnKVxuICAgICAgICAubWFwKChpdGVtKSA9PiBpdGVtLnJhd0l0ZW0uY2FsbElkKTtcbiAgICAvLyBSdW4gZnVuY3Rpb24gdG9vbHMgdGhhdCByZXF1aXJlIGFwcHJvdmFsIGFmdGVyIHRoZXkgZ2V0IHRoZWlyIGFwcHJvdmFsIHJlc3VsdHNcbiAgICBjb25zdCBmdW5jdGlvblRvb2xSdW5zID0gcHJvY2Vzc2VkUmVzcG9uc2UuZnVuY3Rpb25zLmZpbHRlcigocnVuKSA9PiB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbkNhbGxJZHMuaW5jbHVkZXMocnVuLnRvb2xDYWxsLmNhbGxJZCk7XG4gICAgfSk7XG4gICAgY29uc3QgZnVuY3Rpb25SZXN1bHRzID0gYXdhaXQgZXhlY3V0ZUZ1bmN0aW9uVG9vbENhbGxzKGFnZW50LCBmdW5jdGlvblRvb2xSdW5zLCBydW5uZXIsIHN0YXRlKTtcbiAgICAvLyBDcmVhdGUgdGhlIGluaXRpYWwgc2V0IG9mIHRoZSBvdXRwdXQgaXRlbXNcbiAgICBjb25zdCBuZXdJdGVtcyA9IGZ1bmN0aW9uUmVzdWx0cy5tYXAoKHIpID0+IHIucnVuSXRlbSk7XG4gICAgLy8gUnVuIE1DUCB0b29scyB0aGF0IHJlcXVpcmUgYXBwcm92YWwgYWZ0ZXIgdGhleSBnZXQgdGhlaXIgYXBwcm92YWwgcmVzdWx0c1xuICAgIGNvbnN0IG1jcEFwcHJvdmFsUnVucyA9IHByb2Nlc3NlZFJlc3BvbnNlLm1jcEFwcHJvdmFsUmVxdWVzdHMuZmlsdGVyKChydW4pID0+IHtcbiAgICAgICAgcmV0dXJuIChydW4ucmVxdWVzdEl0ZW0udHlwZSA9PT0gJ3Rvb2xfYXBwcm92YWxfaXRlbScgJiZcbiAgICAgICAgICAgIHJ1bi5yZXF1ZXN0SXRlbS5yYXdJdGVtLnR5cGUgPT09ICdob3N0ZWRfdG9vbF9jYWxsJyAmJlxuICAgICAgICAgICAgcnVuLnJlcXVlc3RJdGVtLnJhd0l0ZW0ucHJvdmlkZXJEYXRhPy50eXBlID09PSAnbWNwX2FwcHJvdmFsX3JlcXVlc3QnKTtcbiAgICB9KTtcbiAgICBmb3IgKGNvbnN0IHJ1biBvZiBtY3BBcHByb3ZhbFJ1bnMpIHtcbiAgICAgICAgLy8gdGhlIGFwcHJvdmFsX3JlcXVlc3RfaWQgXCJtY3ByXzEyMy4uLlwiXG4gICAgICAgIGNvbnN0IGFwcHJvdmFsUmVxdWVzdElkID0gcnVuLnJlcXVlc3RJdGVtLnJhd0l0ZW0uaWQ7XG4gICAgICAgIGNvbnN0IGFwcHJvdmVkID0gc3RhdGUuX2NvbnRleHQuaXNUb29sQXBwcm92ZWQoe1xuICAgICAgICAgICAgLy8gU2luY2UgdGhpcyBpdGVtIG5hbWUgbXVzdCBiZSB0aGUgc2FtZSB3aXRoIHRoZSBvbmUgc2VudCBmcm9tIFJlc3BvbnNlcyBBUEkgc2VydmVyXG4gICAgICAgICAgICB0b29sTmFtZTogcnVuLnJlcXVlc3RJdGVtLnJhd0l0ZW0ubmFtZSxcbiAgICAgICAgICAgIGNhbGxJZDogYXBwcm92YWxSZXF1ZXN0SWQsXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAodHlwZW9mIGFwcHJvdmVkICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgY29uc3QgcHJvdmlkZXJEYXRhID0ge1xuICAgICAgICAgICAgICAgIGFwcHJvdmU6IGFwcHJvdmVkLFxuICAgICAgICAgICAgICAgIGFwcHJvdmFsX3JlcXVlc3RfaWQ6IGFwcHJvdmFsUmVxdWVzdElkLFxuICAgICAgICAgICAgICAgIHJlYXNvbjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8vIFRlbGwgUmVzcG9uc2VzIEFQSSBzZXJ2ZXIgdGhlIGFwcHJvdmFsIHJlc3VsdCBpbiB0aGUgbmV4dCB0dXJuXG4gICAgICAgICAgICBuZXdJdGVtcy5wdXNoKG5ldyBSdW5Ub29sQ2FsbEl0ZW0oe1xuICAgICAgICAgICAgICAgIHR5cGU6ICdob3N0ZWRfdG9vbF9jYWxsJyxcbiAgICAgICAgICAgICAgICBuYW1lOiAnbWNwX2FwcHJvdmFsX3Jlc3BvbnNlJyxcbiAgICAgICAgICAgICAgICBwcm92aWRlckRhdGEsXG4gICAgICAgICAgICB9LCBhZ2VudCkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGNoZWNrVG9vbE91dHB1dCA9IGF3YWl0IGNoZWNrRm9yRmluYWxPdXRwdXRGcm9tVG9vbHMoYWdlbnQsIGZ1bmN0aW9uUmVzdWx0cywgc3RhdGUpO1xuICAgIC8vIEV4Y2x1ZGUgdGhlIHRvb2wgYXBwcm92YWwgaXRlbXMsIHdoaWNoIHNob3VsZCBub3QgYmUgc2VudCB0byBSZXNwb25zZXMgQVBJLFxuICAgIC8vIGZyb20gdGhlIFNpbmdsZVN0ZXBSZXN1bHQncyBwcmVTdGVwSXRlbXNcbiAgICBjb25zdCBwcmVTdGVwSXRlbXMgPSBvcmlnaW5hbFByZVN0ZXBJdGVtcy5maWx0ZXIoKGl0ZW0pID0+IHtcbiAgICAgICAgcmV0dXJuICEoaXRlbSBpbnN0YW5jZW9mIFJ1blRvb2xBcHByb3ZhbEl0ZW0pO1xuICAgIH0pO1xuICAgIGlmIChjaGVja1Rvb2xPdXRwdXQuaXNGaW5hbE91dHB1dCkge1xuICAgICAgICBydW5uZXIuZW1pdCgnYWdlbnRfZW5kJywgc3RhdGUuX2NvbnRleHQsIGFnZW50LCBjaGVja1Rvb2xPdXRwdXQuZmluYWxPdXRwdXQpO1xuICAgICAgICBhZ2VudC5lbWl0KCdhZ2VudF9lbmQnLCBzdGF0ZS5fY29udGV4dCwgY2hlY2tUb29sT3V0cHV0LmZpbmFsT3V0cHV0KTtcbiAgICAgICAgcmV0dXJuIG5ldyBTaW5nbGVTdGVwUmVzdWx0KG9yaWdpbmFsSW5wdXQsIG5ld1Jlc3BvbnNlLCBwcmVTdGVwSXRlbXMsIG5ld0l0ZW1zLCB7XG4gICAgICAgICAgICB0eXBlOiAnbmV4dF9zdGVwX2ZpbmFsX291dHB1dCcsXG4gICAgICAgICAgICBvdXRwdXQ6IGNoZWNrVG9vbE91dHB1dC5maW5hbE91dHB1dCxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGNoZWNrVG9vbE91dHB1dC5pc0ludGVycnVwdGVkKSB7XG4gICAgICAgIHJldHVybiBuZXcgU2luZ2xlU3RlcFJlc3VsdChvcmlnaW5hbElucHV0LCBuZXdSZXNwb25zZSwgcHJlU3RlcEl0ZW1zLCBuZXdJdGVtcywge1xuICAgICAgICAgICAgdHlwZTogJ25leHRfc3RlcF9pbnRlcnJ1cHRpb24nLFxuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgIGludGVycnVwdGlvbnM6IGNoZWNrVG9vbE91dHB1dC5pbnRlcnJ1cHRpb25zLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8vIHdlIG9ubHkgcmFuIG5ldyB0b29scyBhbmQgc2lkZSBlZmZlY3RzLiBXZSBuZWVkIHRvIHJ1biB0aGUgcmVzdCBvZiB0aGUgYWdlbnRcbiAgICByZXR1cm4gbmV3IFNpbmdsZVN0ZXBSZXN1bHQob3JpZ2luYWxJbnB1dCwgbmV3UmVzcG9uc2UsIHByZVN0ZXBJdGVtcywgbmV3SXRlbXMsIHsgdHlwZTogJ25leHRfc3RlcF9ydW5fYWdhaW4nIH0pO1xufVxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGV4ZWN1dGVUb29sc0FuZFNpZGVFZmZlY3RzKGFnZW50LCBvcmlnaW5hbElucHV0LCBvcmlnaW5hbFByZVN0ZXBJdGVtcywgbmV3UmVzcG9uc2UsIHByb2Nlc3NlZFJlc3BvbnNlLCBydW5uZXIsIHN0YXRlKSB7XG4gICAgY29uc3QgcHJlU3RlcEl0ZW1zID0gb3JpZ2luYWxQcmVTdGVwSXRlbXM7XG4gICAgbGV0IG5ld0l0ZW1zID0gcHJvY2Vzc2VkUmVzcG9uc2UubmV3SXRlbXM7XG4gICAgY29uc3QgW2Z1bmN0aW9uUmVzdWx0cywgY29tcHV0ZXJSZXN1bHRzXSA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgICAgZXhlY3V0ZUZ1bmN0aW9uVG9vbENhbGxzKGFnZW50LCBwcm9jZXNzZWRSZXNwb25zZS5mdW5jdGlvbnMsIHJ1bm5lciwgc3RhdGUpLFxuICAgICAgICBleGVjdXRlQ29tcHV0ZXJBY3Rpb25zKGFnZW50LCBwcm9jZXNzZWRSZXNwb25zZS5jb21wdXRlckFjdGlvbnMsIHJ1bm5lciwgc3RhdGUuX2NvbnRleHQpLFxuICAgIF0pO1xuICAgIG5ld0l0ZW1zID0gbmV3SXRlbXMuY29uY2F0KGZ1bmN0aW9uUmVzdWx0cy5tYXAoKHIpID0+IHIucnVuSXRlbSkpO1xuICAgIG5ld0l0ZW1zID0gbmV3SXRlbXMuY29uY2F0KGNvbXB1dGVyUmVzdWx0cyk7XG4gICAgLy8gcnVuIGhvc3RlZCBNQ1AgYXBwcm92YWwgcmVxdWVzdHNcbiAgICBpZiAocHJvY2Vzc2VkUmVzcG9uc2UubWNwQXBwcm92YWxSZXF1ZXN0cy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGZvciAoY29uc3QgYXBwcm92YWxSZXF1ZXN0IG9mIHByb2Nlc3NlZFJlc3BvbnNlLm1jcEFwcHJvdmFsUmVxdWVzdHMpIHtcbiAgICAgICAgICAgIGNvbnN0IHRvb2xEYXRhID0gYXBwcm92YWxSZXF1ZXN0Lm1jcFRvb2xcbiAgICAgICAgICAgICAgICAucHJvdmlkZXJEYXRhO1xuICAgICAgICAgICAgY29uc3QgcmVxdWVzdERhdGEgPSBhcHByb3ZhbFJlcXVlc3QucmVxdWVzdEl0ZW0ucmF3SXRlbVxuICAgICAgICAgICAgICAgIC5wcm92aWRlckRhdGE7XG4gICAgICAgICAgICBpZiAodG9vbERhdGEub25fYXBwcm92YWwpIHtcbiAgICAgICAgICAgICAgICAvLyBzeW5jaHJvbm91c2x5IGhhbmRsZSB0aGUgYXBwcm92YWwgcHJvY2VzcyBoZXJlXG4gICAgICAgICAgICAgICAgY29uc3QgYXBwcm92YWxSZXN1bHQgPSBhd2FpdCB0b29sRGF0YS5vbl9hcHByb3ZhbChzdGF0ZS5fY29udGV4dCwgYXBwcm92YWxSZXF1ZXN0LnJlcXVlc3RJdGVtKTtcbiAgICAgICAgICAgICAgICBjb25zdCBhcHByb3ZhbFJlc3BvbnNlRGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgYXBwcm92ZTogYXBwcm92YWxSZXN1bHQuYXBwcm92ZSxcbiAgICAgICAgICAgICAgICAgICAgYXBwcm92YWxfcmVxdWVzdF9pZDogcmVxdWVzdERhdGEuaWQsXG4gICAgICAgICAgICAgICAgICAgIHJlYXNvbjogYXBwcm92YWxSZXN1bHQucmVhc29uLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgbmV3SXRlbXMucHVzaChuZXcgUnVuVG9vbENhbGxJdGVtKHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2hvc3RlZF90b29sX2NhbGwnLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnbWNwX2FwcHJvdmFsX3Jlc3BvbnNlJyxcbiAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXJEYXRhOiBhcHByb3ZhbFJlc3BvbnNlRGF0YSxcbiAgICAgICAgICAgICAgICB9LCBhZ2VudCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gcmVjZWl2ZSBhIHVzZXIncyBhcHByb3ZhbCBvbiB0aGUgbmV4dCB0dXJuXG4gICAgICAgICAgICAgICAgbmV3SXRlbXMucHVzaChhcHByb3ZhbFJlcXVlc3QucmVxdWVzdEl0ZW0pO1xuICAgICAgICAgICAgICAgIGNvbnN0IGFwcHJvdmFsSXRlbSA9IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2hvc3RlZF9tY3BfdG9vbF9hcHByb3ZhbCcsXG4gICAgICAgICAgICAgICAgICAgIHRvb2w6IGFwcHJvdmFsUmVxdWVzdC5tY3BUb29sLFxuICAgICAgICAgICAgICAgICAgICBydW5JdGVtOiBuZXcgUnVuVG9vbEFwcHJvdmFsSXRlbSh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnaG9zdGVkX3Rvb2xfY2FsbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiByZXF1ZXN0RGF0YS5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IHJlcXVlc3REYXRhLmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgYXJndW1lbnRzOiByZXF1ZXN0RGF0YS5hcmd1bWVudHMsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXM6ICdpbl9wcm9ncmVzcycsXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlckRhdGE6IHJlcXVlc3REYXRhLFxuICAgICAgICAgICAgICAgICAgICB9LCBhZ2VudCksXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBmdW5jdGlvblJlc3VsdHMucHVzaChhcHByb3ZhbEl0ZW0pO1xuICAgICAgICAgICAgICAgIC8vIG5ld0l0ZW1zLnB1c2goYXBwcm92YWxJdGVtLnJ1bkl0ZW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vIHByb2Nlc3MgaGFuZG9mZnNcbiAgICBpZiAocHJvY2Vzc2VkUmVzcG9uc2UuaGFuZG9mZnMubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm4gYXdhaXQgZXhlY3V0ZUhhbmRvZmZDYWxscyhhZ2VudCwgb3JpZ2luYWxJbnB1dCwgcHJlU3RlcEl0ZW1zLCBuZXdJdGVtcywgbmV3UmVzcG9uc2UsIHByb2Nlc3NlZFJlc3BvbnNlLmhhbmRvZmZzLCBydW5uZXIsIHN0YXRlLl9jb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgY2hlY2tUb29sT3V0cHV0ID0gYXdhaXQgY2hlY2tGb3JGaW5hbE91dHB1dEZyb21Ub29scyhhZ2VudCwgZnVuY3Rpb25SZXN1bHRzLCBzdGF0ZSk7XG4gICAgaWYgKGNoZWNrVG9vbE91dHB1dC5pc0ZpbmFsT3V0cHV0KSB7XG4gICAgICAgIHJ1bm5lci5lbWl0KCdhZ2VudF9lbmQnLCBzdGF0ZS5fY29udGV4dCwgYWdlbnQsIGNoZWNrVG9vbE91dHB1dC5maW5hbE91dHB1dCk7XG4gICAgICAgIGFnZW50LmVtaXQoJ2FnZW50X2VuZCcsIHN0YXRlLl9jb250ZXh0LCBjaGVja1Rvb2xPdXRwdXQuZmluYWxPdXRwdXQpO1xuICAgICAgICByZXR1cm4gbmV3IFNpbmdsZVN0ZXBSZXN1bHQob3JpZ2luYWxJbnB1dCwgbmV3UmVzcG9uc2UsIHByZVN0ZXBJdGVtcywgbmV3SXRlbXMsIHtcbiAgICAgICAgICAgIHR5cGU6ICduZXh0X3N0ZXBfZmluYWxfb3V0cHV0JyxcbiAgICAgICAgICAgIG91dHB1dDogY2hlY2tUb29sT3V0cHV0LmZpbmFsT3V0cHV0LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSBpZiAoY2hlY2tUb29sT3V0cHV0LmlzSW50ZXJydXB0ZWQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTaW5nbGVTdGVwUmVzdWx0KG9yaWdpbmFsSW5wdXQsIG5ld1Jlc3BvbnNlLCBwcmVTdGVwSXRlbXMsIG5ld0l0ZW1zLCB7XG4gICAgICAgICAgICB0eXBlOiAnbmV4dF9zdGVwX2ludGVycnVwdGlvbicsXG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgaW50ZXJydXB0aW9uczogY2hlY2tUb29sT3V0cHV0LmludGVycnVwdGlvbnMsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLy8gSWYgdGhlIG1vZGVsIGlzc3VlZCBhbnkgdG9vbCBjYWxscyBvciBoYW5kb2ZmcyBpbiB0aGlzIHR1cm4sXG4gICAgLy8gd2UgbXVzdCBOT1QgdHJlYXQgYW55IGFzc2lzdGFudCBtZXNzYWdlIGluIHRoZSBzYW1lIHR1cm4gYXMgdGhlIGZpbmFsIG91dHB1dC5cbiAgICAvLyBXZSBzaG91bGQgcnVuIHRoZSBsb29wIGFnYWluIHNvIHRoZSBtb2RlbCBjYW4gc2VlIHRoZSB0b29sIHJlc3VsdHMgYW5kIHJlc3BvbmQuXG4gICAgY29uc3QgaGFkVG9vbENhbGxzT3JBY3Rpb25zID0gKHByb2Nlc3NlZFJlc3BvbnNlLmZ1bmN0aW9ucz8ubGVuZ3RoID8/IDApID4gMCB8fFxuICAgICAgICAocHJvY2Vzc2VkUmVzcG9uc2UuY29tcHV0ZXJBY3Rpb25zPy5sZW5ndGggPz8gMCkgPiAwIHx8XG4gICAgICAgIChwcm9jZXNzZWRSZXNwb25zZS5tY3BBcHByb3ZhbFJlcXVlc3RzPy5sZW5ndGggPz8gMCkgPiAwIHx8XG4gICAgICAgIChwcm9jZXNzZWRSZXNwb25zZS5oYW5kb2Zmcz8ubGVuZ3RoID8/IDApID4gMDtcbiAgICBpZiAoaGFkVG9vbENhbGxzT3JBY3Rpb25zKSB7XG4gICAgICAgIHJldHVybiBuZXcgU2luZ2xlU3RlcFJlc3VsdChvcmlnaW5hbElucHV0LCBuZXdSZXNwb25zZSwgcHJlU3RlcEl0ZW1zLCBuZXdJdGVtcywgeyB0eXBlOiAnbmV4dF9zdGVwX3J1bl9hZ2FpbicgfSk7XG4gICAgfVxuICAgIC8vIE5vIHRvb2wgY2FsbHMvYWN0aW9ucyBpbiB0aGlzIHR1cm47IHNhZmUgdG8gY29uc2lkZXIgYSBwbGFpbiBhc3Npc3RhbnQgbWVzc2FnZSBhcyBmaW5hbC5cbiAgICBjb25zdCBtZXNzYWdlSXRlbXMgPSBuZXdJdGVtcy5maWx0ZXIoKGl0ZW0pID0+IGl0ZW0gaW5zdGFuY2VvZiBSdW5NZXNzYWdlT3V0cHV0SXRlbSk7XG4gICAgLy8gd2Ugd2lsbCB1c2UgdGhlIGxhc3QgY29udGVudCBvdXRwdXQgYXMgdGhlIGZpbmFsIG91dHB1dFxuICAgIGNvbnN0IHBvdGVudGlhbEZpbmFsT3V0cHV0ID0gbWVzc2FnZUl0ZW1zLmxlbmd0aCA+IDBcbiAgICAgICAgPyBnZXRMYXN0VGV4dEZyb21PdXRwdXRNZXNzYWdlKG1lc3NhZ2VJdGVtc1ttZXNzYWdlSXRlbXMubGVuZ3RoIC0gMV0ucmF3SXRlbSlcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgLy8gaWYgdGhlcmUgaXMgbm8gb3V0cHV0IHdlIGp1c3QgcnVuIGFnYWluXG4gICAgaWYgKHR5cGVvZiBwb3RlbnRpYWxGaW5hbE91dHB1dCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTaW5nbGVTdGVwUmVzdWx0KG9yaWdpbmFsSW5wdXQsIG5ld1Jlc3BvbnNlLCBwcmVTdGVwSXRlbXMsIG5ld0l0ZW1zLCB7IHR5cGU6ICduZXh0X3N0ZXBfcnVuX2FnYWluJyB9KTtcbiAgICB9XG4gICAgY29uc3QgaGFzUGVuZGluZ1Rvb2xzT3JBcHByb3ZhbHMgPSBmdW5jdGlvblJlc3VsdHMuc29tZSgocmVzdWx0KSA9PiByZXN1bHQucnVuSXRlbSBpbnN0YW5jZW9mIFJ1blRvb2xBcHByb3ZhbEl0ZW0pO1xuICAgIGlmICghaGFzUGVuZGluZ1Rvb2xzT3JBcHByb3ZhbHMpIHtcbiAgICAgICAgaWYgKGFnZW50Lm91dHB1dFR5cGUgPT09ICd0ZXh0Jykge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBTaW5nbGVTdGVwUmVzdWx0KG9yaWdpbmFsSW5wdXQsIG5ld1Jlc3BvbnNlLCBwcmVTdGVwSXRlbXMsIG5ld0l0ZW1zLCB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ25leHRfc3RlcF9maW5hbF9vdXRwdXQnLFxuICAgICAgICAgICAgICAgIG91dHB1dDogcG90ZW50aWFsRmluYWxPdXRwdXQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYWdlbnQub3V0cHV0VHlwZSAhPT0gJ3RleHQnICYmIHBvdGVudGlhbEZpbmFsT3V0cHV0KSB7XG4gICAgICAgICAgICAvLyBTdHJ1Y3R1cmVkIG91dHB1dCBzY2hlbWEgPT4gYWx3YXlzIGxlYWRzIHRvIGEgZmluYWwgb3V0cHV0IGlmIHdlIGhhdmUgdGV4dC5cbiAgICAgICAgICAgIGNvbnN0IHsgcGFyc2VyIH0gPSBnZXRTY2hlbWFBbmRQYXJzZXJGcm9tSW5wdXRUeXBlKGFnZW50Lm91dHB1dFR5cGUsICdmaW5hbF9vdXRwdXQnKTtcbiAgICAgICAgICAgIGNvbnN0IFtlcnJvcl0gPSBhd2FpdCBzYWZlRXhlY3V0ZSgoKSA9PiBwYXJzZXIocG90ZW50aWFsRmluYWxPdXRwdXQpKTtcbiAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGFkZEVycm9yVG9DdXJyZW50U3Bhbih7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdJbnZhbGlkIG91dHB1dCB0eXBlJyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IFN0cmluZyhlcnJvciksXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IE1vZGVsQmVoYXZpb3JFcnJvcignSW52YWxpZCBvdXRwdXQgdHlwZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBTaW5nbGVTdGVwUmVzdWx0KG9yaWdpbmFsSW5wdXQsIG5ld1Jlc3BvbnNlLCBwcmVTdGVwSXRlbXMsIG5ld0l0ZW1zLCB7IHR5cGU6ICduZXh0X3N0ZXBfZmluYWxfb3V0cHV0Jywgb3V0cHV0OiBwb3RlbnRpYWxGaW5hbE91dHB1dCB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV3IFNpbmdsZVN0ZXBSZXN1bHQob3JpZ2luYWxJbnB1dCwgbmV3UmVzcG9uc2UsIHByZVN0ZXBJdGVtcywgbmV3SXRlbXMsIHsgdHlwZTogJ25leHRfc3RlcF9ydW5fYWdhaW4nIH0pO1xufVxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFRvb2xDYWxsT3V0cHV0SXRlbSh0b29sQ2FsbCwgb3V0cHV0KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogJ2Z1bmN0aW9uX2NhbGxfcmVzdWx0JyxcbiAgICAgICAgbmFtZTogdG9vbENhbGwubmFtZSxcbiAgICAgICAgY2FsbElkOiB0b29sQ2FsbC5jYWxsSWQsXG4gICAgICAgIHN0YXR1czogJ2NvbXBsZXRlZCcsXG4gICAgICAgIG91dHB1dDoge1xuICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgdGV4dDogdG9TbWFydFN0cmluZyhvdXRwdXQpLFxuICAgICAgICB9LFxuICAgIH07XG59XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZXhlY3V0ZUZ1bmN0aW9uVG9vbENhbGxzKGFnZW50LCB0b29sUnVucywgcnVubmVyLCBzdGF0ZSkge1xuICAgIGFzeW5jIGZ1bmN0aW9uIHJ1blNpbmdsZVRvb2wodG9vbFJ1bikge1xuICAgICAgICBsZXQgcGFyc2VkQXJncyA9IHRvb2xSdW4udG9vbENhbGwuYXJndW1lbnRzO1xuICAgICAgICBpZiAodG9vbFJ1bi50b29sLnBhcmFtZXRlcnMpIHtcbiAgICAgICAgICAgIGlmIChpc1pvZE9iamVjdCh0b29sUnVuLnRvb2wucGFyYW1ldGVycykpIHtcbiAgICAgICAgICAgICAgICBwYXJzZWRBcmdzID0gdG9vbFJ1bi50b29sLnBhcmFtZXRlcnMucGFyc2UocGFyc2VkQXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBwYXJzZWRBcmdzID0gSlNPTi5wYXJzZShwYXJzZWRBcmdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuZWVkc0FwcHJvdmFsID0gYXdhaXQgdG9vbFJ1bi50b29sLm5lZWRzQXBwcm92YWwoc3RhdGUuX2NvbnRleHQsIHBhcnNlZEFyZ3MsIHRvb2xSdW4udG9vbENhbGwuY2FsbElkKTtcbiAgICAgICAgaWYgKG5lZWRzQXBwcm92YWwpIHtcbiAgICAgICAgICAgIGNvbnN0IGFwcHJvdmFsID0gc3RhdGUuX2NvbnRleHQuaXNUb29sQXBwcm92ZWQoe1xuICAgICAgICAgICAgICAgIHRvb2xOYW1lOiB0b29sUnVuLnRvb2wubmFtZSxcbiAgICAgICAgICAgICAgICBjYWxsSWQ6IHRvb2xSdW4udG9vbENhbGwuY2FsbElkLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoYXBwcm92YWwgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgLy8gcmVqZWN0ZWRcbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aEZ1bmN0aW9uU3Bhbihhc3luYyAoc3BhbikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9ICdUb29sIGV4ZWN1dGlvbiB3YXMgbm90IGFwcHJvdmVkLic7XG4gICAgICAgICAgICAgICAgICAgIHNwYW4uc2V0RXJyb3Ioe1xuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogcmVzcG9uc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9vbF9uYW1lOiB0b29sUnVuLnRvb2wubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogYFRvb2wgZXhlY3V0aW9uIGZvciAke3Rvb2xSdW4udG9vbENhbGwuY2FsbElkfSB3YXMgbWFudWFsbHkgcmVqZWN0ZWQgYnkgdXNlci5gLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHNwYW4uc3BhbkRhdGEub3V0cHV0ID0gcmVzcG9uc2U7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZnVuY3Rpb25fb3V0cHV0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvb2w6IHRvb2xSdW4udG9vbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dDogcmVzcG9uc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBydW5JdGVtOiBuZXcgUnVuVG9vbENhbGxPdXRwdXRJdGVtKGdldFRvb2xDYWxsT3V0cHV0SXRlbSh0b29sUnVuLnRvb2xDYWxsLCByZXNwb25zZSksIGFnZW50LCByZXNwb25zZSksXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiB0b29sUnVuLnRvb2wubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhcHByb3ZhbCAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIC8vIHRoaXMgYXBwcm92YWwgcHJvY2VzcyBuZWVkcyB0byBiZSBkb25lIGluIHRoZSBuZXh0IHR1cm5cbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZnVuY3Rpb25fYXBwcm92YWwnLFxuICAgICAgICAgICAgICAgICAgICB0b29sOiB0b29sUnVuLnRvb2wsXG4gICAgICAgICAgICAgICAgICAgIHJ1bkl0ZW06IG5ldyBSdW5Ub29sQXBwcm92YWxJdGVtKHRvb2xSdW4udG9vbENhbGwsIGFnZW50KSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3aXRoRnVuY3Rpb25TcGFuKGFzeW5jIChzcGFuKSA9PiB7XG4gICAgICAgICAgICBpZiAocnVubmVyLmNvbmZpZy50cmFjZUluY2x1ZGVTZW5zaXRpdmVEYXRhKSB7XG4gICAgICAgICAgICAgICAgc3Bhbi5zcGFuRGF0YS5pbnB1dCA9IHRvb2xSdW4udG9vbENhbGwuYXJndW1lbnRzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBydW5uZXIuZW1pdCgnYWdlbnRfdG9vbF9zdGFydCcsIHN0YXRlLl9jb250ZXh0LCBhZ2VudCwgdG9vbFJ1bi50b29sLCB7XG4gICAgICAgICAgICAgICAgICAgIHRvb2xDYWxsOiB0b29sUnVuLnRvb2xDYWxsLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGFnZW50LmVtaXQoJ2FnZW50X3Rvb2xfc3RhcnQnLCBzdGF0ZS5fY29udGV4dCwgdG9vbFJ1bi50b29sLCB7XG4gICAgICAgICAgICAgICAgICAgIHRvb2xDYWxsOiB0b29sUnVuLnRvb2xDYWxsLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRvb2xPdXRwdXQgPSBhd2FpdCB0b29sUnVuLnRvb2wuaW52b2tlKHN0YXRlLl9jb250ZXh0LCB0b29sUnVuLnRvb2xDYWxsLmFyZ3VtZW50cywgeyB0b29sQ2FsbDogdG9vbFJ1bi50b29sQ2FsbCB9KTtcbiAgICAgICAgICAgICAgICAvLyBVc2Ugc3RyaW5nIGRhdGEgZm9yIHRyYWNpbmcgYW5kIGV2ZW50IGVtaXR0ZXJcbiAgICAgICAgICAgICAgICBjb25zdCBzdHJpbmdSZXN1bHQgPSB0b1NtYXJ0U3RyaW5nKHRvb2xPdXRwdXQpO1xuICAgICAgICAgICAgICAgIHJ1bm5lci5lbWl0KCdhZ2VudF90b29sX2VuZCcsIHN0YXRlLl9jb250ZXh0LCBhZ2VudCwgdG9vbFJ1bi50b29sLCBzdHJpbmdSZXN1bHQsIHsgdG9vbENhbGw6IHRvb2xSdW4udG9vbENhbGwgfSk7XG4gICAgICAgICAgICAgICAgYWdlbnQuZW1pdCgnYWdlbnRfdG9vbF9lbmQnLCBzdGF0ZS5fY29udGV4dCwgdG9vbFJ1bi50b29sLCBzdHJpbmdSZXN1bHQsIHsgdG9vbENhbGw6IHRvb2xSdW4udG9vbENhbGwgfSk7XG4gICAgICAgICAgICAgICAgaWYgKHJ1bm5lci5jb25maWcudHJhY2VJbmNsdWRlU2Vuc2l0aXZlRGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBzcGFuLnNwYW5EYXRhLm91dHB1dCA9IHN0cmluZ1Jlc3VsdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgZnVuY3Rpb25SZXN1bHQgPSB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdmdW5jdGlvbl9vdXRwdXQnLFxuICAgICAgICAgICAgICAgICAgICB0b29sOiB0b29sUnVuLnRvb2wsXG4gICAgICAgICAgICAgICAgICAgIG91dHB1dDogdG9vbE91dHB1dCxcbiAgICAgICAgICAgICAgICAgICAgcnVuSXRlbTogbmV3IFJ1blRvb2xDYWxsT3V0cHV0SXRlbShnZXRUb29sQ2FsbE91dHB1dEl0ZW0odG9vbFJ1bi50b29sQ2FsbCwgdG9vbE91dHB1dCksIGFnZW50LCB0b29sT3V0cHV0KSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGNvbnN0IG5lc3RlZFJ1blJlc3VsdCA9IGNvbnN1bWVBZ2VudFRvb2xSdW5SZXN1bHQodG9vbFJ1bi50b29sQ2FsbCk7XG4gICAgICAgICAgICAgICAgaWYgKG5lc3RlZFJ1blJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvblJlc3VsdC5hZ2VudFJ1blJlc3VsdCA9IG5lc3RlZFJ1blJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmVzdGVkSW50ZXJydXB0aW9ucyA9IG5lc3RlZFJ1blJlc3VsdC5pbnRlcnJ1cHRpb25zO1xuICAgICAgICAgICAgICAgICAgICBpZiAobmVzdGVkSW50ZXJydXB0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvblJlc3VsdC5pbnRlcnJ1cHRpb25zID0gbmVzdGVkSW50ZXJydXB0aW9ucztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb25SZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBzcGFuLnNldEVycm9yKHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ0Vycm9yIHJ1bm5pbmcgdG9vbCcsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvb2xfbmFtZTogdG9vbFJ1bi50b29sLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogU3RyaW5nKGVycm9yKSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgIG5hbWU6IHRvb2xSdW4udG9vbC5uYW1lLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCBQcm9taXNlLmFsbCh0b29sUnVucy5tYXAocnVuU2luZ2xlVG9vbCkpO1xuICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IFRvb2xDYWxsRXJyb3IoYEZhaWxlZCB0byBydW4gZnVuY3Rpb24gdG9vbHM6ICR7ZX1gLCBlLCBzdGF0ZSk7XG4gICAgfVxufVxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuLy8gSW50ZXJuYWwgaGVscGVyOiBkaXNwYXRjaCBhIGNvbXB1dGVyIGFjdGlvbiBhbmQgcmV0dXJuIGEgc2NyZWVuc2hvdCAoc3luYy9hc3luYylcbmFzeW5jIGZ1bmN0aW9uIF9ydW5Db21wdXRlckFjdGlvbkFuZFNjcmVlbnNob3QoY29tcHV0ZXIsIHRvb2xDYWxsKSB7XG4gICAgY29uc3QgYWN0aW9uID0gdG9vbENhbGwuYWN0aW9uO1xuICAgIGxldCBzY3JlZW5zaG90O1xuICAgIC8vIERpc3BhdGNoIGJhc2VkIG9uIGFjdGlvbiB0eXBlIHN0cmluZyAoYXNzdW1lIGFjdGlvbi50eXBlIGV4aXN0cylcbiAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgICAgIGNhc2UgJ2NsaWNrJzpcbiAgICAgICAgICAgIGF3YWl0IGNvbXB1dGVyLmNsaWNrKGFjdGlvbi54LCBhY3Rpb24ueSwgYWN0aW9uLmJ1dHRvbik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnZG91YmxlX2NsaWNrJzpcbiAgICAgICAgICAgIGF3YWl0IGNvbXB1dGVyLmRvdWJsZUNsaWNrKGFjdGlvbi54LCBhY3Rpb24ueSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnZHJhZyc6XG4gICAgICAgICAgICBhd2FpdCBjb21wdXRlci5kcmFnKGFjdGlvbi5wYXRoLm1hcCgocCkgPT4gW3AueCwgcC55XSkpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2tleXByZXNzJzpcbiAgICAgICAgICAgIGF3YWl0IGNvbXB1dGVyLmtleXByZXNzKGFjdGlvbi5rZXlzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdtb3ZlJzpcbiAgICAgICAgICAgIGF3YWl0IGNvbXB1dGVyLm1vdmUoYWN0aW9uLngsIGFjdGlvbi55KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdzY3JlZW5zaG90JzpcbiAgICAgICAgICAgIHNjcmVlbnNob3QgPSBhd2FpdCBjb21wdXRlci5zY3JlZW5zaG90KCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnc2Nyb2xsJzpcbiAgICAgICAgICAgIGF3YWl0IGNvbXB1dGVyLnNjcm9sbChhY3Rpb24ueCwgYWN0aW9uLnksIGFjdGlvbi5zY3JvbGxfeCwgYWN0aW9uLnNjcm9sbF95KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICd0eXBlJzpcbiAgICAgICAgICAgIGF3YWl0IGNvbXB1dGVyLnR5cGUoYWN0aW9uLnRleHQpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3dhaXQnOlxuICAgICAgICAgICAgYXdhaXQgY29tcHV0ZXIud2FpdCgpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBhY3Rpb247IC8vIGVuc3VyZXMgdGhhdCB3ZSBoYW5kbGUgZXZlcnkgYWN0aW9uIHdlIGtub3cgb2ZcbiAgICAgICAgICAgIC8vIFVua25vd24gYWN0aW9uLCBqdXN0IHRha2Ugc2NyZWVuc2hvdFxuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygc2NyZWVuc2hvdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIHNjcmVlbnNob3Q7XG4gICAgfVxuICAgIC8vIEFsd2F5cyByZXR1cm4gc2NyZWVuc2hvdCBhcyBiYXNlNjQgc3RyaW5nXG4gICAgaWYgKHR5cGVvZiBjb21wdXRlci5zY3JlZW5zaG90ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHNjcmVlbnNob3QgPSBhd2FpdCBjb21wdXRlci5zY3JlZW5zaG90KCk7XG4gICAgICAgIGlmICh0eXBlb2Ygc2NyZWVuc2hvdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJldHVybiBzY3JlZW5zaG90O1xuICAgICAgICB9XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcignQ29tcHV0ZXIgZG9lcyBub3QgaW1wbGVtZW50IHNjcmVlbnNob3QoKScpO1xufVxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGV4ZWN1dGVDb21wdXRlckFjdGlvbnMoYWdlbnQsIGFjdGlvbnMsIHJ1bm5lciwgcnVuQ29udGV4dCwgY3VzdG9tTG9nZ2VyID0gdW5kZWZpbmVkKSB7XG4gICAgY29uc3QgX2xvZ2dlciA9IGN1c3RvbUxvZ2dlciA/PyBsb2dnZXI7XG4gICAgY29uc3QgcmVzdWx0cyA9IFtdO1xuICAgIGZvciAoY29uc3QgYWN0aW9uIG9mIGFjdGlvbnMpIHtcbiAgICAgICAgY29uc3QgY29tcHV0ZXIgPSBhY3Rpb24uY29tcHV0ZXIuY29tcHV0ZXI7XG4gICAgICAgIGNvbnN0IHRvb2xDYWxsID0gYWN0aW9uLnRvb2xDYWxsO1xuICAgICAgICAvLyBIb29rczogb25fdG9vbF9zdGFydCAoZ2xvYmFsICsgYWdlbnQpXG4gICAgICAgIHJ1bm5lci5lbWl0KCdhZ2VudF90b29sX3N0YXJ0JywgcnVuQ29udGV4dCwgYWdlbnQsIGFjdGlvbi5jb21wdXRlciwge1xuICAgICAgICAgICAgdG9vbENhbGwsXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAodHlwZW9mIGFnZW50LmVtaXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGFnZW50LmVtaXQoJ2FnZW50X3Rvb2xfc3RhcnQnLCBydW5Db250ZXh0LCBhY3Rpb24uY29tcHV0ZXIsIHsgdG9vbENhbGwgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUnVuIHRoZSBhY3Rpb24gYW5kIGdldCBzY3JlZW5zaG90XG4gICAgICAgIGxldCBvdXRwdXQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBvdXRwdXQgPSBhd2FpdCBfcnVuQ29tcHV0ZXJBY3Rpb25BbmRTY3JlZW5zaG90KGNvbXB1dGVyLCB0b29sQ2FsbCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgX2xvZ2dlci5lcnJvcignRmFpbGVkIHRvIGV4ZWN1dGUgY29tcHV0ZXIgYWN0aW9uOicsIGVycik7XG4gICAgICAgICAgICBvdXRwdXQgPSAnJztcbiAgICAgICAgfVxuICAgICAgICAvLyBIb29rczogb25fdG9vbF9lbmQgKGdsb2JhbCArIGFnZW50KVxuICAgICAgICBydW5uZXIuZW1pdCgnYWdlbnRfdG9vbF9lbmQnLCBydW5Db250ZXh0LCBhZ2VudCwgYWN0aW9uLmNvbXB1dGVyLCBvdXRwdXQsIHtcbiAgICAgICAgICAgIHRvb2xDYWxsLFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHR5cGVvZiBhZ2VudC5lbWl0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBhZ2VudC5lbWl0KCdhZ2VudF90b29sX2VuZCcsIHJ1bkNvbnRleHQsIGFjdGlvbi5jb21wdXRlciwgb3V0cHV0LCB7XG4gICAgICAgICAgICAgICAgdG9vbENhbGwsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBBbHdheXMgcmV0dXJuIGEgc2NyZWVuc2hvdCBhcyBhIGJhc2U2NCBkYXRhIFVSTFxuICAgICAgICBjb25zdCBpbWFnZVVybCA9IG91dHB1dCA/IGBkYXRhOmltYWdlL3BuZztiYXNlNjQsJHtvdXRwdXR9YCA6ICcnO1xuICAgICAgICBjb25zdCByYXdJdGVtID0ge1xuICAgICAgICAgICAgdHlwZTogJ2NvbXB1dGVyX2NhbGxfcmVzdWx0JyxcbiAgICAgICAgICAgIGNhbGxJZDogdG9vbENhbGwuY2FsbElkLFxuICAgICAgICAgICAgb3V0cHV0OiB7IHR5cGU6ICdjb21wdXRlcl9zY3JlZW5zaG90JywgZGF0YTogaW1hZ2VVcmwgfSxcbiAgICAgICAgfTtcbiAgICAgICAgcmVzdWx0cy5wdXNoKG5ldyBSdW5Ub29sQ2FsbE91dHB1dEl0ZW0ocmF3SXRlbSwgYWdlbnQsIGltYWdlVXJsKSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRzO1xufVxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGV4ZWN1dGVIYW5kb2ZmQ2FsbHMoYWdlbnQsIG9yaWdpbmFsSW5wdXQsIHByZVN0ZXBJdGVtcywgbmV3U3RlcEl0ZW1zLCBuZXdSZXNwb25zZSwgcnVuSGFuZG9mZnMsIHJ1bm5lciwgcnVuQ29udGV4dCkge1xuICAgIG5ld1N0ZXBJdGVtcyA9IFsuLi5uZXdTdGVwSXRlbXNdO1xuICAgIGlmIChydW5IYW5kb2Zmcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgbG9nZ2VyLndhcm4oJ0luY29ycmVjdGx5IGNhbGxlZCBleGVjdXRlSGFuZG9mZkNhbGxzIHdpdGggbm8gaGFuZG9mZnMuIFRoaXMgc2hvdWxkIG5vdCBoYXBwZW4uIE1vdmluZyBvbi4nKTtcbiAgICAgICAgcmV0dXJuIG5ldyBTaW5nbGVTdGVwUmVzdWx0KG9yaWdpbmFsSW5wdXQsIG5ld1Jlc3BvbnNlLCBwcmVTdGVwSXRlbXMsIG5ld1N0ZXBJdGVtcywgeyB0eXBlOiAnbmV4dF9zdGVwX3J1bl9hZ2FpbicgfSk7XG4gICAgfVxuICAgIGlmIChydW5IYW5kb2Zmcy5sZW5ndGggPiAxKSB7XG4gICAgICAgIC8vIG11bHRpcGxlIGhhbmRvZmZzLiBJZ25vcmluZyBhbGwgYnV0IHRoZSBmaXJzdCBvbmUgYnkgYWRkaW5nIHJlamVjdCByZXNwb25zZXMgZm9yIHRob3NlXG4gICAgICAgIGNvbnN0IG91dHB1dE1lc3NhZ2UgPSAnTXVsdGlwbGUgaGFuZG9mZnMgZGV0ZWN0ZWQsIGlnbm9yaW5nIHRoaXMgb25lLic7XG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgcnVuSGFuZG9mZnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIG5ld1N0ZXBJdGVtcy5wdXNoKG5ldyBSdW5Ub29sQ2FsbE91dHB1dEl0ZW0oZ2V0VG9vbENhbGxPdXRwdXRJdGVtKHJ1bkhhbmRvZmZzW2ldLnRvb2xDYWxsLCBvdXRwdXRNZXNzYWdlKSwgYWdlbnQsIG91dHB1dE1lc3NhZ2UpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBhY3R1YWxIYW5kb2ZmID0gcnVuSGFuZG9mZnNbMF07XG4gICAgcmV0dXJuIHdpdGhIYW5kb2ZmU3Bhbihhc3luYyAoaGFuZG9mZlNwYW4pID0+IHtcbiAgICAgICAgY29uc3QgaGFuZG9mZiA9IGFjdHVhbEhhbmRvZmYuaGFuZG9mZjtcbiAgICAgICAgY29uc3QgbmV3QWdlbnQgPSBhd2FpdCBoYW5kb2ZmLm9uSW52b2tlSGFuZG9mZihydW5Db250ZXh0LCBhY3R1YWxIYW5kb2ZmLnRvb2xDYWxsLmFyZ3VtZW50cyk7XG4gICAgICAgIGhhbmRvZmZTcGFuLnNwYW5EYXRhLnRvX2FnZW50ID0gbmV3QWdlbnQubmFtZTtcbiAgICAgICAgaWYgKHJ1bkhhbmRvZmZzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlcXVlc3RlZEFnZW50cyA9IHJ1bkhhbmRvZmZzLm1hcCgoaCkgPT4gaC5oYW5kb2ZmLmFnZW50TmFtZSk7XG4gICAgICAgICAgICBoYW5kb2ZmU3Bhbi5zZXRFcnJvcih7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ011bHRpcGxlIGhhbmRvZmZzIHJlcXVlc3RlZCcsXG4gICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0ZWRfYWdlbnRzOiByZXF1ZXN0ZWRBZ2VudHMsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIG5ld1N0ZXBJdGVtcy5wdXNoKG5ldyBSdW5IYW5kb2ZmT3V0cHV0SXRlbShnZXRUb29sQ2FsbE91dHB1dEl0ZW0oYWN0dWFsSGFuZG9mZi50b29sQ2FsbCwgZ2V0VHJhbnNmZXJNZXNzYWdlKG5ld0FnZW50KSksIGFnZW50LCBuZXdBZ2VudCkpO1xuICAgICAgICBydW5uZXIuZW1pdCgnYWdlbnRfaGFuZG9mZicsIHJ1bkNvbnRleHQsIGFnZW50LCBuZXdBZ2VudCk7XG4gICAgICAgIGFnZW50LmVtaXQoJ2FnZW50X2hhbmRvZmYnLCBydW5Db250ZXh0LCBuZXdBZ2VudCk7XG4gICAgICAgIGNvbnN0IGlucHV0RmlsdGVyID0gaGFuZG9mZi5pbnB1dEZpbHRlciA/PyBydW5uZXIuY29uZmlnLmhhbmRvZmZJbnB1dEZpbHRlcjtcbiAgICAgICAgaWYgKGlucHV0RmlsdGVyKSB7XG4gICAgICAgICAgICBsb2dnZXIuZGVidWcoJ0ZpbHRlcmluZyBpbnB1dHMgZm9yIGhhbmRvZmYnKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaW5wdXRGaWx0ZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBoYW5kb2ZmU3Bhbi5zZXRFcnJvcih7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdJbnZhbGlkIGlucHV0IGZpbHRlcicsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRldGFpbHM6ICdub3QgY2FsbGFibGUnLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgaGFuZG9mZklucHV0RGF0YSA9IHtcbiAgICAgICAgICAgICAgICBpbnB1dEhpc3Rvcnk6IEFycmF5LmlzQXJyYXkob3JpZ2luYWxJbnB1dClcbiAgICAgICAgICAgICAgICAgICAgPyBbLi4ub3JpZ2luYWxJbnB1dF1cbiAgICAgICAgICAgICAgICAgICAgOiBvcmlnaW5hbElucHV0LFxuICAgICAgICAgICAgICAgIHByZUhhbmRvZmZJdGVtczogWy4uLnByZVN0ZXBJdGVtc10sXG4gICAgICAgICAgICAgICAgbmV3SXRlbXM6IFsuLi5uZXdTdGVwSXRlbXNdLFxuICAgICAgICAgICAgICAgIHJ1bkNvbnRleHQsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgZmlsdGVyZWQgPSBpbnB1dEZpbHRlcihoYW5kb2ZmSW5wdXREYXRhKTtcbiAgICAgICAgICAgIG9yaWdpbmFsSW5wdXQgPSBmaWx0ZXJlZC5pbnB1dEhpc3Rvcnk7XG4gICAgICAgICAgICBwcmVTdGVwSXRlbXMgPSBmaWx0ZXJlZC5wcmVIYW5kb2ZmSXRlbXM7XG4gICAgICAgICAgICBuZXdTdGVwSXRlbXMgPSBmaWx0ZXJlZC5uZXdJdGVtcztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFNpbmdsZVN0ZXBSZXN1bHQob3JpZ2luYWxJbnB1dCwgbmV3UmVzcG9uc2UsIHByZVN0ZXBJdGVtcywgbmV3U3RlcEl0ZW1zLCB7IHR5cGU6ICduZXh0X3N0ZXBfaGFuZG9mZicsIG5ld0FnZW50IH0pO1xuICAgIH0sIHtcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgZnJvbV9hZ2VudDogYWdlbnQubmFtZSxcbiAgICAgICAgfSxcbiAgICB9KTtcbn1cbmNvbnN0IE5PVF9GSU5BTF9PVVRQVVQgPSB7XG4gICAgaXNGaW5hbE91dHB1dDogZmFsc2UsXG4gICAgaXNJbnRlcnJ1cHRlZDogdW5kZWZpbmVkLFxufTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjaGVja0ZvckZpbmFsT3V0cHV0RnJvbVRvb2xzKGFnZW50LCB0b29sUmVzdWx0cywgc3RhdGUpIHtcbiAgICBpZiAodG9vbFJlc3VsdHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBOT1RfRklOQUxfT1VUUFVUO1xuICAgIH1cbiAgICBjb25zdCBpbnRlcnJ1cHRpb25zID0gW107XG4gICAgZm9yIChjb25zdCByZXN1bHQgb2YgdG9vbFJlc3VsdHMpIHtcbiAgICAgICAgaWYgKHJlc3VsdC5ydW5JdGVtIGluc3RhbmNlb2YgUnVuVG9vbEFwcHJvdmFsSXRlbSkge1xuICAgICAgICAgICAgaW50ZXJydXB0aW9ucy5wdXNoKHJlc3VsdC5ydW5JdGVtKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzdWx0LnR5cGUgPT09ICdmdW5jdGlvbl9vdXRwdXQnKSB7XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShyZXN1bHQuaW50ZXJydXB0aW9ucykpIHtcbiAgICAgICAgICAgICAgICBpbnRlcnJ1cHRpb25zLnB1c2goLi4ucmVzdWx0LmludGVycnVwdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocmVzdWx0LmFnZW50UnVuUmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmVzdGVkSW50ZXJydXB0aW9ucyA9IHJlc3VsdC5hZ2VudFJ1blJlc3VsdC5pbnRlcnJ1cHRpb25zO1xuICAgICAgICAgICAgICAgIGlmIChuZXN0ZWRJbnRlcnJ1cHRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJydXB0aW9ucy5wdXNoKC4uLm5lc3RlZEludGVycnVwdGlvbnMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoaW50ZXJydXB0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpc0ZpbmFsT3V0cHV0OiBmYWxzZSxcbiAgICAgICAgICAgIGlzSW50ZXJydXB0ZWQ6IHRydWUsXG4gICAgICAgICAgICBpbnRlcnJ1cHRpb25zLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBpZiAoYWdlbnQudG9vbFVzZUJlaGF2aW9yID09PSAncnVuX2xsbV9hZ2FpbicpIHtcbiAgICAgICAgcmV0dXJuIE5PVF9GSU5BTF9PVVRQVVQ7XG4gICAgfVxuICAgIGNvbnN0IGZpcnN0VG9vbFJlc3VsdCA9IHRvb2xSZXN1bHRzWzBdO1xuICAgIGlmIChhZ2VudC50b29sVXNlQmVoYXZpb3IgPT09ICdzdG9wX29uX2ZpcnN0X3Rvb2wnKSB7XG4gICAgICAgIGlmIChmaXJzdFRvb2xSZXN1bHQ/LnR5cGUgPT09ICdmdW5jdGlvbl9vdXRwdXQnKSB7XG4gICAgICAgICAgICBjb25zdCBzdHJpbmdPdXRwdXQgPSB0b1NtYXJ0U3RyaW5nKGZpcnN0VG9vbFJlc3VsdC5vdXRwdXQpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBpc0ZpbmFsT3V0cHV0OiB0cnVlLFxuICAgICAgICAgICAgICAgIGlzSW50ZXJydXB0ZWQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBmaW5hbE91dHB1dDogc3RyaW5nT3V0cHV0LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gTk9UX0ZJTkFMX09VVFBVVDtcbiAgICB9XG4gICAgY29uc3QgdG9vbFVzZUJlaGF2aW9yID0gYWdlbnQudG9vbFVzZUJlaGF2aW9yO1xuICAgIGlmICh0eXBlb2YgdG9vbFVzZUJlaGF2aW9yID09PSAnb2JqZWN0Jykge1xuICAgICAgICBjb25zdCBzdG9wcGluZ1Rvb2wgPSB0b29sUmVzdWx0cy5maW5kKChyKSA9PiB0b29sVXNlQmVoYXZpb3Iuc3RvcEF0VG9vbE5hbWVzLmluY2x1ZGVzKHIudG9vbC5uYW1lKSk7XG4gICAgICAgIGlmIChzdG9wcGluZ1Rvb2w/LnR5cGUgPT09ICdmdW5jdGlvbl9vdXRwdXQnKSB7XG4gICAgICAgICAgICBjb25zdCBzdHJpbmdPdXRwdXQgPSB0b1NtYXJ0U3RyaW5nKHN0b3BwaW5nVG9vbC5vdXRwdXQpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBpc0ZpbmFsT3V0cHV0OiB0cnVlLFxuICAgICAgICAgICAgICAgIGlzSW50ZXJydXB0ZWQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBmaW5hbE91dHB1dDogc3RyaW5nT3V0cHV0LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gTk9UX0ZJTkFMX09VVFBVVDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB0b29sVXNlQmVoYXZpb3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHRvb2xVc2VCZWhhdmlvcihzdGF0ZS5fY29udGV4dCwgdG9vbFJlc3VsdHMpO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgVXNlckVycm9yKGBJbnZhbGlkIHRvb2xVc2VCZWhhdmlvcjogJHt0b29sVXNlQmVoYXZpb3J9YCwgc3RhdGUpO1xufVxuZnVuY3Rpb24gZ2V0UnVuSXRlbVN0cmVhbUV2ZW50TmFtZShpdGVtKSB7XG4gICAgaWYgKGl0ZW0gaW5zdGFuY2VvZiBSdW5NZXNzYWdlT3V0cHV0SXRlbSkge1xuICAgICAgICByZXR1cm4gJ21lc3NhZ2Vfb3V0cHV0X2NyZWF0ZWQnO1xuICAgIH1cbiAgICBpZiAoaXRlbSBpbnN0YW5jZW9mIFJ1bkhhbmRvZmZDYWxsSXRlbSkge1xuICAgICAgICByZXR1cm4gJ2hhbmRvZmZfcmVxdWVzdGVkJztcbiAgICB9XG4gICAgaWYgKGl0ZW0gaW5zdGFuY2VvZiBSdW5IYW5kb2ZmT3V0cHV0SXRlbSkge1xuICAgICAgICByZXR1cm4gJ2hhbmRvZmZfb2NjdXJyZWQnO1xuICAgIH1cbiAgICBpZiAoaXRlbSBpbnN0YW5jZW9mIFJ1blRvb2xDYWxsSXRlbSkge1xuICAgICAgICByZXR1cm4gJ3Rvb2xfY2FsbGVkJztcbiAgICB9XG4gICAgaWYgKGl0ZW0gaW5zdGFuY2VvZiBSdW5Ub29sQ2FsbE91dHB1dEl0ZW0pIHtcbiAgICAgICAgcmV0dXJuICd0b29sX291dHB1dCc7XG4gICAgfVxuICAgIGlmIChpdGVtIGluc3RhbmNlb2YgUnVuUmVhc29uaW5nSXRlbSkge1xuICAgICAgICByZXR1cm4gJ3JlYXNvbmluZ19pdGVtX2NyZWF0ZWQnO1xuICAgIH1cbiAgICBpZiAoaXRlbSBpbnN0YW5jZW9mIFJ1blRvb2xBcHByb3ZhbEl0ZW0pIHtcbiAgICAgICAgcmV0dXJuICd0b29sX2FwcHJvdmFsX3JlcXVlc3RlZCc7XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG59XG5mdW5jdGlvbiBlbnF1ZXVlUnVuSXRlbVN0cmVhbUV2ZW50KHJlc3VsdCwgaXRlbSkge1xuICAgIGNvbnN0IGl0ZW1OYW1lID0gZ2V0UnVuSXRlbVN0cmVhbUV2ZW50TmFtZShpdGVtKTtcbiAgICBpZiAoIWl0ZW1OYW1lKSB7XG4gICAgICAgIGxvZ2dlci53YXJuKCdVbmtub3duIGl0ZW0gdHlwZTogJywgaXRlbSk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcmVzdWx0Ll9hZGRJdGVtKG5ldyBSdW5JdGVtU3RyZWFtRXZlbnQoaXRlbU5hbWUsIGl0ZW0pKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzdHJlYW1TdGVwSXRlbXNUb1J1blJlc3VsdChyZXN1bHQsIGl0ZW1zKSB7XG4gICAgLy8gUHJlc2VydmUgdGhlIG9yZGVyIGluIHdoaWNoIGl0ZW1zIHdlcmUgZ2VuZXJhdGVkIGJ5IGVucXVldWVpbmcgZWFjaCBvbmVcbiAgICAvLyBpbW1lZGlhdGVseSBvbiB0aGUgc3RyZWFtZWQgcmVzdWx0LlxuICAgIGZvciAoY29uc3QgaXRlbSBvZiBpdGVtcykge1xuICAgICAgICBlbnF1ZXVlUnVuSXRlbVN0cmVhbUV2ZW50KHJlc3VsdCwgaXRlbSk7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGFkZFN0ZXBUb1J1blJlc3VsdChyZXN1bHQsIHN0ZXAsIG9wdGlvbnMpIHtcbiAgICAvLyBza2lwSXRlbXMgY29udGFpbnMgcnVuIGl0ZW1zIHRoYXQgd2VyZSBhbHJlYWR5IHN0cmVhbWVkIHNvIHdlIGF2b2lkXG4gICAgLy8gZW5xdWV1ZWluZyBkdXBsaWNhdGUgZXZlbnRzIGZvciB0aGUgc2FtZSBpbnN0YW5jZS5cbiAgICBjb25zdCBza2lwcGVkSXRlbXMgPSBvcHRpb25zPy5za2lwSXRlbXM7XG4gICAgZm9yIChjb25zdCBpdGVtIG9mIHN0ZXAubmV3U3RlcEl0ZW1zKSB7XG4gICAgICAgIGlmIChza2lwcGVkSXRlbXM/LmhhcyhpdGVtKSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgZW5xdWV1ZVJ1bkl0ZW1TdHJlYW1FdmVudChyZXN1bHQsIGl0ZW0pO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBBZ2VudFRvb2xVc2VUcmFja2VyIHtcbiAgICAjYWdlbnRUb1Rvb2xzID0gbmV3IE1hcCgpO1xuICAgIGFkZFRvb2xVc2UoYWdlbnQsIHRvb2xOYW1lcykge1xuICAgICAgICB0aGlzLiNhZ2VudFRvVG9vbHMuc2V0KGFnZW50LCB0b29sTmFtZXMpO1xuICAgIH1cbiAgICBoYXNVc2VkVG9vbHMoYWdlbnQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI2FnZW50VG9Ub29scy5oYXMoYWdlbnQpO1xuICAgIH1cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoQXJyYXkuZnJvbSh0aGlzLiNhZ2VudFRvVG9vbHMuZW50cmllcygpKS5tYXAoKFthZ2VudCwgdG9vbE5hbWVzXSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIFthZ2VudC5uYW1lLCB0b29sTmFtZXNdO1xuICAgICAgICB9KSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cnVuSW1wbGVtZW50YXRpb24ubWpzLm1hcCIsImltcG9ydCB7IHogfSBmcm9tICd6b2QnO1xuaW1wb3J0IHsgQWdlbnQgfSBmcm9tIFwiLi9hZ2VudC5tanNcIjtcbmltcG9ydCB7IFJ1bk1lc3NhZ2VPdXRwdXRJdGVtLCBSdW5Ub29sQXBwcm92YWxJdGVtLCBSdW5Ub29sQ2FsbEl0ZW0sIFJ1blRvb2xDYWxsT3V0cHV0SXRlbSwgUnVuUmVhc29uaW5nSXRlbSwgUnVuSGFuZG9mZkNhbGxJdGVtLCBSdW5IYW5kb2ZmT3V0cHV0SXRlbSwgfSBmcm9tIFwiLi9pdGVtcy5tanNcIjtcbmltcG9ydCB7IFJ1bkNvbnRleHQgfSBmcm9tIFwiLi9ydW5Db250ZXh0Lm1qc1wiO1xuaW1wb3J0IHsgZ2V0VHVybklucHV0IH0gZnJvbSBcIi4vcnVuLm1qc1wiO1xuaW1wb3J0IHsgQWdlbnRUb29sVXNlVHJhY2tlciwgbmV4dFN0ZXBTY2hlbWEsIH0gZnJvbSBcIi4vcnVuSW1wbGVtZW50YXRpb24ubWpzXCI7XG5pbXBvcnQgeyBTeXN0ZW1FcnJvciwgVXNlckVycm9yIH0gZnJvbSBcIi4vZXJyb3JzLm1qc1wiO1xuaW1wb3J0IHsgZ2V0R2xvYmFsVHJhY2VQcm92aWRlciB9IGZyb20gXCIuL3RyYWNpbmcvcHJvdmlkZXIubWpzXCI7XG5pbXBvcnQgeyBVc2FnZSB9IGZyb20gXCIuL3VzYWdlLm1qc1wiO1xuaW1wb3J0IHsgZ2V0Q3VycmVudFRyYWNlIH0gZnJvbSBcIi4vdHJhY2luZy9pbmRleC5tanNcIjtcbmltcG9ydCBsb2dnZXIgZnJvbSBcIi4vbG9nZ2VyLm1qc1wiO1xuaW1wb3J0IHsgaGFuZG9mZiB9IGZyb20gXCIuL2hhbmRvZmYubWpzXCI7XG5pbXBvcnQgKiBhcyBwcm90b2NvbCBmcm9tIFwiLi90eXBlcy9wcm90b2NvbC5tanNcIjtcbmltcG9ydCB7IHNhZmVFeGVjdXRlIH0gZnJvbSBcIi4vdXRpbHMvc2FmZUV4ZWN1dGUubWpzXCI7XG4vKipcbiAqIFRoZSBzY2hlbWEgdmVyc2lvbiBvZiB0aGUgc2VyaWFsaXplZCBydW4gc3RhdGUuIFRoaXMgaXMgdXNlZCB0byBlbnN1cmUgdGhhdCB0aGUgc2VyaWFsaXplZFxuICogcnVuIHN0YXRlIGlzIGNvbXBhdGlibGUgd2l0aCB0aGUgY3VycmVudCB2ZXJzaW9uIG9mIHRoZSBTREsuXG4gKiBJZiBhbnl0aGluZyBpbiB0aGlzIHNjaGVtYSBjaGFuZ2VzLCB0aGUgdmVyc2lvbiB3aWxsIGhhdmUgdG8gYmUgaW5jcmVtZW50ZWQuXG4gKi9cbmV4cG9ydCBjb25zdCBDVVJSRU5UX1NDSEVNQV9WRVJTSU9OID0gJzEuMCc7XG5jb25zdCAkc2NoZW1hVmVyc2lvbiA9IHoubGl0ZXJhbChDVVJSRU5UX1NDSEVNQV9WRVJTSU9OKTtcbmNvbnN0IHNlcmlhbGl6ZWRBZ2VudFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICBuYW1lOiB6LnN0cmluZygpLFxufSk7XG5jb25zdCBzZXJpYWxpemVkU3BhbkJhc2UgPSB6Lm9iamVjdCh7XG4gICAgb2JqZWN0OiB6LmxpdGVyYWwoJ3RyYWNlLnNwYW4nKSxcbiAgICBpZDogei5zdHJpbmcoKSxcbiAgICB0cmFjZV9pZDogei5zdHJpbmcoKSxcbiAgICBwYXJlbnRfaWQ6IHouc3RyaW5nKCkubnVsbGFibGUoKSxcbiAgICBzdGFydGVkX2F0OiB6LnN0cmluZygpLm51bGxhYmxlKCksXG4gICAgZW5kZWRfYXQ6IHouc3RyaW5nKCkubnVsbGFibGUoKSxcbiAgICBlcnJvcjogelxuICAgICAgICAub2JqZWN0KHtcbiAgICAgICAgbWVzc2FnZTogei5zdHJpbmcoKSxcbiAgICAgICAgZGF0YTogei5yZWNvcmQoei5zdHJpbmcoKSwgei5hbnkoKSkub3B0aW9uYWwoKSxcbiAgICB9KVxuICAgICAgICAubnVsbGFibGUoKSxcbiAgICBzcGFuX2RhdGE6IHoucmVjb3JkKHouc3RyaW5nKCksIHouYW55KCkpLFxufSk7XG5jb25zdCBTZXJpYWxpemVkU3BhbiA9IHNlcmlhbGl6ZWRTcGFuQmFzZS5leHRlbmQoe1xuICAgIHByZXZpb3VzX3NwYW46IHoubGF6eSgoKSA9PiBTZXJpYWxpemVkU3Bhbikub3B0aW9uYWwoKSxcbn0pO1xuY29uc3QgdXNhZ2VTY2hlbWEgPSB6Lm9iamVjdCh7XG4gICAgcmVxdWVzdHM6IHoubnVtYmVyKCksXG4gICAgaW5wdXRUb2tlbnM6IHoubnVtYmVyKCksXG4gICAgb3V0cHV0VG9rZW5zOiB6Lm51bWJlcigpLFxuICAgIHRvdGFsVG9rZW5zOiB6Lm51bWJlcigpLFxufSk7XG5jb25zdCBtb2RlbFJlc3BvbnNlU2NoZW1hID0gei5vYmplY3Qoe1xuICAgIHVzYWdlOiB1c2FnZVNjaGVtYSxcbiAgICBvdXRwdXQ6IHouYXJyYXkocHJvdG9jb2wuT3V0cHV0TW9kZWxJdGVtKSxcbiAgICByZXNwb25zZUlkOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgcHJvdmlkZXJEYXRhOiB6LnJlY29yZCh6LnN0cmluZygpLCB6LmFueSgpKS5vcHRpb25hbCgpLFxufSk7XG5jb25zdCBpdGVtU2NoZW1hID0gei5kaXNjcmltaW5hdGVkVW5pb24oJ3R5cGUnLCBbXG4gICAgei5vYmplY3Qoe1xuICAgICAgICB0eXBlOiB6LmxpdGVyYWwoJ21lc3NhZ2Vfb3V0cHV0X2l0ZW0nKSxcbiAgICAgICAgcmF3SXRlbTogcHJvdG9jb2wuQXNzaXN0YW50TWVzc2FnZUl0ZW0sXG4gICAgICAgIGFnZW50OiBzZXJpYWxpemVkQWdlbnRTY2hlbWEsXG4gICAgfSksXG4gICAgei5vYmplY3Qoe1xuICAgICAgICB0eXBlOiB6LmxpdGVyYWwoJ3Rvb2xfY2FsbF9pdGVtJyksXG4gICAgICAgIHJhd0l0ZW06IHByb3RvY29sLlRvb2xDYWxsSXRlbS5vcihwcm90b2NvbC5Ib3N0ZWRUb29sQ2FsbEl0ZW0pLFxuICAgICAgICBhZ2VudDogc2VyaWFsaXplZEFnZW50U2NoZW1hLFxuICAgIH0pLFxuICAgIHoub2JqZWN0KHtcbiAgICAgICAgdHlwZTogei5saXRlcmFsKCd0b29sX2NhbGxfb3V0cHV0X2l0ZW0nKSxcbiAgICAgICAgcmF3SXRlbTogcHJvdG9jb2wuRnVuY3Rpb25DYWxsUmVzdWx0SXRlbSxcbiAgICAgICAgYWdlbnQ6IHNlcmlhbGl6ZWRBZ2VudFNjaGVtYSxcbiAgICAgICAgb3V0cHV0OiB6LnN0cmluZygpLFxuICAgIH0pLFxuICAgIHoub2JqZWN0KHtcbiAgICAgICAgdHlwZTogei5saXRlcmFsKCdyZWFzb25pbmdfaXRlbScpLFxuICAgICAgICByYXdJdGVtOiBwcm90b2NvbC5SZWFzb25pbmdJdGVtLFxuICAgICAgICBhZ2VudDogc2VyaWFsaXplZEFnZW50U2NoZW1hLFxuICAgIH0pLFxuICAgIHoub2JqZWN0KHtcbiAgICAgICAgdHlwZTogei5saXRlcmFsKCdoYW5kb2ZmX2NhbGxfaXRlbScpLFxuICAgICAgICByYXdJdGVtOiBwcm90b2NvbC5GdW5jdGlvbkNhbGxJdGVtLFxuICAgICAgICBhZ2VudDogc2VyaWFsaXplZEFnZW50U2NoZW1hLFxuICAgIH0pLFxuICAgIHoub2JqZWN0KHtcbiAgICAgICAgdHlwZTogei5saXRlcmFsKCdoYW5kb2ZmX291dHB1dF9pdGVtJyksXG4gICAgICAgIHJhd0l0ZW06IHByb3RvY29sLkZ1bmN0aW9uQ2FsbFJlc3VsdEl0ZW0sXG4gICAgICAgIHNvdXJjZUFnZW50OiBzZXJpYWxpemVkQWdlbnRTY2hlbWEsXG4gICAgICAgIHRhcmdldEFnZW50OiBzZXJpYWxpemVkQWdlbnRTY2hlbWEsXG4gICAgfSksXG4gICAgei5vYmplY3Qoe1xuICAgICAgICB0eXBlOiB6LmxpdGVyYWwoJ3Rvb2xfYXBwcm92YWxfaXRlbScpLFxuICAgICAgICByYXdJdGVtOiBwcm90b2NvbC5GdW5jdGlvbkNhbGxJdGVtLm9yKHByb3RvY29sLkhvc3RlZFRvb2xDYWxsSXRlbSksXG4gICAgICAgIGFnZW50OiBzZXJpYWxpemVkQWdlbnRTY2hlbWEsXG4gICAgfSksXG5dKTtcbmNvbnN0IHNlcmlhbGl6ZWRUcmFjZVNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICBvYmplY3Q6IHoubGl0ZXJhbCgndHJhY2UnKSxcbiAgICBpZDogei5zdHJpbmcoKSxcbiAgICB3b3JrZmxvd19uYW1lOiB6LnN0cmluZygpLFxuICAgIGdyb3VwX2lkOiB6LnN0cmluZygpLm51bGxhYmxlKCksXG4gICAgbWV0YWRhdGE6IHoucmVjb3JkKHouc3RyaW5nKCksIHouYW55KCkpLFxufSk7XG5jb25zdCBzZXJpYWxpemVkUHJvY2Vzc2VkUmVzcG9uc2VTY2hlbWEgPSB6Lm9iamVjdCh7XG4gICAgbmV3SXRlbXM6IHouYXJyYXkoaXRlbVNjaGVtYSksXG4gICAgdG9vbHNVc2VkOiB6LmFycmF5KHouc3RyaW5nKCkpLFxuICAgIGhhbmRvZmZzOiB6LmFycmF5KHoub2JqZWN0KHtcbiAgICAgICAgdG9vbENhbGw6IHouYW55KCksXG4gICAgICAgIGhhbmRvZmY6IHouYW55KCksXG4gICAgfSkpLFxuICAgIGZ1bmN0aW9uczogei5hcnJheSh6Lm9iamVjdCh7XG4gICAgICAgIHRvb2xDYWxsOiB6LmFueSgpLFxuICAgICAgICB0b29sOiB6LmFueSgpLFxuICAgIH0pKSxcbiAgICBjb21wdXRlckFjdGlvbnM6IHouYXJyYXkoei5vYmplY3Qoe1xuICAgICAgICB0b29sQ2FsbDogei5hbnkoKSxcbiAgICAgICAgY29tcHV0ZXI6IHouYW55KCksXG4gICAgfSkpLFxuICAgIG1jcEFwcHJvdmFsUmVxdWVzdHM6IHpcbiAgICAgICAgLmFycmF5KHoub2JqZWN0KHtcbiAgICAgICAgcmVxdWVzdEl0ZW06IHoub2JqZWN0KHtcbiAgICAgICAgICAgIC8vIHByb3RvY29sLkhvc3RlZFRvb2xDYWxsSXRlbVxuICAgICAgICAgICAgcmF3SXRlbTogei5vYmplY3Qoe1xuICAgICAgICAgICAgICAgIHR5cGU6IHoubGl0ZXJhbCgnaG9zdGVkX3Rvb2xfY2FsbCcpLFxuICAgICAgICAgICAgICAgIG5hbWU6IHouc3RyaW5nKCksXG4gICAgICAgICAgICAgICAgYXJndW1lbnRzOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgICAgICAgICAgICAgc3RhdHVzOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgICAgICAgICAgICAgb3V0cHV0OiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgICAgICAgICAgICAgLy8gdGhpcyBhbHdheXMgZXhpc3RzIGJ1dCBtYXJrZWQgYXMgb3B0aW9uYWwgZm9yIGVhcmx5IHZlcnNpb24gY29tcGF0aWJpbGl0eTsgd2hlbiByZWxlYXNpbmcgMS4wLCB3ZSBjYW4gcmVtb3ZlIHRoZSBudWxsYWJsZSBhbmQgb3B0aW9uYWxcbiAgICAgICAgICAgICAgICBwcm92aWRlckRhdGE6IHoucmVjb3JkKHouc3RyaW5nKCksIHouYW55KCkpLm51bGxhYmxlKCkub3B0aW9uYWwoKSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICB9KSxcbiAgICAgICAgLy8gSG9zdGVkTUNQVG9vbFxuICAgICAgICBtY3BUb29sOiB6Lm9iamVjdCh7XG4gICAgICAgICAgICB0eXBlOiB6LmxpdGVyYWwoJ2hvc3RlZF90b29sJyksXG4gICAgICAgICAgICBuYW1lOiB6LmxpdGVyYWwoJ2hvc3RlZF9tY3AnKSxcbiAgICAgICAgICAgIHByb3ZpZGVyRGF0YTogei5yZWNvcmQoei5zdHJpbmcoKSwgei5hbnkoKSksXG4gICAgICAgIH0pLFxuICAgIH0pKVxuICAgICAgICAub3B0aW9uYWwoKSxcbn0pO1xuY29uc3QgZ3VhcmRyYWlsRnVuY3Rpb25PdXRwdXRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gICAgdHJpcHdpcmVUcmlnZ2VyZWQ6IHouYm9vbGVhbigpLFxuICAgIG91dHB1dEluZm86IHouYW55KCksXG59KTtcbmNvbnN0IGlucHV0R3VhcmRyYWlsUmVzdWx0U2NoZW1hID0gei5vYmplY3Qoe1xuICAgIGd1YXJkcmFpbDogei5vYmplY3Qoe1xuICAgICAgICB0eXBlOiB6LmxpdGVyYWwoJ2lucHV0JyksXG4gICAgICAgIG5hbWU6IHouc3RyaW5nKCksXG4gICAgfSksXG4gICAgb3V0cHV0OiBndWFyZHJhaWxGdW5jdGlvbk91dHB1dFNjaGVtYSxcbn0pO1xuY29uc3Qgb3V0cHV0R3VhcmRyYWlsUmVzdWx0U2NoZW1hID0gei5vYmplY3Qoe1xuICAgIGd1YXJkcmFpbDogei5vYmplY3Qoe1xuICAgICAgICB0eXBlOiB6LmxpdGVyYWwoJ291dHB1dCcpLFxuICAgICAgICBuYW1lOiB6LnN0cmluZygpLFxuICAgIH0pLFxuICAgIGFnZW50T3V0cHV0OiB6LmFueSgpLFxuICAgIGFnZW50OiBzZXJpYWxpemVkQWdlbnRTY2hlbWEsXG4gICAgb3V0cHV0OiBndWFyZHJhaWxGdW5jdGlvbk91dHB1dFNjaGVtYSxcbn0pO1xuZXhwb3J0IGNvbnN0IFNlcmlhbGl6ZWRSdW5TdGF0ZSA9IHoub2JqZWN0KHtcbiAgICAkc2NoZW1hVmVyc2lvbixcbiAgICBjdXJyZW50VHVybjogei5udW1iZXIoKSxcbiAgICBjdXJyZW50QWdlbnQ6IHNlcmlhbGl6ZWRBZ2VudFNjaGVtYSxcbiAgICBvcmlnaW5hbElucHV0OiB6LnN0cmluZygpLm9yKHouYXJyYXkocHJvdG9jb2wuTW9kZWxJdGVtKSksXG4gICAgbW9kZWxSZXNwb25zZXM6IHouYXJyYXkobW9kZWxSZXNwb25zZVNjaGVtYSksXG4gICAgY29udGV4dDogei5vYmplY3Qoe1xuICAgICAgICB1c2FnZTogdXNhZ2VTY2hlbWEsXG4gICAgICAgIGFwcHJvdmFsczogei5yZWNvcmQoei5zdHJpbmcoKSwgei5vYmplY3Qoe1xuICAgICAgICAgICAgYXBwcm92ZWQ6IHouYXJyYXkoei5zdHJpbmcoKSkub3Ioei5ib29sZWFuKCkpLFxuICAgICAgICAgICAgcmVqZWN0ZWQ6IHouYXJyYXkoei5zdHJpbmcoKSkub3Ioei5ib29sZWFuKCkpLFxuICAgICAgICB9KSksXG4gICAgICAgIGNvbnRleHQ6IHoucmVjb3JkKHouc3RyaW5nKCksIHouYW55KCkpLFxuICAgIH0pLFxuICAgIHRvb2xVc2VUcmFja2VyOiB6LnJlY29yZCh6LnN0cmluZygpLCB6LmFycmF5KHouc3RyaW5nKCkpKSxcbiAgICBtYXhUdXJuczogei5udW1iZXIoKSxcbiAgICBjdXJyZW50QWdlbnRTcGFuOiBTZXJpYWxpemVkU3Bhbi5udWxsYWJsZSgpLm9wdGlvbmFsKCksXG4gICAgbm9BY3RpdmVBZ2VudFJ1bjogei5ib29sZWFuKCksXG4gICAgaW5wdXRHdWFyZHJhaWxSZXN1bHRzOiB6LmFycmF5KGlucHV0R3VhcmRyYWlsUmVzdWx0U2NoZW1hKSxcbiAgICBvdXRwdXRHdWFyZHJhaWxSZXN1bHRzOiB6LmFycmF5KG91dHB1dEd1YXJkcmFpbFJlc3VsdFNjaGVtYSksXG4gICAgY3VycmVudFN0ZXA6IG5leHRTdGVwU2NoZW1hLm9wdGlvbmFsKCksXG4gICAgbGFzdE1vZGVsUmVzcG9uc2U6IG1vZGVsUmVzcG9uc2VTY2hlbWEub3B0aW9uYWwoKSxcbiAgICBnZW5lcmF0ZWRJdGVtczogei5hcnJheShpdGVtU2NoZW1hKSxcbiAgICBsYXN0UHJvY2Vzc2VkUmVzcG9uc2U6IHNlcmlhbGl6ZWRQcm9jZXNzZWRSZXNwb25zZVNjaGVtYS5vcHRpb25hbCgpLFxuICAgIHRyYWNlOiBzZXJpYWxpemVkVHJhY2VTY2hlbWEubnVsbGFibGUoKSxcbn0pO1xuLyoqXG4gKiBTZXJpYWxpemFibGUgc25hcHNob3Qgb2YgYW4gYWdlbnQncyBydW4sIGluY2x1ZGluZyBjb250ZXh0LCB1c2FnZSBhbmQgdHJhY2UuXG4gKiBXaGlsZSB0aGlzIGNsYXNzIGhhcyBwdWJsaWNseSB3cml0YWJsZSBwcm9wZXJ0aWVzIChwcmVmaXhlZCB3aXRoIGBfYCksIHRoZXkgYXJlIG5vdCBtZWFudCB0byBiZVxuICogdXNlZCBkaXJlY3RseS4gVG8gcmVhZCB0aGVzZSBwcm9wZXJ0aWVzLCB1c2UgdGhlIGBSdW5SZXN1bHRgIGluc3RlYWQuXG4gKlxuICogTWFuaXB1bGF0aW9uIG9mIHRoZSBzdGF0ZSBkaXJlY3RseSBjYW4gbGVhZCB0byB1bmV4cGVjdGVkIGJlaGF2aW9yIGFuZCBzaG91bGQgYmUgYXZvaWRlZC5cbiAqIEluc3RlYWQsIHVzZSB0aGUgYGFwcHJvdmVgIGFuZCBgcmVqZWN0YCBtZXRob2RzIHRvIGludGVyYWN0IHdpdGggdGhlIHN0YXRlLlxuICovXG5leHBvcnQgY2xhc3MgUnVuU3RhdGUge1xuICAgIC8qKlxuICAgICAqIEN1cnJlbnQgdHVybiBudW1iZXIgaW4gdGhlIGNvbnZlcnNhdGlvbi5cbiAgICAgKi9cbiAgICBfY3VycmVudFR1cm4gPSAwO1xuICAgIC8qKlxuICAgICAqIFRoZSBhZ2VudCBjdXJyZW50bHkgaGFuZGxpbmcgdGhlIGNvbnZlcnNhdGlvbi5cbiAgICAgKi9cbiAgICBfY3VycmVudEFnZW50O1xuICAgIC8qKlxuICAgICAqIE9yaWdpbmFsIHVzZXIgaW5wdXQgcHJpb3IgdG8gYW55IHByb2Nlc3NpbmcuXG4gICAgICovXG4gICAgX29yaWdpbmFsSW5wdXQ7XG4gICAgLyoqXG4gICAgICogUmVzcG9uc2VzIGZyb20gdGhlIG1vZGVsIHNvIGZhci5cbiAgICAgKi9cbiAgICBfbW9kZWxSZXNwb25zZXM7XG4gICAgLyoqXG4gICAgICogQWN0aXZlIHRyYWNpbmcgc3BhbiBmb3IgdGhlIGN1cnJlbnQgYWdlbnQgaWYgdHJhY2luZyBpcyBlbmFibGVkLlxuICAgICAqL1xuICAgIF9jdXJyZW50QWdlbnRTcGFuO1xuICAgIC8qKlxuICAgICAqIFJ1biBjb250ZXh0IHRyYWNraW5nIGFwcHJvdmFscywgdXNhZ2UsIGFuZCBvdGhlciBtZXRhZGF0YS5cbiAgICAgKi9cbiAgICBfY29udGV4dDtcbiAgICAvKipcbiAgICAgKiBUcmFja3Mgd2hhdCB0b29scyBlYWNoIGFnZW50IGhhcyB1c2VkLlxuICAgICAqL1xuICAgIF90b29sVXNlVHJhY2tlcjtcbiAgICAvKipcbiAgICAgKiBJdGVtcyBnZW5lcmF0ZWQgYnkgdGhlIGFnZW50IGR1cmluZyB0aGUgcnVuLlxuICAgICAqL1xuICAgIF9nZW5lcmF0ZWRJdGVtcztcbiAgICAvKipcbiAgICAgKiBNYXhpbXVtIGFsbG93ZWQgdHVybnMgYmVmb3JlIGZvcmNpbmcgdGVybWluYXRpb24uXG4gICAgICovXG4gICAgX21heFR1cm5zO1xuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhlIHJ1biBoYXMgYW4gYWN0aXZlIGFnZW50IHN0ZXAgaW4gcHJvZ3Jlc3MuXG4gICAgICovXG4gICAgX25vQWN0aXZlQWdlbnRSdW4gPSB0cnVlO1xuICAgIC8qKlxuICAgICAqIExhc3QgbW9kZWwgcmVzcG9uc2UgZm9yIHRoZSBwcmV2aW91cyB0dXJuLlxuICAgICAqL1xuICAgIF9sYXN0VHVyblJlc3BvbnNlO1xuICAgIC8qKlxuICAgICAqIFJlc3VsdHMgZnJvbSBpbnB1dCBndWFyZHJhaWxzIGFwcGxpZWQgdG8gdGhlIHJ1bi5cbiAgICAgKi9cbiAgICBfaW5wdXRHdWFyZHJhaWxSZXN1bHRzO1xuICAgIC8qKlxuICAgICAqIFJlc3VsdHMgZnJvbSBvdXRwdXQgZ3VhcmRyYWlscyBhcHBsaWVkIHRvIHRoZSBydW4uXG4gICAgICovXG4gICAgX291dHB1dEd1YXJkcmFpbFJlc3VsdHM7XG4gICAgLyoqXG4gICAgICogTmV4dCBzdGVwIGNvbXB1dGVkIGZvciB0aGUgYWdlbnQgdG8gdGFrZS5cbiAgICAgKi9cbiAgICBfY3VycmVudFN0ZXAgPSB1bmRlZmluZWQ7XG4gICAgLyoqXG4gICAgICogUGFyc2VkIG1vZGVsIHJlc3BvbnNlIGFmdGVyIGFwcGx5aW5nIGd1YXJkcmFpbHMgYW5kIHRvb2xzLlxuICAgICAqL1xuICAgIF9sYXN0UHJvY2Vzc2VkUmVzcG9uc2UgPSB1bmRlZmluZWQ7XG4gICAgLyoqXG4gICAgICogVHJhY2UgYXNzb2NpYXRlZCB3aXRoIHRoaXMgcnVuIGlmIHRyYWNpbmcgaXMgZW5hYmxlZC5cbiAgICAgKi9cbiAgICBfdHJhY2UgPSBudWxsO1xuICAgIGNvbnN0cnVjdG9yKGNvbnRleHQsIG9yaWdpbmFsSW5wdXQsIHN0YXJ0aW5nQWdlbnQsIG1heFR1cm5zKSB7XG4gICAgICAgIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICAgICAgICB0aGlzLl9vcmlnaW5hbElucHV0ID0gc3RydWN0dXJlZENsb25lKG9yaWdpbmFsSW5wdXQpO1xuICAgICAgICB0aGlzLl9tb2RlbFJlc3BvbnNlcyA9IFtdO1xuICAgICAgICB0aGlzLl9jdXJyZW50QWdlbnRTcGFuID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9jdXJyZW50QWdlbnQgPSBzdGFydGluZ0FnZW50O1xuICAgICAgICB0aGlzLl90b29sVXNlVHJhY2tlciA9IG5ldyBBZ2VudFRvb2xVc2VUcmFja2VyKCk7XG4gICAgICAgIHRoaXMuX2dlbmVyYXRlZEl0ZW1zID0gW107XG4gICAgICAgIHRoaXMuX21heFR1cm5zID0gbWF4VHVybnM7XG4gICAgICAgIHRoaXMuX2lucHV0R3VhcmRyYWlsUmVzdWx0cyA9IFtdO1xuICAgICAgICB0aGlzLl9vdXRwdXRHdWFyZHJhaWxSZXN1bHRzID0gW107XG4gICAgICAgIHRoaXMuX3RyYWNlID0gZ2V0Q3VycmVudFRyYWNlKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBoaXN0b3J5IG9mIHRoZSBhZ2VudCBydW4uIFRoaXMgaW5jbHVkZXMgdGhlIGlucHV0IGl0ZW1zIGFuZCB0aGUgbmV3IGl0ZW1zIGdlbmVyYXRlZCBkdXJpbmcgdGhlIHJ1bi5cbiAgICAgKlxuICAgICAqIFRoaXMgY2FuIGJlIHVzZWQgYXMgaW5wdXRzIGZvciB0aGUgbmV4dCBhZ2VudCBydW4uXG4gICAgICovXG4gICAgZ2V0IGhpc3RvcnkoKSB7XG4gICAgICAgIHJldHVybiBnZXRUdXJuSW5wdXQodGhpcy5fb3JpZ2luYWxJbnB1dCwgdGhpcy5fZ2VuZXJhdGVkSXRlbXMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFsbCBpbnRlcnJ1cHRpb25zIGlmIHRoZSBjdXJyZW50IHN0ZXAgaXMgYW4gaW50ZXJydXB0aW9uIG90aGVyd2lzZSByZXR1cm5zIGFuIGVtcHR5IGFycmF5LlxuICAgICAqL1xuICAgIGdldEludGVycnVwdGlvbnMoKSB7XG4gICAgICAgIGlmICh0aGlzLl9jdXJyZW50U3RlcD8udHlwZSAhPT0gJ25leHRfc3RlcF9pbnRlcnJ1cHRpb24nKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2N1cnJlbnRTdGVwLmRhdGEuaW50ZXJydXB0aW9ucztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQXBwcm92ZXMgYSB0b29sIGNhbGwgcmVxdWVzdGVkIGJ5IHRoZSBhZ2VudCB0aHJvdWdoIGFuIGludGVycnVwdGlvbiBhbmQgYXBwcm92YWwgaXRlbSByZXF1ZXN0LlxuICAgICAqXG4gICAgICogVG8gYXBwcm92ZSB0aGUgcmVxdWVzdCB1c2UgdGhpcyBtZXRob2QgYW5kIHRoZW4gcnVuIHRoZSBhZ2VudCBhZ2FpbiB3aXRoIHRoZSBzYW1lIHN0YXRlIG9iamVjdFxuICAgICAqIHRvIGNvbnRpbnVlIHRoZSBleGVjdXRpb24uXG4gICAgICpcbiAgICAgKiBCeSBkZWZhdWx0IGl0IHdpbGwgb25seSBhcHByb3ZlIHRoZSBjdXJyZW50IHRvb2wgY2FsbC4gVG8gYWxsb3cgdGhlIHRvb2wgdG8gYmUgdXNlZCBtdWx0aXBsZVxuICAgICAqIHRpbWVzIHRocm91Z2hvdXQgdGhlIHJ1biwgc2V0IHRoZSBgYWx3YXlzQXBwcm92ZWAgb3B0aW9uIHRvIGB0cnVlYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBhcHByb3ZhbEl0ZW0gLSBUaGUgdG9vbCBjYWxsIGFwcHJvdmFsIGl0ZW0gdG8gYXBwcm92ZS5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbnMgZm9yIHRoZSBhcHByb3ZhbC5cbiAgICAgKi9cbiAgICBhcHByb3ZlKGFwcHJvdmFsSXRlbSwgb3B0aW9ucyA9IHsgYWx3YXlzQXBwcm92ZTogZmFsc2UgfSkge1xuICAgICAgICB0aGlzLl9jb250ZXh0LmFwcHJvdmVUb29sKGFwcHJvdmFsSXRlbSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlamVjdHMgYSB0b29sIGNhbGwgcmVxdWVzdGVkIGJ5IHRoZSBhZ2VudCB0aHJvdWdoIGFuIGludGVycnVwdGlvbiBhbmQgYXBwcm92YWwgaXRlbSByZXF1ZXN0LlxuICAgICAqXG4gICAgICogVG8gcmVqZWN0IHRoZSByZXF1ZXN0IHVzZSB0aGlzIG1ldGhvZCBhbmQgdGhlbiBydW4gdGhlIGFnZW50IGFnYWluIHdpdGggdGhlIHNhbWUgc3RhdGUgb2JqZWN0XG4gICAgICogdG8gY29udGludWUgdGhlIGV4ZWN1dGlvbi5cbiAgICAgKlxuICAgICAqIEJ5IGRlZmF1bHQgaXQgd2lsbCBvbmx5IHJlamVjdCB0aGUgY3VycmVudCB0b29sIGNhbGwuIFRvIGFsbG93IHRoZSB0b29sIHRvIGJlIHVzZWQgbXVsdGlwbGVcbiAgICAgKiB0aW1lcyB0aHJvdWdob3V0IHRoZSBydW4sIHNldCB0aGUgYGFsd2F5c1JlamVjdGAgb3B0aW9uIHRvIGB0cnVlYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBhcHByb3ZhbEl0ZW0gLSBUaGUgdG9vbCBjYWxsIGFwcHJvdmFsIGl0ZW0gdG8gcmVqZWN0LlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9ucyBmb3IgdGhlIHJlamVjdGlvbi5cbiAgICAgKi9cbiAgICByZWplY3QoYXBwcm92YWxJdGVtLCBvcHRpb25zID0geyBhbHdheXNSZWplY3Q6IGZhbHNlIH0pIHtcbiAgICAgICAgdGhpcy5fY29udGV4dC5yZWplY3RUb29sKGFwcHJvdmFsSXRlbSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNlcmlhbGl6ZXMgdGhlIHJ1biBzdGF0ZSB0byBhIEpTT04gb2JqZWN0LlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2QgaXMgdXNlZCB0byBzZXJpYWxpemUgdGhlIHJ1biBzdGF0ZSB0byBhIEpTT04gb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG9cbiAgICAgKiByZXN1bWUgdGhlIHJ1biBsYXRlci5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFRoZSBzZXJpYWxpemVkIHJ1biBzdGF0ZS5cbiAgICAgKi9cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIGNvbnN0IG91dHB1dCA9IHtcbiAgICAgICAgICAgICRzY2hlbWFWZXJzaW9uOiBDVVJSRU5UX1NDSEVNQV9WRVJTSU9OLFxuICAgICAgICAgICAgY3VycmVudFR1cm46IHRoaXMuX2N1cnJlbnRUdXJuLFxuICAgICAgICAgICAgY3VycmVudEFnZW50OiB7XG4gICAgICAgICAgICAgICAgbmFtZTogdGhpcy5fY3VycmVudEFnZW50Lm5hbWUsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb3JpZ2luYWxJbnB1dDogdGhpcy5fb3JpZ2luYWxJbnB1dCxcbiAgICAgICAgICAgIG1vZGVsUmVzcG9uc2VzOiB0aGlzLl9tb2RlbFJlc3BvbnNlcy5tYXAoKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgdXNhZ2U6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RzOiByZXNwb25zZS51c2FnZS5yZXF1ZXN0cyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0VG9rZW5zOiByZXNwb25zZS51c2FnZS5pbnB1dFRva2VucyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dFRva2VuczogcmVzcG9uc2UudXNhZ2Uub3V0cHV0VG9rZW5zLFxuICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxUb2tlbnM6IHJlc3BvbnNlLnVzYWdlLnRvdGFsVG9rZW5zLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQ6IHJlc3BvbnNlLm91dHB1dCxcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2VJZDogcmVzcG9uc2UucmVzcG9uc2VJZCxcbiAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXJEYXRhOiByZXNwb25zZS5wcm92aWRlckRhdGEsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgY29udGV4dDogdGhpcy5fY29udGV4dC50b0pTT04oKSxcbiAgICAgICAgICAgIHRvb2xVc2VUcmFja2VyOiB0aGlzLl90b29sVXNlVHJhY2tlci50b0pTT04oKSxcbiAgICAgICAgICAgIG1heFR1cm5zOiB0aGlzLl9tYXhUdXJucyxcbiAgICAgICAgICAgIGN1cnJlbnRBZ2VudFNwYW46IHRoaXMuX2N1cnJlbnRBZ2VudFNwYW4/LnRvSlNPTigpLFxuICAgICAgICAgICAgbm9BY3RpdmVBZ2VudFJ1bjogdGhpcy5fbm9BY3RpdmVBZ2VudFJ1bixcbiAgICAgICAgICAgIGlucHV0R3VhcmRyYWlsUmVzdWx0czogdGhpcy5faW5wdXRHdWFyZHJhaWxSZXN1bHRzLFxuICAgICAgICAgICAgb3V0cHV0R3VhcmRyYWlsUmVzdWx0czogdGhpcy5fb3V0cHV0R3VhcmRyYWlsUmVzdWx0cy5tYXAoKHIpID0+ICh7XG4gICAgICAgICAgICAgICAgLi4ucixcbiAgICAgICAgICAgICAgICBhZ2VudDogci5hZ2VudC50b0pTT04oKSxcbiAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgIGN1cnJlbnRTdGVwOiB0aGlzLl9jdXJyZW50U3RlcCxcbiAgICAgICAgICAgIGxhc3RNb2RlbFJlc3BvbnNlOiB0aGlzLl9sYXN0VHVyblJlc3BvbnNlLFxuICAgICAgICAgICAgZ2VuZXJhdGVkSXRlbXM6IHRoaXMuX2dlbmVyYXRlZEl0ZW1zLm1hcCgoaXRlbSkgPT4gaXRlbS50b0pTT04oKSksXG4gICAgICAgICAgICBsYXN0UHJvY2Vzc2VkUmVzcG9uc2U6IHRoaXMuX2xhc3RQcm9jZXNzZWRSZXNwb25zZSxcbiAgICAgICAgICAgIHRyYWNlOiB0aGlzLl90cmFjZSA/IHRoaXMuX3RyYWNlLnRvSlNPTigpIDogbnVsbCxcbiAgICAgICAgfTtcbiAgICAgICAgLy8gcGFyc2luZyB0aGUgc2NoZW1hIHRvIGVuc3VyZSB0aGUgb3V0cHV0IGlzIHZhbGlkIGZvciByZXBhcnNpbmdcbiAgICAgICAgY29uc3QgcGFyc2VkID0gU2VyaWFsaXplZFJ1blN0YXRlLnNhZmVQYXJzZShvdXRwdXQpO1xuICAgICAgICBpZiAoIXBhcnNlZC5zdWNjZXNzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgU3lzdGVtRXJyb3IoYEZhaWxlZCB0byBzZXJpYWxpemUgcnVuIHN0YXRlLiAke3BhcnNlZC5lcnJvci5tZXNzYWdlfWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJzZWQuZGF0YTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VyaWFsaXplcyB0aGUgcnVuIHN0YXRlIHRvIGEgc3RyaW5nLlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2QgaXMgdXNlZCB0byBzZXJpYWxpemUgdGhlIHJ1biBzdGF0ZSB0byBhIHN0cmluZyB0aGF0IGNhbiBiZSB1c2VkIHRvXG4gICAgICogcmVzdW1lIHRoZSBydW4gbGF0ZXIuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgc2VyaWFsaXplZCBydW4gc3RhdGUuXG4gICAgICovXG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLnRvSlNPTigpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGVzZXJpYWxpemVzIGEgcnVuIHN0YXRlIGZyb20gYSBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyB1c2VkIHRvIGRlc2VyaWFsaXplIGEgcnVuIHN0YXRlIGZyb20gYSBzdHJpbmcgdGhhdCB3YXMgc2VyaWFsaXplZCB1c2luZyB0aGVcbiAgICAgKiBgdG9TdHJpbmdgIG1ldGhvZC5cbiAgICAgKi9cbiAgICBzdGF0aWMgYXN5bmMgZnJvbVN0cmluZyhpbml0aWFsQWdlbnQsIHN0cikge1xuICAgICAgICBjb25zdCBbcGFyc2luZ0Vycm9yLCBqc29uUmVzdWx0XSA9IGF3YWl0IHNhZmVFeGVjdXRlKCgpID0+IEpTT04ucGFyc2Uoc3RyKSk7XG4gICAgICAgIGlmIChwYXJzaW5nRXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBVc2VyRXJyb3IoYEZhaWxlZCB0byBwYXJzZSBydW4gc3RhdGUuICR7cGFyc2luZ0Vycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBwYXJzaW5nRXJyb3IubWVzc2FnZSA6IFN0cmluZyhwYXJzaW5nRXJyb3IpfWApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGN1cnJlbnRTY2hlbWFWZXJzaW9uID0ganNvblJlc3VsdC4kc2NoZW1hVmVyc2lvbjtcbiAgICAgICAgaWYgKCFjdXJyZW50U2NoZW1hVmVyc2lvbikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFVzZXJFcnJvcignUnVuIHN0YXRlIGlzIG1pc3Npbmcgc2NoZW1hIHZlcnNpb24nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY3VycmVudFNjaGVtYVZlcnNpb24gIT09IENVUlJFTlRfU0NIRU1BX1ZFUlNJT04pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBVc2VyRXJyb3IoYFJ1biBzdGF0ZSBzY2hlbWEgdmVyc2lvbiAke2N1cnJlbnRTY2hlbWFWZXJzaW9ufSBpcyBub3Qgc3VwcG9ydGVkLiBQbGVhc2UgdXNlIHZlcnNpb24gJHtDVVJSRU5UX1NDSEVNQV9WRVJTSU9OfWApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHN0YXRlSnNvbiA9IFNlcmlhbGl6ZWRSdW5TdGF0ZS5wYXJzZShKU09OLnBhcnNlKHN0cikpO1xuICAgICAgICBjb25zdCBhZ2VudE1hcCA9IGJ1aWxkQWdlbnRNYXAoaW5pdGlhbEFnZW50KTtcbiAgICAgICAgLy9cbiAgICAgICAgLy8gUmVidWlsZCB0aGUgY29udGV4dFxuICAgICAgICAvL1xuICAgICAgICBjb25zdCBjb250ZXh0ID0gbmV3IFJ1bkNvbnRleHQoc3RhdGVKc29uLmNvbnRleHQuY29udGV4dCk7XG4gICAgICAgIGNvbnRleHQuX3JlYnVpbGRBcHByb3ZhbHMoc3RhdGVKc29uLmNvbnRleHQuYXBwcm92YWxzKTtcbiAgICAgICAgLy9cbiAgICAgICAgLy8gRmluZCB0aGUgY3VycmVudCBhZ2VudCBmcm9tIHRoZSBpbml0aWFsIGFnZW50XG4gICAgICAgIC8vXG4gICAgICAgIGNvbnN0IGN1cnJlbnRBZ2VudCA9IGFnZW50TWFwLmdldChzdGF0ZUpzb24uY3VycmVudEFnZW50Lm5hbWUpO1xuICAgICAgICBpZiAoIWN1cnJlbnRBZ2VudCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFVzZXJFcnJvcihgQWdlbnQgJHtzdGF0ZUpzb24uY3VycmVudEFnZW50Lm5hbWV9IG5vdCBmb3VuZGApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHN0YXRlID0gbmV3IFJ1blN0YXRlKGNvbnRleHQsICcnLCBjdXJyZW50QWdlbnQsIHN0YXRlSnNvbi5tYXhUdXJucyk7XG4gICAgICAgIHN0YXRlLl9jdXJyZW50VHVybiA9IHN0YXRlSnNvbi5jdXJyZW50VHVybjtcbiAgICAgICAgLy8gcmVidWlsZCB0b29sIHVzZSB0cmFja2VyXG4gICAgICAgIHN0YXRlLl90b29sVXNlVHJhY2tlciA9IG5ldyBBZ2VudFRvb2xVc2VUcmFja2VyKCk7XG4gICAgICAgIGZvciAoY29uc3QgW2FnZW50TmFtZSwgdG9vbE5hbWVzXSBvZiBPYmplY3QuZW50cmllcyhzdGF0ZUpzb24udG9vbFVzZVRyYWNrZXIpKSB7XG4gICAgICAgICAgICBzdGF0ZS5fdG9vbFVzZVRyYWNrZXIuYWRkVG9vbFVzZShhZ2VudE1hcC5nZXQoYWdlbnROYW1lKSwgdG9vbE5hbWVzKTtcbiAgICAgICAgfVxuICAgICAgICAvLyByZWJ1aWxkIGN1cnJlbnQgYWdlbnQgc3BhblxuICAgICAgICBpZiAoc3RhdGVKc29uLmN1cnJlbnRBZ2VudFNwYW4pIHtcbiAgICAgICAgICAgIGlmICghc3RhdGVKc29uLnRyYWNlKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLndhcm4oJ1RyYWNlIGlzIG5vdCBzZXQsIHNraXBwaW5nIHRyYWNpbmcgc2V0dXAnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHRyYWNlID0gZ2V0R2xvYmFsVHJhY2VQcm92aWRlcigpLmNyZWF0ZVRyYWNlKHtcbiAgICAgICAgICAgICAgICB0cmFjZUlkOiBzdGF0ZUpzb24udHJhY2U/LmlkLFxuICAgICAgICAgICAgICAgIG5hbWU6IHN0YXRlSnNvbi50cmFjZT8ud29ya2Zsb3dfbmFtZSxcbiAgICAgICAgICAgICAgICBncm91cElkOiBzdGF0ZUpzb24udHJhY2U/Lmdyb3VwX2lkID8/IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBtZXRhZGF0YTogc3RhdGVKc29uLnRyYWNlPy5tZXRhZGF0YSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc3RhdGUuX2N1cnJlbnRBZ2VudFNwYW4gPSBkZXNlcmlhbGl6ZVNwYW4odHJhY2UsIHN0YXRlSnNvbi5jdXJyZW50QWdlbnRTcGFuKTtcbiAgICAgICAgICAgIHN0YXRlLl90cmFjZSA9IHRyYWNlO1xuICAgICAgICB9XG4gICAgICAgIHN0YXRlLl9ub0FjdGl2ZUFnZW50UnVuID0gc3RhdGVKc29uLm5vQWN0aXZlQWdlbnRSdW47XG4gICAgICAgIHN0YXRlLl9pbnB1dEd1YXJkcmFpbFJlc3VsdHMgPVxuICAgICAgICAgICAgc3RhdGVKc29uLmlucHV0R3VhcmRyYWlsUmVzdWx0cztcbiAgICAgICAgc3RhdGUuX291dHB1dEd1YXJkcmFpbFJlc3VsdHMgPSBzdGF0ZUpzb24ub3V0cHV0R3VhcmRyYWlsUmVzdWx0cy5tYXAoKHIpID0+ICh7XG4gICAgICAgICAgICAuLi5yLFxuICAgICAgICAgICAgYWdlbnQ6IGFnZW50TWFwLmdldChyLmFnZW50Lm5hbWUpLFxuICAgICAgICB9KSk7XG4gICAgICAgIHN0YXRlLl9jdXJyZW50U3RlcCA9IHN0YXRlSnNvbi5jdXJyZW50U3RlcDtcbiAgICAgICAgc3RhdGUuX29yaWdpbmFsSW5wdXQgPSBzdGF0ZUpzb24ub3JpZ2luYWxJbnB1dDtcbiAgICAgICAgc3RhdGUuX21vZGVsUmVzcG9uc2VzID0gc3RhdGVKc29uLm1vZGVsUmVzcG9uc2VzLm1hcChkZXNlcmlhbGl6ZU1vZGVsUmVzcG9uc2UpO1xuICAgICAgICBzdGF0ZS5fbGFzdFR1cm5SZXNwb25zZSA9IHN0YXRlSnNvbi5sYXN0TW9kZWxSZXNwb25zZVxuICAgICAgICAgICAgPyBkZXNlcmlhbGl6ZU1vZGVsUmVzcG9uc2Uoc3RhdGVKc29uLmxhc3RNb2RlbFJlc3BvbnNlKVxuICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIHN0YXRlLl9nZW5lcmF0ZWRJdGVtcyA9IHN0YXRlSnNvbi5nZW5lcmF0ZWRJdGVtcy5tYXAoKGl0ZW0pID0+IGRlc2VyaWFsaXplSXRlbShpdGVtLCBhZ2VudE1hcCkpO1xuICAgICAgICBzdGF0ZS5fbGFzdFByb2Nlc3NlZFJlc3BvbnNlID0gc3RhdGVKc29uLmxhc3RQcm9jZXNzZWRSZXNwb25zZVxuICAgICAgICAgICAgPyBhd2FpdCBkZXNlcmlhbGl6ZVByb2Nlc3NlZFJlc3BvbnNlKGFnZW50TWFwLCBzdGF0ZS5fY3VycmVudEFnZW50LCBzdGF0ZS5fY29udGV4dCwgc3RhdGVKc29uLmxhc3RQcm9jZXNzZWRSZXNwb25zZSlcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICBpZiAoc3RhdGVKc29uLmN1cnJlbnRTdGVwPy50eXBlID09PSAnbmV4dF9zdGVwX2hhbmRvZmYnKSB7XG4gICAgICAgICAgICBzdGF0ZS5fY3VycmVudFN0ZXAgPSB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ25leHRfc3RlcF9oYW5kb2ZmJyxcbiAgICAgICAgICAgICAgICBuZXdBZ2VudDogYWdlbnRNYXAuZ2V0KHN0YXRlSnNvbi5jdXJyZW50U3RlcC5uZXdBZ2VudC5uYW1lKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cbn1cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBidWlsZEFnZW50TWFwKGluaXRpYWxBZ2VudCkge1xuICAgIGNvbnN0IG1hcCA9IG5ldyBNYXAoKTtcbiAgICBjb25zdCBxdWV1ZSA9IFtpbml0aWFsQWdlbnRdO1xuICAgIHdoaWxlIChxdWV1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRBZ2VudCA9IHF1ZXVlLnNoaWZ0KCk7XG4gICAgICAgIGlmIChtYXAuaGFzKGN1cnJlbnRBZ2VudC5uYW1lKSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgbWFwLnNldChjdXJyZW50QWdlbnQubmFtZSwgY3VycmVudEFnZW50KTtcbiAgICAgICAgZm9yIChjb25zdCBoYW5kb2ZmIG9mIGN1cnJlbnRBZ2VudC5oYW5kb2Zmcykge1xuICAgICAgICAgICAgaWYgKGhhbmRvZmYgaW5zdGFuY2VvZiBBZ2VudCkge1xuICAgICAgICAgICAgICAgIGlmICghbWFwLmhhcyhoYW5kb2ZmLm5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHF1ZXVlLnB1c2goaGFuZG9mZik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaGFuZG9mZi5hZ2VudCkge1xuICAgICAgICAgICAgICAgIGlmICghbWFwLmhhcyhoYW5kb2ZmLmFnZW50Lm5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHF1ZXVlLnB1c2goaGFuZG9mZi5hZ2VudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtYXA7XG59XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVzZXJpYWxpemVTcGFuKHRyYWNlLCBzZXJpYWxpemVkU3Bhbikge1xuICAgIGNvbnN0IHNwYW5EYXRhID0gc2VyaWFsaXplZFNwYW4uc3Bhbl9kYXRhO1xuICAgIGNvbnN0IHByZXZpb3VzU3BhbiA9IHNlcmlhbGl6ZWRTcGFuLnByZXZpb3VzX3NwYW5cbiAgICAgICAgPyBkZXNlcmlhbGl6ZVNwYW4odHJhY2UsIHNlcmlhbGl6ZWRTcGFuLnByZXZpb3VzX3NwYW4pXG4gICAgICAgIDogdW5kZWZpbmVkO1xuICAgIGNvbnN0IHNwYW4gPSBnZXRHbG9iYWxUcmFjZVByb3ZpZGVyKCkuY3JlYXRlU3Bhbih7XG4gICAgICAgIHNwYW5JZDogc2VyaWFsaXplZFNwYW4uaWQsXG4gICAgICAgIHRyYWNlSWQ6IHNlcmlhbGl6ZWRTcGFuLnRyYWNlX2lkLFxuICAgICAgICBwYXJlbnRJZDogc2VyaWFsaXplZFNwYW4ucGFyZW50X2lkID8/IHVuZGVmaW5lZCxcbiAgICAgICAgc3RhcnRlZEF0OiBzZXJpYWxpemVkU3Bhbi5zdGFydGVkX2F0ID8/IHVuZGVmaW5lZCxcbiAgICAgICAgZW5kZWRBdDogc2VyaWFsaXplZFNwYW4uZW5kZWRfYXQgPz8gdW5kZWZpbmVkLFxuICAgICAgICBkYXRhOiBzcGFuRGF0YSxcbiAgICB9LCB0cmFjZSk7XG4gICAgc3Bhbi5wcmV2aW91c1NwYW4gPSBwcmV2aW91c1NwYW47XG4gICAgcmV0dXJuIHNwYW47XG59XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVzZXJpYWxpemVNb2RlbFJlc3BvbnNlKHNlcmlhbGl6ZWRNb2RlbFJlc3BvbnNlKSB7XG4gICAgY29uc3QgdXNhZ2UgPSBuZXcgVXNhZ2UoKTtcbiAgICB1c2FnZS5yZXF1ZXN0cyA9IHNlcmlhbGl6ZWRNb2RlbFJlc3BvbnNlLnVzYWdlLnJlcXVlc3RzO1xuICAgIHVzYWdlLmlucHV0VG9rZW5zID0gc2VyaWFsaXplZE1vZGVsUmVzcG9uc2UudXNhZ2UuaW5wdXRUb2tlbnM7XG4gICAgdXNhZ2Uub3V0cHV0VG9rZW5zID0gc2VyaWFsaXplZE1vZGVsUmVzcG9uc2UudXNhZ2Uub3V0cHV0VG9rZW5zO1xuICAgIHVzYWdlLnRvdGFsVG9rZW5zID0gc2VyaWFsaXplZE1vZGVsUmVzcG9uc2UudXNhZ2UudG90YWxUb2tlbnM7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdXNhZ2UsXG4gICAgICAgIG91dHB1dDogc2VyaWFsaXplZE1vZGVsUmVzcG9uc2Uub3V0cHV0Lm1hcCgoaXRlbSkgPT4gcHJvdG9jb2wuT3V0cHV0TW9kZWxJdGVtLnBhcnNlKGl0ZW0pKSxcbiAgICAgICAgcmVzcG9uc2VJZDogc2VyaWFsaXplZE1vZGVsUmVzcG9uc2UucmVzcG9uc2VJZCxcbiAgICAgICAgcHJvdmlkZXJEYXRhOiBzZXJpYWxpemVkTW9kZWxSZXNwb25zZS5wcm92aWRlckRhdGEsXG4gICAgfTtcbn1cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZXNlcmlhbGl6ZUl0ZW0oc2VyaWFsaXplZEl0ZW0sIGFnZW50TWFwKSB7XG4gICAgc3dpdGNoIChzZXJpYWxpemVkSXRlbS50eXBlKSB7XG4gICAgICAgIGNhc2UgJ21lc3NhZ2Vfb3V0cHV0X2l0ZW0nOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBSdW5NZXNzYWdlT3V0cHV0SXRlbShzZXJpYWxpemVkSXRlbS5yYXdJdGVtLCBhZ2VudE1hcC5nZXQoc2VyaWFsaXplZEl0ZW0uYWdlbnQubmFtZSkpO1xuICAgICAgICBjYXNlICd0b29sX2NhbGxfaXRlbSc6XG4gICAgICAgICAgICByZXR1cm4gbmV3IFJ1blRvb2xDYWxsSXRlbShzZXJpYWxpemVkSXRlbS5yYXdJdGVtLCBhZ2VudE1hcC5nZXQoc2VyaWFsaXplZEl0ZW0uYWdlbnQubmFtZSkpO1xuICAgICAgICBjYXNlICd0b29sX2NhbGxfb3V0cHV0X2l0ZW0nOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBSdW5Ub29sQ2FsbE91dHB1dEl0ZW0oc2VyaWFsaXplZEl0ZW0ucmF3SXRlbSwgYWdlbnRNYXAuZ2V0KHNlcmlhbGl6ZWRJdGVtLmFnZW50Lm5hbWUpLCBzZXJpYWxpemVkSXRlbS5vdXRwdXQpO1xuICAgICAgICBjYXNlICdyZWFzb25pbmdfaXRlbSc6XG4gICAgICAgICAgICByZXR1cm4gbmV3IFJ1blJlYXNvbmluZ0l0ZW0oc2VyaWFsaXplZEl0ZW0ucmF3SXRlbSwgYWdlbnRNYXAuZ2V0KHNlcmlhbGl6ZWRJdGVtLmFnZW50Lm5hbWUpKTtcbiAgICAgICAgY2FzZSAnaGFuZG9mZl9jYWxsX2l0ZW0nOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBSdW5IYW5kb2ZmQ2FsbEl0ZW0oc2VyaWFsaXplZEl0ZW0ucmF3SXRlbSwgYWdlbnRNYXAuZ2V0KHNlcmlhbGl6ZWRJdGVtLmFnZW50Lm5hbWUpKTtcbiAgICAgICAgY2FzZSAnaGFuZG9mZl9vdXRwdXRfaXRlbSc6XG4gICAgICAgICAgICByZXR1cm4gbmV3IFJ1bkhhbmRvZmZPdXRwdXRJdGVtKHNlcmlhbGl6ZWRJdGVtLnJhd0l0ZW0sIGFnZW50TWFwLmdldChzZXJpYWxpemVkSXRlbS5zb3VyY2VBZ2VudC5uYW1lKSwgYWdlbnRNYXAuZ2V0KHNlcmlhbGl6ZWRJdGVtLnRhcmdldEFnZW50Lm5hbWUpKTtcbiAgICAgICAgY2FzZSAndG9vbF9hcHByb3ZhbF9pdGVtJzpcbiAgICAgICAgICAgIHJldHVybiBuZXcgUnVuVG9vbEFwcHJvdmFsSXRlbShzZXJpYWxpemVkSXRlbS5yYXdJdGVtLCBhZ2VudE1hcC5nZXQoc2VyaWFsaXplZEl0ZW0uYWdlbnQubmFtZSkpO1xuICAgIH1cbn1cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGRlc2VyaWFsaXplUHJvY2Vzc2VkUmVzcG9uc2UoYWdlbnRNYXAsIGN1cnJlbnRBZ2VudCwgY29udGV4dCwgc2VyaWFsaXplZFByb2Nlc3NlZFJlc3BvbnNlKSB7XG4gICAgY29uc3QgYWxsVG9vbHMgPSBhd2FpdCBjdXJyZW50QWdlbnQuZ2V0QWxsVG9vbHMoY29udGV4dCk7XG4gICAgY29uc3QgdG9vbHMgPSBuZXcgTWFwKGFsbFRvb2xzXG4gICAgICAgIC5maWx0ZXIoKHRvb2wpID0+IHRvb2wudHlwZSA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgLm1hcCgodG9vbCkgPT4gW3Rvb2wubmFtZSwgdG9vbF0pKTtcbiAgICBjb25zdCBjb21wdXRlclRvb2xzID0gbmV3IE1hcChhbGxUb29sc1xuICAgICAgICAuZmlsdGVyKCh0b29sKSA9PiB0b29sLnR5cGUgPT09ICdjb21wdXRlcicpXG4gICAgICAgIC5tYXAoKHRvb2wpID0+IFt0b29sLm5hbWUsIHRvb2xdKSk7XG4gICAgY29uc3QgaGFuZG9mZnMgPSBuZXcgTWFwKGN1cnJlbnRBZ2VudC5oYW5kb2Zmcy5tYXAoKGVudHJ5KSA9PiB7XG4gICAgICAgIGlmIChlbnRyeSBpbnN0YW5jZW9mIEFnZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gW2VudHJ5Lm5hbWUsIGhhbmRvZmYoZW50cnkpXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW2VudHJ5LnRvb2xOYW1lLCBlbnRyeV07XG4gICAgfSkpO1xuICAgIGNvbnN0IHJlc3VsdCA9IHtcbiAgICAgICAgbmV3SXRlbXM6IHNlcmlhbGl6ZWRQcm9jZXNzZWRSZXNwb25zZS5uZXdJdGVtcy5tYXAoKGl0ZW0pID0+IGRlc2VyaWFsaXplSXRlbShpdGVtLCBhZ2VudE1hcCkpLFxuICAgICAgICB0b29sc1VzZWQ6IHNlcmlhbGl6ZWRQcm9jZXNzZWRSZXNwb25zZS50b29sc1VzZWQsXG4gICAgICAgIGhhbmRvZmZzOiBzZXJpYWxpemVkUHJvY2Vzc2VkUmVzcG9uc2UuaGFuZG9mZnMubWFwKChoYW5kb2ZmKSA9PiB7XG4gICAgICAgICAgICBpZiAoIWhhbmRvZmZzLmhhcyhoYW5kb2ZmLmhhbmRvZmYudG9vbE5hbWUpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFVzZXJFcnJvcihgSGFuZG9mZiAke2hhbmRvZmYuaGFuZG9mZi50b29sTmFtZX0gbm90IGZvdW5kYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHRvb2xDYWxsOiBoYW5kb2ZmLnRvb2xDYWxsLFxuICAgICAgICAgICAgICAgIGhhbmRvZmY6IGhhbmRvZmZzLmdldChoYW5kb2ZmLmhhbmRvZmYudG9vbE5hbWUpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSksXG4gICAgICAgIGZ1bmN0aW9uczogYXdhaXQgUHJvbWlzZS5hbGwoc2VyaWFsaXplZFByb2Nlc3NlZFJlc3BvbnNlLmZ1bmN0aW9ucy5tYXAoYXN5bmMgKGZ1bmN0aW9uQ2FsbCkgPT4ge1xuICAgICAgICAgICAgaWYgKCF0b29scy5oYXMoZnVuY3Rpb25DYWxsLnRvb2wubmFtZSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVXNlckVycm9yKGBUb29sICR7ZnVuY3Rpb25DYWxsLnRvb2wubmFtZX0gbm90IGZvdW5kYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHRvb2xDYWxsOiBmdW5jdGlvbkNhbGwudG9vbENhbGwsXG4gICAgICAgICAgICAgICAgdG9vbDogdG9vbHMuZ2V0KGZ1bmN0aW9uQ2FsbC50b29sLm5hbWUpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSkpLFxuICAgICAgICBjb21wdXRlckFjdGlvbnM6IHNlcmlhbGl6ZWRQcm9jZXNzZWRSZXNwb25zZS5jb21wdXRlckFjdGlvbnMubWFwKChjb21wdXRlckFjdGlvbikgPT4ge1xuICAgICAgICAgICAgY29uc3QgdG9vbE5hbWUgPSBjb21wdXRlckFjdGlvbi5jb21wdXRlci5uYW1lO1xuICAgICAgICAgICAgaWYgKCFjb21wdXRlclRvb2xzLmhhcyh0b29sTmFtZSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVXNlckVycm9yKGBDb21wdXRlciB0b29sICR7dG9vbE5hbWV9IG5vdCBmb3VuZGApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0b29sQ2FsbDogY29tcHV0ZXJBY3Rpb24udG9vbENhbGwsXG4gICAgICAgICAgICAgICAgY29tcHV0ZXI6IGNvbXB1dGVyVG9vbHMuZ2V0KHRvb2xOYW1lKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pLFxuICAgICAgICBtY3BBcHByb3ZhbFJlcXVlc3RzOiAoc2VyaWFsaXplZFByb2Nlc3NlZFJlc3BvbnNlLm1jcEFwcHJvdmFsUmVxdWVzdHMgPz8gW10pLm1hcCgoYXBwcm92YWxSZXF1ZXN0KSA9PiAoe1xuICAgICAgICAgICAgcmVxdWVzdEl0ZW06IG5ldyBSdW5Ub29sQXBwcm92YWxJdGVtKGFwcHJvdmFsUmVxdWVzdC5yZXF1ZXN0SXRlbVxuICAgICAgICAgICAgICAgIC5yYXdJdGVtLCBjdXJyZW50QWdlbnQpLFxuICAgICAgICAgICAgbWNwVG9vbDogYXBwcm92YWxSZXF1ZXN0Lm1jcFRvb2wsXG4gICAgICAgIH0pKSxcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgIC4uLnJlc3VsdCxcbiAgICAgICAgaGFzVG9vbHNPckFwcHJvdmFsc1RvUnVuKCkge1xuICAgICAgICAgICAgcmV0dXJuIChyZXN1bHQuaGFuZG9mZnMubGVuZ3RoID4gMCB8fFxuICAgICAgICAgICAgICAgIHJlc3VsdC5mdW5jdGlvbnMubGVuZ3RoID4gMCB8fFxuICAgICAgICAgICAgICAgIHJlc3VsdC5tY3BBcHByb3ZhbFJlcXVlc3RzLmxlbmd0aCA+IDAgfHxcbiAgICAgICAgICAgICAgICByZXN1bHQuY29tcHV0ZXJBY3Rpb25zLmxlbmd0aCA+IDApO1xuICAgICAgICB9LFxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ydW5TdGF0ZS5tanMubWFwIiwiaW1wb3J0IHsgQWdlbnQgfSBmcm9tIFwiLi9hZ2VudC5tanNcIjtcbmltcG9ydCB7IGRlZmluZUlucHV0R3VhcmRyYWlsLCBkZWZpbmVPdXRwdXRHdWFyZHJhaWwsIH0gZnJvbSBcIi4vZ3VhcmRyYWlsLm1qc1wiO1xuaW1wb3J0IHsgZ2V0RGVmYXVsdE1vZGVsUHJvdmlkZXIgfSBmcm9tIFwiLi9wcm92aWRlcnMubWpzXCI7XG5pbXBvcnQgeyBSdW5Db250ZXh0IH0gZnJvbSBcIi4vcnVuQ29udGV4dC5tanNcIjtcbmltcG9ydCB7IFJ1blJlc3VsdCwgU3RyZWFtZWRSdW5SZXN1bHQgfSBmcm9tIFwiLi9yZXN1bHQubWpzXCI7XG5pbXBvcnQgeyBSdW5Ib29rcyB9IGZyb20gXCIuL2xpZmVjeWNsZS5tanNcIjtcbmltcG9ydCBsb2dnZXIgZnJvbSBcIi4vbG9nZ2VyLm1qc1wiO1xuaW1wb3J0IHsgc2VyaWFsaXplVG9vbCwgc2VyaWFsaXplSGFuZG9mZiB9IGZyb20gXCIuL3V0aWxzL3NlcmlhbGl6ZS5tanNcIjtcbmltcG9ydCB7IEd1YXJkcmFpbEV4ZWN1dGlvbkVycm9yLCBJbnB1dEd1YXJkcmFpbFRyaXB3aXJlVHJpZ2dlcmVkLCBNYXhUdXJuc0V4Y2VlZGVkRXJyb3IsIE1vZGVsQmVoYXZpb3JFcnJvciwgT3V0cHV0R3VhcmRyYWlsVHJpcHdpcmVUcmlnZ2VyZWQsIFVzZXJFcnJvciwgfSBmcm9tIFwiLi9lcnJvcnMubWpzXCI7XG5pbXBvcnQgeyBhZGRTdGVwVG9SdW5SZXN1bHQsIGV4ZWN1dGVJbnRlcnJ1cHRlZFRvb2xzQW5kU2lkZUVmZmVjdHMsIGV4ZWN1dGVUb29sc0FuZFNpZGVFZmZlY3RzLCBtYXliZVJlc2V0VG9vbENob2ljZSwgcHJvY2Vzc01vZGVsUmVzcG9uc2UsIHN0cmVhbVN0ZXBJdGVtc1RvUnVuUmVzdWx0LCB9IGZyb20gXCIuL3J1bkltcGxlbWVudGF0aW9uLm1qc1wiO1xuaW1wb3J0IHsgZ2V0T3JDcmVhdGVUcmFjZSwgcmVzZXRDdXJyZW50U3Bhbiwgc2V0Q3VycmVudFNwYW4sIHdpdGhOZXdTcGFuQ29udGV4dCwgd2l0aFRyYWNlLCB9IGZyb20gXCIuL3RyYWNpbmcvY29udGV4dC5tanNcIjtcbmltcG9ydCB7IGNyZWF0ZUFnZW50U3Bhbiwgd2l0aEd1YXJkcmFpbFNwYW4gfSBmcm9tIFwiLi90cmFjaW5nL2luZGV4Lm1qc1wiO1xuaW1wb3J0IHsgVXNhZ2UgfSBmcm9tIFwiLi91c2FnZS5tanNcIjtcbmltcG9ydCB7IFJ1bkFnZW50VXBkYXRlZFN0cmVhbUV2ZW50LCBSdW5SYXdNb2RlbFN0cmVhbUV2ZW50IH0gZnJvbSBcIi4vZXZlbnRzLm1qc1wiO1xuaW1wb3J0IHsgUnVuU3RhdGUgfSBmcm9tIFwiLi9ydW5TdGF0ZS5tanNcIjtcbmltcG9ydCB7IFN0cmVhbUV2ZW50UmVzcG9uc2VDb21wbGV0ZWQgfSBmcm9tIFwiLi90eXBlcy9wcm90b2NvbC5tanNcIjtcbmltcG9ydCB7IGNvbnZlcnRBZ2VudE91dHB1dFR5cGVUb1NlcmlhbGl6YWJsZSB9IGZyb20gXCIuL3V0aWxzL3Rvb2xzLm1qc1wiO1xuaW1wb3J0IHsgZ3B0NVJlYXNvbmluZ1NldHRpbmdzUmVxdWlyZWQsIGlzR3B0NURlZmF1bHQgfSBmcm9tIFwiLi9kZWZhdWx0TW9kZWwubWpzXCI7XG5jb25zdCBERUZBVUxUX01BWF9UVVJOUyA9IDEwO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFRyYWNpbmcodHJhY2luZ0Rpc2FibGVkLCB0cmFjZUluY2x1ZGVTZW5zaXRpdmVEYXRhKSB7XG4gICAgaWYgKHRyYWNpbmdEaXNhYmxlZCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICh0cmFjZUluY2x1ZGVTZW5zaXRpdmVEYXRhKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gJ2VuYWJsZWRfd2l0aG91dF9kYXRhJztcbn1cbmZ1bmN0aW9uIHRvQWdlbnRJbnB1dExpc3Qob3JpZ2luYWxJbnB1dCkge1xuICAgIGlmICh0eXBlb2Ygb3JpZ2luYWxJbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIFt7IHR5cGU6ICdtZXNzYWdlJywgcm9sZTogJ3VzZXInLCBjb250ZW50OiBvcmlnaW5hbElucHV0IH1dO1xuICAgIH1cbiAgICByZXR1cm4gWy4uLm9yaWdpbmFsSW5wdXRdO1xufVxuLyoqXG4gKiBJbnRlcm5hbCBtb2R1bGUgZm9yIHRyYWNraW5nIHRoZSBpdGVtcyBpbiB0dXJucyBhbmQgZW5zdXJpbmcgdGhhdCB3ZSBkb24ndCBzZW5kIGR1cGxpY2F0ZSBpdGVtcy5cbiAqIFRoaXMgbG9naWMgaXMgdml0YWwgZm9yIHByb3Blcmx5IGhhbmRsaW5nIHRoZSBpdGVtcyB0byBzZW5kIGR1cmluZyBtdWx0aXBsZSB0dXJuc1xuICogd2hlbiB5b3UgdXNlIGVpdGhlciBgY29udmVyc2F0aW9uSWRgIG9yIGBwcmV2aW91c1Jlc3BvbnNlSWRgLlxuICogQm90aCBzY2VuYXJpb3MgZXhwZWN0IGFuIGFnZW50IGxvb3AgdG8gc2VuZCBvbmx5IG5ldyBpdGVtcyBmb3IgZWFjaCBSZXNwb25zZXMgQVBJIGNhbGwuXG4gKlxuICogc2VlIGFsc286IGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy9jb252ZXJzYXRpb24tc3RhdGU/YXBpLW1vZGU9cmVzcG9uc2VzXG4gKi9cbmNsYXNzIFNlcnZlckNvbnZlcnNhdGlvblRyYWNrZXIge1xuICAgIC8vIENvbnZlcnNhdGlvbiBJRDpcbiAgICAvLyAtIGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy9jb252ZXJzYXRpb24tc3RhdGU/YXBpLW1vZGU9cmVzcG9uc2VzI3VzaW5nLXRoZS1jb252ZXJzYXRpb25zLWFwaVxuICAgIC8vIC0gaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS9jb252ZXJzYXRpb25zL2NyZWF0ZVxuICAgIGNvbnZlcnNhdGlvbklkO1xuICAgIC8vIFByZXZpb3VzIFJlc3BvbnNlIElEOlxuICAgIC8vIGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy9jb252ZXJzYXRpb24tc3RhdGU/YXBpLW1vZGU9cmVzcG9uc2VzI3Bhc3NpbmctY29udGV4dC1mcm9tLXRoZS1wcmV2aW91cy1yZXNwb25zZVxuICAgIHByZXZpb3VzUmVzcG9uc2VJZDtcbiAgICAvLyBVc2luZyB0aGlzIGZsYWcgYmVjYXVzZSBXZWFrU2V0IGRvZXMgbm90IHByb3ZpZGUgYSB3YXkgdG8gY2hlY2sgaXRzIHNpemVcbiAgICBzZW50SW5pdGlhbElucHV0ID0gZmFsc2U7XG4gICAgLy8gVGhlIGl0ZW1zIGFscmVhZHkgc2VudCB0byB0aGUgbW9kZWw7IHVzaW5nIFdlYWtTZXQgZm9yIG1lbW9yeSBlZmZpY2llbmN5XG4gICAgc2VudEl0ZW1zID0gbmV3IFdlYWtTZXQoKTtcbiAgICAvLyBUaGUgaXRlbXMgcmVjZWl2ZWQgZnJvbSB0aGUgc2VydmVyOyB1c2luZyBXZWFrU2V0IGZvciBtZW1vcnkgZWZmaWNpZW5jeVxuICAgIHNlcnZlckl0ZW1zID0gbmV3IFdlYWtTZXQoKTtcbiAgICBjb25zdHJ1Y3Rvcih7IGNvbnZlcnNhdGlvbklkLCBwcmV2aW91c1Jlc3BvbnNlSWQsIH0pIHtcbiAgICAgICAgdGhpcy5jb252ZXJzYXRpb25JZCA9IGNvbnZlcnNhdGlvbklkID8/IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5wcmV2aW91c1Jlc3BvbnNlSWQgPSBwcmV2aW91c1Jlc3BvbnNlSWQgPz8gdW5kZWZpbmVkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQcmUtcG9wdWxhdGVzIHRyYWNrZXIgY2FjaGVzIGZyb20gYW4gZXhpc3RpbmcgUnVuU3RhdGUgd2hlbiByZXN1bWluZyBzZXJ2ZXItbWFuYWdlZCBydW5zLlxuICAgICAqL1xuICAgIHByaW1lRnJvbVN0YXRlKHsgb3JpZ2luYWxJbnB1dCwgZ2VuZXJhdGVkSXRlbXMsIG1vZGVsUmVzcG9uc2VzLCB9KSB7XG4gICAgICAgIGlmICh0aGlzLnNlbnRJbml0aWFsSW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgdG9BZ2VudElucHV0TGlzdChvcmlnaW5hbElucHV0KSkge1xuICAgICAgICAgICAgaWYgKGl0ZW0gJiYgdHlwZW9mIGl0ZW0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZW50SXRlbXMuYWRkKGl0ZW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2VudEluaXRpYWxJbnB1dCA9IHRydWU7XG4gICAgICAgIGNvbnN0IGxhdGVzdFJlc3BvbnNlID0gbW9kZWxSZXNwb25zZXNbbW9kZWxSZXNwb25zZXMubGVuZ3RoIC0gMV07XG4gICAgICAgIGZvciAoY29uc3QgcmVzcG9uc2Ugb2YgbW9kZWxSZXNwb25zZXMpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiByZXNwb25zZS5vdXRwdXQpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXRlbSAmJiB0eXBlb2YgaXRlbSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXJ2ZXJJdGVtcy5hZGQoaXRlbSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5jb252ZXJzYXRpb25JZCAmJiBsYXRlc3RSZXNwb25zZT8ucmVzcG9uc2VJZCkge1xuICAgICAgICAgICAgdGhpcy5wcmV2aW91c1Jlc3BvbnNlSWQgPSBsYXRlc3RSZXNwb25zZS5yZXNwb25zZUlkO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBnZW5lcmF0ZWRJdGVtcykge1xuICAgICAgICAgICAgY29uc3QgcmF3SXRlbSA9IGl0ZW0ucmF3SXRlbTtcbiAgICAgICAgICAgIGlmICghcmF3SXRlbSB8fCB0eXBlb2YgcmF3SXRlbSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLnNlcnZlckl0ZW1zLmhhcyhyYXdJdGVtKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2VudEl0ZW1zLmFkZChyYXdJdGVtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICB0cmFja1NlcnZlckl0ZW1zKG1vZGVsUmVzcG9uc2UpIHtcbiAgICAgICAgaWYgKCFtb2RlbFJlc3BvbnNlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIG1vZGVsUmVzcG9uc2Uub3V0cHV0KSB7XG4gICAgICAgICAgICBpZiAoaXRlbSAmJiB0eXBlb2YgaXRlbSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNlcnZlckl0ZW1zLmFkZChpdGVtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuY29udmVyc2F0aW9uSWQgJiZcbiAgICAgICAgICAgIHRoaXMucHJldmlvdXNSZXNwb25zZUlkICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIG1vZGVsUmVzcG9uc2UucmVzcG9uc2VJZCkge1xuICAgICAgICAgICAgdGhpcy5wcmV2aW91c1Jlc3BvbnNlSWQgPSBtb2RlbFJlc3BvbnNlLnJlc3BvbnNlSWQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcHJlcGFyZUlucHV0KG9yaWdpbmFsSW5wdXQsIGdlbmVyYXRlZEl0ZW1zKSB7XG4gICAgICAgIGNvbnN0IGlucHV0SXRlbXMgPSBbXTtcbiAgICAgICAgaWYgKCF0aGlzLnNlbnRJbml0aWFsSW5wdXQpIHtcbiAgICAgICAgICAgIGNvbnN0IGluaXRpYWxJdGVtcyA9IHRvQWdlbnRJbnB1dExpc3Qob3JpZ2luYWxJbnB1dCk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgaW5pdGlhbEl0ZW1zKSB7XG4gICAgICAgICAgICAgICAgaW5wdXRJdGVtcy5wdXNoKGl0ZW0pO1xuICAgICAgICAgICAgICAgIGlmIChpdGVtICYmIHR5cGVvZiBpdGVtID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbnRJdGVtcy5hZGQoaXRlbSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zZW50SW5pdGlhbElucHV0ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgZ2VuZXJhdGVkSXRlbXMpIHtcbiAgICAgICAgICAgIGlmIChpdGVtLnR5cGUgPT09ICd0b29sX2FwcHJvdmFsX2l0ZW0nKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCByYXdJdGVtID0gaXRlbS5yYXdJdGVtO1xuICAgICAgICAgICAgaWYgKCFyYXdJdGVtIHx8IHR5cGVvZiByYXdJdGVtICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuc2VudEl0ZW1zLmhhcyhyYXdJdGVtKSB8fCB0aGlzLnNlcnZlckl0ZW1zLmhhcyhyYXdJdGVtKSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaW5wdXRJdGVtcy5wdXNoKHJhd0l0ZW0pO1xuICAgICAgICAgICAgdGhpcy5zZW50SXRlbXMuYWRkKHJhd0l0ZW0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbnB1dEl0ZW1zO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRUdXJuSW5wdXQob3JpZ2luYWxJbnB1dCwgZ2VuZXJhdGVkSXRlbXMpIHtcbiAgICBjb25zdCByYXdJdGVtcyA9IGdlbmVyYXRlZEl0ZW1zXG4gICAgICAgIC5maWx0ZXIoKGl0ZW0pID0+IGl0ZW0udHlwZSAhPT0gJ3Rvb2xfYXBwcm92YWxfaXRlbScpIC8vIGRvbid0IGluY2x1ZGUgYXBwcm92YWwgaXRlbXMgdG8gYXZvaWQgZG91YmxlIGZ1bmN0aW9uIGNhbGxzXG4gICAgICAgIC5tYXAoKGl0ZW0pID0+IGl0ZW0ucmF3SXRlbSk7XG4gICAgcmV0dXJuIFsuLi50b0FnZW50SW5wdXRMaXN0KG9yaWdpbmFsSW5wdXQpLCAuLi5yYXdJdGVtc107XG59XG4vKipcbiAqIEEgUnVubmVyIGlzIHJlc3BvbnNpYmxlIGZvciBydW5uaW5nIGFuIGFnZW50IHdvcmtmbG93LlxuICovXG5leHBvcnQgY2xhc3MgUnVubmVyIGV4dGVuZHMgUnVuSG9va3Mge1xuICAgIGNvbmZpZztcbiAgICBpbnB1dEd1YXJkcmFpbERlZnM7XG4gICAgb3V0cHV0R3VhcmRyYWlsRGVmcztcbiAgICBjb25zdHJ1Y3Rvcihjb25maWcgPSB7fSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmNvbmZpZyA9IHtcbiAgICAgICAgICAgIG1vZGVsUHJvdmlkZXI6IGNvbmZpZy5tb2RlbFByb3ZpZGVyID8/IGdldERlZmF1bHRNb2RlbFByb3ZpZGVyKCksXG4gICAgICAgICAgICBtb2RlbDogY29uZmlnLm1vZGVsLFxuICAgICAgICAgICAgbW9kZWxTZXR0aW5nczogY29uZmlnLm1vZGVsU2V0dGluZ3MsXG4gICAgICAgICAgICBoYW5kb2ZmSW5wdXRGaWx0ZXI6IGNvbmZpZy5oYW5kb2ZmSW5wdXRGaWx0ZXIsXG4gICAgICAgICAgICBpbnB1dEd1YXJkcmFpbHM6IGNvbmZpZy5pbnB1dEd1YXJkcmFpbHMsXG4gICAgICAgICAgICBvdXRwdXRHdWFyZHJhaWxzOiBjb25maWcub3V0cHV0R3VhcmRyYWlscyxcbiAgICAgICAgICAgIHRyYWNpbmdEaXNhYmxlZDogY29uZmlnLnRyYWNpbmdEaXNhYmxlZCA/PyBmYWxzZSxcbiAgICAgICAgICAgIHRyYWNlSW5jbHVkZVNlbnNpdGl2ZURhdGE6IGNvbmZpZy50cmFjZUluY2x1ZGVTZW5zaXRpdmVEYXRhID8/IHRydWUsXG4gICAgICAgICAgICB3b3JrZmxvd05hbWU6IGNvbmZpZy53b3JrZmxvd05hbWUgPz8gJ0FnZW50IHdvcmtmbG93JyxcbiAgICAgICAgICAgIHRyYWNlSWQ6IGNvbmZpZy50cmFjZUlkLFxuICAgICAgICAgICAgZ3JvdXBJZDogY29uZmlnLmdyb3VwSWQsXG4gICAgICAgICAgICB0cmFjZU1ldGFkYXRhOiBjb25maWcudHJhY2VNZXRhZGF0YSxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5pbnB1dEd1YXJkcmFpbERlZnMgPSAoY29uZmlnLmlucHV0R3VhcmRyYWlscyA/PyBbXSkubWFwKGRlZmluZUlucHV0R3VhcmRyYWlsKTtcbiAgICAgICAgdGhpcy5vdXRwdXRHdWFyZHJhaWxEZWZzID0gKGNvbmZpZy5vdXRwdXRHdWFyZHJhaWxzID8/IFtdKS5tYXAoZGVmaW5lT3V0cHV0R3VhcmRyYWlsKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgYXN5bmMgI3J1bkluZGl2aWR1YWxOb25TdHJlYW0oc3RhcnRpbmdBZ2VudCwgaW5wdXQsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHdpdGhOZXdTcGFuQ29udGV4dChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAvLyBpZiB3ZSBoYXZlIGEgc2F2ZWQgc3RhdGUgd2UgdXNlIHRoYXQgb25lLCBvdGhlcndpc2Ugd2UgY3JlYXRlIGEgbmV3IG9uZVxuICAgICAgICAgICAgY29uc3QgaXNSZXN1bWVkU3RhdGUgPSBpbnB1dCBpbnN0YW5jZW9mIFJ1blN0YXRlO1xuICAgICAgICAgICAgY29uc3Qgc3RhdGUgPSBpc1Jlc3VtZWRTdGF0ZVxuICAgICAgICAgICAgICAgID8gaW5wdXRcbiAgICAgICAgICAgICAgICA6IG5ldyBSdW5TdGF0ZShvcHRpb25zLmNvbnRleHQgaW5zdGFuY2VvZiBSdW5Db250ZXh0XG4gICAgICAgICAgICAgICAgICAgID8gb3B0aW9ucy5jb250ZXh0XG4gICAgICAgICAgICAgICAgICAgIDogbmV3IFJ1bkNvbnRleHQob3B0aW9ucy5jb250ZXh0KSwgaW5wdXQsIHN0YXJ0aW5nQWdlbnQsIG9wdGlvbnMubWF4VHVybnMgPz8gREVGQVVMVF9NQVhfVFVSTlMpO1xuICAgICAgICAgICAgY29uc3Qgc2VydmVyQ29udmVyc2F0aW9uVHJhY2tlciA9IG9wdGlvbnMuY29udmVyc2F0aW9uSWQgfHwgb3B0aW9ucy5wcmV2aW91c1Jlc3BvbnNlSWRcbiAgICAgICAgICAgICAgICA/IG5ldyBTZXJ2ZXJDb252ZXJzYXRpb25UcmFja2VyKHtcbiAgICAgICAgICAgICAgICAgICAgY29udmVyc2F0aW9uSWQ6IG9wdGlvbnMuY29udmVyc2F0aW9uSWQsXG4gICAgICAgICAgICAgICAgICAgIHByZXZpb3VzUmVzcG9uc2VJZDogb3B0aW9ucy5wcmV2aW91c1Jlc3BvbnNlSWQsXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGlmIChzZXJ2ZXJDb252ZXJzYXRpb25UcmFja2VyICYmIGlzUmVzdW1lZFN0YXRlKSB7XG4gICAgICAgICAgICAgICAgc2VydmVyQ29udmVyc2F0aW9uVHJhY2tlci5wcmltZUZyb21TdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsSW5wdXQ6IHN0YXRlLl9vcmlnaW5hbElucHV0LFxuICAgICAgICAgICAgICAgICAgICBnZW5lcmF0ZWRJdGVtczogc3RhdGUuX2dlbmVyYXRlZEl0ZW1zLFxuICAgICAgICAgICAgICAgICAgICBtb2RlbFJlc3BvbnNlczogc3RhdGUuX21vZGVsUmVzcG9uc2VzLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBleHBsaWN0bHlNb2RlbFNldCA9IChzdGF0ZS5fY3VycmVudEFnZW50Lm1vZGVsICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLl9jdXJyZW50QWdlbnQubW9kZWwgIT09ICcnKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMuY29uZmlnLm1vZGVsICE9PSB1bmRlZmluZWQgJiYgdGhpcy5jb25maWcubW9kZWwgIT09ICcnKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG1vZGVsID0gc2VsZWN0TW9kZWwoc3RhdGUuX2N1cnJlbnRBZ2VudC5tb2RlbCwgdGhpcy5jb25maWcubW9kZWwpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG1vZGVsID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwgPSBhd2FpdCB0aGlzLmNvbmZpZy5tb2RlbFByb3ZpZGVyLmdldE1vZGVsKG1vZGVsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBpZiB3ZSBkb24ndCBoYXZlIGEgY3VycmVudCBzdGVwLCB3ZSB0cmVhdCB0aGlzIGFzIGEgbmV3IHJ1blxuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5fY3VycmVudFN0ZXAgPSBzdGF0ZS5fY3VycmVudFN0ZXAgPz8ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25leHRfc3RlcF9ydW5fYWdhaW4nLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUuX2N1cnJlbnRTdGVwLnR5cGUgPT09ICduZXh0X3N0ZXBfaW50ZXJydXB0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCdDb250aW51aW5nIGZyb20gaW50ZXJydXB0aW9uJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXN0YXRlLl9sYXN0VHVyblJlc3BvbnNlIHx8ICFzdGF0ZS5fbGFzdFByb2Nlc3NlZFJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFVzZXJFcnJvcignTm8gbW9kZWwgcmVzcG9uc2UgZm91bmQgaW4gcHJldmlvdXMgc3RhdGUnLCBzdGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0dXJuUmVzdWx0ID0gYXdhaXQgZXhlY3V0ZUludGVycnVwdGVkVG9vbHNBbmRTaWRlRWZmZWN0cyhzdGF0ZS5fY3VycmVudEFnZW50LCBzdGF0ZS5fb3JpZ2luYWxJbnB1dCwgc3RhdGUuX2dlbmVyYXRlZEl0ZW1zLCBzdGF0ZS5fbGFzdFR1cm5SZXNwb25zZSwgc3RhdGUuX2xhc3RQcm9jZXNzZWRSZXNwb25zZSwgdGhpcywgc3RhdGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuX3Rvb2xVc2VUcmFja2VyLmFkZFRvb2xVc2Uoc3RhdGUuX2N1cnJlbnRBZ2VudCwgc3RhdGUuX2xhc3RQcm9jZXNzZWRSZXNwb25zZS50b29sc1VzZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuX29yaWdpbmFsSW5wdXQgPSB0dXJuUmVzdWx0Lm9yaWdpbmFsSW5wdXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5fZ2VuZXJhdGVkSXRlbXMgPSB0dXJuUmVzdWx0LmdlbmVyYXRlZEl0ZW1zO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuX2N1cnJlbnRTdGVwID0gdHVyblJlc3VsdC5uZXh0U3RlcDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0dXJuUmVzdWx0Lm5leHRTdGVwLnR5cGUgPT09ICduZXh0X3N0ZXBfaW50ZXJydXB0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdlIGFyZSBzdGlsbCBpbiBhbiBpbnRlcnJ1cHRpb24sIHNvIHdlIG5lZWQgdG8gYXZvaWQgYW4gaW5maW5pdGUgbG9vcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUnVuUmVzdWx0KHN0YXRlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5fY3VycmVudFN0ZXAudHlwZSA9PT0gJ25leHRfc3RlcF9ydW5fYWdhaW4nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBoYW5kb2ZmcyA9IGF3YWl0IHN0YXRlLl9jdXJyZW50QWdlbnQuZ2V0RW5hYmxlZEhhbmRvZmZzKHN0YXRlLl9jb250ZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc3RhdGUuX2N1cnJlbnRBZ2VudFNwYW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBoYW5kb2ZmTmFtZXMgPSBoYW5kb2Zmcy5tYXAoKGgpID0+IGguYWdlbnROYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5fY3VycmVudEFnZW50U3BhbiA9IGNyZWF0ZUFnZW50U3Bhbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHN0YXRlLl9jdXJyZW50QWdlbnQubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRvZmZzOiBoYW5kb2ZmTmFtZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXRfdHlwZTogc3RhdGUuX2N1cnJlbnRBZ2VudC5vdXRwdXRTY2hlbWFOYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLl9jdXJyZW50QWdlbnRTcGFuLnN0YXJ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0Q3VycmVudFNwYW4oc3RhdGUuX2N1cnJlbnRBZ2VudFNwYW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdG9vbHMgPSBhd2FpdCBzdGF0ZS5fY3VycmVudEFnZW50LmdldEFsbFRvb2xzKHN0YXRlLl9jb250ZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlcmlhbGl6ZWRUb29scyA9IHRvb2xzLm1hcCgodCkgPT4gc2VyaWFsaXplVG9vbCh0KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzZXJpYWxpemVkSGFuZG9mZnMgPSBoYW5kb2Zmcy5tYXAoKGgpID0+IHNlcmlhbGl6ZUhhbmRvZmYoaCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlLl9jdXJyZW50QWdlbnRTcGFuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuX2N1cnJlbnRBZ2VudFNwYW4uc3BhbkRhdGEudG9vbHMgPSB0b29scy5tYXAoKHQpID0+IHQubmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5fY3VycmVudFR1cm4rKztcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5fY3VycmVudFR1cm4gPiBzdGF0ZS5fbWF4VHVybnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5fY3VycmVudEFnZW50U3Bhbj8uc2V0RXJyb3Ioe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnTWF4IHR1cm5zIGV4Y2VlZGVkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogeyBtYXhfdHVybnM6IHN0YXRlLl9tYXhUdXJucyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBNYXhUdXJuc0V4Y2VlZGVkRXJyb3IoYE1heCB0dXJucyAoJHtzdGF0ZS5fbWF4VHVybnN9KSBleGNlZWRlZGAsIHN0YXRlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZyhgUnVubmluZyBhZ2VudCAke3N0YXRlLl9jdXJyZW50QWdlbnQubmFtZX0gKHR1cm4gJHtzdGF0ZS5fY3VycmVudFR1cm59KWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlLl9jdXJyZW50VHVybiA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuI3J1bklucHV0R3VhcmRyYWlscyhzdGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0dXJuSW5wdXQgPSBzZXJ2ZXJDb252ZXJzYXRpb25UcmFja2VyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBzZXJ2ZXJDb252ZXJzYXRpb25UcmFja2VyLnByZXBhcmVJbnB1dChzdGF0ZS5fb3JpZ2luYWxJbnB1dCwgc3RhdGUuX2dlbmVyYXRlZEl0ZW1zKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogZ2V0VHVybklucHV0KHN0YXRlLl9vcmlnaW5hbElucHV0LCBzdGF0ZS5fZ2VuZXJhdGVkSXRlbXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlLl9ub0FjdGl2ZUFnZW50UnVuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuX2N1cnJlbnRBZ2VudC5lbWl0KCdhZ2VudF9zdGFydCcsIHN0YXRlLl9jb250ZXh0LCBzdGF0ZS5fY3VycmVudEFnZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ2FnZW50X3N0YXJ0Jywgc3RhdGUuX2NvbnRleHQsIHN0YXRlLl9jdXJyZW50QWdlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG1vZGVsU2V0dGluZ3MgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4udGhpcy5jb25maWcubW9kZWxTZXR0aW5ncyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5zdGF0ZS5fY3VycmVudEFnZW50Lm1vZGVsU2V0dGluZ3MsXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYWdlbnRNb2RlbFNldHRpbmdzID0gc3RhdGUuX2N1cnJlbnRBZ2VudC5tb2RlbFNldHRpbmdzO1xuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWxTZXR0aW5ncyA9IGFkanVzdE1vZGVsU2V0dGluZ3NGb3JOb25HUFQ1UnVubmVyTW9kZWwoZXhwbGljdGx5TW9kZWxTZXQsIGFnZW50TW9kZWxTZXR0aW5ncywgbW9kZWwsIG1vZGVsU2V0dGluZ3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWxTZXR0aW5ncyA9IG1heWJlUmVzZXRUb29sQ2hvaWNlKHN0YXRlLl9jdXJyZW50QWdlbnQsIHN0YXRlLl90b29sVXNlVHJhY2tlciwgbW9kZWxTZXR0aW5ncyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwcmV2aW91c1Jlc3BvbnNlSWQgPSBzZXJ2ZXJDb252ZXJzYXRpb25UcmFja2VyPy5wcmV2aW91c1Jlc3BvbnNlSWQgPz9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLnByZXZpb3VzUmVzcG9uc2VJZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbnZlcnNhdGlvbklkID0gc2VydmVyQ29udmVyc2F0aW9uVHJhY2tlcj8uY29udmVyc2F0aW9uSWQgPz9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmNvbnZlcnNhdGlvbklkO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuX2xhc3RUdXJuUmVzcG9uc2UgPSBhd2FpdCBtb2RlbC5nZXRSZXNwb25zZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3lzdGVtSW5zdHJ1Y3Rpb25zOiBhd2FpdCBzdGF0ZS5fY3VycmVudEFnZW50LmdldFN5c3RlbVByb21wdChzdGF0ZS5fY29udGV4dCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvbXB0OiBhd2FpdCBzdGF0ZS5fY3VycmVudEFnZW50LmdldFByb21wdChzdGF0ZS5fY29udGV4dCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRXhwbGljaXQgYWdlbnQvcnVuIGNvbmZpZyBtb2RlbHMgc2hvdWxkIHRha2UgcHJlY2VkZW5jZSBvdmVyIHByb21wdCBkZWZhdWx0cy5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi4oZXhwbGljdGx5TW9kZWxTZXQgPyB7IG92ZXJyaWRlUHJvbXB0TW9kZWw6IHRydWUgfSA6IHt9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dDogdHVybklucHV0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZpb3VzUmVzcG9uc2VJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb252ZXJzYXRpb25JZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbFNldHRpbmdzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvb2xzOiBzZXJpYWxpemVkVG9vbHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0VHlwZTogY29udmVydEFnZW50T3V0cHV0VHlwZVRvU2VyaWFsaXphYmxlKHN0YXRlLl9jdXJyZW50QWdlbnQub3V0cHV0VHlwZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZG9mZnM6IHNlcmlhbGl6ZWRIYW5kb2ZmcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFjaW5nOiBnZXRUcmFjaW5nKHRoaXMuY29uZmlnLnRyYWNpbmdEaXNhYmxlZCwgdGhpcy5jb25maWcudHJhY2VJbmNsdWRlU2Vuc2l0aXZlRGF0YSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lnbmFsOiBvcHRpb25zLnNpZ25hbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuX21vZGVsUmVzcG9uc2VzLnB1c2goc3RhdGUuX2xhc3RUdXJuUmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuX2NvbnRleHQudXNhZ2UuYWRkKHN0YXRlLl9sYXN0VHVyblJlc3BvbnNlLnVzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLl9ub0FjdGl2ZUFnZW50UnVuID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJDb252ZXJzYXRpb25UcmFja2VyPy50cmFja1NlcnZlckl0ZW1zKHN0YXRlLl9sYXN0VHVyblJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByb2Nlc3NlZFJlc3BvbnNlID0gcHJvY2Vzc01vZGVsUmVzcG9uc2Uoc3RhdGUuX2xhc3RUdXJuUmVzcG9uc2UsIHN0YXRlLl9jdXJyZW50QWdlbnQsIHRvb2xzLCBoYW5kb2Zmcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5fbGFzdFByb2Nlc3NlZFJlc3BvbnNlID0gcHJvY2Vzc2VkUmVzcG9uc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0dXJuUmVzdWx0ID0gYXdhaXQgZXhlY3V0ZVRvb2xzQW5kU2lkZUVmZmVjdHMoc3RhdGUuX2N1cnJlbnRBZ2VudCwgc3RhdGUuX29yaWdpbmFsSW5wdXQsIHN0YXRlLl9nZW5lcmF0ZWRJdGVtcywgc3RhdGUuX2xhc3RUdXJuUmVzcG9uc2UsIHN0YXRlLl9sYXN0UHJvY2Vzc2VkUmVzcG9uc2UsIHRoaXMsIHN0YXRlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLl90b29sVXNlVHJhY2tlci5hZGRUb29sVXNlKHN0YXRlLl9jdXJyZW50QWdlbnQsIHN0YXRlLl9sYXN0UHJvY2Vzc2VkUmVzcG9uc2UudG9vbHNVc2VkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLl9vcmlnaW5hbElucHV0ID0gdHVyblJlc3VsdC5vcmlnaW5hbElucHV0O1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuX2dlbmVyYXRlZEl0ZW1zID0gdHVyblJlc3VsdC5nZW5lcmF0ZWRJdGVtcztcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLl9jdXJyZW50U3RlcCA9IHR1cm5SZXN1bHQubmV4dFN0ZXA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlLl9jdXJyZW50U3RlcCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuX2N1cnJlbnRTdGVwLnR5cGUgPT09ICduZXh0X3N0ZXBfZmluYWxfb3V0cHV0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy4jcnVuT3V0cHV0R3VhcmRyYWlscyhzdGF0ZSwgc3RhdGUuX2N1cnJlbnRTdGVwLm91dHB1dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ2FnZW50X2VuZCcsIHN0YXRlLl9jb250ZXh0LCBzdGF0ZS5fY3VycmVudEFnZW50LCBzdGF0ZS5fY3VycmVudFN0ZXAub3V0cHV0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLl9jdXJyZW50QWdlbnQuZW1pdCgnYWdlbnRfZW5kJywgc3RhdGUuX2NvbnRleHQsIHN0YXRlLl9jdXJyZW50U3RlcC5vdXRwdXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSdW5SZXN1bHQoc3RhdGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHN0YXRlLl9jdXJyZW50U3RlcCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuX2N1cnJlbnRTdGVwLnR5cGUgPT09ICduZXh0X3N0ZXBfaGFuZG9mZicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLl9jdXJyZW50QWdlbnQgPSBzdGF0ZS5fY3VycmVudFN0ZXAubmV3QWdlbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUuX2N1cnJlbnRBZ2VudFNwYW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5fY3VycmVudEFnZW50U3Bhbi5lbmQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNldEN1cnJlbnRTcGFuKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuX2N1cnJlbnRBZ2VudFNwYW4gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5fbm9BY3RpdmVBZ2VudFJ1biA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB3ZSd2ZSBwcm9jZXNzZWQgdGhlIGhhbmRvZmYsIHNvIHdlIG5lZWQgdG8gcnVuIHRoZSBsb29wIGFnYWluXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5fY3VycmVudFN0ZXAgPSB7IHR5cGU6ICduZXh0X3N0ZXBfcnVuX2FnYWluJyB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHN0YXRlLl9jdXJyZW50U3RlcCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuX2N1cnJlbnRTdGVwLnR5cGUgPT09ICduZXh0X3N0ZXBfaW50ZXJydXB0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW50ZXJydXB0ZWQuIERvbid0IHJ1biBhbnkgZ3VhcmRyYWlsc1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSdW5SZXN1bHQoc3RhdGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCdSdW5uaW5nIG5leHQgbG9vcCcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5fY3VycmVudEFnZW50U3Bhbikge1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5fY3VycmVudEFnZW50U3Bhbi5zZXRFcnJvcih7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnRXJyb3IgaW4gYWdlbnQgcnVuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHsgZXJyb3I6IFN0cmluZyhlcnIpIH0sXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICBpZiAoc3RhdGUuX2N1cnJlbnRBZ2VudFNwYW4pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlLl9jdXJyZW50U3RlcD8udHlwZSAhPT0gJ25leHRfc3RlcF9pbnRlcnJ1cHRpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBkb24ndCBlbmQgdGhlIHNwYW4gaWYgdGhlIHJ1biB3YXMgaW50ZXJydXB0ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLl9jdXJyZW50QWdlbnRTcGFuLmVuZCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJlc2V0Q3VycmVudFNwYW4oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhc3luYyAjcnVuSW5wdXRHdWFyZHJhaWxzKHN0YXRlKSB7XG4gICAgICAgIGNvbnN0IGd1YXJkcmFpbHMgPSB0aGlzLmlucHV0R3VhcmRyYWlsRGVmcy5jb25jYXQoc3RhdGUuX2N1cnJlbnRBZ2VudC5pbnB1dEd1YXJkcmFpbHMubWFwKGRlZmluZUlucHV0R3VhcmRyYWlsKSk7XG4gICAgICAgIGlmIChndWFyZHJhaWxzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IGd1YXJkcmFpbEFyZ3MgPSB7XG4gICAgICAgICAgICAgICAgYWdlbnQ6IHN0YXRlLl9jdXJyZW50QWdlbnQsXG4gICAgICAgICAgICAgICAgaW5wdXQ6IHN0YXRlLl9vcmlnaW5hbElucHV0LFxuICAgICAgICAgICAgICAgIGNvbnRleHQ6IHN0YXRlLl9jb250ZXh0LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0cyA9IGF3YWl0IFByb21pc2UuYWxsKGd1YXJkcmFpbHMubWFwKGFzeW5jIChndWFyZHJhaWwpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhHdWFyZHJhaWxTcGFuKGFzeW5jIChzcGFuKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBndWFyZHJhaWwucnVuKGd1YXJkcmFpbEFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Bhbi5zcGFuRGF0YS50cmlnZ2VyZWQgPSByZXN1bHQub3V0cHV0LnRyaXB3aXJlVHJpZ2dlcmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgfSwgeyBkYXRhOiB7IG5hbWU6IGd1YXJkcmFpbC5uYW1lIH0gfSwgc3RhdGUuX2N1cnJlbnRBZ2VudFNwYW4pO1xuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHJlc3VsdCBvZiByZXN1bHRzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQub3V0cHV0LnRyaXB3aXJlVHJpZ2dlcmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUuX2N1cnJlbnRBZ2VudFNwYW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5fY3VycmVudEFnZW50U3Bhbi5zZXRFcnJvcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdHdWFyZHJhaWwgdHJpcHdpcmUgdHJpZ2dlcmVkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogeyBndWFyZHJhaWw6IHJlc3VsdC5ndWFyZHJhaWwubmFtZSB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IElucHV0R3VhcmRyYWlsVHJpcHdpcmVUcmlnZ2VyZWQoYElucHV0IGd1YXJkcmFpbCB0cmlnZ2VyZWQ6ICR7SlNPTi5zdHJpbmdpZnkocmVzdWx0Lm91dHB1dC5vdXRwdXRJbmZvKX1gLCByZXN1bHQsIHN0YXRlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBJbnB1dEd1YXJkcmFpbFRyaXB3aXJlVHJpZ2dlcmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIHJvbGwgYmFjayB0aGUgY3VycmVudCB0dXJuIHRvIGVuYWJsZSByZXJ1bnNcbiAgICAgICAgICAgICAgICBzdGF0ZS5fY3VycmVudFR1cm4tLTtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgR3VhcmRyYWlsRXhlY3V0aW9uRXJyb3IoYElucHV0IGd1YXJkcmFpbCBmYWlsZWQgdG8gY29tcGxldGU6ICR7ZX1gLCBlLCBzdGF0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgI3J1bk91dHB1dEd1YXJkcmFpbHMoc3RhdGUsIG91dHB1dCkge1xuICAgICAgICBjb25zdCBndWFyZHJhaWxzID0gdGhpcy5vdXRwdXRHdWFyZHJhaWxEZWZzLmNvbmNhdChzdGF0ZS5fY3VycmVudEFnZW50Lm91dHB1dEd1YXJkcmFpbHMubWFwKGRlZmluZU91dHB1dEd1YXJkcmFpbCkpO1xuICAgICAgICBpZiAoZ3VhcmRyYWlscy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBhZ2VudE91dHB1dCA9IHN0YXRlLl9jdXJyZW50QWdlbnQucHJvY2Vzc0ZpbmFsT3V0cHV0KG91dHB1dCk7XG4gICAgICAgICAgICBjb25zdCBndWFyZHJhaWxBcmdzID0ge1xuICAgICAgICAgICAgICAgIGFnZW50OiBzdGF0ZS5fY3VycmVudEFnZW50LFxuICAgICAgICAgICAgICAgIGFnZW50T3V0cHV0LFxuICAgICAgICAgICAgICAgIGNvbnRleHQ6IHN0YXRlLl9jb250ZXh0LFxuICAgICAgICAgICAgICAgIGRldGFpbHM6IHsgbW9kZWxSZXNwb25zZTogc3RhdGUuX2xhc3RUdXJuUmVzcG9uc2UgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCBQcm9taXNlLmFsbChndWFyZHJhaWxzLm1hcChhc3luYyAoZ3VhcmRyYWlsKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB3aXRoR3VhcmRyYWlsU3Bhbihhc3luYyAoc3BhbikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZ3VhcmRyYWlsLnJ1bihndWFyZHJhaWxBcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNwYW4uc3BhbkRhdGEudHJpZ2dlcmVkID0gcmVzdWx0Lm91dHB1dC50cmlwd2lyZVRyaWdnZXJlZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgIH0sIHsgZGF0YTogeyBuYW1lOiBndWFyZHJhaWwubmFtZSB9IH0sIHN0YXRlLl9jdXJyZW50QWdlbnRTcGFuKTtcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCByZXN1bHQgb2YgcmVzdWx0cykge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0Lm91dHB1dC50cmlwd2lyZVRyaWdnZXJlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlLl9jdXJyZW50QWdlbnRTcGFuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuX2N1cnJlbnRBZ2VudFNwYW4uc2V0RXJyb3Ioe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnR3VhcmRyYWlsIHRyaXB3aXJlIHRyaWdnZXJlZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHsgZ3VhcmRyYWlsOiByZXN1bHQuZ3VhcmRyYWlsLm5hbWUgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBPdXRwdXRHdWFyZHJhaWxUcmlwd2lyZVRyaWdnZXJlZChgT3V0cHV0IGd1YXJkcmFpbCB0cmlnZ2VyZWQ6ICR7SlNPTi5zdHJpbmdpZnkocmVzdWx0Lm91dHB1dC5vdXRwdXRJbmZvKX1gLCByZXN1bHQsIHN0YXRlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBPdXRwdXRHdWFyZHJhaWxUcmlwd2lyZVRyaWdnZXJlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgR3VhcmRyYWlsRXhlY3V0aW9uRXJyb3IoYE91dHB1dCBndWFyZHJhaWwgZmFpbGVkIHRvIGNvbXBsZXRlOiAke2V9YCwgZSwgc3RhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGFzeW5jICNydW5TdHJlYW1Mb29wKHJlc3VsdCwgb3B0aW9ucywgaXNSZXN1bWVkU3RhdGUpIHtcbiAgICAgICAgY29uc3Qgc2VydmVyQ29udmVyc2F0aW9uVHJhY2tlciA9IG9wdGlvbnMuY29udmVyc2F0aW9uSWQgfHwgb3B0aW9ucy5wcmV2aW91c1Jlc3BvbnNlSWRcbiAgICAgICAgICAgID8gbmV3IFNlcnZlckNvbnZlcnNhdGlvblRyYWNrZXIoe1xuICAgICAgICAgICAgICAgIGNvbnZlcnNhdGlvbklkOiBvcHRpb25zLmNvbnZlcnNhdGlvbklkLFxuICAgICAgICAgICAgICAgIHByZXZpb3VzUmVzcG9uc2VJZDogb3B0aW9ucy5wcmV2aW91c1Jlc3BvbnNlSWQsXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChzZXJ2ZXJDb252ZXJzYXRpb25UcmFja2VyICYmIGlzUmVzdW1lZFN0YXRlKSB7XG4gICAgICAgICAgICBzZXJ2ZXJDb252ZXJzYXRpb25UcmFja2VyLnByaW1lRnJvbVN0YXRlKHtcbiAgICAgICAgICAgICAgICBvcmlnaW5hbElucHV0OiByZXN1bHQuc3RhdGUuX29yaWdpbmFsSW5wdXQsXG4gICAgICAgICAgICAgICAgZ2VuZXJhdGVkSXRlbXM6IHJlc3VsdC5zdGF0ZS5fZ2VuZXJhdGVkSXRlbXMsXG4gICAgICAgICAgICAgICAgbW9kZWxSZXNwb25zZXM6IHJlc3VsdC5zdGF0ZS5fbW9kZWxSZXNwb25zZXMsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50QWdlbnQgPSByZXN1bHQuc3RhdGUuX2N1cnJlbnRBZ2VudDtcbiAgICAgICAgICAgICAgICBjb25zdCBoYW5kb2ZmcyA9IGF3YWl0IGN1cnJlbnRBZ2VudC5nZXRFbmFibGVkSGFuZG9mZnMocmVzdWx0LnN0YXRlLl9jb250ZXh0KTtcbiAgICAgICAgICAgICAgICBjb25zdCB0b29scyA9IGF3YWl0IGN1cnJlbnRBZ2VudC5nZXRBbGxUb29scyhyZXN1bHQuc3RhdGUuX2NvbnRleHQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNlcmlhbGl6ZWRUb29scyA9IHRvb2xzLm1hcCgodCkgPT4gc2VyaWFsaXplVG9vbCh0KSk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2VyaWFsaXplZEhhbmRvZmZzID0gaGFuZG9mZnMubWFwKChoKSA9PiBzZXJpYWxpemVIYW5kb2ZmKGgpKTtcbiAgICAgICAgICAgICAgICByZXN1bHQuc3RhdGUuX2N1cnJlbnRTdGVwID0gcmVzdWx0LnN0YXRlLl9jdXJyZW50U3RlcCA/PyB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICduZXh0X3N0ZXBfcnVuX2FnYWluJyxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuc3RhdGUuX2N1cnJlbnRTdGVwLnR5cGUgPT09ICduZXh0X3N0ZXBfaW50ZXJydXB0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXIuZGVidWcoJ0NvbnRpbnVpbmcgZnJvbSBpbnRlcnJ1cHRpb24nKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXN1bHQuc3RhdGUuX2xhc3RUdXJuUmVzcG9uc2UgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICFyZXN1bHQuc3RhdGUuX2xhc3RQcm9jZXNzZWRSZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFVzZXJFcnJvcignTm8gbW9kZWwgcmVzcG9uc2UgZm91bmQgaW4gcHJldmlvdXMgc3RhdGUnLCByZXN1bHQuc3RhdGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHR1cm5SZXN1bHQgPSBhd2FpdCBleGVjdXRlSW50ZXJydXB0ZWRUb29sc0FuZFNpZGVFZmZlY3RzKHJlc3VsdC5zdGF0ZS5fY3VycmVudEFnZW50LCByZXN1bHQuc3RhdGUuX29yaWdpbmFsSW5wdXQsIHJlc3VsdC5zdGF0ZS5fZ2VuZXJhdGVkSXRlbXMsIHJlc3VsdC5zdGF0ZS5fbGFzdFR1cm5SZXNwb25zZSwgcmVzdWx0LnN0YXRlLl9sYXN0UHJvY2Vzc2VkUmVzcG9uc2UsIHRoaXMsIHJlc3VsdC5zdGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgIGFkZFN0ZXBUb1J1blJlc3VsdChyZXN1bHQsIHR1cm5SZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQuc3RhdGUuX3Rvb2xVc2VUcmFja2VyLmFkZFRvb2xVc2UocmVzdWx0LnN0YXRlLl9jdXJyZW50QWdlbnQsIHJlc3VsdC5zdGF0ZS5fbGFzdFByb2Nlc3NlZFJlc3BvbnNlLnRvb2xzVXNlZCk7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5zdGF0ZS5fb3JpZ2luYWxJbnB1dCA9IHR1cm5SZXN1bHQub3JpZ2luYWxJbnB1dDtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnN0YXRlLl9nZW5lcmF0ZWRJdGVtcyA9IHR1cm5SZXN1bHQuZ2VuZXJhdGVkSXRlbXM7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5zdGF0ZS5fY3VycmVudFN0ZXAgPSB0dXJuUmVzdWx0Lm5leHRTdGVwO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHVyblJlc3VsdC5uZXh0U3RlcC50eXBlID09PSAnbmV4dF9zdGVwX2ludGVycnVwdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdlIGFyZSBzdGlsbCBpbiBhbiBpbnRlcnJ1cHRpb24sIHNvIHdlIG5lZWQgdG8gYXZvaWQgYW4gaW5maW5pdGUgbG9vcFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnN0YXRlLl9jdXJyZW50U3RlcC50eXBlID09PSAnbmV4dF9zdGVwX3J1bl9hZ2FpbicpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXN1bHQuc3RhdGUuX2N1cnJlbnRBZ2VudFNwYW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGhhbmRvZmZOYW1lcyA9IGhhbmRvZmZzLm1hcCgoaCkgPT4gaC5hZ2VudE5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnN0YXRlLl9jdXJyZW50QWdlbnRTcGFuID0gY3JlYXRlQWdlbnRTcGFuKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGN1cnJlbnRBZ2VudC5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kb2ZmczogaGFuZG9mZk5hbWVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b29sczogdG9vbHMubWFwKCh0KSA9PiB0Lm5hbWUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXRfdHlwZTogY3VycmVudEFnZW50Lm91dHB1dFNjaGVtYU5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnN0YXRlLl9jdXJyZW50QWdlbnRTcGFuLnN0YXJ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRDdXJyZW50U3BhbihyZXN1bHQuc3RhdGUuX2N1cnJlbnRBZ2VudFNwYW4pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5zdGF0ZS5fY3VycmVudFR1cm4rKztcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5zdGF0ZS5fY3VycmVudFR1cm4gPiByZXN1bHQuc3RhdGUuX21heFR1cm5zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQuc3RhdGUuX2N1cnJlbnRBZ2VudFNwYW4/LnNldEVycm9yKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnTWF4IHR1cm5zIGV4Y2VlZGVkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7IG1heF90dXJuczogcmVzdWx0LnN0YXRlLl9tYXhUdXJucyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgTWF4VHVybnNFeGNlZWRlZEVycm9yKGBNYXggdHVybnMgKCR7cmVzdWx0LnN0YXRlLl9tYXhUdXJuc30pIGV4Y2VlZGVkYCwgcmVzdWx0LnN0YXRlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBsb2dnZXIuZGVidWcoYFJ1bm5pbmcgYWdlbnQgJHtjdXJyZW50QWdlbnQubmFtZX0gKHR1cm4gJHtyZXN1bHQuc3RhdGUuX2N1cnJlbnRUdXJufSlgKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZXhwbGljdGx5TW9kZWxTZXQgPSAoY3VycmVudEFnZW50Lm1vZGVsICE9PSB1bmRlZmluZWQgJiYgY3VycmVudEFnZW50Lm1vZGVsICE9PSAnJykgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLmNvbmZpZy5tb2RlbCAhPT0gdW5kZWZpbmVkICYmIHRoaXMuY29uZmlnLm1vZGVsICE9PSAnJyk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBtb2RlbCA9IHNlbGVjdE1vZGVsKGN1cnJlbnRBZ2VudC5tb2RlbCwgdGhpcy5jb25maWcubW9kZWwpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG1vZGVsID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwgPSBhd2FpdCB0aGlzLmNvbmZpZy5tb2RlbFByb3ZpZGVyLmdldE1vZGVsKG1vZGVsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnN0YXRlLl9jdXJyZW50VHVybiA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy4jcnVuSW5wdXRHdWFyZHJhaWxzKHJlc3VsdC5zdGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbGV0IG1vZGVsU2V0dGluZ3MgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi50aGlzLmNvbmZpZy5tb2RlbFNldHRpbmdzLFxuICAgICAgICAgICAgICAgICAgICAgICAgLi4uY3VycmVudEFnZW50Lm1vZGVsU2V0dGluZ3MsXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFnZW50TW9kZWxTZXR0aW5ncyA9IGN1cnJlbnRBZ2VudC5tb2RlbFNldHRpbmdzO1xuICAgICAgICAgICAgICAgICAgICBtb2RlbFNldHRpbmdzID0gYWRqdXN0TW9kZWxTZXR0aW5nc0Zvck5vbkdQVDVSdW5uZXJNb2RlbChleHBsaWN0bHlNb2RlbFNldCwgYWdlbnRNb2RlbFNldHRpbmdzLCBtb2RlbCwgbW9kZWxTZXR0aW5ncyk7XG4gICAgICAgICAgICAgICAgICAgIG1vZGVsU2V0dGluZ3MgPSBtYXliZVJlc2V0VG9vbENob2ljZShjdXJyZW50QWdlbnQsIHJlc3VsdC5zdGF0ZS5fdG9vbFVzZVRyYWNrZXIsIG1vZGVsU2V0dGluZ3MpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0dXJuSW5wdXQgPSBzZXJ2ZXJDb252ZXJzYXRpb25UcmFja2VyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHNlcnZlckNvbnZlcnNhdGlvblRyYWNrZXIucHJlcGFyZUlucHV0KHJlc3VsdC5pbnB1dCwgcmVzdWx0Lm5ld0l0ZW1zKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBnZXRUdXJuSW5wdXQocmVzdWx0LmlucHV0LCByZXN1bHQubmV3SXRlbXMpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnN0YXRlLl9ub0FjdGl2ZUFnZW50UnVuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50QWdlbnQuZW1pdCgnYWdlbnRfc3RhcnQnLCByZXN1bHQuc3RhdGUuX2NvbnRleHQsIGN1cnJlbnRBZ2VudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ2FnZW50X3N0YXJ0JywgcmVzdWx0LnN0YXRlLl9jb250ZXh0LCBjdXJyZW50QWdlbnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGxldCBmaW5hbFJlc3BvbnNlID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwcmV2aW91c1Jlc3BvbnNlSWQgPSBzZXJ2ZXJDb252ZXJzYXRpb25UcmFja2VyPy5wcmV2aW91c1Jlc3BvbnNlSWQgPz9cbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMucHJldmlvdXNSZXNwb25zZUlkO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb252ZXJzYXRpb25JZCA9IHNlcnZlckNvbnZlcnNhdGlvblRyYWNrZXI/LmNvbnZlcnNhdGlvbklkID8/IG9wdGlvbnMuY29udmVyc2F0aW9uSWQ7XG4gICAgICAgICAgICAgICAgICAgIGZvciBhd2FpdCAoY29uc3QgZXZlbnQgb2YgbW9kZWwuZ2V0U3RyZWFtZWRSZXNwb25zZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBzeXN0ZW1JbnN0cnVjdGlvbnM6IGF3YWl0IGN1cnJlbnRBZ2VudC5nZXRTeXN0ZW1Qcm9tcHQocmVzdWx0LnN0YXRlLl9jb250ZXh0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb21wdDogYXdhaXQgY3VycmVudEFnZW50LmdldFByb21wdChyZXN1bHQuc3RhdGUuX2NvbnRleHQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3RyZWFtaW5nIHJlcXVlc3RzIHNob3VsZCBhbHNvIGhvbm9yIGV4cGxpY2l0bHkgY2hvc2VuIG1vZGVscy5cbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLihleHBsaWN0bHlNb2RlbFNldCA/IHsgb3ZlcnJpZGVQcm9tcHRNb2RlbDogdHJ1ZSB9IDoge30pLFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQ6IHR1cm5JbnB1dCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXZpb3VzUmVzcG9uc2VJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnZlcnNhdGlvbklkLFxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWxTZXR0aW5ncyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvb2xzOiBzZXJpYWxpemVkVG9vbHMsXG4gICAgICAgICAgICAgICAgICAgICAgICBoYW5kb2Zmczogc2VyaWFsaXplZEhhbmRvZmZzLFxuICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0VHlwZTogY29udmVydEFnZW50T3V0cHV0VHlwZVRvU2VyaWFsaXphYmxlKGN1cnJlbnRBZ2VudC5vdXRwdXRUeXBlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYWNpbmc6IGdldFRyYWNpbmcodGhpcy5jb25maWcudHJhY2luZ0Rpc2FibGVkLCB0aGlzLmNvbmZpZy50cmFjZUluY2x1ZGVTZW5zaXRpdmVEYXRhKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpZ25hbDogb3B0aW9ucy5zaWduYWwsXG4gICAgICAgICAgICAgICAgICAgIH0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ3Jlc3BvbnNlX2RvbmUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFyc2VkID0gU3RyZWFtRXZlbnRSZXNwb25zZUNvbXBsZXRlZC5wYXJzZShldmVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxSZXNwb25zZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNhZ2U6IG5ldyBVc2FnZShwYXJzZWQucmVzcG9uc2UudXNhZ2UpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXQ6IHBhcnNlZC5yZXNwb25zZS5vdXRwdXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlSWQ6IHBhcnNlZC5yZXNwb25zZS5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5jYW5jZWxsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBXaGVuIHRoZSB1c2VyJ3MgY29kZSBleGl0cyBhIGxvb3AgdG8gY29uc3VtZSB0aGUgc3RyZWFtLCB3ZSBuZWVkIHRvIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyBsb29wIHRvIHByZXZlbnQgaW50ZXJuYWwgZmFsc2UgZXJyb3JzIGFuZCB1bm5lY2Vzc2FyeSBwcm9jZXNzaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0Ll9hZGRJdGVtKG5ldyBSdW5SYXdNb2RlbFN0cmVhbUV2ZW50KGV2ZW50KSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnN0YXRlLl9ub0FjdGl2ZUFnZW50UnVuID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZmluYWxSZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IE1vZGVsQmVoYXZpb3JFcnJvcignTW9kZWwgZGlkIG5vdCBwcm9kdWNlIGEgZmluYWwgcmVzcG9uc2UhJywgcmVzdWx0LnN0YXRlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXN1bHQuc3RhdGUuX2xhc3RUdXJuUmVzcG9uc2UgPSBmaW5hbFJlc3BvbnNlO1xuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJDb252ZXJzYXRpb25UcmFja2VyPy50cmFja1NlcnZlckl0ZW1zKGZpbmFsUmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQuc3RhdGUuX21vZGVsUmVzcG9uc2VzLnB1c2gocmVzdWx0LnN0YXRlLl9sYXN0VHVyblJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJvY2Vzc2VkUmVzcG9uc2UgPSBwcm9jZXNzTW9kZWxSZXNwb25zZShyZXN1bHQuc3RhdGUuX2xhc3RUdXJuUmVzcG9uc2UsIGN1cnJlbnRBZ2VudCwgdG9vbHMsIGhhbmRvZmZzKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnN0YXRlLl9sYXN0UHJvY2Vzc2VkUmVzcG9uc2UgPSBwcm9jZXNzZWRSZXNwb25zZTtcbiAgICAgICAgICAgICAgICAgICAgLy8gUmVjb3JkIHRoZSBpdGVtcyBlbWl0dGVkIGRpcmVjdGx5IGZyb20gdGhlIG1vZGVsIHJlc3BvbnNlIHNvIHdlIGRvIG5vdFxuICAgICAgICAgICAgICAgICAgICAvLyBzdHJlYW0gdGhlbSBhZ2FpbiBhZnRlciB0b29scyBhbmQgb3RoZXIgc2lkZSBlZmZlY3RzIGZpbmlzaC5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJlVG9vbEl0ZW1zID0gbmV3IFNldChwcm9jZXNzZWRSZXNwb25zZS5uZXdJdGVtcyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwcmVUb29sSXRlbXMuc2l6ZSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cmVhbVN0ZXBJdGVtc1RvUnVuUmVzdWx0KHJlc3VsdCwgcHJvY2Vzc2VkUmVzcG9uc2UubmV3SXRlbXMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHR1cm5SZXN1bHQgPSBhd2FpdCBleGVjdXRlVG9vbHNBbmRTaWRlRWZmZWN0cyhjdXJyZW50QWdlbnQsIHJlc3VsdC5zdGF0ZS5fb3JpZ2luYWxJbnB1dCwgcmVzdWx0LnN0YXRlLl9nZW5lcmF0ZWRJdGVtcywgcmVzdWx0LnN0YXRlLl9sYXN0VHVyblJlc3BvbnNlLCByZXN1bHQuc3RhdGUuX2xhc3RQcm9jZXNzZWRSZXNwb25zZSwgdGhpcywgcmVzdWx0LnN0YXRlKTtcbiAgICAgICAgICAgICAgICAgICAgYWRkU3RlcFRvUnVuUmVzdWx0KHJlc3VsdCwgdHVyblJlc3VsdCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2tpcEl0ZW1zOiBwcmVUb29sSXRlbXMsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQuc3RhdGUuX3Rvb2xVc2VUcmFja2VyLmFkZFRvb2xVc2UoY3VycmVudEFnZW50LCBwcm9jZXNzZWRSZXNwb25zZS50b29sc1VzZWQpO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQuc3RhdGUuX29yaWdpbmFsSW5wdXQgPSB0dXJuUmVzdWx0Lm9yaWdpbmFsSW5wdXQ7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5zdGF0ZS5fZ2VuZXJhdGVkSXRlbXMgPSB0dXJuUmVzdWx0LmdlbmVyYXRlZEl0ZW1zO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQuc3RhdGUuX2N1cnJlbnRTdGVwID0gdHVyblJlc3VsdC5uZXh0U3RlcDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5zdGF0ZS5fY3VycmVudFN0ZXAudHlwZSA9PT0gJ25leHRfc3RlcF9maW5hbF9vdXRwdXQnKSB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuI3J1bk91dHB1dEd1YXJkcmFpbHMocmVzdWx0LnN0YXRlLCByZXN1bHQuc3RhdGUuX2N1cnJlbnRTdGVwLm91dHB1dCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnYWdlbnRfZW5kJywgcmVzdWx0LnN0YXRlLl9jb250ZXh0LCBjdXJyZW50QWdlbnQsIHJlc3VsdC5zdGF0ZS5fY3VycmVudFN0ZXAub3V0cHV0KTtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudEFnZW50LmVtaXQoJ2FnZW50X2VuZCcsIHJlc3VsdC5zdGF0ZS5fY29udGV4dCwgcmVzdWx0LnN0YXRlLl9jdXJyZW50U3RlcC5vdXRwdXQpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHJlc3VsdC5zdGF0ZS5fY3VycmVudFN0ZXAudHlwZSA9PT0gJ25leHRfc3RlcF9pbnRlcnJ1cHRpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHdlIGFyZSBkb25lIGZvciBub3cuIERvbid0IHJ1biBhbnkgb3V0cHV0IGd1YXJkcmFpbHNcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChyZXN1bHQuc3RhdGUuX2N1cnJlbnRTdGVwLnR5cGUgPT09ICduZXh0X3N0ZXBfaGFuZG9mZicpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnN0YXRlLl9jdXJyZW50QWdlbnQgPSByZXN1bHQuc3RhdGUuX2N1cnJlbnRTdGVwXG4gICAgICAgICAgICAgICAgICAgICAgICA/Lm5ld0FnZW50O1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnN0YXRlLl9jdXJyZW50QWdlbnRTcGFuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQuc3RhdGUuX2N1cnJlbnRBZ2VudFNwYW4uZW5kKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNldEN1cnJlbnRTcGFuKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnN0YXRlLl9jdXJyZW50QWdlbnRTcGFuID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQuX2FkZEl0ZW0obmV3IFJ1bkFnZW50VXBkYXRlZFN0cmVhbUV2ZW50KHJlc3VsdC5zdGF0ZS5fY3VycmVudEFnZW50KSk7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5zdGF0ZS5fbm9BY3RpdmVBZ2VudFJ1biA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIC8vIHdlJ3ZlIHByb2Nlc3NlZCB0aGUgaGFuZG9mZiwgc28gd2UgbmVlZCB0byBydW4gdGhlIGxvb3AgYWdhaW5cbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnN0YXRlLl9jdXJyZW50U3RlcCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICduZXh0X3N0ZXBfcnVuX2FnYWluJyxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZygnUnVubmluZyBuZXh0IGxvb3AnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAocmVzdWx0LnN0YXRlLl9jdXJyZW50QWdlbnRTcGFuKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnN0YXRlLl9jdXJyZW50QWdlbnRTcGFuLnNldEVycm9yKHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ0Vycm9yIGluIGFnZW50IHJ1bicsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHsgZXJyb3I6IFN0cmluZyhlcnJvcikgfSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgaWYgKHJlc3VsdC5zdGF0ZS5fY3VycmVudEFnZW50U3Bhbikge1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuc3RhdGUuX2N1cnJlbnRTdGVwPy50eXBlICE9PSAnbmV4dF9zdGVwX2ludGVycnVwdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnN0YXRlLl9jdXJyZW50QWdlbnRTcGFuLmVuZCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXNldEN1cnJlbnRTcGFuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgYXN5bmMgI3J1bkluZGl2aWR1YWxTdHJlYW0oYWdlbnQsIGlucHV0LCBvcHRpb25zKSB7XG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zID8/IHt9O1xuICAgICAgICByZXR1cm4gd2l0aE5ld1NwYW5Db250ZXh0KGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIC8vIEluaXRpYWxpemUgb3IgcmV1c2UgZXhpc3Rpbmcgc3RhdGVcbiAgICAgICAgICAgIGNvbnN0IGlzUmVzdW1lZFN0YXRlID0gaW5wdXQgaW5zdGFuY2VvZiBSdW5TdGF0ZTtcbiAgICAgICAgICAgIGNvbnN0IHN0YXRlID0gaXNSZXN1bWVkU3RhdGVcbiAgICAgICAgICAgICAgICA/IGlucHV0XG4gICAgICAgICAgICAgICAgOiBuZXcgUnVuU3RhdGUob3B0aW9ucy5jb250ZXh0IGluc3RhbmNlb2YgUnVuQ29udGV4dFxuICAgICAgICAgICAgICAgICAgICA/IG9wdGlvbnMuY29udGV4dFxuICAgICAgICAgICAgICAgICAgICA6IG5ldyBSdW5Db250ZXh0KG9wdGlvbnMuY29udGV4dCksIGlucHV0LCBhZ2VudCwgb3B0aW9ucy5tYXhUdXJucyA/PyBERUZBVUxUX01BWF9UVVJOUyk7XG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHRoZSBzdHJlYW1lZCByZXN1bHQgd2l0aCBleGlzdGluZyBzdGF0ZVxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IFN0cmVhbWVkUnVuUmVzdWx0KHtcbiAgICAgICAgICAgICAgICBzaWduYWw6IG9wdGlvbnMuc2lnbmFsLFxuICAgICAgICAgICAgICAgIHN0YXRlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBTZXR1cCBkZWZhdWx0c1xuICAgICAgICAgICAgcmVzdWx0Lm1heFR1cm5zID0gb3B0aW9ucy5tYXhUdXJucyA/PyBzdGF0ZS5fbWF4VHVybnM7XG4gICAgICAgICAgICAvLyBDb250aW51ZSB0aGUgc3RyZWFtIGxvb3Agd2l0aG91dCBibG9ja2luZ1xuICAgICAgICAgICAgY29uc3Qgc3RyZWFtTG9vcFByb21pc2UgPSB0aGlzLiNydW5TdHJlYW1Mb29wKHJlc3VsdCwgb3B0aW9ucywgaXNSZXN1bWVkU3RhdGUpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5fZG9uZSgpO1xuICAgICAgICAgICAgfSwgKGVycikgPT4ge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5fcmFpc2VFcnJvcihlcnIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBBdHRhY2ggdGhlIHN0cmVhbSBsb29wIHByb21pc2Ugc28gdHJhY2UgZW5kIHdhaXRzIGZvciB0aGUgbG9vcCB0byBjb21wbGV0ZVxuICAgICAgICAgICAgcmVzdWx0Ll9zZXRTdHJlYW1Mb29wUHJvbWlzZShzdHJlYW1Mb29wUHJvbWlzZSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcnVuKGFnZW50LCBpbnB1dCwgb3B0aW9ucyA9IHtcbiAgICAgICAgc3RyZWFtOiBmYWxzZSxcbiAgICAgICAgY29udGV4dDogdW5kZWZpbmVkLFxuICAgIH0pIHtcbiAgICAgICAgaWYgKGlucHV0IGluc3RhbmNlb2YgUnVuU3RhdGUgJiYgaW5wdXQuX3RyYWNlKSB7XG4gICAgICAgICAgICByZXR1cm4gd2l0aFRyYWNlKGlucHV0Ll90cmFjZSwgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dC5fY3VycmVudEFnZW50U3Bhbikge1xuICAgICAgICAgICAgICAgICAgICBzZXRDdXJyZW50U3BhbihpbnB1dC5fY3VycmVudEFnZW50U3Bhbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zPy5zdHJlYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuI3J1bkluZGl2aWR1YWxTdHJlYW0oYWdlbnQsIGlucHV0LCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLiNydW5JbmRpdmlkdWFsTm9uU3RyZWFtKGFnZW50LCBpbnB1dCwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGdldE9yQ3JlYXRlVHJhY2UoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnM/LnN0cmVhbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLiNydW5JbmRpdmlkdWFsU3RyZWFtKGFnZW50LCBpbnB1dCwgb3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy4jcnVuSW5kaXZpZHVhbE5vblN0cmVhbShhZ2VudCwgaW5wdXQsIG9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAgICB0cmFjZUlkOiB0aGlzLmNvbmZpZy50cmFjZUlkLFxuICAgICAgICAgICAgbmFtZTogdGhpcy5jb25maWcud29ya2Zsb3dOYW1lLFxuICAgICAgICAgICAgZ3JvdXBJZDogdGhpcy5jb25maWcuZ3JvdXBJZCxcbiAgICAgICAgICAgIG1ldGFkYXRhOiB0aGlzLmNvbmZpZy50cmFjZU1ldGFkYXRhLFxuICAgICAgICB9KTtcbiAgICB9XG59XG5sZXQgX2RlZmF1bHRSdW5uZXIgPSB1bmRlZmluZWQ7XG5mdW5jdGlvbiBnZXREZWZhdWx0UnVubmVyKCkge1xuICAgIGlmIChfZGVmYXVsdFJ1bm5lcikge1xuICAgICAgICByZXR1cm4gX2RlZmF1bHRSdW5uZXI7XG4gICAgfVxuICAgIF9kZWZhdWx0UnVubmVyID0gbmV3IFJ1bm5lcigpO1xuICAgIHJldHVybiBfZGVmYXVsdFJ1bm5lcjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzZWxlY3RNb2RlbChhZ2VudE1vZGVsLCBydW5Db25maWdNb2RlbCkge1xuICAgIC8vIFdoZW4gaW5pdGlhbGl6aW5nIGFuIGFnZW50IHdpdGhvdXQgbW9kZWwgbmFtZSwgdGhlIG1vZGVsIHByb3BlcnR5IGlzIHNldCB0byBhbiBlbXB0eSBzdHJpbmcuIFNvLFxuICAgIC8vICogYWdlbnRNb2RlbCA9PT0gJycgJiBydW5Db25maWdNb2RlbCBleGlzdHMsIHJ1bkNvbmZpZ01vZGVsIHdpbGwgYmUgdXNlZFxuICAgIC8vICogYWdlbnRNb2RlbCBpcyBzZXQsIHRoZSBhZ2VudE1vZGVsIHdpbGwgYmUgdXNlZCBvdmVyIHJ1bkNvbmZpZ01vZGVsXG4gICAgaWYgKCh0eXBlb2YgYWdlbnRNb2RlbCA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgYWdlbnRNb2RlbCAhPT0gQWdlbnQuREVGQVVMVF9NT0RFTF9QTEFDRUhPTERFUikgfHxcbiAgICAgICAgYWdlbnRNb2RlbCAvLyBhbnkgdHJ1dGh5IHZhbHVlXG4gICAgKSB7XG4gICAgICAgIHJldHVybiBhZ2VudE1vZGVsO1xuICAgIH1cbiAgICByZXR1cm4gcnVuQ29uZmlnTW9kZWwgPz8gYWdlbnRNb2RlbCA/PyBBZ2VudC5ERUZBVUxUX01PREVMX1BMQUNFSE9MREVSO1xufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJ1bihhZ2VudCwgaW5wdXQsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBydW5uZXIgPSBnZXREZWZhdWx0UnVubmVyKCk7XG4gICAgaWYgKG9wdGlvbnM/LnN0cmVhbSkge1xuICAgICAgICByZXR1cm4gYXdhaXQgcnVubmVyLnJ1bihhZ2VudCwgaW5wdXQsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHJ1bm5lci5ydW4oYWdlbnQsIGlucHV0LCBvcHRpb25zKTtcbiAgICB9XG59XG4vKipcbiAqIFdoZW4gdGhlIGRlZmF1bHQgbW9kZWwgaXMgYSBHUFQtNSB2YXJpYW50LCBhZ2VudHMgbWF5IGNhcnJ5IEdQVC01LXNwZWNpZmljIHByb3ZpZGVyRGF0YVxuICogKGUuZy4sIHJlYXNvbmluZyBlZmZvcnQsIHRleHQgdmVyYm9zaXR5KS4gSWYgYSBydW4gcmVzb2x2ZXMgdG8gYSBub24tR1BULTUgbW9kZWwgYW5kIHRoZVxuICogYWdlbnQgcmVsaWVkIG9uIHRoZSBkZWZhdWx0IG1vZGVsIChpLmUuLCBubyBleHBsaWNpdCBtb2RlbCBzZXQpLCB0aGVzZSBHUFQtNS1vbmx5IHNldHRpbmdzXG4gKiBhcmUgaW5jb21wYXRpYmxlIGFuZCBzaG91bGQgYmUgc3RyaXBwZWQgdG8gYXZvaWQgcnVudGltZSBlcnJvcnMuXG4gKi9cbmZ1bmN0aW9uIGFkanVzdE1vZGVsU2V0dGluZ3NGb3JOb25HUFQ1UnVubmVyTW9kZWwoZXhwbGljdGx5TW9kZWxTZXQsIGFnZW50TW9kZWxTZXR0aW5ncywgcnVubmVyTW9kZWwsIG1vZGVsU2V0dGluZ3MpIHtcbiAgICBpZiAoXG4gICAgLy8gZ3B0LTUgaXMgZW5hYmxlZCBmb3IgdGhlIGRlZmF1bHQgbW9kZWwgZm9yIGFnZW50c1xuICAgIGlzR3B0NURlZmF1bHQoKSAmJlxuICAgICAgICAvLyBleHBsaWNpdGx5IHNldCBtb2RlbCBmb3IgdGhlIGFnZW50XG4gICAgICAgIGV4cGxpY3RseU1vZGVsU2V0ICYmXG4gICAgICAgIC8vIHRoaXMgcnVubmVyIHVzZXMgYSBub24tZ3B0LTUgbW9kZWxcbiAgICAgICAgKHR5cGVvZiBydW5uZXJNb2RlbCAhPT0gJ3N0cmluZycgfHxcbiAgICAgICAgICAgICFncHQ1UmVhc29uaW5nU2V0dGluZ3NSZXF1aXJlZChydW5uZXJNb2RlbCkpICYmXG4gICAgICAgIChhZ2VudE1vZGVsU2V0dGluZ3MucHJvdmlkZXJEYXRhPy5yZWFzb25pbmcgfHxcbiAgICAgICAgICAgIGFnZW50TW9kZWxTZXR0aW5ncy5wcm92aWRlckRhdGE/LnRleHQ/LnZlcmJvc2l0eSB8fFxuICAgICAgICAgICAgYWdlbnRNb2RlbFNldHRpbmdzLnByb3ZpZGVyRGF0YT8ucmVhc29uaW5nX2VmZm9ydCkpIHtcbiAgICAgICAgY29uc3QgY29waWVkTW9kZWxTZXR0aW5ncyA9IHsgLi4ubW9kZWxTZXR0aW5ncyB9O1xuICAgICAgICAvLyB0aGUgaW5jb21wYXRpYmxlIHBhcmFtZXRlcnMgc2hvdWxkIGJlIHJlbW92ZWQgdG8gYXZvaWQgcnVudGltZSBlcnJvcnNcbiAgICAgICAgZGVsZXRlIGNvcGllZE1vZGVsU2V0dGluZ3MucHJvdmlkZXJEYXRhPy5yZWFzb25pbmc7XG4gICAgICAgIGRlbGV0ZSBjb3BpZWRNb2RlbFNldHRpbmdzLnByb3ZpZGVyRGF0YT8udGV4dD8udmVyYm9zaXR5O1xuICAgICAgICBkZWxldGUgY29waWVkTW9kZWxTZXR0aW5ncy5wcm92aWRlckRhdGE/LnJlYXNvbmluZ19lZmZvcnQ7XG4gICAgICAgIGlmIChjb3BpZWRNb2RlbFNldHRpbmdzLnJlYXNvbmluZykge1xuICAgICAgICAgICAgZGVsZXRlIGNvcGllZE1vZGVsU2V0dGluZ3MucmVhc29uaW5nLmVmZm9ydDtcbiAgICAgICAgICAgIGRlbGV0ZSBjb3BpZWRNb2RlbFNldHRpbmdzLnJlYXNvbmluZy5zdW1tYXJ5O1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb3BpZWRNb2RlbFNldHRpbmdzLnRleHQpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBjb3BpZWRNb2RlbFNldHRpbmdzLnRleHQudmVyYm9zaXR5O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb3BpZWRNb2RlbFNldHRpbmdzO1xuICAgIH1cbiAgICByZXR1cm4gbW9kZWxTZXR0aW5ncztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJ1bi5tanMubWFwIiwiaW1wb3J0IHsgUmVhZGFibGVTdHJlYW0gYXMgX1JlYWRhYmxlU3RyZWFtLCBUcmFuc2Zvcm1TdHJlYW0sIFJlYWRhYmxlLCB9IGZyb20gJ0BvcGVuYWkvYWdlbnRzLWNvcmUvX3NoaW1zJztcbmltcG9ydCB7IGdldFR1cm5JbnB1dCB9IGZyb20gXCIuL3J1bi5tanNcIjtcbmltcG9ydCBsb2dnZXIgZnJvbSBcIi4vbG9nZ2VyLm1qc1wiO1xuaW1wb3J0IHsgU3RyZWFtRXZlbnRUZXh0U3RyZWFtIH0gZnJvbSBcIi4vdHlwZXMvcHJvdG9jb2wubWpzXCI7XG5jbGFzcyBSdW5SZXN1bHRCYXNlIHtcbiAgICBzdGF0ZTtcbiAgICBjb25zdHJ1Y3RvcihzdGF0ZSkge1xuICAgICAgICB0aGlzLnN0YXRlID0gc3RhdGU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBoaXN0b3J5IG9mIHRoZSBhZ2VudCBydW4uIFRoaXMgaW5jbHVkZXMgdGhlIGlucHV0IGl0ZW1zIGFuZCB0aGUgbmV3IGl0ZW1zIGdlbmVyYXRlZCBkdXJpbmdcbiAgICAgKiB0aGUgYWdlbnQgcnVuLlxuICAgICAqXG4gICAgICogVGhpcyBjYW4gYmUgdXNlZCBhcyBpbnB1dHMgZm9yIHRoZSBuZXh0IGFnZW50IHJ1bi5cbiAgICAgKi9cbiAgICBnZXQgaGlzdG9yeSgpIHtcbiAgICAgICAgcmV0dXJuIGdldFR1cm5JbnB1dCh0aGlzLmlucHV0LCB0aGlzLm5ld0l0ZW1zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIG5ldyBpdGVtcyBnZW5lcmF0ZWQgZHVyaW5nIHRoZSBhZ2VudCBydW4uIFRoZXNlIGluY2x1ZGUgdGhpbmdzIGxpa2UgbmV3IG1lc3NhZ2VzLCB0b29sXG4gICAgICogY2FsbHMgYW5kIHRoZWlyIG91dHB1dHMsIGV0Yy5cbiAgICAgKlxuICAgICAqIEl0IGRvZXMgbm90IGluY2x1ZGUgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGFnZW50cyBhbmQgaW5zdGVhZCByZXByZXNlbnRzIHRoZSBtb2RlbCBkYXRhLlxuICAgICAqXG4gICAgICogRm9yIHRoZSBvdXRwdXQgaW5jbHVkaW5nIHRoZSBhZ2VudHMsIHVzZSB0aGUgYG5ld0l0ZW1zYCBwcm9wZXJ0eS5cbiAgICAgKi9cbiAgICBnZXQgb3V0cHV0KCkge1xuICAgICAgICByZXR1cm4gZ2V0VHVybklucHV0KFtdLCB0aGlzLm5ld0l0ZW1zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQSBjb3B5IG9mIHRoZSBvcmlnaW5hbCBpbnB1dCBpdGVtcy5cbiAgICAgKi9cbiAgICBnZXQgaW5wdXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXRlLl9vcmlnaW5hbElucHV0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgcnVuIGl0ZW1zIGdlbmVyYXRlZCBkdXJpbmcgdGhlIGFnZW50IHJ1bi4gVGhpcyBhc3NvY2lhdGVzIHRoZSBtb2RlbCBkYXRhIHdpdGggdGhlIGFnZW50cy5cbiAgICAgKlxuICAgICAqIEZvciB0aGUgbW9kZWwgZGF0YSB0aGF0IGNhbiBiZSB1c2VkIGFzIGlucHV0cyBmb3IgdGhlIG5leHQgYWdlbnQgcnVuLCB1c2UgdGhlIGBvdXRwdXRgIHByb3BlcnR5LlxuICAgICAqL1xuICAgIGdldCBuZXdJdGVtcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUuX2dlbmVyYXRlZEl0ZW1zO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgcmF3IExMTSByZXNwb25zZXMgZ2VuZXJhdGVkIGJ5IHRoZSBtb2RlbCBkdXJpbmcgdGhlIGFnZW50IHJ1bi5cbiAgICAgKi9cbiAgICBnZXQgcmF3UmVzcG9uc2VzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZS5fbW9kZWxSZXNwb25zZXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBsYXN0IHJlc3BvbnNlIElEIGdlbmVyYXRlZCBieSB0aGUgbW9kZWwgZHVyaW5nIHRoZSBhZ2VudCBydW4uXG4gICAgICovXG4gICAgZ2V0IGxhc3RSZXNwb25zZUlkKCkge1xuICAgICAgICBjb25zdCByZXNwb25zZXMgPSB0aGlzLnJhd1Jlc3BvbnNlcztcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlcyAmJiByZXNwb25zZXMubGVuZ3RoID4gMFxuICAgICAgICAgICAgPyByZXNwb25zZXNbcmVzcG9uc2VzLmxlbmd0aCAtIDFdLnJlc3BvbnNlSWRcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgbGFzdCBhZ2VudCB0aGF0IHdhcyBydW5cbiAgICAgKi9cbiAgICBnZXQgbGFzdEFnZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZS5fY3VycmVudEFnZW50O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHdWFyZHJhaWwgcmVzdWx0cyBmb3IgdGhlIGlucHV0IG1lc3NhZ2VzLlxuICAgICAqL1xuICAgIGdldCBpbnB1dEd1YXJkcmFpbFJlc3VsdHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXRlLl9pbnB1dEd1YXJkcmFpbFJlc3VsdHM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEd1YXJkcmFpbCByZXN1bHRzIGZvciB0aGUgZmluYWwgb3V0cHV0IG9mIHRoZSBhZ2VudC5cbiAgICAgKi9cbiAgICBnZXQgb3V0cHV0R3VhcmRyYWlsUmVzdWx0cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUuX291dHB1dEd1YXJkcmFpbFJlc3VsdHM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFueSBpbnRlcnJ1cHRpb25zIHRoYXQgb2NjdXJyZWQgZHVyaW5nIHRoZSBhZ2VudCBydW4gZm9yIGV4YW1wbGUgZm9yIHRvb2wgYXBwcm92YWxzLlxuICAgICAqL1xuICAgIGdldCBpbnRlcnJ1cHRpb25zKCkge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5fY3VycmVudFN0ZXA/LnR5cGUgPT09ICduZXh0X3N0ZXBfaW50ZXJydXB0aW9uJykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUuX2N1cnJlbnRTdGVwLmRhdGEuaW50ZXJydXB0aW9ucztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBmaW5hbCBvdXRwdXQgb2YgdGhlIGFnZW50LiBJZiB0aGUgb3V0cHV0IHR5cGUgd2FzIHNldCB0byBhbnl0aGluZyBvdGhlciB0aGFuIGB0ZXh0YCxcbiAgICAgKiB0aGlzIHdpbGwgYmUgcGFyc2VkIGVpdGhlciBhcyBKU09OIG9yIHVzaW5nIHRoZSBab2Qgc2NoZW1hIHlvdSBwcm92aWRlZC5cbiAgICAgKi9cbiAgICBnZXQgZmluYWxPdXRwdXQoKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLl9jdXJyZW50U3RlcD8udHlwZSA9PT0gJ25leHRfc3RlcF9maW5hbF9vdXRwdXQnKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZS5fY3VycmVudEFnZW50LnByb2Nlc3NGaW5hbE91dHB1dCh0aGlzLnN0YXRlLl9jdXJyZW50U3RlcC5vdXRwdXQpO1xuICAgICAgICB9XG4gICAgICAgIGxvZ2dlci53YXJuKCdBY2Nlc3NlZCBmaW5hbE91dHB1dCBiZWZvcmUgYWdlbnQgcnVuIGlzIGNvbXBsZXRlZC4nKTtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG59XG4vKipcbiAqIFRoZSByZXN1bHQgb2YgYW4gYWdlbnQgcnVuLlxuICovXG5leHBvcnQgY2xhc3MgUnVuUmVzdWx0IGV4dGVuZHMgUnVuUmVzdWx0QmFzZSB7XG4gICAgY29uc3RydWN0b3Ioc3RhdGUpIHtcbiAgICAgICAgc3VwZXIoc3RhdGUpO1xuICAgIH1cbn1cbi8qKlxuICogVGhlIHJlc3VsdCBvZiBhbiBhZ2VudCBydW4gaW4gc3RyZWFtaW5nIG1vZGUuXG4gKi9cbmV4cG9ydCBjbGFzcyBTdHJlYW1lZFJ1blJlc3VsdCBleHRlbmRzIFJ1blJlc3VsdEJhc2Uge1xuICAgIC8qKlxuICAgICAqIFRoZSBjdXJyZW50IGFnZW50IHRoYXQgaXMgcnVubmluZ1xuICAgICAqL1xuICAgIGdldCBjdXJyZW50QWdlbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxhc3RBZ2VudDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIGN1cnJlbnQgdHVybiBudW1iZXJcbiAgICAgKi9cbiAgICBjdXJyZW50VHVybiA9IDA7XG4gICAgLyoqXG4gICAgICogVGhlIG1heGltdW0gbnVtYmVyIG9mIHR1cm5zIHRoYXQgY2FuIGJlIHJ1blxuICAgICAqL1xuICAgIG1heFR1cm5zO1xuICAgICNlcnJvciA9IG51bGw7XG4gICAgI3NpZ25hbDtcbiAgICAjcmVhZGFibGVDb250cm9sbGVyO1xuICAgICNyZWFkYWJsZVN0cmVhbTtcbiAgICAjY29tcGxldGVkUHJvbWlzZTtcbiAgICAjY29tcGxldGVkUHJvbWlzZVJlc29sdmU7XG4gICAgI2NvbXBsZXRlZFByb21pc2VSZWplY3Q7XG4gICAgI2NhbmNlbGxlZCA9IGZhbHNlO1xuICAgICNzdHJlYW1Mb29wUHJvbWlzZTtcbiAgICBjb25zdHJ1Y3RvcihyZXN1bHQgPSB7fSkge1xuICAgICAgICBzdXBlcihyZXN1bHQuc3RhdGUpO1xuICAgICAgICB0aGlzLiNzaWduYWwgPSByZXN1bHQuc2lnbmFsO1xuICAgICAgICB0aGlzLiNyZWFkYWJsZVN0cmVhbSA9IG5ldyBfUmVhZGFibGVTdHJlYW0oe1xuICAgICAgICAgICAgc3RhcnQ6IChjb250cm9sbGVyKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy4jcmVhZGFibGVDb250cm9sbGVyID0gY29udHJvbGxlcjtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjYW5jZWw6ICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLiNjYW5jZWxsZWQgPSB0cnVlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuI2NvbXBsZXRlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLiNjb21wbGV0ZWRQcm9taXNlUmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgICAgICAgICB0aGlzLiNjb21wbGV0ZWRQcm9taXNlUmVqZWN0ID0gcmVqZWN0O1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHRoaXMuI3NpZ25hbCkge1xuICAgICAgICAgICAgY29uc3QgaGFuZGxlQWJvcnQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuI2NhbmNlbGxlZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuI2NhbmNlbGxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29uc3QgY29udHJvbGxlciA9IHRoaXMuI3JlYWRhYmxlQ29udHJvbGxlcjtcbiAgICAgICAgICAgICAgICB0aGlzLiNyZWFkYWJsZUNvbnRyb2xsZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuI3JlYWRhYmxlU3RyZWFtLmxvY2tlZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29udHJvbGxlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKGBGYWlsZWQgdG8gY2xvc2UgcmVhZGFibGUgc3RyZWFtIG9uIGFib3J0OiAke2Vycn1gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdm9pZCB0aGlzLiNyZWFkYWJsZVN0cmVhbVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNhbmNlbCh0aGlzLiNzaWduYWw/LnJlYXNvbilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2dnZXIuZGVidWcoYEZhaWxlZCB0byBjYW5jZWwgcmVhZGFibGUgc3RyZWFtIG9uIGFib3J0OiAke2Vycn1gKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuI2NvbXBsZXRlZFByb21pc2VSZXNvbHZlPy4oKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAodGhpcy4jc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVBYm9ydCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy4jc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgaGFuZGxlQWJvcnQsIHsgb25jZTogdHJ1ZSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKiBBZGRzIGFuIGl0ZW0gdG8gdGhlIHN0cmVhbSBvZiBvdXRwdXQgaXRlbXNcbiAgICAgKi9cbiAgICBfYWRkSXRlbShpdGVtKSB7XG4gICAgICAgIGlmICghdGhpcy5jYW5jZWxsZWQpIHtcbiAgICAgICAgICAgIHRoaXMuI3JlYWRhYmxlQ29udHJvbGxlcj8uZW5xdWV1ZShpdGVtKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKiBJbmRpY2F0ZXMgdGhhdCB0aGUgc3RyZWFtIGhhcyBiZWVuIGNvbXBsZXRlZFxuICAgICAqL1xuICAgIF9kb25lKCkge1xuICAgICAgICBpZiAoIXRoaXMuY2FuY2VsbGVkICYmIHRoaXMuI3JlYWRhYmxlQ29udHJvbGxlcikge1xuICAgICAgICAgICAgdGhpcy4jcmVhZGFibGVDb250cm9sbGVyLmNsb3NlKCk7XG4gICAgICAgICAgICB0aGlzLiNyZWFkYWJsZUNvbnRyb2xsZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB0aGlzLiNjb21wbGV0ZWRQcm9taXNlUmVzb2x2ZT8uKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICogSGFuZGxlcyBhbiBlcnJvciBpbiB0aGUgc3RyZWFtIGxvb3AuXG4gICAgICovXG4gICAgX3JhaXNlRXJyb3IoZXJyKSB7XG4gICAgICAgIGlmICghdGhpcy5jYW5jZWxsZWQgJiYgdGhpcy4jcmVhZGFibGVDb250cm9sbGVyKSB7XG4gICAgICAgICAgICB0aGlzLiNyZWFkYWJsZUNvbnRyb2xsZXIuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIHRoaXMuI3JlYWRhYmxlQ29udHJvbGxlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLiNlcnJvciA9IGVycjtcbiAgICAgICAgdGhpcy4jY29tcGxldGVkUHJvbWlzZVJlamVjdD8uKGVycik7XG4gICAgICAgIHRoaXMuI2NvbXBsZXRlZFByb21pc2UuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZyhgUmVzdWx0ZWQgaW4gYW4gZXJyb3I6ICR7ZX1gKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgc3RyZWFtIGhhcyBiZWVuIGNhbmNlbGxlZC5cbiAgICAgKi9cbiAgICBnZXQgY2FuY2VsbGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jY2FuY2VsbGVkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB1bmRlcmx5aW5nIHJlYWRhYmxlIHN0cmVhbS5cbiAgICAgKiBAcmV0dXJucyBBIHJlYWRhYmxlIHN0cmVhbSBvZiB0aGUgYWdlbnQgcnVuLlxuICAgICAqL1xuICAgIHRvU3RyZWFtKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jcmVhZGFibGVTdHJlYW07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEF3YWl0IHRoaXMgcHJvbWlzZSB0byBlbnN1cmUgdGhhdCB0aGUgc3RyZWFtIGhhcyBiZWVuIGNvbXBsZXRlZCBpZiB5b3UgYXJlIG5vdCBjb25zdW1pbmcgdGhlXG4gICAgICogc3RyZWFtIGRpcmVjdGx5LlxuICAgICAqL1xuICAgIGdldCBjb21wbGV0ZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNjb21wbGV0ZWRQcm9taXNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFcnJvciB0aHJvd24gZHVyaW5nIHRoZSBydW4sIGlmIGFueS5cbiAgICAgKi9cbiAgICBnZXQgZXJyb3IoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNlcnJvcjtcbiAgICB9XG4gICAgdG9UZXh0U3RyZWFtKG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBjb25zdCBzdHJlYW0gPSB0aGlzLiNyZWFkYWJsZVN0cmVhbS5waXBlVGhyb3VnaChuZXcgVHJhbnNmb3JtU3RyZWFtKHtcbiAgICAgICAgICAgIHRyYW5zZm9ybShldmVudCwgY29udHJvbGxlcikge1xuICAgICAgICAgICAgICAgIGlmIChldmVudC50eXBlID09PSAncmF3X21vZGVsX3N0cmVhbV9ldmVudCcgJiZcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQuZGF0YS50eXBlID09PSAnb3V0cHV0X3RleHRfZGVsdGEnKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSBTdHJlYW1FdmVudFRleHRTdHJlYW0ucGFyc2UoZXZlbnQuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZShpdGVtLmRlbHRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KSk7XG4gICAgICAgIGlmIChvcHRpb25zLmNvbXBhdGlibGVXaXRoTm9kZVN0cmVhbXMpIHtcbiAgICAgICAgICAgIHJldHVybiBSZWFkYWJsZS5mcm9tV2ViKHN0cmVhbSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0cmVhbTtcbiAgICB9XG4gICAgW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI3JlYWRhYmxlU3RyZWFtW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKiBTZXRzIHRoZSBzdHJlYW0gbG9vcCBwcm9taXNlIHRoYXQgY29tcGxldGVzIHdoZW4gdGhlIGludGVybmFsIHN0cmVhbSBsb29wIGZpbmlzaGVzLlxuICAgICAqIFRoaXMgaXMgdXNlZCB0byBkZWZlciB0cmFjZSBlbmQgdW50aWwgYWxsIGFnZW50IHdvcmsgaXMgY29tcGxldGUuXG4gICAgICovXG4gICAgX3NldFN0cmVhbUxvb3BQcm9taXNlKHByb21pc2UpIHtcbiAgICAgICAgdGhpcy4jc3RyZWFtTG9vcFByb21pc2UgPSBwcm9taXNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKiBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIHN0cmVhbSBsb29wIGNvbXBsZXRlcy5cbiAgICAgKiBUaGlzIGlzIHVzZWQgYnkgdGhlIHRyYWNpbmcgc3lzdGVtIHRvIHdhaXQgZm9yIGFsbCBhZ2VudCB3b3JrIGJlZm9yZSBlbmRpbmcgdGhlIHRyYWNlLlxuICAgICAqL1xuICAgIF9nZXRTdHJlYW1Mb29wUHJvbWlzZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI3N0cmVhbUxvb3BQcm9taXNlO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlc3VsdC5tanMubWFwIiwiaW1wb3J0IHsgQXN5bmNMb2NhbFN0b3JhZ2UgfSBmcm9tICdAb3BlbmFpL2FnZW50cy1jb3JlL19zaGltcyc7XG5pbXBvcnQgeyBnZXRHbG9iYWxUcmFjZVByb3ZpZGVyIH0gZnJvbSBcIi4vcHJvdmlkZXIubWpzXCI7XG5pbXBvcnQgeyBTdHJlYW1lZFJ1blJlc3VsdCB9IGZyb20gXCIuLi9yZXN1bHQubWpzXCI7XG5sZXQgX2NvbnRleHRBc3luY0xvY2FsU3RvcmFnZTtcbmZ1bmN0aW9uIGdldENvbnRleHRBc3luY0xvY2FsU3RvcmFnZSgpIHtcbiAgICBfY29udGV4dEFzeW5jTG9jYWxTdG9yYWdlID8/PSBuZXcgQXN5bmNMb2NhbFN0b3JhZ2UoKTtcbiAgICByZXR1cm4gX2NvbnRleHRBc3luY0xvY2FsU3RvcmFnZTtcbn1cbi8qKlxuICogVGhpcyBmdW5jdGlvbiB3aWxsIGdldCB0aGUgY3VycmVudCB0cmFjZSBmcm9tIHRoZSBleGVjdXRpb24gY29udGV4dC5cbiAqXG4gKiBAcmV0dXJucyBUaGUgY3VycmVudCB0cmFjZSBvciBudWxsIGlmIHRoZXJlIGlzIG5vIHRyYWNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q3VycmVudFRyYWNlKCkge1xuICAgIGNvbnN0IGN1cnJlbnRUcmFjZSA9IGdldENvbnRleHRBc3luY0xvY2FsU3RvcmFnZSgpLmdldFN0b3JlKCk7XG4gICAgaWYgKGN1cnJlbnRUcmFjZT8udHJhY2UpIHtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRUcmFjZS50cmFjZTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gd2lsbCBnZXQgdGhlIGN1cnJlbnQgc3BhbiBmcm9tIHRoZSBleGVjdXRpb24gY29udGV4dC5cbiAqXG4gKiBAcmV0dXJucyBUaGUgY3VycmVudCBzcGFuIG9yIG51bGwgaWYgdGhlcmUgaXMgbm8gc3Bhbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEN1cnJlbnRTcGFuKCkge1xuICAgIGNvbnN0IGN1cnJlbnRTcGFuID0gZ2V0Q29udGV4dEFzeW5jTG9jYWxTdG9yYWdlKCkuZ2V0U3RvcmUoKTtcbiAgICBpZiAoY3VycmVudFNwYW4/LnNwYW4pIHtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRTcGFuLnNwYW47XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuLyoqXG4gKiBUaGlzIGlzIGFuIEFzeW5jTG9jYWxTdG9yYWdlIGluc3RhbmNlIHRoYXQgc3RvcmVzIHRoZSBjdXJyZW50IHRyYWNlLlxuICogSXQgd2lsbCBhdXRvbWF0aWNhbGx5IGhhbmRsZSB0aGUgZXhlY3V0aW9uIGNvbnRleHQgb2YgZGlmZmVyZW50IGV2ZW50IGxvb3AgZXhlY3V0aW9ucy5cbiAqXG4gKiBUaGUgZnVuY3Rpb25zIGJlbG93IHNob3VsZCBiZSB0aGUgb25seSB3YXkgdGhhdCB0aGlzIGNvbnRleHQgZ2V0cyBpbnRlcmZhY2VkIHdpdGguXG4gKi9cbmZ1bmN0aW9uIF93cmFwRnVuY3Rpb25XaXRoVHJhY2VMaWZlY3ljbGUoZm4pIHtcbiAgICByZXR1cm4gYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCB0cmFjZSA9IGdldEN1cnJlbnRUcmFjZSgpO1xuICAgICAgICBpZiAoIXRyYWNlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIHRyYWNlIGZvdW5kJyk7XG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgdHJhY2Uuc3RhcnQoKTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZm4odHJhY2UpO1xuICAgICAgICAvLyBJZiByZXN1bHQgaXMgYSBTdHJlYW1lZFJ1blJlc3VsdCwgZGVmZXIgdHJhY2UgZW5kIHVudGlsIHN0cmVhbSBsb29wIGNvbXBsZXRlc1xuICAgICAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgU3RyZWFtZWRSdW5SZXN1bHQpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0cmVhbUxvb3BQcm9taXNlID0gcmVzdWx0Ll9nZXRTdHJlYW1Mb29wUHJvbWlzZSgpO1xuICAgICAgICAgICAgaWYgKHN0cmVhbUxvb3BQcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgc3RyZWFtTG9vcFByb21pc2UuZmluYWxseSgoKSA9PiB0cmFjZS5lbmQoKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBGb3Igbm9uLXN0cmVhbWluZyByZXN1bHRzLCBlbmQgdHJhY2Ugc3luY2hyb25vdXNseVxuICAgICAgICBhd2FpdCB0cmFjZS5lbmQoKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xufVxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIHdpbGwgY3JlYXRlIGEgbmV3IHRyYWNlIGFuZCBhc3NpZ24gaXQgdG8gdGhlIGV4ZWN1dGlvbiBjb250ZXh0IG9mIHRoZSBmdW5jdGlvblxuICogcGFzc2VkIHRvIGl0LlxuICpcbiAqIEBwYXJhbSBmbiAtIFRoZSBmdW5jdGlvbiB0byBydW4gYW5kIGFzc2lnbiB0aGUgdHJhY2UgY29udGV4dCB0by5cbiAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9ucyBmb3IgdGhlIGNyZWF0aW9uIG9mIHRoZSB0cmFjZVxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gd2l0aFRyYWNlKHRyYWNlLCBmbiwgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgbmV3VHJhY2UgPSB0eXBlb2YgdHJhY2UgPT09ICdzdHJpbmcnXG4gICAgICAgID8gZ2V0R2xvYmFsVHJhY2VQcm92aWRlcigpLmNyZWF0ZVRyYWNlKHtcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBuYW1lOiB0cmFjZSxcbiAgICAgICAgfSlcbiAgICAgICAgOiB0cmFjZTtcbiAgICByZXR1cm4gZ2V0Q29udGV4dEFzeW5jTG9jYWxTdG9yYWdlKCkucnVuKHsgdHJhY2U6IG5ld1RyYWNlIH0sIF93cmFwRnVuY3Rpb25XaXRoVHJhY2VMaWZlY3ljbGUoZm4pKTtcbn1cbi8qKlxuICogVGhpcyBmdW5jdGlvbiB3aWxsIGNoZWNrIGlmIHRoZXJlIGlzIGFuIGV4aXN0aW5nIGFjdGl2ZSB0cmFjZSBpbiB0aGUgZXhlY3V0aW9uIGNvbnRleHQuIElmIHRoZXJlXG4gKiBpcywgaXQgd2lsbCBydW4gdGhlIGdpdmVuIGZ1bmN0aW9uIHdpdGggdGhlIGV4aXN0aW5nIHRyYWNlLiBJZiB0aGVyZSBpcyBubyB0cmFjZSwgaXQgd2lsbCBjcmVhdGVcbiAqIGEgbmV3IG9uZSBhbmQgYXNzaWduIGl0IHRvIHRoZSBleGVjdXRpb24gY29udGV4dCBvZiB0aGUgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIGZuIC0gVGhlIGZ6dW5jdGlvbiB0byBydW4gYW5kIGFzc2lnbiB0aGUgdHJhY2UgY29udGV4dCB0by5cbiAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9ucyBmb3IgdGhlIGNyZWF0aW9uIG9mIHRoZSB0cmFjZVxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0T3JDcmVhdGVUcmFjZShmbiwgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgY3VycmVudFRyYWNlID0gZ2V0Q3VycmVudFRyYWNlKCk7XG4gICAgaWYgKGN1cnJlbnRUcmFjZSkge1xuICAgICAgICAvLyBpZiB0aGlzIGV4ZWN1dGlvbiBjb250ZXh0IGFscmVhZHkgaGFzIGEgdHJhY2UgaW5zdGFuY2UgaW4gaXQgd2UganVzdCBjb250aW51ZVxuICAgICAgICByZXR1cm4gYXdhaXQgZm4oKTtcbiAgICB9XG4gICAgY29uc3QgbmV3VHJhY2UgPSBnZXRHbG9iYWxUcmFjZVByb3ZpZGVyKCkuY3JlYXRlVHJhY2Uob3B0aW9ucyk7XG4gICAgcmV0dXJuIGdldENvbnRleHRBc3luY0xvY2FsU3RvcmFnZSgpLnJ1bih7IHRyYWNlOiBuZXdUcmFjZSB9LCBfd3JhcEZ1bmN0aW9uV2l0aFRyYWNlTGlmZWN5Y2xlKGZuKSk7XG59XG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gd2lsbCBzZXQgdGhlIGN1cnJlbnQgc3BhbiBpbiB0aGUgZXhlY3V0aW9uIGNvbnRleHQuXG4gKlxuICogQHBhcmFtIHNwYW4gLSBUaGUgc3BhbiB0byBzZXQgYXMgdGhlIGN1cnJlbnQgc3Bhbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldEN1cnJlbnRTcGFuKHNwYW4pIHtcbiAgICBjb25zdCBjb250ZXh0ID0gZ2V0Q29udGV4dEFzeW5jTG9jYWxTdG9yYWdlKCkuZ2V0U3RvcmUoKTtcbiAgICBpZiAoIWNvbnRleHQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBleGlzdGluZyB0cmFjZSBmb3VuZCcpO1xuICAgIH1cbiAgICBpZiAoY29udGV4dC5zcGFuKSB7XG4gICAgICAgIGNvbnRleHQuc3Bhbi5wcmV2aW91c1NwYW4gPSBjb250ZXh0LnByZXZpb3VzU3BhbjtcbiAgICAgICAgY29udGV4dC5wcmV2aW91c1NwYW4gPSBjb250ZXh0LnNwYW47XG4gICAgfVxuICAgIGNvbnRleHQuc3BhbiA9IHNwYW47XG4gICAgZ2V0Q29udGV4dEFzeW5jTG9jYWxTdG9yYWdlKCkuZW50ZXJXaXRoKGNvbnRleHQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHJlc2V0Q3VycmVudFNwYW4oKSB7XG4gICAgY29uc3QgY29udGV4dCA9IGdldENvbnRleHRBc3luY0xvY2FsU3RvcmFnZSgpLmdldFN0b3JlKCk7XG4gICAgaWYgKGNvbnRleHQpIHtcbiAgICAgICAgY29udGV4dC5zcGFuID0gY29udGV4dC5wcmV2aW91c1NwYW47XG4gICAgICAgIGNvbnRleHQucHJldmlvdXNTcGFuID0gY29udGV4dC5wcmV2aW91c1NwYW4/LnByZXZpb3VzU3BhbjtcbiAgICAgICAgZ2V0Q29udGV4dEFzeW5jTG9jYWxTdG9yYWdlKCkuZW50ZXJXaXRoKGNvbnRleHQpO1xuICAgIH1cbn1cbi8qKlxuICogVGhpcyBmdW5jdGlvbiB3aWxsIGFkZCBhbiBlcnJvciB0byB0aGUgY3VycmVudCBzcGFuLlxuICpcbiAqIEBwYXJhbSBzcGFuRXJyb3IgLSBUaGUgZXJyb3IgdG8gYWRkIHRvIHRoZSBjdXJyZW50IHNwYW4uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGRFcnJvclRvQ3VycmVudFNwYW4oc3BhbkVycm9yKSB7XG4gICAgY29uc3QgY3VycmVudFNwYW4gPSBnZXRDdXJyZW50U3BhbigpO1xuICAgIGlmIChjdXJyZW50U3Bhbikge1xuICAgICAgICBjdXJyZW50U3Bhbi5zZXRFcnJvcihzcGFuRXJyb3IpO1xuICAgIH1cbn1cbi8qKlxuICogVGhpcyBmdW5jdGlvbiB3aWxsIGNsb25lIHRoZSBjdXJyZW50IGNvbnRleHQgYnkgY3JlYXRpbmcgbmV3IGluc3RhbmNlcyBvZiB0aGUgdHJhY2UsIHNwYW4sIGFuZFxuICogcHJldmlvdXMgc3Bhbi5cbiAqXG4gKiBAcGFyYW0gY29udGV4dCAtIFRoZSBjb250ZXh0IHRvIGNsb25lLlxuICogQHJldHVybnMgQSBjbG9uZSBvZiB0aGUgY29udGV4dC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNsb25lQ3VycmVudENvbnRleHQoY29udGV4dCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHRyYWNlOiBjb250ZXh0LnRyYWNlPy5jbG9uZSgpLFxuICAgICAgICBzcGFuOiBjb250ZXh0LnNwYW4/LmNsb25lKCksXG4gICAgICAgIHByZXZpb3VzU3BhbjogY29udGV4dC5wcmV2aW91c1NwYW4/LmNsb25lKCksXG4gICAgfTtcbn1cbi8qKlxuICogVGhpcyBmdW5jdGlvbiB3aWxsIHJ1biB0aGUgZ2l2ZW4gZnVuY3Rpb24gd2l0aCBhIG5ldyBzcGFuIGNvbnRleHQuXG4gKlxuICogQHBhcmFtIGZuIC0gVGhlIGZ1bmN0aW9uIHRvIHJ1biB3aXRoIHRoZSBuZXcgc3BhbiBjb250ZXh0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gd2l0aE5ld1NwYW5Db250ZXh0KGZuKSB7XG4gICAgY29uc3QgY3VycmVudENvbnRleHQgPSBnZXRDb250ZXh0QXN5bmNMb2NhbFN0b3JhZ2UoKS5nZXRTdG9yZSgpO1xuICAgIGlmICghY3VycmVudENvbnRleHQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBleGlzdGluZyB0cmFjZSBmb3VuZCcpO1xuICAgIH1cbiAgICBjb25zdCBjb3B5T2ZDb250ZXh0ID0gY2xvbmVDdXJyZW50Q29udGV4dChjdXJyZW50Q29udGV4dCk7XG4gICAgcmV0dXJuIGdldENvbnRleHRBc3luY0xvY2FsU3RvcmFnZSgpLnJ1bihjb3B5T2ZDb250ZXh0LCBmbik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb250ZXh0Lm1qcy5tYXAiLCJpbXBvcnQgbG9nZ2VyIGZyb20gXCIuLi9sb2dnZXIubWpzXCI7XG5pbXBvcnQgeyB0aW1lciBhcyBfdGltZXIsIGlzVHJhY2luZ0xvb3BSdW5uaW5nQnlEZWZhdWx0LCB9IGZyb20gJ0BvcGVuYWkvYWdlbnRzLWNvcmUvX3NoaW1zJztcbmltcG9ydCB7IHRyYWNpbmcgfSBmcm9tIFwiLi4vY29uZmlnLm1qc1wiO1xuLyoqXG4gKiBQcmludHMgdGhlIHRyYWNlcyBhbmQgc3BhbnMgdG8gdGhlIGNvbnNvbGVcbiAqL1xuZXhwb3J0IGNsYXNzIENvbnNvbGVTcGFuRXhwb3J0ZXIge1xuICAgIGFzeW5jIGV4cG9ydChpdGVtcykge1xuICAgICAgICBpZiAodHJhY2luZy5kaXNhYmxlZCkge1xuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCdUcmFjaW5nIGlzIGRpc2FibGVkLiBTa2lwcGluZyBleHBvcnQnKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgaXRlbXMpIHtcbiAgICAgICAgICAgIGlmIChpdGVtLnR5cGUgPT09ICd0cmFjZScpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgW0V4cG9ydGVyXSBFeHBvcnQgdHJhY2UgdHJhY2VJZD0ke2l0ZW0udHJhY2VJZH0gbmFtZT0ke2l0ZW0ubmFtZX0ke2l0ZW0uZ3JvdXBJZCA/IGAgZ3JvdXBJZD0ke2l0ZW0uZ3JvdXBJZH1gIDogJyd9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgW0V4cG9ydGVyXSBFeHBvcnQgc3BhbjogJHtKU09OLnN0cmluZ2lmeShpdGVtKX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBCYXRjaFRyYWNlUHJvY2Vzc29yIHtcbiAgICAjbWF4UXVldWVTaXplO1xuICAgICNtYXhCYXRjaFNpemU7XG4gICAgI3NjaGVkdWxlRGVsYXk7XG4gICAgI2V4cG9ydFRyaWdnZXJTaXplO1xuICAgICNleHBvcnRlcjtcbiAgICAjYnVmZmVyID0gW107XG4gICAgI3RpbWVyO1xuICAgICN0aW1lb3V0ID0gbnVsbDtcbiAgICAjZXhwb3J0SW5Qcm9ncmVzcyA9IGZhbHNlO1xuICAgICN0aW1lb3V0QWJvcnRDb250cm9sbGVyID0gbnVsbDtcbiAgICBjb25zdHJ1Y3RvcihleHBvcnRlciwgeyBtYXhRdWV1ZVNpemUgPSAxMDAwLCBtYXhCYXRjaFNpemUgPSAxMDAsIHNjaGVkdWxlRGVsYXkgPSA1MDAwLCAvLyA1IHNlY29uZHNcbiAgICBleHBvcnRUcmlnZ2VyUmF0aW8gPSAwLjgsIH0gPSB7fSkge1xuICAgICAgICB0aGlzLiNtYXhRdWV1ZVNpemUgPSBtYXhRdWV1ZVNpemU7XG4gICAgICAgIHRoaXMuI21heEJhdGNoU2l6ZSA9IG1heEJhdGNoU2l6ZTtcbiAgICAgICAgdGhpcy4jc2NoZWR1bGVEZWxheSA9IHNjaGVkdWxlRGVsYXk7XG4gICAgICAgIHRoaXMuI2V4cG9ydFRyaWdnZXJTaXplID0gbWF4UXVldWVTaXplICogZXhwb3J0VHJpZ2dlclJhdGlvO1xuICAgICAgICB0aGlzLiNleHBvcnRlciA9IGV4cG9ydGVyO1xuICAgICAgICB0aGlzLiN0aW1lciA9IF90aW1lcjtcbiAgICAgICAgaWYgKGlzVHJhY2luZ0xvb3BSdW5uaW5nQnlEZWZhdWx0KCkpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnQoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZygnQXV0b21hdGljIHRyYWNlIGV4cG9ydCBsb29wIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBlbnZpcm9ubWVudC4gWW91IG5lZWQgdG8gbWFudWFsbHkgY2FsbCBgZ2V0R2xvYmFsVHJhY2VQcm92aWRlcigpLmZvcmNlRmx1c2goKWAgdG8gZXhwb3J0IHRyYWNlcy4nKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGFydCgpIHtcbiAgICAgICAgdGhpcy4jdGltZW91dEFib3J0Q29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAgICAgICAgdGhpcy4jcnVuRXhwb3J0TG9vcCgpO1xuICAgIH1cbiAgICBhc3luYyAjc2FmZUFkZEl0ZW0oaXRlbSkge1xuICAgICAgICBpZiAodGhpcy4jYnVmZmVyLmxlbmd0aCArIDEgPiB0aGlzLiNtYXhRdWV1ZVNpemUpIHtcbiAgICAgICAgICAgIGxvZ2dlci5lcnJvcignRHJvcHBpbmcgdHJhY2UgYmVjYXVzZSBidWZmZXIgaXMgZnVsbCcpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIGFkZCB0aGUgaXRlbSB0byB0aGUgYnVmZmVyXG4gICAgICAgIHRoaXMuI2J1ZmZlci5wdXNoKGl0ZW0pO1xuICAgICAgICBpZiAodGhpcy4jYnVmZmVyLmxlbmd0aCA+IHRoaXMuI2V4cG9ydFRyaWdnZXJTaXplKSB7XG4gICAgICAgICAgICAvLyBzdGFydCBleHBvcnRpbmcgaW1tZWRpYXRlbHlcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuI2V4cG9ydEJhdGNoZXMoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAjcnVuRXhwb3J0TG9vcCgpIHtcbiAgICAgICAgdGhpcy4jdGltZW91dCA9IHRoaXMuI3RpbWVyLnNldFRpbWVvdXQoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgLy8gc2NoZWR1bGVkIGV4cG9ydFxuICAgICAgICAgICAgYXdhaXQgdGhpcy4jZXhwb3J0QmF0Y2hlcygpO1xuICAgICAgICAgICAgdGhpcy4jcnVuRXhwb3J0TG9vcCgpO1xuICAgICAgICB9LCB0aGlzLiNzY2hlZHVsZURlbGF5KTtcbiAgICAgICAgLy8gV2Ugc2V0IHRoaXMgc28gdGhhdCBOb2RlIG5vIGxvbmdlciBjb25zaWRlcnMgdGhpcyBwYXJ0IG9mIHRoZSBldmVudCBsb29wIGFuZCBrZWVwcyB0aGVcbiAgICAgICAgLy8gcHJvY2VzcyBhbGl2ZSB1bnRpbCB0aGUgdGltZXIgaXMgZG9uZS5cbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLiN0aW1lb3V0LnVucmVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aGlzLiN0aW1lb3V0LnVucmVmKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgI2V4cG9ydEJhdGNoZXMoZm9yY2UgPSBmYWxzZSkge1xuICAgICAgICBpZiAodGhpcy4jYnVmZmVyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGxvZ2dlci5kZWJ1ZyhgRXhwb3J0aW5nIGJhdGNoZXMuIEZvcmNlOiAke2ZvcmNlfS4gQnVmZmVyIHNpemU6ICR7dGhpcy4jYnVmZmVyLmxlbmd0aH1gKTtcbiAgICAgICAgaWYgKGZvcmNlIHx8IHRoaXMuI2J1ZmZlci5sZW5ndGggPCB0aGlzLiNtYXhCYXRjaFNpemUpIHtcbiAgICAgICAgICAgIGNvbnN0IHRvRXhwb3J0ID0gWy4uLnRoaXMuI2J1ZmZlcl07XG4gICAgICAgICAgICB0aGlzLiNidWZmZXIgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuI2V4cG9ydEluUHJvZ3Jlc3MgPSB0cnVlO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy4jZXhwb3J0ZXIuZXhwb3J0KHRvRXhwb3J0KTtcbiAgICAgICAgICAgIHRoaXMuI2V4cG9ydEluUHJvZ3Jlc3MgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLiNidWZmZXIubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc3QgYmF0Y2ggPSB0aGlzLiNidWZmZXIuc3BsaWNlKDAsIHRoaXMuI21heEJhdGNoU2l6ZSk7XG4gICAgICAgICAgICB0aGlzLiNleHBvcnRJblByb2dyZXNzID0gdHJ1ZTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuI2V4cG9ydGVyLmV4cG9ydChiYXRjaCk7XG4gICAgICAgICAgICB0aGlzLiNleHBvcnRJblByb2dyZXNzID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgb25UcmFjZVN0YXJ0KHRyYWNlKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuI3NhZmVBZGRJdGVtKHRyYWNlKTtcbiAgICB9XG4gICAgYXN5bmMgb25UcmFjZUVuZChfdHJhY2UpIHtcbiAgICAgICAgLy8gV2UgZG9uJ3Qgc2VuZCB0cmFjZXMgb24gZW5kIGJlY2F1c2Ugd2UgYWxyZWFkeSBzZW5kIHRoZW0gb24gc3RhcnRcbiAgICB9XG4gICAgYXN5bmMgb25TcGFuU3RhcnQoX3NwYW4pIHtcbiAgICAgICAgLy8gV2UgZG9uJ3Qgc2VuZCBzcGFucyBvbiBzdGFydCBiZWNhdXNlIHdlIHNlbmQgdGhlbSBhdCB0aGUgZW5kXG4gICAgfVxuICAgIGFzeW5jIG9uU3BhbkVuZChzcGFuKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuI3NhZmVBZGRJdGVtKHNwYW4pO1xuICAgIH1cbiAgICBhc3luYyBzaHV0ZG93bih0aW1lb3V0KSB7XG4gICAgICAgIGlmICh0aW1lb3V0KSB7XG4gICAgICAgICAgICB0aGlzLiN0aW1lci5zZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBmb3JjZSBzaHV0ZG93biB0aGUgSFRUUCByZXF1ZXN0XG4gICAgICAgICAgICAgICAgdGhpcy4jdGltZW91dEFib3J0Q29udHJvbGxlcj8uYWJvcnQoKTtcbiAgICAgICAgICAgIH0sIHRpbWVvdXQpO1xuICAgICAgICB9XG4gICAgICAgIGxvZ2dlci5kZWJ1ZygnU2h1dHRpbmcgZG93biBncmFjZWZ1bGx5Jyk7XG4gICAgICAgIHdoaWxlICh0aGlzLiNidWZmZXIubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKGBXYWl0aW5nIGZvciBidWZmZXIgdG8gZW1wdHkuIEl0ZW1zIGxlZnQ6ICR7dGhpcy4jYnVmZmVyLmxlbmd0aH1gKTtcbiAgICAgICAgICAgIGlmICghdGhpcy4jZXhwb3J0SW5Qcm9ncmVzcykge1xuICAgICAgICAgICAgICAgIC8vIG5vIGN1cnJlbnQgZXhwb3J0IGluIHByb2dyZXNzLiBGb3JjaW5nIGFsbCBpdGVtcyB0byBiZSBleHBvcnRlZFxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuI2V4cG9ydEJhdGNoZXModHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy4jdGltZW91dEFib3J0Q29udHJvbGxlcj8uc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIuZGVidWcoJ1RpbWVvdXQgcmVhY2hlZCwgZm9yY2UgZmx1c2hpbmcnKTtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLiNleHBvcnRCYXRjaGVzKHRydWUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdXNpbmcgc2V0VGltZW91dCB0byBhZGQgdG8gdGhlIGV2ZW50IGxvb3AgYW5kIGtlZXAgdGhpcyBhbGl2ZSB1bnRpbCBkb25lXG4gICAgICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gdGhpcy4jdGltZXIuc2V0VGltZW91dChyZXNvbHZlLCA1MDApKTtcbiAgICAgICAgfVxuICAgICAgICBsb2dnZXIuZGVidWcoJ0J1ZmZlciBlbXB0eS4gRXhpdGluZycpO1xuICAgICAgICBpZiAodGhpcy4jdGltZXIgJiYgdGhpcy4jdGltZW91dCkge1xuICAgICAgICAgICAgLy8gbWFraW5nIHN1cmUgdGhlcmUgYXJlIG5vIG1vcmUgcmVxdWVzdHNcbiAgICAgICAgICAgIHRoaXMuI3RpbWVyLmNsZWFyVGltZW91dCh0aGlzLiN0aW1lb3V0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBmb3JjZUZsdXNoKCkge1xuICAgICAgICBpZiAodGhpcy4jYnVmZmVyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuI2V4cG9ydEJhdGNoZXModHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnQgY2xhc3MgTXVsdGlUcmFjaW5nUHJvY2Vzc29yIHtcbiAgICAjcHJvY2Vzc29ycyA9IFtdO1xuICAgIHN0YXJ0KCkge1xuICAgICAgICBmb3IgKGNvbnN0IHByb2Nlc3NvciBvZiB0aGlzLiNwcm9jZXNzb3JzKSB7XG4gICAgICAgICAgICBpZiAocHJvY2Vzc29yLnN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgcHJvY2Vzc29yLnN0YXJ0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgYWRkVHJhY2VQcm9jZXNzb3IocHJvY2Vzc29yKSB7XG4gICAgICAgIHRoaXMuI3Byb2Nlc3NvcnMucHVzaChwcm9jZXNzb3IpO1xuICAgIH1cbiAgICBzZXRQcm9jZXNzb3JzKHByb2Nlc3NvcnMpIHtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdTaHV0dGluZyBkb3duIG9sZCBwcm9jZXNzb3JzJyk7XG4gICAgICAgIGZvciAoY29uc3QgcHJvY2Vzc29yIG9mIHRoaXMuI3Byb2Nlc3NvcnMpIHtcbiAgICAgICAgICAgIHByb2Nlc3Nvci5zaHV0ZG93bigpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuI3Byb2Nlc3NvcnMgPSBwcm9jZXNzb3JzO1xuICAgIH1cbiAgICBhc3luYyBvblRyYWNlU3RhcnQodHJhY2UpIHtcbiAgICAgICAgZm9yIChjb25zdCBwcm9jZXNzb3Igb2YgdGhpcy4jcHJvY2Vzc29ycykge1xuICAgICAgICAgICAgYXdhaXQgcHJvY2Vzc29yLm9uVHJhY2VTdGFydCh0cmFjZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgb25UcmFjZUVuZCh0cmFjZSkge1xuICAgICAgICBmb3IgKGNvbnN0IHByb2Nlc3NvciBvZiB0aGlzLiNwcm9jZXNzb3JzKSB7XG4gICAgICAgICAgICBhd2FpdCBwcm9jZXNzb3Iub25UcmFjZUVuZCh0cmFjZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgb25TcGFuU3RhcnQoc3Bhbikge1xuICAgICAgICBmb3IgKGNvbnN0IHByb2Nlc3NvciBvZiB0aGlzLiNwcm9jZXNzb3JzKSB7XG4gICAgICAgICAgICBhd2FpdCBwcm9jZXNzb3Iub25TcGFuU3RhcnQoc3Bhbik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgb25TcGFuRW5kKHNwYW4pIHtcbiAgICAgICAgZm9yIChjb25zdCBwcm9jZXNzb3Igb2YgdGhpcy4jcHJvY2Vzc29ycykge1xuICAgICAgICAgICAgYXdhaXQgcHJvY2Vzc29yLm9uU3BhbkVuZChzcGFuKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBzaHV0ZG93bih0aW1lb3V0KSB7XG4gICAgICAgIGZvciAoY29uc3QgcHJvY2Vzc29yIG9mIHRoaXMuI3Byb2Nlc3NvcnMpIHtcbiAgICAgICAgICAgIGF3YWl0IHByb2Nlc3Nvci5zaHV0ZG93bih0aW1lb3V0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBmb3JjZUZsdXNoKCkge1xuICAgICAgICBmb3IgKGNvbnN0IHByb2Nlc3NvciBvZiB0aGlzLiNwcm9jZXNzb3JzKSB7XG4gICAgICAgICAgICBhd2FpdCBwcm9jZXNzb3IuZm9yY2VGbHVzaCgpO1xuICAgICAgICB9XG4gICAgfVxufVxubGV0IF9kZWZhdWx0RXhwb3J0ZXIgPSBudWxsO1xubGV0IF9kZWZhdWx0UHJvY2Vzc29yID0gbnVsbDtcbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0RXhwb3J0ZXIoKSB7XG4gICAgaWYgKCFfZGVmYXVsdEV4cG9ydGVyKSB7XG4gICAgICAgIF9kZWZhdWx0RXhwb3J0ZXIgPSBuZXcgQ29uc29sZVNwYW5FeHBvcnRlcigpO1xuICAgIH1cbiAgICByZXR1cm4gX2RlZmF1bHRFeHBvcnRlcjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0UHJvY2Vzc29yKCkge1xuICAgIGlmICghX2RlZmF1bHRQcm9jZXNzb3IpIHtcbiAgICAgICAgX2RlZmF1bHRQcm9jZXNzb3IgPSBuZXcgQmF0Y2hUcmFjZVByb2Nlc3NvcihkZWZhdWx0RXhwb3J0ZXIoKSk7XG4gICAgfVxuICAgIHJldHVybiBfZGVmYXVsdFByb2Nlc3Nvcjtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb2Nlc3Nvci5tanMubWFwIiwiaW1wb3J0IHsgcmFuZG9tVVVJRCB9IGZyb20gJ0BvcGVuYWkvYWdlbnRzLWNvcmUvX3NoaW1zJztcbi8qKlxuICogR2VuZXJhdGUgYW4gSVNPIDg2MDEgdGltZXN0YW1wIG9mIHRoZSBjdXJyZW50IHRpbWUuXG4gKiBAcmV0dXJucyBBbiBJU08gODYwMSB0aW1lc3RhbXAuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0aW1lSXNvKCkge1xuICAgIHJldHVybiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XG59XG4vKipcbiAqIEdlbmVyYXRlIGEgdHJhY2UgSUQgYnkgY3JlYXRpbmcgYSByYW5kb20gVVVJRCB2NCBhbmQgcmVtb3ZpbmcgdGhlIGRhc2hlcy4gVGhpcyBpcyB0aGUgZXF1aXZhbGVudFxuICogb2YgYHV1aWQ0KCkuaGV4YCBpbiBQeXRob24gYW5kIHByZWZpeGluZyBpdCB3aXRoIGB0cmFjZV9gLlxuICogQHJldHVybnMgQSB0cmFjZSBJRC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlVHJhY2VJZCgpIHtcbiAgICByZXR1cm4gYHRyYWNlXyR7cmFuZG9tVVVJRCgpLnJlcGxhY2UoLy0vZywgJycpfWA7XG59XG4vKipcbiAqIEdlbmVyYXRlIGEgc3BhbiBJRCBieSBjcmVhdGluZyBhIHJhbmRvbSBVVUlEIHY0IGFuZCByZW1vdmluZyB0aGUgZGFzaGVzLiBUaGlzIGlzIHRoZSBlcXVpdmFsZW50XG4gKiBvZiBgdXVpZDQoKS5oZXhgIGluIFB5dGhvbiBhbmQgcHJlZml4aW5nIGl0IHdpdGggYHNwYW5fYC5cbiAqIEByZXR1cm5zIEEgc3BhbiBJRC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlU3BhbklkKCkge1xuICAgIHJldHVybiBgc3Bhbl8ke3JhbmRvbVVVSUQoKS5yZXBsYWNlKC8tL2csICcnKS5zbGljZSgwLCAyNCl9YDtcbn1cbi8qKlxuICogR2VuZXJhdGUgYSBncm91cCBJRCBieSBjcmVhdGluZyBhIHJhbmRvbSBVVUlEIHY0IGFuZCByZW1vdmluZyB0aGUgZGFzaGVzLiBUaGlzIGlzIHRoZSBlcXVpdmFsZW50XG4gKiBvZiBgdXVpZDQoKS5oZXhgIGluIFB5dGhvbiBhbmQgcHJlZml4aW5nIGl0IHdpdGggYGdyb3VwX2AuXG4gKiBAcmV0dXJucyBBIGdyb3VwIElELlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVHcm91cElkKCkge1xuICAgIHJldHVybiBgZ3JvdXBfJHtyYW5kb21VVUlEKCkucmVwbGFjZSgvLS9nLCAnJykuc2xpY2UoMCwgMjQpfWA7XG59XG4vKipcbiAqIFJlbW92ZSBmaWVsZHMgdGhhdCBzdGFydCB3aXRoIGFuIHVuZGVyc2NvcmUgZnJvbSBhbiBvYmplY3QuXG4gKiBAcGFyYW0gb2JqIC0gVGhlIG9iamVjdCB0byByZW1vdmUgcHJpdmF0ZSBmaWVsZHMgZnJvbS5cbiAqIEByZXR1cm5zIEEgbmV3IG9iamVjdCB3aXRoIHByaXZhdGUgZmllbGRzIHJlbW92ZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVQcml2YXRlRmllbGRzKG9iaikge1xuICAgIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0LmVudHJpZXMob2JqKS5maWx0ZXIoKFtrZXldKSA9PiAha2V5LnN0YXJ0c1dpdGgoJ18nKSkpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMubWpzLm1hcCIsImltcG9ydCBsb2dnZXIgZnJvbSBcIi4uL2xvZ2dlci5tanNcIjtcbmltcG9ydCB7IGdlbmVyYXRlU3BhbklkLCByZW1vdmVQcml2YXRlRmllbGRzLCB0aW1lSXNvIH0gZnJvbSBcIi4vdXRpbHMubWpzXCI7XG5leHBvcnQgY2xhc3MgU3BhbiB7XG4gICAgdHlwZSA9ICd0cmFjZS5zcGFuJztcbiAgICAjZGF0YTtcbiAgICAjdHJhY2VJZDtcbiAgICAjc3BhbklkO1xuICAgICNwYXJlbnRJZDtcbiAgICAjcHJvY2Vzc29yO1xuICAgICNzdGFydGVkQXQ7XG4gICAgI2VuZGVkQXQ7XG4gICAgI2Vycm9yO1xuICAgICNwcmV2aW91c1NwYW47XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucywgcHJvY2Vzc29yKSB7XG4gICAgICAgIHRoaXMuI3RyYWNlSWQgPSBvcHRpb25zLnRyYWNlSWQ7XG4gICAgICAgIHRoaXMuI3NwYW5JZCA9IG9wdGlvbnMuc3BhbklkID8/IGdlbmVyYXRlU3BhbklkKCk7XG4gICAgICAgIHRoaXMuI2RhdGEgPSBvcHRpb25zLmRhdGE7XG4gICAgICAgIHRoaXMuI3Byb2Nlc3NvciA9IHByb2Nlc3NvcjtcbiAgICAgICAgdGhpcy4jcGFyZW50SWQgPSBvcHRpb25zLnBhcmVudElkID8/IG51bGw7XG4gICAgICAgIHRoaXMuI2Vycm9yID0gb3B0aW9ucy5lcnJvciA/PyBudWxsO1xuICAgICAgICB0aGlzLiNzdGFydGVkQXQgPSBvcHRpb25zLnN0YXJ0ZWRBdCA/PyBudWxsO1xuICAgICAgICB0aGlzLiNlbmRlZEF0ID0gb3B0aW9ucy5lbmRlZEF0ID8/IG51bGw7XG4gICAgfVxuICAgIGdldCB0cmFjZUlkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jdHJhY2VJZDtcbiAgICB9XG4gICAgZ2V0IHNwYW5EYXRhKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jZGF0YTtcbiAgICB9XG4gICAgZ2V0IHNwYW5JZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI3NwYW5JZDtcbiAgICB9XG4gICAgZ2V0IHBhcmVudElkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jcGFyZW50SWQ7XG4gICAgfVxuICAgIGdldCBwcmV2aW91c1NwYW4oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNwcmV2aW91c1NwYW47XG4gICAgfVxuICAgIHNldCBwcmV2aW91c1NwYW4oc3Bhbikge1xuICAgICAgICB0aGlzLiNwcmV2aW91c1NwYW4gPSBzcGFuO1xuICAgIH1cbiAgICBzdGFydCgpIHtcbiAgICAgICAgaWYgKHRoaXMuI3N0YXJ0ZWRBdCkge1xuICAgICAgICAgICAgbG9nZ2VyLndhcm4oJ1NwYW4gYWxyZWFkeSBzdGFydGVkJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy4jc3RhcnRlZEF0ID0gdGltZUlzbygpO1xuICAgICAgICB0aGlzLiNwcm9jZXNzb3Iub25TcGFuU3RhcnQodGhpcyk7XG4gICAgfVxuICAgIGVuZCgpIHtcbiAgICAgICAgaWYgKHRoaXMuI2VuZGVkQXQpIHtcbiAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZygnU3BhbiBhbHJlYWR5IGZpbmlzaGVkJywgdGhpcy5zcGFuRGF0YSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy4jZW5kZWRBdCA9IHRpbWVJc28oKTtcbiAgICAgICAgdGhpcy4jcHJvY2Vzc29yLm9uU3BhbkVuZCh0aGlzKTtcbiAgICB9XG4gICAgc2V0RXJyb3IoZXJyb3IpIHtcbiAgICAgICAgdGhpcy4jZXJyb3IgPSBlcnJvcjtcbiAgICB9XG4gICAgZ2V0IGVycm9yKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jZXJyb3I7XG4gICAgfVxuICAgIGdldCBzdGFydGVkQXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNzdGFydGVkQXQ7XG4gICAgfVxuICAgIGdldCBlbmRlZEF0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jZW5kZWRBdDtcbiAgICB9XG4gICAgY2xvbmUoKSB7XG4gICAgICAgIGNvbnN0IHNwYW4gPSBuZXcgU3Bhbih7XG4gICAgICAgICAgICB0cmFjZUlkOiB0aGlzLnRyYWNlSWQsXG4gICAgICAgICAgICBzcGFuSWQ6IHRoaXMuc3BhbklkLFxuICAgICAgICAgICAgcGFyZW50SWQ6IHRoaXMucGFyZW50SWQgPz8gdW5kZWZpbmVkLFxuICAgICAgICAgICAgZGF0YTogdGhpcy5zcGFuRGF0YSxcbiAgICAgICAgICAgIHN0YXJ0ZWRBdDogdGhpcy4jc3RhcnRlZEF0ID8/IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGVuZGVkQXQ6IHRoaXMuI2VuZGVkQXQgPz8gdW5kZWZpbmVkLFxuICAgICAgICAgICAgZXJyb3I6IHRoaXMuI2Vycm9yID8/IHVuZGVmaW5lZCxcbiAgICAgICAgfSwgdGhpcy4jcHJvY2Vzc29yKTtcbiAgICAgICAgc3Bhbi5wcmV2aW91c1NwYW4gPSB0aGlzLnByZXZpb3VzU3Bhbj8uY2xvbmUoKTtcbiAgICAgICAgcmV0dXJuIHNwYW47XG4gICAgfVxuICAgIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG9iamVjdDogdGhpcy50eXBlLFxuICAgICAgICAgICAgaWQ6IHRoaXMuc3BhbklkLFxuICAgICAgICAgICAgdHJhY2VfaWQ6IHRoaXMudHJhY2VJZCxcbiAgICAgICAgICAgIHBhcmVudF9pZDogdGhpcy5wYXJlbnRJZCxcbiAgICAgICAgICAgIHN0YXJ0ZWRfYXQ6IHRoaXMuc3RhcnRlZEF0LFxuICAgICAgICAgICAgZW5kZWRfYXQ6IHRoaXMuZW5kZWRBdCxcbiAgICAgICAgICAgIHNwYW5fZGF0YTogcmVtb3ZlUHJpdmF0ZUZpZWxkcyh0aGlzLnNwYW5EYXRhKSxcbiAgICAgICAgICAgIGVycm9yOiB0aGlzLmVycm9yLFxuICAgICAgICB9O1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBOb29wU3BhbiBleHRlbmRzIFNwYW4ge1xuICAgIGNvbnN0cnVjdG9yKGRhdGEsIHByb2Nlc3Nvcikge1xuICAgICAgICBzdXBlcih7IHRyYWNlSWQ6ICduby1vcCcsIHNwYW5JZDogJ25vLW9wJywgZGF0YSB9LCBwcm9jZXNzb3IpO1xuICAgIH1cbiAgICBzdGFydCgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBlbmQoKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc2V0RXJyb3IoKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdG9KU09OKCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zcGFucy5tanMubWFwIiwiaW1wb3J0IHsgZGVmYXVsdFByb2Nlc3NvciB9IGZyb20gXCIuL3Byb2Nlc3Nvci5tanNcIjtcbmltcG9ydCB7IGdlbmVyYXRlVHJhY2VJZCB9IGZyb20gXCIuL3V0aWxzLm1qc1wiO1xuZXhwb3J0IGNsYXNzIFRyYWNlIHtcbiAgICB0eXBlID0gJ3RyYWNlJztcbiAgICB0cmFjZUlkO1xuICAgIG5hbWU7XG4gICAgZ3JvdXBJZCA9IG51bGw7XG4gICAgbWV0YWRhdGE7XG4gICAgI3Byb2Nlc3NvcjtcbiAgICAjc3RhcnRlZDtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zLCBwcm9jZXNzb3IpIHtcbiAgICAgICAgdGhpcy50cmFjZUlkID0gb3B0aW9ucy50cmFjZUlkID8/IGdlbmVyYXRlVHJhY2VJZCgpO1xuICAgICAgICB0aGlzLm5hbWUgPSBvcHRpb25zLm5hbWUgPz8gJ0FnZW50IHdvcmtmbG93JztcbiAgICAgICAgdGhpcy5ncm91cElkID0gb3B0aW9ucy5ncm91cElkID8/IG51bGw7XG4gICAgICAgIHRoaXMubWV0YWRhdGEgPSBvcHRpb25zLm1ldGFkYXRhID8/IHt9O1xuICAgICAgICB0aGlzLiNwcm9jZXNzb3IgPSBwcm9jZXNzb3IgPz8gZGVmYXVsdFByb2Nlc3NvcigpO1xuICAgICAgICB0aGlzLiNzdGFydGVkID0gb3B0aW9ucy5zdGFydGVkID8/IGZhbHNlO1xuICAgIH1cbiAgICBhc3luYyBzdGFydCgpIHtcbiAgICAgICAgaWYgKHRoaXMuI3N0YXJ0ZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLiNzdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgYXdhaXQgdGhpcy4jcHJvY2Vzc29yLm9uVHJhY2VTdGFydCh0aGlzKTtcbiAgICB9XG4gICAgYXN5bmMgZW5kKCkge1xuICAgICAgICBpZiAoIXRoaXMuI3N0YXJ0ZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLiNzdGFydGVkID0gZmFsc2U7XG4gICAgICAgIGF3YWl0IHRoaXMuI3Byb2Nlc3Nvci5vblRyYWNlRW5kKHRoaXMpO1xuICAgIH1cbiAgICBjbG9uZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBUcmFjZSh7XG4gICAgICAgICAgICB0cmFjZUlkOiB0aGlzLnRyYWNlSWQsXG4gICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAgICAgICBncm91cElkOiB0aGlzLmdyb3VwSWQgPz8gdW5kZWZpbmVkLFxuICAgICAgICAgICAgbWV0YWRhdGE6IHRoaXMubWV0YWRhdGEsXG4gICAgICAgICAgICBzdGFydGVkOiB0aGlzLiNzdGFydGVkLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgdG9KU09OKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgb2JqZWN0OiB0aGlzLnR5cGUsXG4gICAgICAgICAgICBpZDogdGhpcy50cmFjZUlkLFxuICAgICAgICAgICAgd29ya2Zsb3dfbmFtZTogdGhpcy5uYW1lLFxuICAgICAgICAgICAgZ3JvdXBfaWQ6IHRoaXMuZ3JvdXBJZCxcbiAgICAgICAgICAgIG1ldGFkYXRhOiB0aGlzLm1ldGFkYXRhLFxuICAgICAgICB9O1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBOb29wVHJhY2UgZXh0ZW5kcyBUcmFjZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKHt9KTtcbiAgICB9XG4gICAgYXN5bmMgc3RhcnQoKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgYXN5bmMgZW5kKCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJhY2VzLm1qcy5tYXAiLCJpbXBvcnQgeyBnZXRDdXJyZW50U3BhbiwgZ2V0Q3VycmVudFRyYWNlIH0gZnJvbSBcIi4vY29udGV4dC5tanNcIjtcbmltcG9ydCB7IHRyYWNpbmcgfSBmcm9tIFwiLi4vY29uZmlnLm1qc1wiO1xuaW1wb3J0IGxvZ2dlciBmcm9tIFwiLi4vbG9nZ2VyLm1qc1wiO1xuaW1wb3J0IHsgTXVsdGlUcmFjaW5nUHJvY2Vzc29yIH0gZnJvbSBcIi4vcHJvY2Vzc29yLm1qc1wiO1xuaW1wb3J0IHsgTm9vcFNwYW4sIFNwYW4gfSBmcm9tIFwiLi9zcGFucy5tanNcIjtcbmltcG9ydCB7IE5vb3BUcmFjZSwgVHJhY2UgfSBmcm9tIFwiLi90cmFjZXMubWpzXCI7XG5pbXBvcnQgeyBnZW5lcmF0ZVRyYWNlSWQgfSBmcm9tIFwiLi91dGlscy5tanNcIjtcbmV4cG9ydCBjbGFzcyBUcmFjZVByb3ZpZGVyIHtcbiAgICAjbXVsdGlQcm9jZXNzb3I7XG4gICAgI2Rpc2FibGVkO1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLiNtdWx0aVByb2Nlc3NvciA9IG5ldyBNdWx0aVRyYWNpbmdQcm9jZXNzb3IoKTtcbiAgICAgICAgdGhpcy4jZGlzYWJsZWQgPSB0cmFjaW5nLmRpc2FibGVkO1xuICAgICAgICB0aGlzLiNhZGRDbGVhbnVwTGlzdGVuZXJzKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZCBhIHByb2Nlc3NvciB0byB0aGUgbGlzdCBvZiBwcm9jZXNzb3JzLiBFYWNoIHByb2Nlc3NvciB3aWxsIHJlY2VpdmUgYWxsIHRyYWNlcy9zcGFucy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwcm9jZXNzb3IgLSBUaGUgcHJvY2Vzc29yIHRvIGFkZC5cbiAgICAgKi9cbiAgICByZWdpc3RlclByb2Nlc3Nvcihwcm9jZXNzb3IpIHtcbiAgICAgICAgdGhpcy4jbXVsdGlQcm9jZXNzb3IuYWRkVHJhY2VQcm9jZXNzb3IocHJvY2Vzc29yKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBsaXN0IG9mIHByb2Nlc3NvcnMuIFRoaXMgd2lsbCByZXBsYWNlIGFueSBleGlzdGluZyBwcm9jZXNzb3JzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHByb2Nlc3NvcnMgLSBUaGUgbGlzdCBvZiBwcm9jZXNzb3JzIHRvIHNldC5cbiAgICAgKi9cbiAgICBzZXRQcm9jZXNzb3JzKHByb2Nlc3NvcnMpIHtcbiAgICAgICAgdGhpcy4jbXVsdGlQcm9jZXNzb3Iuc2V0UHJvY2Vzc29ycyhwcm9jZXNzb3JzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBjdXJyZW50IHRyYWNlLlxuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIGN1cnJlbnQgdHJhY2UuXG4gICAgICovXG4gICAgZ2V0Q3VycmVudFRyYWNlKCkge1xuICAgICAgICByZXR1cm4gZ2V0Q3VycmVudFRyYWNlKCk7XG4gICAgfVxuICAgIGdldEN1cnJlbnRTcGFuKCkge1xuICAgICAgICByZXR1cm4gZ2V0Q3VycmVudFNwYW4oKTtcbiAgICB9XG4gICAgc2V0RGlzYWJsZWQoZGlzYWJsZWQpIHtcbiAgICAgICAgdGhpcy4jZGlzYWJsZWQgPSBkaXNhYmxlZDtcbiAgICB9XG4gICAgc3RhcnRFeHBvcnRMb29wKCkge1xuICAgICAgICB0aGlzLiNtdWx0aVByb2Nlc3Nvci5zdGFydCgpO1xuICAgIH1cbiAgICBjcmVhdGVUcmFjZSh0cmFjZU9wdGlvbnMpIHtcbiAgICAgICAgaWYgKHRoaXMuI2Rpc2FibGVkKSB7XG4gICAgICAgICAgICBsb2dnZXIuZGVidWcoJ1RyYWNpbmcgaXMgZGlzYWJsZWQsIE5vdCBjcmVhdGluZyB0cmFjZSAlbycsIHRyYWNlT3B0aW9ucyk7XG4gICAgICAgICAgICByZXR1cm4gbmV3IE5vb3BUcmFjZSgpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRyYWNlSWQgPSB0cmFjZU9wdGlvbnMudHJhY2VJZCA/PyBnZW5lcmF0ZVRyYWNlSWQoKTtcbiAgICAgICAgY29uc3QgbmFtZSA9IHRyYWNlT3B0aW9ucy5uYW1lID8/ICdBZ2VudCB3b3JrZmxvdyc7XG4gICAgICAgIGxvZ2dlci5kZWJ1ZygnQ3JlYXRpbmcgdHJhY2UgJXMgd2l0aCBuYW1lICVzJywgdHJhY2VJZCwgbmFtZSk7XG4gICAgICAgIHJldHVybiBuZXcgVHJhY2UoeyAuLi50cmFjZU9wdGlvbnMsIG5hbWUsIHRyYWNlSWQgfSwgdGhpcy4jbXVsdGlQcm9jZXNzb3IpO1xuICAgIH1cbiAgICBjcmVhdGVTcGFuKHNwYW5PcHRpb25zLCBwYXJlbnQpIHtcbiAgICAgICAgaWYgKHRoaXMuI2Rpc2FibGVkIHx8IHNwYW5PcHRpb25zLmRpc2FibGVkKSB7XG4gICAgICAgICAgICBsb2dnZXIuZGVidWcoJ1RyYWNpbmcgaXMgZGlzYWJsZWQsIE5vdCBjcmVhdGluZyBzcGFuICVvJywgc3Bhbk9wdGlvbnMpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBOb29wU3BhbihzcGFuT3B0aW9ucy5kYXRhLCB0aGlzLiNtdWx0aVByb2Nlc3Nvcik7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHBhcmVudElkO1xuICAgICAgICBsZXQgdHJhY2VJZDtcbiAgICAgICAgaWYgKCFwYXJlbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRUcmFjZSA9IGdldEN1cnJlbnRUcmFjZSgpO1xuICAgICAgICAgICAgY29uc3QgY3VycmVudFNwYW4gPSBnZXRDdXJyZW50U3BhbigpO1xuICAgICAgICAgICAgaWYgKCFjdXJyZW50VHJhY2UpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IoJ05vIGFjdGl2ZSB0cmFjZS4gTWFrZSBzdXJlIHRvIHN0YXJ0IGEgdHJhY2Ugd2l0aCBgd2l0aFRyYWNlKClgIGZpcnN0LiBSZXR1cm5pbmcgTm9vcFNwYW4uJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBOb29wU3BhbihzcGFuT3B0aW9ucy5kYXRhLCB0aGlzLiNtdWx0aVByb2Nlc3Nvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY3VycmVudFNwYW4gaW5zdGFuY2VvZiBOb29wU3BhbiB8fFxuICAgICAgICAgICAgICAgIGN1cnJlbnRUcmFjZSBpbnN0YW5jZW9mIE5vb3BUcmFjZSkge1xuICAgICAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZyhgUGFyZW50ICR7Y3VycmVudFNwYW59IG9yICR7Y3VycmVudFRyYWNlfSBpcyBuby1vcCwgcmV0dXJuaW5nIE5vb3BTcGFuYCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBOb29wU3BhbihzcGFuT3B0aW9ucy5kYXRhLCB0aGlzLiNtdWx0aVByb2Nlc3Nvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0cmFjZUlkID0gY3VycmVudFRyYWNlLnRyYWNlSWQ7XG4gICAgICAgICAgICBpZiAoY3VycmVudFNwYW4pIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIuZGVidWcoJ1VzaW5nIHBhcmVudCBzcGFuICVzJywgY3VycmVudFNwYW4uc3BhbklkKTtcbiAgICAgICAgICAgICAgICBwYXJlbnRJZCA9IGN1cnJlbnRTcGFuLnNwYW5JZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZygnTm8gcGFyZW50IHNwYW4sIHVzaW5nIGN1cnJlbnQgdHJhY2UgJXMnLCBjdXJyZW50VHJhY2UudHJhY2VJZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocGFyZW50IGluc3RhbmNlb2YgVHJhY2UpIHtcbiAgICAgICAgICAgIGlmIChwYXJlbnQgaW5zdGFuY2VvZiBOb29wVHJhY2UpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIuZGVidWcoJ1BhcmVudCB0cmFjZSBpcyBuby1vcCwgcmV0dXJuaW5nIE5vb3BTcGFuJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBOb29wU3BhbihzcGFuT3B0aW9ucy5kYXRhLCB0aGlzLiNtdWx0aVByb2Nlc3Nvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0cmFjZUlkID0gcGFyZW50LnRyYWNlSWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocGFyZW50IGluc3RhbmNlb2YgU3Bhbikge1xuICAgICAgICAgICAgaWYgKHBhcmVudCBpbnN0YW5jZW9mIE5vb3BTcGFuKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCdQYXJlbnQgc3BhbiBpcyBuby1vcCwgcmV0dXJuaW5nIE5vb3BTcGFuJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBOb29wU3BhbihzcGFuT3B0aW9ucy5kYXRhLCB0aGlzLiNtdWx0aVByb2Nlc3Nvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwYXJlbnRJZCA9IHBhcmVudC5zcGFuSWQ7XG4gICAgICAgICAgICB0cmFjZUlkID0gcGFyZW50LnRyYWNlSWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0cmFjZUlkKSB7XG4gICAgICAgICAgICBsb2dnZXIuZXJyb3IoJ05vIHRyYWNlSWQgZm91bmQuIE1ha2Ugc3VyZSB0byBzdGFydCBhIHRyYWNlIHdpdGggYHdpdGhUcmFjZSgpYCBmaXJzdC4gUmV0dXJuaW5nIE5vb3BTcGFuLicpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBOb29wU3BhbihzcGFuT3B0aW9ucy5kYXRhLCB0aGlzLiNtdWx0aVByb2Nlc3Nvcik7XG4gICAgICAgIH1cbiAgICAgICAgbG9nZ2VyLmRlYnVnKGBDcmVhdGluZyBzcGFuICR7SlNPTi5zdHJpbmdpZnkoc3Bhbk9wdGlvbnMuZGF0YSl9IHdpdGggaWQgJHtzcGFuT3B0aW9ucy5zcGFuSWQgPz8gdHJhY2VJZH1gKTtcbiAgICAgICAgcmV0dXJuIG5ldyBTcGFuKHtcbiAgICAgICAgICAgIC4uLnNwYW5PcHRpb25zLFxuICAgICAgICAgICAgdHJhY2VJZCxcbiAgICAgICAgICAgIHBhcmVudElkLFxuICAgICAgICB9LCB0aGlzLiNtdWx0aVByb2Nlc3Nvcik7XG4gICAgfVxuICAgIGFzeW5jIHNodXRkb3duKHRpbWVvdXQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZygnU2h1dHRpbmcgZG93biB0cmFjaW5nIHByb3ZpZGVyJyk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLiNtdWx0aVByb2Nlc3Nvci5zaHV0ZG93bih0aW1lb3V0KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGxvZ2dlci5lcnJvcignRXJyb3Igc2h1dHRpbmcgZG93biB0cmFjaW5nIHByb3ZpZGVyICVvJywgZXJyb3IpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKiBBZGRzIGxpc3RlbmVycyB0byBgcHJvY2Vzc2AgdG8gZW5zdXJlIGBzaHV0ZG93bmAgb2NjdXJzIGJlZm9yZSBleGl0LiAqL1xuICAgICNhZGRDbGVhbnVwTGlzdGVuZXJzKCkge1xuICAgICAgICBpZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBwcm9jZXNzLm9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAvLyBoYW5kbGluZyBOb2RlLmpzIHByb2Nlc3MgdGVybWluYXRpb25cbiAgICAgICAgICAgIGNvbnN0IGNsZWFudXAgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ0NsZWFudXAgdGltZW91dCwgZm9yY2luZyBleGl0Jyk7XG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3MuZXhpdCgxKTtcbiAgICAgICAgICAgICAgICB9LCA1MDAwKTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnNodXRkb3duKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8vIEhhbmRsZSBub3JtYWwgdGVybWluYXRpb25cbiAgICAgICAgICAgIHByb2Nlc3Mub24oJ2JlZm9yZUV4aXQnLCBjbGVhbnVwKTtcbiAgICAgICAgICAgIC8vIEhhbmRsZSBDVFJMK0MgKFNJR0lOVClcbiAgICAgICAgICAgIHByb2Nlc3Mub24oJ1NJR0lOVCcsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICBhd2FpdCBjbGVhbnVwKCk7XG4gICAgICAgICAgICAgICAgaWYgKCFoYXNPdGhlckxpc3RlbmVyc0ZvclNpZ25hbHMoJ1NJR0lOVCcpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE9ubHkgd2hlbiB0aGVyZSBhcmUgbm8gb3RoZXIgbGlzdGVuZXJzLCBleGl0IHRoZSBwcm9jZXNzIG9uIHRoaXMgU0RLIHNpZGVcbiAgICAgICAgICAgICAgICAgICAgcHJvY2Vzcy5leGl0KDEzMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBIYW5kbGUgdGVybWluYXRpb24gKFNJR1RFUk0pXG4gICAgICAgICAgICBwcm9jZXNzLm9uKCdTSUdURVJNJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGF3YWl0IGNsZWFudXAoKTtcbiAgICAgICAgICAgICAgICBpZiAoIWhhc090aGVyTGlzdGVuZXJzRm9yU2lnbmFscygnU0lHVEVSTScpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE9ubHkgd2hlbiB0aGVyZSBhcmUgbm8gb3RoZXIgbGlzdGVuZXJzLCBleGl0IHRoZSBwcm9jZXNzIG9uIHRoaXMgU0RLIHNpZGVcbiAgICAgICAgICAgICAgICAgICAgcHJvY2Vzcy5leGl0KDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcHJvY2Vzcy5vbigndW5oYW5kbGVkUmVqZWN0aW9uJywgYXN5bmMgKHJlYXNvbiwgcHJvbWlzZSkgPT4ge1xuICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcignVW5oYW5kbGVkIHJlamVjdGlvbicsIHJlYXNvbiwgcHJvbWlzZSk7XG4gICAgICAgICAgICAgICAgYXdhaXQgY2xlYW51cCgpO1xuICAgICAgICAgICAgICAgIGlmICghaGFzT3RoZXJMaXN0ZW5lcnNGb3JFdmVudHMoJ3VuaGFuZGxlZFJlamVjdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE9ubHkgd2hlbiB0aGVyZSBhcmUgbm8gb3RoZXIgbGlzdGVuZXJzLCBleGl0IHRoZSBwcm9jZXNzIG9uIHRoaXMgU0RLIHNpZGVcbiAgICAgICAgICAgICAgICAgICAgcHJvY2Vzcy5leGl0KDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIGZvcmNlRmx1c2goKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuI211bHRpUHJvY2Vzc29yLmZvcmNlRmx1c2goKTtcbiAgICB9XG59XG5mdW5jdGlvbiBoYXNPdGhlckxpc3RlbmVyc0ZvclNpZ25hbHMoZXZlbnQpIHtcbiAgICByZXR1cm4gcHJvY2Vzcy5saXN0ZW5lcnMoZXZlbnQpLmxlbmd0aCA+IDE7XG59XG5mdW5jdGlvbiBoYXNPdGhlckxpc3RlbmVyc0ZvckV2ZW50cyhldmVudCkge1xuICAgIHJldHVybiBwcm9jZXNzLmxpc3RlbmVycyhldmVudCkubGVuZ3RoID4gMTtcbn1cbmxldCBHTE9CQUxfVFJBQ0VfUFJPVklERVIgPSB1bmRlZmluZWQ7XG5leHBvcnQgZnVuY3Rpb24gZ2V0R2xvYmFsVHJhY2VQcm92aWRlcigpIHtcbiAgICBpZiAoIUdMT0JBTF9UUkFDRV9QUk9WSURFUikge1xuICAgICAgICBHTE9CQUxfVFJBQ0VfUFJPVklERVIgPSBuZXcgVHJhY2VQcm92aWRlcigpO1xuICAgIH1cbiAgICByZXR1cm4gR0xPQkFMX1RSQUNFX1BST1ZJREVSO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvdmlkZXIubWpzLm1hcCIsImltcG9ydCB7IGdldEdsb2JhbFRyYWNlUHJvdmlkZXIgfSBmcm9tIFwiLi9wcm92aWRlci5tanNcIjtcbmV4cG9ydCB7IGdldEN1cnJlbnRTcGFuLCBnZXRDdXJyZW50VHJhY2UsIGdldE9yQ3JlYXRlVHJhY2UsIHJlc2V0Q3VycmVudFNwYW4sIHNldEN1cnJlbnRTcGFuLCB3aXRoVHJhY2UsIH0gZnJvbSBcIi4vY29udGV4dC5tanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2NyZWF0ZVNwYW5zLm1qc1wiO1xuZXhwb3J0IHsgQmF0Y2hUcmFjZVByb2Nlc3NvciwgQ29uc29sZVNwYW5FeHBvcnRlciwgfSBmcm9tIFwiLi9wcm9jZXNzb3IubWpzXCI7XG5leHBvcnQgeyBOb29wU3BhbiwgU3BhbiB9IGZyb20gXCIuL3NwYW5zLm1qc1wiO1xuZXhwb3J0IHsgTm9vcFRyYWNlLCBUcmFjZSB9IGZyb20gXCIuL3RyYWNlcy5tanNcIjtcbmV4cG9ydCB7IGdlbmVyYXRlR3JvdXBJZCwgZ2VuZXJhdGVTcGFuSWQsIGdlbmVyYXRlVHJhY2VJZCB9IGZyb20gXCIuL3V0aWxzLm1qc1wiO1xuLyoqXG4gKiBBZGQgYSBwcm9jZXNzb3IgdG8gdGhlIGxpc3Qgb2YgcHJvY2Vzc29ycy4gRWFjaCBwcm9jZXNzb3Igd2lsbCByZWNlaXZlIGFsbCB0cmFjZXMvc3BhbnMuXG4gKlxuICogQHBhcmFtIHByb2Nlc3NvciAtIFRoZSBwcm9jZXNzb3IgdG8gYWRkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gYWRkVHJhY2VQcm9jZXNzb3IocHJvY2Vzc29yKSB7XG4gICAgZ2V0R2xvYmFsVHJhY2VQcm92aWRlcigpLnJlZ2lzdGVyUHJvY2Vzc29yKHByb2Nlc3Nvcik7XG59XG4vKipcbiAqIFNldCB0aGUgbGlzdCBvZiBwcm9jZXNzb3JzLiBUaGlzIHdpbGwgcmVwbGFjZSBhbnkgZXhpc3RpbmcgcHJvY2Vzc29ycy5cbiAqXG4gKiBAcGFyYW0gcHJvY2Vzc29ycyAtIFRoZSBsaXN0IG9mIHByb2Nlc3NvcnMgdG8gc2V0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0VHJhY2VQcm9jZXNzb3JzKHByb2Nlc3NvcnMpIHtcbiAgICBnZXRHbG9iYWxUcmFjZVByb3ZpZGVyKCkuc2V0UHJvY2Vzc29ycyhwcm9jZXNzb3JzKTtcbn1cbi8qKlxuICogU2V0IHRoZSBkaXNhYmxlZCBzdGF0ZSBvZiB0aGUgdHJhY2luZyBwcm92aWRlci5cbiAqXG4gKiBAcGFyYW0gZGlzYWJsZWQgLSBXaGV0aGVyIHRvIGRpc2FibGUgdHJhY2luZy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldFRyYWNpbmdEaXNhYmxlZChkaXNhYmxlZCkge1xuICAgIGdldEdsb2JhbFRyYWNlUHJvdmlkZXIoKS5zZXREaXNhYmxlZChkaXNhYmxlZCk7XG59XG4vKipcbiAqIFN0YXJ0IHRoZSB0cmFjZSBleHBvcnQgbG9vcC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0VHJhY2VFeHBvcnRMb29wKCkge1xuICAgIGdldEdsb2JhbFRyYWNlUHJvdmlkZXIoKS5zdGFydEV4cG9ydExvb3AoKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXAiLCJpbXBvcnQgeyBhZGRUcmFjZVByb2Nlc3NvciB9IGZyb20gXCIuL3RyYWNpbmcvaW5kZXgubWpzXCI7XG5pbXBvcnQgeyBkZWZhdWx0UHJvY2Vzc29yIH0gZnJvbSBcIi4vdHJhY2luZy9wcm9jZXNzb3IubWpzXCI7XG5leHBvcnQgeyBSdW50aW1lRXZlbnRFbWl0dGVyIH0gZnJvbSAnQG9wZW5haS9hZ2VudHMtY29yZS9fc2hpbXMnO1xuZXhwb3J0IHsgQWdlbnQsIH0gZnJvbSBcIi4vYWdlbnQubWpzXCI7XG5leHBvcnQgeyBBZ2VudHNFcnJvciwgR3VhcmRyYWlsRXhlY3V0aW9uRXJyb3IsIElucHV0R3VhcmRyYWlsVHJpcHdpcmVUcmlnZ2VyZWQsIE1heFR1cm5zRXhjZWVkZWRFcnJvciwgTW9kZWxCZWhhdmlvckVycm9yLCBPdXRwdXRHdWFyZHJhaWxUcmlwd2lyZVRyaWdnZXJlZCwgVG9vbENhbGxFcnJvciwgVXNlckVycm9yLCBTeXN0ZW1FcnJvciwgfSBmcm9tIFwiLi9lcnJvcnMubWpzXCI7XG5leHBvcnQgeyBSdW5BZ2VudFVwZGF0ZWRTdHJlYW1FdmVudCwgUnVuUmF3TW9kZWxTdHJlYW1FdmVudCwgUnVuSXRlbVN0cmVhbUV2ZW50LCB9IGZyb20gXCIuL2V2ZW50cy5tanNcIjtcbmV4cG9ydCB7IGRlZmluZU91dHB1dEd1YXJkcmFpbCwgfSBmcm9tIFwiLi9ndWFyZHJhaWwubWpzXCI7XG5leHBvcnQgeyBnZXRIYW5kb2ZmLCBnZXRUcmFuc2Zlck1lc3NhZ2UsIEhhbmRvZmYsIGhhbmRvZmYsIH0gZnJvbSBcIi4vaGFuZG9mZi5tanNcIjtcbmV4cG9ydCB7IGFzc2lzdGFudCwgc3lzdGVtLCB1c2VyIH0gZnJvbSBcIi4vaGVscGVycy9tZXNzYWdlLm1qc1wiO1xuZXhwb3J0IHsgZXh0cmFjdEFsbFRleHRPdXRwdXQsIFJ1bkhhbmRvZmZDYWxsSXRlbSwgUnVuSGFuZG9mZk91dHB1dEl0ZW0sIFJ1bk1lc3NhZ2VPdXRwdXRJdGVtLCBSdW5SZWFzb25pbmdJdGVtLCBSdW5Ub29sQXBwcm92YWxJdGVtLCBSdW5Ub29sQ2FsbEl0ZW0sIFJ1blRvb2xDYWxsT3V0cHV0SXRlbSwgfSBmcm9tIFwiLi9pdGVtcy5tanNcIjtcbmV4cG9ydCB7IEFnZW50SG9va3MgfSBmcm9tIFwiLi9saWZlY3ljbGUubWpzXCI7XG5leHBvcnQgeyBnZXRMb2dnZXIgfSBmcm9tIFwiLi9sb2dnZXIubWpzXCI7XG5leHBvcnQgeyBnZXRBbGxNY3BUb29scywgaW52YWxpZGF0ZVNlcnZlclRvb2xzQ2FjaGUsIG1jcFRvRnVuY3Rpb25Ub29sLCBNQ1BTZXJ2ZXJTdGRpbywgTUNQU2VydmVyU3RyZWFtYWJsZUh0dHAsIE1DUFNlcnZlclNTRSwgfSBmcm9tIFwiLi9tY3AubWpzXCI7XG5leHBvcnQgeyBjcmVhdGVNQ1BUb29sU3RhdGljRmlsdGVyLCB9IGZyb20gXCIuL21jcFV0aWwubWpzXCI7XG5leHBvcnQgeyBPUEVOQUlfREVGQVVMVF9NT0RFTF9FTlZfVkFSSUFCTEVfTkFNRSwgZ3B0NVJlYXNvbmluZ1NldHRpbmdzUmVxdWlyZWQsIGdldERlZmF1bHRNb2RlbCwgZ2V0RGVmYXVsdE1vZGVsU2V0dGluZ3MsIGlzR3B0NURlZmF1bHQsIH0gZnJvbSBcIi4vZGVmYXVsdE1vZGVsLm1qc1wiO1xuZXhwb3J0IHsgc2V0RGVmYXVsdE1vZGVsUHJvdmlkZXIgfSBmcm9tIFwiLi9wcm92aWRlcnMubWpzXCI7XG5leHBvcnQgeyBSdW5SZXN1bHQsIFN0cmVhbWVkUnVuUmVzdWx0IH0gZnJvbSBcIi4vcmVzdWx0Lm1qc1wiO1xuZXhwb3J0IHsgcnVuLCBSdW5uZXIsIH0gZnJvbSBcIi4vcnVuLm1qc1wiO1xuZXhwb3J0IHsgUnVuQ29udGV4dCB9IGZyb20gXCIuL3J1bkNvbnRleHQubWpzXCI7XG5leHBvcnQgeyBSdW5TdGF0ZSB9IGZyb20gXCIuL3J1blN0YXRlLm1qc1wiO1xuZXhwb3J0IHsgY29tcHV0ZXJUb29sLCBob3N0ZWRNY3BUb29sLCB0b29sLCB9IGZyb20gXCIuL3Rvb2wubWpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi90cmFjaW5nL2luZGV4Lm1qc1wiO1xuZXhwb3J0IHsgZ2V0R2xvYmFsVHJhY2VQcm92aWRlciwgVHJhY2VQcm92aWRlciB9IGZyb20gXCIuL3RyYWNpbmcvcHJvdmlkZXIubWpzXCI7XG5leHBvcnQgeyBVc2FnZSB9IGZyb20gXCIuL3VzYWdlLm1qc1wiO1xuZXhwb3J0ICogYXMgcHJvdG9jb2wgZnJvbSBcIi4vdHlwZXMvcHJvdG9jb2wubWpzXCI7XG4vKipcbiAqIEFkZCB0aGUgZGVmYXVsdCBwcm9jZXNzb3IsIHdoaWNoIGV4cG9ydHMgdHJhY2VzIGFuZCBzcGFucyB0byB0aGUgYmFja2VuZCBpbiBiYXRjaGVzLiBZb3UgY2FuXG4gKiBjaGFuZ2UgdGhlIGRlZmF1bHQgYmVoYXZpb3IgYnkgZWl0aGVyOlxuICogMS4gY2FsbGluZyBhZGRUcmFjZVByb2Nlc3Nvciwgd2hpY2ggYWRkcyBhZGRpdGlvbmFsIHByb2Nlc3NvcnMsIG9yXG4gKiAyLiBjYWxsaW5nIHNldFRyYWNlUHJvY2Vzc29ycywgd2hpY2ggc2V0cyB0aGUgcHJvY2Vzc29ycyBhbmQgZGlzY2FyZHMgdGhlIGRlZmF1bHQgb25lXG4gKi9cbmFkZFRyYWNlUHJvY2Vzc29yKGRlZmF1bHRQcm9jZXNzb3IoKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwIiwiaW1wb3J0IE1FVEFEQVRBIGZyb20gXCIuL21ldGFkYXRhLm1qc1wiO1xuaW1wb3J0IHsgUnVuVG9vbEFwcHJvdmFsSXRlbSB9IGZyb20gJ0BvcGVuYWkvYWdlbnRzLWNvcmUnO1xuLyoqXG4gKiBDb252ZXJ0cyBhIGJhc2U2NCBzdHJpbmcgdG8gYW4gQXJyYXlCdWZmZXJcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlNjRcbiAqIEByZXR1cm5zIHtBcnJheUJ1ZmZlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJhc2U2NFRvQXJyYXlCdWZmZXIoYmFzZTY0KSB7XG4gICAgY29uc3QgYmluYXJ5U3RyaW5nID0gYXRvYihiYXNlNjQpO1xuICAgIGNvbnN0IGxlbiA9IGJpbmFyeVN0cmluZy5sZW5ndGg7XG4gICAgY29uc3QgYnl0ZXMgPSBuZXcgVWludDhBcnJheShsZW4pO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgYnl0ZXNbaV0gPSBiaW5hcnlTdHJpbmcuY2hhckNvZGVBdChpKTtcbiAgICB9XG4gICAgcmV0dXJuIGJ5dGVzLmJ1ZmZlcjtcbn1cbi8qKlxuICogQ29udmVydHMgYW4gQXJyYXlCdWZmZXIgdG8gYSBiYXNlNjQgc3RyaW5nXG4gKiBAcGFyYW0ge0FycmF5QnVmZmVyfSBhcnJheUJ1ZmZlclxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFycmF5QnVmZmVyVG9CYXNlNjQoYXJyYXlCdWZmZXIpIHtcbiAgICBjb25zdCBiaW5hcnlTdHJpbmcgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKC4uLm5ldyBVaW50OEFycmF5KGFycmF5QnVmZmVyKSk7XG4gICAgcmV0dXJuIGJ0b2EoYmluYXJ5U3RyaW5nKTtcbn1cbi8qKlxuICogR2V0IHRoZSBsYXN0IHRleHQgZnJvbSBhbiBhdWRpbyBvdXRwdXQgbWVzc2FnZVxuICogQHBhcmFtIGl0ZW1cbiAqIEByZXR1cm5zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRMYXN0VGV4dEZyb21BdWRpb091dHB1dE1lc3NhZ2UoaXRlbSkge1xuICAgIGlmICh0eXBlb2YgaXRlbSA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICAgICAgaXRlbSA9PT0gbnVsbCB8fFxuICAgICAgICB0eXBlb2YgaXRlbSAhPT0gJ29iamVjdCcgfHxcbiAgICAgICAgISgndHlwZScgaW4gaXRlbSkgfHxcbiAgICAgICAgdHlwZW9mIGl0ZW0udHlwZSAhPT0gJ3N0cmluZycgfHxcbiAgICAgICAgIWl0ZW0udHlwZSkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAoaXRlbS50eXBlICE9PSAnbWVzc2FnZScpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKCEoJ2NvbnRlbnQnIGluIGl0ZW0pIHx8XG4gICAgICAgICFBcnJheS5pc0FycmF5KGl0ZW0uY29udGVudCkgfHxcbiAgICAgICAgaXRlbS5jb250ZW50Lmxlbmd0aCA8IDEpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgY29uc3QgbGFzdENvbnRlbnRJdGVtID0gaXRlbS5jb250ZW50W2l0ZW0uY29udGVudC5sZW5ndGggLSAxXTtcbiAgICBpZiAoISgndHlwZScgaW4gbGFzdENvbnRlbnRJdGVtKSB8fFxuICAgICAgICB0eXBlb2YgbGFzdENvbnRlbnRJdGVtLnR5cGUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmIChsYXN0Q29udGVudEl0ZW0udHlwZSA9PT0gJ291dHB1dF90ZXh0Jykge1xuICAgICAgICByZXR1cm4gdHlwZW9mIGxhc3RDb250ZW50SXRlbS50ZXh0ID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgPyBsYXN0Q29udGVudEl0ZW0udGV4dFxuICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmIChsYXN0Q29udGVudEl0ZW0udHlwZSA9PT0gJ291dHB1dF9hdWRpbycpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBsYXN0Q29udGVudEl0ZW0udHJhbnNjcmlwdCA9PT0gJ3N0cmluZydcbiAgICAgICAgICAgID8gbGFzdENvbnRlbnRJdGVtLnRyYW5zY3JpcHRcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xufVxuLyoqXG4gKiBDb21wYXJlIHR3byBjb252ZXJzYXRpb24gaGlzdG9yaWVzIHRvIGRldGVybWluZSB0aGUgcmVtb3ZhbHMsIGFkZGl0aW9ucywgYW5kIHVwZGF0ZXMuXG4gKiBAcGFyYW0gb2xkSGlzdG9yeSAtIFRoZSBvbGQgaGlzdG9yeS5cbiAqIEBwYXJhbSBuZXdIaXN0b3J5IC0gVGhlIG5ldyBoaXN0b3J5LlxuICogQHJldHVybnMgQSBkaWZmIG9mIHRoZSB0d28gaGlzdG9yaWVzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZGlmZlJlYWx0aW1lSGlzdG9yeShvbGRIaXN0b3J5LCBuZXdIaXN0b3J5KSB7XG4gICAgY29uc3QgcmVtb3ZhbHMgPSBvbGRIaXN0b3J5LmZpbHRlcigoaXRlbSkgPT4gIW5ld0hpc3Rvcnkuc29tZSgobmV3SXRlbSkgPT4gbmV3SXRlbS5pdGVtSWQgPT09IGl0ZW0uaXRlbUlkKSk7XG4gICAgY29uc3QgYWRkaXRpb25zID0gbmV3SGlzdG9yeS5maWx0ZXIoKGl0ZW0pID0+ICFvbGRIaXN0b3J5LnNvbWUoKG9sZEl0ZW0pID0+IG9sZEl0ZW0uaXRlbUlkID09PSBpdGVtLml0ZW1JZCkpO1xuICAgIGNvbnN0IHVwZGF0ZXMgPSBuZXdIaXN0b3J5LmZpbHRlcigoaXRlbSkgPT4gb2xkSGlzdG9yeS5zb21lKChvbGRJdGVtKSA9PiBvbGRJdGVtLml0ZW1JZCA9PT0gaXRlbS5pdGVtSWQgJiZcbiAgICAgICAgSlNPTi5zdHJpbmdpZnkob2xkSXRlbSkgIT09IEpTT04uc3RyaW5naWZ5KGl0ZW0pKSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcmVtb3ZhbHMsXG4gICAgICAgIGFkZGl0aW9ucyxcbiAgICAgICAgdXBkYXRlcyxcbiAgICB9O1xufVxuLyoqXG4gKiBDaGVjayBpZiB0aGUgYnJvd3NlciBzdXBwb3J0cyBXZWJSVEMuXG4gKiBAcmV0dXJucyBUcnVlIGlmIFdlYlJUQyBpcyBzdXBwb3J0ZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhhc1dlYlJUQ1N1cHBvcnQoKSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHR5cGVvZiB3aW5kb3dbJ1JUQ1BlZXJDb25uZWN0aW9uJ10gIT09ICd1bmRlZmluZWQnO1xufVxuLyoqXG4gKiBSZW1vdmVzIHRoZSBhdWRpbyBkYXRhIGZyb20gYWxsIGNvbnRlbnQgaW4gYSBtZXNzYWdlIGJ5IHNldHRpbmcgaXQgdG8gbnVsbC5cbiAqIEBwYXJhbSBpdGVtXG4gKiBAcmV0dXJuc1xuICovXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlQXVkaW9Gcm9tQ29udGVudChpdGVtKSB7XG4gICAgaWYgKGl0ZW0ucm9sZSA9PT0gJ3N5c3RlbScpIHtcbiAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgfVxuICAgIGlmIChpdGVtLnJvbGUgPT09ICdhc3Npc3RhbnQnKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5pdGVtLFxuICAgICAgICAgICAgY29udGVudDogaXRlbS5jb250ZW50Lm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZW50cnkudHlwZSA9PT0gJ291dHB1dF9hdWRpbycpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLmVudHJ5LFxuICAgICAgICAgICAgICAgICAgICAgICAgYXVkaW86IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBlbnRyeTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBpZiAoaXRlbS5yb2xlID09PSAndXNlcicpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLml0ZW0sXG4gICAgICAgICAgICBjb250ZW50OiBpdGVtLmNvbnRlbnQubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlbnRyeS50eXBlID09PSAnaW5wdXRfYXVkaW8nKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5lbnRyeSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGF1ZGlvOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZW50cnk7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIGl0ZW07XG59XG4vKipcbiAqIFVwZGF0ZXMgdGhlIHJlYWx0aW1lIGhpc3RvcnkgYXJyYXkgYmFzZWQgb24gdGhlIGluY29taW5nIGV2ZW50IGFuZCBvcHRpb25zLlxuICogQHBhcmFtIGhpc3RvcnkgLSBUaGUgY3VycmVudCBoaXN0b3J5IGFycmF5LlxuICogQHBhcmFtIGV2ZW50IC0gVGhlIGV2ZW50IHRvIHByb2Nlc3MgKFJlYWx0aW1lSXRlbSkuXG4gKiBAcGFyYW0gc2hvdWxkSW5jbHVkZUF1ZGlvRGF0YSAtIFdoZXRoZXIgdG8gaW5jbHVkZSBhdWRpbyBkYXRhIGluIG1lc3NhZ2UgaXRlbXMuXG4gKiBAcmV0dXJucyBUaGUgdXBkYXRlZCBoaXN0b3J5IGFycmF5LlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlUmVhbHRpbWVIaXN0b3J5KGhpc3RvcnksIGV2ZW50LCBzaG91bGRJbmNsdWRlQXVkaW9EYXRhKSB7XG4gICAgLy8gTWVyZ2UgdHJhbnNjcmlwdCBpbnRvIHBsYWNlaG9sZGVyIGlucHV0X2F1ZGlvIG1lc3NhZ2VcbiAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ2NvbnZlcnNhdGlvbi5pdGVtLmlucHV0X2F1ZGlvX3RyYW5zY3JpcHRpb24uY29tcGxldGVkJykge1xuICAgICAgICByZXR1cm4gaGlzdG9yeS5tYXAoKGl0ZW0pID0+IHtcbiAgICAgICAgICAgIGlmIChpdGVtLml0ZW1JZCA9PT0gZXZlbnQuaXRlbV9pZCAmJlxuICAgICAgICAgICAgICAgIGl0ZW0udHlwZSA9PT0gJ21lc3NhZ2UnICYmXG4gICAgICAgICAgICAgICAgJ3JvbGUnIGluIGl0ZW0gJiZcbiAgICAgICAgICAgICAgICBpdGVtLnJvbGUgPT09ICd1c2VyJykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHVwZGF0ZWRDb250ZW50ID0gaXRlbS5jb250ZW50Lm1hcCgoZW50cnkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVudHJ5LnR5cGUgPT09ICdpbnB1dF9hdWRpbycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uZW50cnksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNjcmlwdDogZXZlbnQudHJhbnNjcmlwdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVudHJ5O1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIC4uLml0ZW0sXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IHVwZGF0ZWRDb250ZW50LFxuICAgICAgICAgICAgICAgICAgICBzdGF0dXM6ICdjb21wbGV0ZWQnLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaXRlbTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IG5ld0V2ZW50ID0gIXNob3VsZEluY2x1ZGVBdWRpb0RhdGEgJiYgZXZlbnQudHlwZSA9PT0gJ21lc3NhZ2UnXG4gICAgICAgID8gcmVtb3ZlQXVkaW9Gcm9tQ29udGVudChldmVudClcbiAgICAgICAgOiBldmVudDtcbiAgICBjb25zdCBleGlzdGluZ0luZGV4ID0gaGlzdG9yeS5maW5kSW5kZXgoKGl0ZW0pID0+IGl0ZW0uaXRlbUlkID09PSBldmVudC5pdGVtSWQpO1xuICAgIGlmIChleGlzdGluZ0luZGV4ICE9PSAtMSkge1xuICAgICAgICAvLyBVcGRhdGUgZXhpc3RpbmcgaXRlbVxuICAgICAgICByZXR1cm4gaGlzdG9yeS5tYXAoKGl0ZW0sIGlkeCkgPT4ge1xuICAgICAgICAgICAgaWYgKGlkeCA9PT0gZXhpc3RpbmdJbmRleCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXdFdmVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghc2hvdWxkSW5jbHVkZUF1ZGlvRGF0YSAmJiBpdGVtLnR5cGUgPT09ICdtZXNzYWdlJykge1xuICAgICAgICAgICAgICAgIHJldHVybiByZW1vdmVBdWRpb0Zyb21Db250ZW50KGl0ZW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIGlmIChldmVudC5wcmV2aW91c0l0ZW1JZCkge1xuICAgICAgICAvLyBJbnNlcnQgYWZ0ZXIgcHJldmlvdXNJdGVtSWQgaWYgZm91bmQsIGVsc2UgYXQgZW5kXG4gICAgICAgIGNvbnN0IHByZXZJbmRleCA9IGhpc3RvcnkuZmluZEluZGV4KChpdGVtKSA9PiBpdGVtLml0ZW1JZCA9PT0gZXZlbnQucHJldmlvdXNJdGVtSWQpO1xuICAgICAgICBpZiAocHJldkluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAuLi5oaXN0b3J5LnNsaWNlKDAsIHByZXZJbmRleCArIDEpLFxuICAgICAgICAgICAgICAgIG5ld0V2ZW50LFxuICAgICAgICAgICAgICAgIC4uLmhpc3Rvcnkuc2xpY2UocHJldkluZGV4ICsgMSksXG4gICAgICAgICAgICBdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFsuLi5oaXN0b3J5LCBuZXdFdmVudF07XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBbLi4uaGlzdG9yeSwgbmV3RXZlbnRdO1xuICAgIH1cbn1cbi8qKlxuICogVGhlIGhlYWRlcnMgdG8gdXNlIGZvciB0aGUgUmVhbHRpbWUgQVBJLlxuICovXG5leHBvcnQgY29uc3QgSEVBREVSUyA9IHtcbiAgICAnVXNlci1BZ2VudCc6IGBBZ2VudHMvSmF2YVNjcmlwdCAke01FVEFEQVRBLnZlcnNpb259YCxcbiAgICAnWC1PcGVuQUktQWdlbnRzLVNESyc6IGBvcGVuYWktYWdlbnRzLXNkay4ke01FVEFEQVRBLnZlcnNpb259YCxcbn07XG4vKipcbiAqIEJyb3dzZXIgd2Vic29ja2V0IGhlYWRlclxuICovXG5leHBvcnQgY29uc3QgV0VCU09DS0VUX01FVEEgPSBgb3BlbmFpLWFnZW50cy1zZGsuJHtNRVRBREFUQS52ZXJzaW9ufWA7XG5leHBvcnQgZnVuY3Rpb24gcmVhbHRpbWVBcHByb3ZhbEl0ZW1Ub0FwcHJvdmFsSXRlbShhZ2VudCwgaXRlbSkge1xuICAgIGNvbnN0IHsgbmFtZSwgYXJndW1lbnRzOiBhcmdzLCAuLi5yZXN0IH0gPSBpdGVtO1xuICAgIHJldHVybiBuZXcgUnVuVG9vbEFwcHJvdmFsSXRlbSh7XG4gICAgICAgIHR5cGU6ICdob3N0ZWRfdG9vbF9jYWxsJyxcbiAgICAgICAgbmFtZSxcbiAgICAgICAgYXJndW1lbnRzOiBKU09OLnN0cmluZ2lmeShhcmdzKSxcbiAgICAgICAgc3RhdHVzOiAnaW5fcHJvZ3Jlc3MnLFxuICAgICAgICBwcm92aWRlckRhdGE6IHtcbiAgICAgICAgICAgIC4uLnJlc3QsXG4gICAgICAgIH0sXG4gICAgfSwgYWdlbnQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGFwcHJvdmFsSXRlbVRvUmVhbHRpbWVBcHByb3ZhbEl0ZW0oaXRlbSkge1xuICAgIGNvbnN0IHsgbmFtZSwgYXJndW1lbnRzOiBhcmdzLCBwcm92aWRlckRhdGEgfSA9IGl0ZW0ucmF3SXRlbTtcbiAgICBjb25zdCB7IGl0ZW1JZCwgc2VydmVyTGFiZWwsIC4uLnJlc3QgfSA9IHByb3ZpZGVyRGF0YSA/PyB7fTtcbiAgICBpZiAoIWl0ZW1JZCB8fCAhc2VydmVyTGFiZWwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGFwcHJvdmFsIGl0ZW0gZm9yIFJlYWx0aW1lIE1DUCBhcHByb3ZhbCByZXF1ZXN0Jyk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdtY3BfYXBwcm92YWxfcmVxdWVzdCcsXG4gICAgICAgIGl0ZW1JZCxcbiAgICAgICAgc2VydmVyTGFiZWwsXG4gICAgICAgIC4uLnJlc3QsXG4gICAgICAgIG5hbWUsXG4gICAgICAgIGFyZ3VtZW50czogYXJncyA/IEpTT04ucGFyc2UoYXJncykgOiB7fSxcbiAgICAgICAgYXBwcm92ZWQ6IG51bGwsXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLm1qcy5tYXAiLCJpbXBvcnQgeyBBZ2VudCwgfSBmcm9tICdAb3BlbmFpL2FnZW50cy1jb3JlJztcbi8qKlxuICogQSBzcGVjaWFsaXplZCBhZ2VudCBpbnN0YW5jZSB0aGF0IGlzIG1lYW50IHRvIGJlIHVzZWQgd2l0aGluIGEgYFJlYWx0aW1lU2Vzc2lvbmAgdG8gYnVpbGRcbiAqIHZvaWNlIGFnZW50cy4gRHVlIHRvIHRoZSBuYXR1cmUgb2YgdGhpcyBhZ2VudCwgc29tZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgYXJlIG5vdCBzdXBwb3J0ZWRcbiAqIHRoYXQgYXJlIHN1cHBvcnRlZCBieSByZWd1bGFyIGBBZ2VudGAgaW5zdGFuY2VzLiBGb3IgZXhhbXBsZTpcbiAqIC0gYG1vZGVsYCBjaG9pY2UgaXMgbm90IHN1cHBvcnRlZCBhcyBhbGwgUmVhbHRpbWVBZ2VudHMgd2lsbCBiZSBoYW5kbGVkIGJ5IHRoZSBzYW1lIG1vZGVsIHdpdGhpblxuICogICBhIGBSZWFsdGltZVNlc3Npb25gXG4gKiAtIGBtb2RlbFNldHRpbmdzYCBpcyBub3Qgc3VwcG9ydGVkIGFzIGFsbCBSZWFsdGltZUFnZW50cyB3aWxsIGJlIGhhbmRsZWQgYnkgdGhlIHNhbWUgbW9kZWwgd2l0aGluXG4gKiAgIGEgYFJlYWx0aW1lU2Vzc2lvbmBcbiAqIC0gYG91dHB1dFR5cGVgIGlzIG5vdCBzdXBwb3J0ZWQgYXMgUmVhbHRpbWVBZ2VudHMgZG8gbm90IHN1cHBvcnQgc3RydWN0dXJlZCBvdXRwdXRzXG4gKiAtIGB0b29sVXNlQmVoYXZpb3JgIGlzIG5vdCBzdXBwb3J0ZWQgYXMgYWxsIFJlYWx0aW1lQWdlbnRzIHdpbGwgYmUgaGFuZGxlZCBieSB0aGUgc2FtZSBtb2RlbCB3aXRoaW5cbiAqICAgYSBgUmVhbHRpbWVTZXNzaW9uYFxuICogLSBgdm9pY2VgIGNhbiBiZSBjb25maWd1cmVkIG9uIGFuIGBBZ2VudGAgbGV2ZWwgaG93ZXZlciBpdCBjYW5ub3QgYmUgY2hhbmdlZCBhZnRlciB0aGUgZmlyc3RcbiAqICAgIGFnZW50IHdpdGhpbiBhIGBSZWFsdGltZVNlc3Npb25gIHNwb2tlXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzXG4gKiBjb25zdCBhZ2VudCA9IG5ldyBSZWFsdGltZUFnZW50KHtcbiAqICAgbmFtZTogJ215LWFnZW50JyxcbiAqICAgaW5zdHJ1Y3Rpb25zOiAnWW91IGFyZSBhIGhlbHBmdWwgYXNzaXN0YW50IHRoYXQgY2FuIGFuc3dlciBxdWVzdGlvbnMgYW5kIGhlbHAgd2l0aCB0YXNrcy4nLFxuICogfSlcbiAqXG4gKiBjb25zdCBzZXNzaW9uID0gbmV3IFJlYWx0aW1lU2Vzc2lvbihhZ2VudCk7XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGNsYXNzIFJlYWx0aW1lQWdlbnQgZXh0ZW5kcyBBZ2VudCB7XG4gICAgLyoqXG4gICAgICogVGhlIHZvaWNlIGludGVuZGVkIHRvIGJlIHVzZWQgYnkgdGhlIGFnZW50LiBJZiBhbm90aGVyIGFnZW50IGFscmVhZHkgc3Bva2UgZHVyaW5nIHRoZVxuICAgICAqIFJlYWx0aW1lU2Vzc2lvbiwgY2hhbmdpbmcgdGhlIHZvaWNlIGR1cmluZyBhIGhhbmRvZmYgd2lsbCBmYWlsLlxuICAgICAqL1xuICAgIHZvaWNlO1xuICAgIGNvbnN0cnVjdG9yKGNvbmZpZykge1xuICAgICAgICBzdXBlcihjb25maWcpO1xuICAgICAgICB0aGlzLnZvaWNlID0gY29uZmlnLnZvaWNlO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlYWx0aW1lQWdlbnQubWpzLm1hcCIsImltcG9ydCB7IGRlZmluZU91dHB1dEd1YXJkcmFpbCwgfSBmcm9tICdAb3BlbmFpL2FnZW50cy1jb3JlJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRSZWFsdGltZUd1YXJkcmFpbFNldHRpbmdzKHNldHRpbmdzKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGVib3VuY2VUZXh0TGVuZ3RoOiBzZXR0aW5ncy5kZWJvdW5jZVRleHRMZW5ndGggPz8gMTAwLFxuICAgIH07XG59XG5leHBvcnQgZnVuY3Rpb24gZGVmaW5lUmVhbHRpbWVPdXRwdXRHdWFyZHJhaWwoeyBwb2xpY3lIaW50OiBwb2xpY3lIaW50SW5wdXQsIC4uLm9wdGlvbnMgfSkge1xuICAgIGNvbnN0IGJhc2VHdWFyZHJhaWwgPSBkZWZpbmVPdXRwdXRHdWFyZHJhaWwob3B0aW9ucyk7XG4gICAgY29uc3QgcG9saWN5SGludCA9IHBvbGljeUhpbnRJbnB1dCA/PyBiYXNlR3VhcmRyYWlsLm5hbWU7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLi4uYmFzZUd1YXJkcmFpbCxcbiAgICAgICAgcG9saWN5SGludCxcbiAgICAgICAgcnVuOiBhc3luYyAoYXJncykgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYmFzZUd1YXJkcmFpbC5ydW4oYXJncyk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLnJlc3VsdCxcbiAgICAgICAgICAgICAgICBndWFyZHJhaWw6IHsgLi4ucmVzdWx0Lmd1YXJkcmFpbCwgcG9saWN5SGludCB9LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuLyoqXG4gKiBHZW5lcmF0ZXMgYSBtZXNzYWdlIHRoYXQgaW5mb3JtcyB0aGUgbW9kZWwgYWJvdXQgd2h5IHRoZSBndWFyZHJhaWwgd2FzIHRyaWdnZXJlZCBhbmQgdG9cbiAqIGNvcnJlY3QgdGhlIGJlaGF2aW9yLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0UmVhbHRpbWVHdWFyZHJhaWxGZWVkYmFja01lc3NhZ2UocmVzdWx0KSB7XG4gICAgcmV0dXJuIGBcbuKaoO+4jyBZb3VyIGxhc3QgYW5zd2VyIHdhcyBibG9ja2VkLiBcbkZhaWxlZCBHdWFyZHJhaWwgUmVhc29uOiAke3Jlc3VsdC5ndWFyZHJhaWwucG9saWN5SGludH0uIFxuRmFpbHVyZSBEZXRhaWxzOiAke0pTT04uc3RyaW5naWZ5KHJlc3VsdC5vdXRwdXQub3V0cHV0SW5mbyA/PyB7fSl9LiBcblBsZWFzZSByZXNwb25kIGFnYWluIGZvbGxvd2luZyBwb2xpY3kuIEFwb2xvZ2l6ZSBmb3Igbm90IGJlaW5nIGFibGUgdG8gYW5zd2VyIHRoZSBxdWVzdGlvbiAod2hpbGUgYXZvaWRpbmcgdGhlIHNwZWNpZmljIHJlYXNvbikgYW5kIGRpdmVydCBkaXNjdXNzaW9uIGJhY2sgdG8gYW4gYXBwcm92ZWQgdG9waWMgaW1tZWRpYXRlbHkgYW5kIG5vdCBpbnZpdGUgbW9yZSBkaXNjdXNzaW9uLlxuYC50cmltKCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ndWFyZHJhaWwubWpzLm1hcCIsImZ1bmN0aW9uIGlzRGVmaW5lZChrZXksIG9iamVjdCkge1xuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgZnVkZ2luZyB3aXRoIHR5cGVzIGhlcmUgZm9yIHRoZSBpbmRleCB0eXBlc1xuICAgIHJldHVybiBrZXkgaW4gb2JqZWN0ICYmIHR5cGVvZiBvYmplY3Rba2V5XSAhPT0gJ3VuZGVmaW5lZCc7XG59XG5mdW5jdGlvbiBpc0RlcHJlY2F0ZWRDb25maWcoY29uZmlnKSB7XG4gICAgcmV0dXJuIChpc0RlZmluZWQoJ21vZGFsaXRpZXMnLCBjb25maWcpIHx8XG4gICAgICAgIGlzRGVmaW5lZCgnaW5wdXRBdWRpb0Zvcm1hdCcsIGNvbmZpZykgfHxcbiAgICAgICAgaXNEZWZpbmVkKCdvdXRwdXRBdWRpb0Zvcm1hdCcsIGNvbmZpZykgfHxcbiAgICAgICAgaXNEZWZpbmVkKCdpbnB1dEF1ZGlvVHJhbnNjcmlwdGlvbicsIGNvbmZpZykgfHxcbiAgICAgICAgaXNEZWZpbmVkKCd0dXJuRGV0ZWN0aW9uJywgY29uZmlnKSB8fFxuICAgICAgICBpc0RlZmluZWQoJ2lucHV0QXVkaW9Ob2lzZVJlZHVjdGlvbicsIGNvbmZpZykgfHxcbiAgICAgICAgaXNEZWZpbmVkKCdzcGVlZCcsIGNvbmZpZykpO1xufVxuLyoqXG4gKiBDb252ZXJ0IGFueSBnaXZlbiBjb25maWcgKG9sZCBvciBuZXcpIHRvIHRoZSBuZXcgR0EgY29uZmlnIHNoYXBlLlxuICogSWYgYSBuZXcgY29uZmlnIGlzIHByb3ZpZGVkLCBpdCB3aWxsIGJlIHJldHVybmVkIGFzLWlzIChub3JtYWxpemVkIHNoYWxsb3dseSkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b05ld1Nlc3Npb25Db25maWcoY29uZmlnKSB7XG4gICAgaWYgKCFpc0RlcHJlY2F0ZWRDb25maWcoY29uZmlnKSkge1xuICAgICAgICBjb25zdCBpbnB1dENvbmZpZyA9IGNvbmZpZy5hdWRpbz8uaW5wdXRcbiAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgIGZvcm1hdDogbm9ybWFsaXplQXVkaW9Gb3JtYXQoY29uZmlnLmF1ZGlvLmlucHV0LmZvcm1hdCksXG4gICAgICAgICAgICAgICAgbm9pc2VSZWR1Y3Rpb246IGNvbmZpZy5hdWRpby5pbnB1dC5ub2lzZVJlZHVjdGlvbiA/PyBudWxsLFxuICAgICAgICAgICAgICAgIHRyYW5zY3JpcHRpb246IGNvbmZpZy5hdWRpby5pbnB1dC50cmFuc2NyaXB0aW9uLFxuICAgICAgICAgICAgICAgIHR1cm5EZXRlY3Rpb246IGNvbmZpZy5hdWRpby5pbnB1dC50dXJuRGV0ZWN0aW9uLFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIGNvbnN0IHJlcXVlc3RlZE91dHB1dFZvaWNlID0gY29uZmlnLmF1ZGlvPy5vdXRwdXQ/LnZvaWNlID8/IGNvbmZpZy52b2ljZTtcbiAgICAgICAgY29uc3Qgb3V0cHV0Q29uZmlnID0gY29uZmlnLmF1ZGlvPy5vdXRwdXQgfHwgdHlwZW9mIHJlcXVlc3RlZE91dHB1dFZvaWNlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgZm9ybWF0OiBub3JtYWxpemVBdWRpb0Zvcm1hdChjb25maWcuYXVkaW8/Lm91dHB1dD8uZm9ybWF0KSxcbiAgICAgICAgICAgICAgICB2b2ljZTogcmVxdWVzdGVkT3V0cHV0Vm9pY2UsXG4gICAgICAgICAgICAgICAgc3BlZWQ6IGNvbmZpZy5hdWRpbz8ub3V0cHV0Py5zcGVlZCxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbW9kZWw6IGNvbmZpZy5tb2RlbCxcbiAgICAgICAgICAgIGluc3RydWN0aW9uczogY29uZmlnLmluc3RydWN0aW9ucyxcbiAgICAgICAgICAgIHRvb2xDaG9pY2U6IGNvbmZpZy50b29sQ2hvaWNlLFxuICAgICAgICAgICAgdG9vbHM6IGNvbmZpZy50b29scyxcbiAgICAgICAgICAgIHRyYWNpbmc6IGNvbmZpZy50cmFjaW5nLFxuICAgICAgICAgICAgcHJvdmlkZXJEYXRhOiBjb25maWcucHJvdmlkZXJEYXRhLFxuICAgICAgICAgICAgcHJvbXB0OiBjb25maWcucHJvbXB0LFxuICAgICAgICAgICAgb3V0cHV0TW9kYWxpdGllczogY29uZmlnLm91dHB1dE1vZGFsaXRpZXMsXG4gICAgICAgICAgICBhdWRpbzogaW5wdXRDb25maWcgfHwgb3V0cHV0Q29uZmlnXG4gICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0OiBpbnB1dENvbmZpZyxcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0OiBvdXRwdXRDb25maWcsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkLFxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBtb2RlbDogY29uZmlnLm1vZGVsLFxuICAgICAgICBpbnN0cnVjdGlvbnM6IGNvbmZpZy5pbnN0cnVjdGlvbnMsXG4gICAgICAgIHRvb2xDaG9pY2U6IGNvbmZpZy50b29sQ2hvaWNlLFxuICAgICAgICB0b29sczogY29uZmlnLnRvb2xzLFxuICAgICAgICB0cmFjaW5nOiBjb25maWcudHJhY2luZyxcbiAgICAgICAgcHJvdmlkZXJEYXRhOiBjb25maWcucHJvdmlkZXJEYXRhLFxuICAgICAgICBwcm9tcHQ6IGNvbmZpZy5wcm9tcHQsXG4gICAgICAgIG91dHB1dE1vZGFsaXRpZXM6IGNvbmZpZy5tb2RhbGl0aWVzLFxuICAgICAgICBhdWRpbzoge1xuICAgICAgICAgICAgaW5wdXQ6IHtcbiAgICAgICAgICAgICAgICBmb3JtYXQ6IG5vcm1hbGl6ZUF1ZGlvRm9ybWF0KGNvbmZpZy5pbnB1dEF1ZGlvRm9ybWF0KSxcbiAgICAgICAgICAgICAgICBub2lzZVJlZHVjdGlvbjogY29uZmlnLmlucHV0QXVkaW9Ob2lzZVJlZHVjdGlvbiA/PyBudWxsLFxuICAgICAgICAgICAgICAgIHRyYW5zY3JpcHRpb246IGNvbmZpZy5pbnB1dEF1ZGlvVHJhbnNjcmlwdGlvbixcbiAgICAgICAgICAgICAgICB0dXJuRGV0ZWN0aW9uOiBjb25maWcudHVybkRldGVjdGlvbixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvdXRwdXQ6IHtcbiAgICAgICAgICAgICAgICBmb3JtYXQ6IG5vcm1hbGl6ZUF1ZGlvRm9ybWF0KGNvbmZpZy5vdXRwdXRBdWRpb0Zvcm1hdCksXG4gICAgICAgICAgICAgICAgdm9pY2U6IGNvbmZpZy52b2ljZSxcbiAgICAgICAgICAgICAgICBzcGVlZDogY29uZmlnLnNwZWVkLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZUF1ZGlvRm9ybWF0KGZvcm1hdCkge1xuICAgIGlmICghZm9ybWF0KVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIGlmICh0eXBlb2YgZm9ybWF0ID09PSAnb2JqZWN0JylcbiAgICAgICAgcmV0dXJuIGZvcm1hdDtcbiAgICBjb25zdCBmID0gU3RyaW5nKGZvcm1hdCk7XG4gICAgaWYgKGYgPT09ICdwY20xNicpXG4gICAgICAgIHJldHVybiB7IHR5cGU6ICdhdWRpby9wY20nLCByYXRlOiAyNDAwMCB9O1xuICAgIGlmIChmID09PSAnZzcxMV91bGF3JylcbiAgICAgICAgcmV0dXJuIHsgdHlwZTogJ2F1ZGlvL3BjbXUnIH07XG4gICAgaWYgKGYgPT09ICdnNzExX2FsYXcnKVxuICAgICAgICByZXR1cm4geyB0eXBlOiAnYXVkaW8vcGNtYScgfTtcbiAgICAvLyBEZWZhdWx0IGZhbGxiYWNrOiBhc3N1bWUgMjRrSHogUENNIGlmIHVua25vd24gc3RyaW5nXG4gICAgcmV0dXJuIHsgdHlwZTogJ2F1ZGlvL3BjbScsIHJhdGU6IDI0MDAwIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jbGllbnRNZXNzYWdlcy5tanMubWFwIiwiaW1wb3J0IHsgeiB9IGZyb20gJ3pvZCc7XG5leHBvcnQgY29uc3QgYmFzZUl0ZW1TY2hlbWEgPSB6Lm9iamVjdCh7XG4gICAgaXRlbUlkOiB6LnN0cmluZygpLFxufSk7XG5leHBvcnQgY29uc3QgcmVhbHRpbWVNZXNzYWdlSXRlbVNjaGVtYSA9IHouZGlzY3JpbWluYXRlZFVuaW9uKCdyb2xlJywgW1xuICAgIHoub2JqZWN0KHtcbiAgICAgICAgaXRlbUlkOiB6LnN0cmluZygpLFxuICAgICAgICBwcmV2aW91c0l0ZW1JZDogei5zdHJpbmcoKS5udWxsYWJsZSgpLm9wdGlvbmFsKCksXG4gICAgICAgIHR5cGU6IHoubGl0ZXJhbCgnbWVzc2FnZScpLFxuICAgICAgICByb2xlOiB6LmxpdGVyYWwoJ3N5c3RlbScpLFxuICAgICAgICBjb250ZW50OiB6LmFycmF5KHoub2JqZWN0KHsgdHlwZTogei5saXRlcmFsKCdpbnB1dF90ZXh0JyksIHRleHQ6IHouc3RyaW5nKCkgfSkpLFxuICAgIH0pLFxuICAgIHoub2JqZWN0KHtcbiAgICAgICAgaXRlbUlkOiB6LnN0cmluZygpLFxuICAgICAgICBwcmV2aW91c0l0ZW1JZDogei5zdHJpbmcoKS5udWxsYWJsZSgpLm9wdGlvbmFsKCksXG4gICAgICAgIHR5cGU6IHoubGl0ZXJhbCgnbWVzc2FnZScpLFxuICAgICAgICByb2xlOiB6LmxpdGVyYWwoJ3VzZXInKSxcbiAgICAgICAgc3RhdHVzOiB6LmVudW0oWydpbl9wcm9ncmVzcycsICdjb21wbGV0ZWQnXSksXG4gICAgICAgIGNvbnRlbnQ6IHouYXJyYXkoei5vYmplY3QoeyB0eXBlOiB6LmxpdGVyYWwoJ2lucHV0X3RleHQnKSwgdGV4dDogei5zdHJpbmcoKSB9KS5vcih6Lm9iamVjdCh7XG4gICAgICAgICAgICB0eXBlOiB6LmxpdGVyYWwoJ2lucHV0X2F1ZGlvJyksXG4gICAgICAgICAgICBhdWRpbzogei5zdHJpbmcoKS5udWxsYWJsZSgpLm9wdGlvbmFsKCksXG4gICAgICAgICAgICB0cmFuc2NyaXB0OiB6LnN0cmluZygpLm51bGxhYmxlKCksXG4gICAgICAgIH0pKSksXG4gICAgfSksXG4gICAgei5vYmplY3Qoe1xuICAgICAgICBpdGVtSWQ6IHouc3RyaW5nKCksXG4gICAgICAgIHByZXZpb3VzSXRlbUlkOiB6LnN0cmluZygpLm51bGxhYmxlKCkub3B0aW9uYWwoKSxcbiAgICAgICAgdHlwZTogei5saXRlcmFsKCdtZXNzYWdlJyksXG4gICAgICAgIHJvbGU6IHoubGl0ZXJhbCgnYXNzaXN0YW50JyksXG4gICAgICAgIHN0YXR1czogei5lbnVtKFsnaW5fcHJvZ3Jlc3MnLCAnY29tcGxldGVkJywgJ2luY29tcGxldGUnXSksXG4gICAgICAgIGNvbnRlbnQ6IHouYXJyYXkoei5vYmplY3QoeyB0eXBlOiB6LmxpdGVyYWwoJ291dHB1dF90ZXh0JyksIHRleHQ6IHouc3RyaW5nKCkgfSkub3Ioei5vYmplY3Qoe1xuICAgICAgICAgICAgdHlwZTogei5saXRlcmFsKCdvdXRwdXRfYXVkaW8nKSxcbiAgICAgICAgICAgIGF1ZGlvOiB6LnN0cmluZygpLm51bGxhYmxlKCkub3B0aW9uYWwoKSxcbiAgICAgICAgICAgIHRyYW5zY3JpcHQ6IHouc3RyaW5nKCkubnVsbGFibGUoKS5vcHRpb25hbCgpLFxuICAgICAgICB9KSkpLFxuICAgIH0pLFxuXSk7XG5leHBvcnQgY29uc3QgcmVhbHRpbWVUb29sQ2FsbEl0ZW0gPSB6Lm9iamVjdCh7XG4gICAgaXRlbUlkOiB6LnN0cmluZygpLFxuICAgIHByZXZpb3VzSXRlbUlkOiB6LnN0cmluZygpLm51bGxhYmxlKCkub3B0aW9uYWwoKSxcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ2Z1bmN0aW9uX2NhbGwnKSxcbiAgICBzdGF0dXM6IHouZW51bShbJ2luX3Byb2dyZXNzJywgJ2NvbXBsZXRlZCcsICdpbmNvbXBsZXRlJ10pLFxuICAgIGFyZ3VtZW50czogei5zdHJpbmcoKSxcbiAgICBuYW1lOiB6LnN0cmluZygpLFxuICAgIG91dHB1dDogei5zdHJpbmcoKS5udWxsYWJsZSgpLFxufSk7XG5leHBvcnQgY29uc3QgcmVhbHRpbWVNY3BDYWxsSXRlbSA9IHoub2JqZWN0KHtcbiAgICBpdGVtSWQ6IHouc3RyaW5nKCksXG4gICAgcHJldmlvdXNJdGVtSWQ6IHouc3RyaW5nKCkubnVsbGFibGUoKS5vcHRpb25hbCgpLFxuICAgIHR5cGU6IHouZW51bShbJ21jcF9jYWxsJywgJ21jcF90b29sX2NhbGwnXSksXG4gICAgc3RhdHVzOiB6LmVudW0oWydpbl9wcm9ncmVzcycsICdjb21wbGV0ZWQnLCAnaW5jb21wbGV0ZSddKSxcbiAgICBhcmd1bWVudHM6IHouc3RyaW5nKCksXG4gICAgbmFtZTogei5zdHJpbmcoKSxcbiAgICBvdXRwdXQ6IHouc3RyaW5nKCkubnVsbGFibGUoKSxcbn0pO1xuZXhwb3J0IGNvbnN0IHJlYWx0aW1lTWNwQ2FsbEFwcHJvdmFsUmVxdWVzdEl0ZW0gPSB6Lm9iamVjdCh7XG4gICAgaXRlbUlkOiB6LnN0cmluZygpLFxuICAgIHR5cGU6IHoubGl0ZXJhbCgnbWNwX2FwcHJvdmFsX3JlcXVlc3QnKSxcbiAgICBzZXJ2ZXJMYWJlbDogei5zdHJpbmcoKSxcbiAgICBuYW1lOiB6LnN0cmluZygpLFxuICAgIGFyZ3VtZW50czogei5yZWNvcmQoei5zdHJpbmcoKSwgei5hbnkoKSksXG4gICAgYXBwcm92ZWQ6IHouYm9vbGVhbigpLm9wdGlvbmFsKCkubnVsbGFibGUoKSxcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXRlbXMubWpzLm1hcCIsImltcG9ydCB7IGdldExvZ2dlciB9IGZyb20gJ0BvcGVuYWkvYWdlbnRzLWNvcmUnO1xuY29uc3QgbG9nZ2VyID0gZ2V0TG9nZ2VyKCdvcGVuYWktYWdlbnRzOnJlYWx0aW1lJyk7XG5leHBvcnQgZGVmYXVsdCBsb2dnZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb2dnZXIubWpzLm1hcCIsImltcG9ydCB7IHogfSBmcm9tICd6b2QnO1xuLy8gRXZlbnQgc2NoZW1hcyBtaXJyb3JpbmcgdGhlIHN0cnVjdHVyZXMgZGVmaW5lZCBpbiB0aGUgT3BlbkFJIFNESyB0eXBpbmdzLlxuLy8gTW9zdCBmaWVsZHMgZnJvbSB0aGUgaW50ZXJmYWNlcyBpbiBgcmVhbHRpbWUuZC50c2AgYXJlIGNhcHR1cmVkIGhlcmUgdG9cbi8vIHByb3ZpZGUgYmV0dGVyIHJ1bnRpbWUgdmFsaWRhdGlvbiB3aGVuIHBhcnNpbmcgZXZlbnRzIGZyb20gdGhlIHNlcnZlci5cbmV4cG9ydCBjb25zdCByZWFsdGltZVJlc3BvbnNlID0gei5vYmplY3Qoe1xuICAgIGlkOiB6LnN0cmluZygpLm9wdGlvbmFsKCkubnVsbGFibGUoKSxcbiAgICBjb252ZXJzYXRpb25faWQ6IHouc3RyaW5nKCkub3B0aW9uYWwoKS5udWxsYWJsZSgpLFxuICAgIG1heF9vdXRwdXRfdG9rZW5zOiB6Lm51bWJlcigpLm9yKHoubGl0ZXJhbCgnaW5mJykpLm9wdGlvbmFsKCkubnVsbGFibGUoKSxcbiAgICBtZXRhZGF0YTogei5yZWNvcmQoei5zdHJpbmcoKSwgei5hbnkoKSkub3B0aW9uYWwoKS5udWxsYWJsZSgpLFxuICAgIC8vIEdBIHJlbmFtZTogbW9kYWxpdGllcyAtPiBvdXRwdXRfbW9kYWxpdGllc1xuICAgIG91dHB1dF9tb2RhbGl0aWVzOiB6LmFycmF5KHouc3RyaW5nKCkpLm9wdGlvbmFsKCkubnVsbGFibGUoKSxcbiAgICBvYmplY3Q6IHoubGl0ZXJhbCgncmVhbHRpbWUucmVzcG9uc2UnKS5vcHRpb25hbCgpLm51bGxhYmxlKCksXG4gICAgb3V0cHV0OiB6LmFycmF5KHouYW55KCkpLm9wdGlvbmFsKCkubnVsbGFibGUoKSxcbiAgICAvLyBHQSBncm91cGluZzogYXVkaW8ub3V0cHV0Lntmb3JtYXQsdm9pY2V9XG4gICAgYXVkaW86IHpcbiAgICAgICAgLm9iamVjdCh7XG4gICAgICAgIG91dHB1dDogelxuICAgICAgICAgICAgLm9iamVjdCh7XG4gICAgICAgICAgICBmb3JtYXQ6IHouYW55KCkub3B0aW9uYWwoKS5udWxsYWJsZSgpLFxuICAgICAgICAgICAgdm9pY2U6IHouc3RyaW5nKCkub3B0aW9uYWwoKS5udWxsYWJsZSgpLFxuICAgICAgICB9KVxuICAgICAgICAgICAgLm9wdGlvbmFsKClcbiAgICAgICAgICAgIC5udWxsYWJsZSgpLFxuICAgIH0pXG4gICAgICAgIC5vcHRpb25hbCgpXG4gICAgICAgIC5udWxsYWJsZSgpLFxuICAgIHN0YXR1czogelxuICAgICAgICAuZW51bShbJ2NvbXBsZXRlZCcsICdpbmNvbXBsZXRlJywgJ2ZhaWxlZCcsICdjYW5jZWxsZWQnLCAnaW5fcHJvZ3Jlc3MnXSlcbiAgICAgICAgLm9wdGlvbmFsKClcbiAgICAgICAgLm51bGxhYmxlKCksXG4gICAgc3RhdHVzX2RldGFpbHM6IHoucmVjb3JkKHouc3RyaW5nKCksIHouYW55KCkpLm9wdGlvbmFsKCkubnVsbGFibGUoKSxcbiAgICB1c2FnZTogelxuICAgICAgICAub2JqZWN0KHtcbiAgICAgICAgaW5wdXRfdG9rZW5zOiB6Lm51bWJlcigpLm9wdGlvbmFsKCksXG4gICAgICAgIGlucHV0X3Rva2VuX2RldGFpbHM6IHoucmVjb3JkKHouc3RyaW5nKCksIHouYW55KCkpLm9wdGlvbmFsKCkubnVsbGFibGUoKSxcbiAgICAgICAgb3V0cHV0X3Rva2Vuczogei5udW1iZXIoKS5vcHRpb25hbCgpLFxuICAgICAgICBvdXRwdXRfdG9rZW5fZGV0YWlsczogei5yZWNvcmQoei5zdHJpbmcoKSwgei5hbnkoKSkub3B0aW9uYWwoKS5udWxsYWJsZSgpLFxuICAgIH0pXG4gICAgICAgIC5vcHRpb25hbCgpXG4gICAgICAgIC5udWxsYWJsZSgpLFxufSk7XG4vLyBCYXNpYyBjb250ZW50IHNjaGVtYSB1c2VkIGJ5IENvbnZlcnNhdGlvbkl0ZW0uXG5leHBvcnQgY29uc3QgY29udmVyc2F0aW9uSXRlbUNvbnRlbnRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gICAgaWQ6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICBhdWRpbzogei5zdHJpbmcoKS5udWxsYWJsZSgpLm9wdGlvbmFsKCksXG4gICAgdGV4dDogei5zdHJpbmcoKS5udWxsYWJsZSgpLm9wdGlvbmFsKCksXG4gICAgdHJhbnNjcmlwdDogei5zdHJpbmcoKS5udWxsYWJsZSgpLm9wdGlvbmFsKCksXG4gICAgdHlwZTogei51bmlvbihbXG4gICAgICAgIHoubGl0ZXJhbCgnaW5wdXRfdGV4dCcpLFxuICAgICAgICB6LmxpdGVyYWwoJ2lucHV0X2F1ZGlvJyksXG4gICAgICAgIHoubGl0ZXJhbCgnaXRlbV9yZWZlcmVuY2UnKSxcbiAgICAgICAgei5saXRlcmFsKCdvdXRwdXRfdGV4dCcpLFxuICAgICAgICB6LmxpdGVyYWwoJ291dHB1dF9hdWRpbycpLFxuICAgIF0pLFxufSk7XG5leHBvcnQgY29uc3QgY29udmVyc2F0aW9uSXRlbVNjaGVtYSA9IHpcbiAgICAub2JqZWN0KHtcbiAgICBpZDogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAgIGFyZ3VtZW50czogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAgIGNhbGxfaWQ6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICBjb250ZW50OiB6LmFycmF5KGNvbnZlcnNhdGlvbkl0ZW1Db250ZW50U2NoZW1hKS5vcHRpb25hbCgpLFxuICAgIG5hbWU6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICBvdXRwdXQ6IHouc3RyaW5nKCkubnVsbGFibGUoKS5vcHRpb25hbCgpLFxuICAgIHJvbGU6IHouZW51bShbJ3VzZXInLCAnYXNzaXN0YW50JywgJ3N5c3RlbSddKS5vcHRpb25hbCgpLFxuICAgIHN0YXR1czogei5lbnVtKFsnY29tcGxldGVkJywgJ2luY29tcGxldGUnLCAnaW5fcHJvZ3Jlc3MnXSkub3B0aW9uYWwoKSxcbiAgICB0eXBlOiB6XG4gICAgICAgIC5lbnVtKFtcbiAgICAgICAgJ21lc3NhZ2UnLFxuICAgICAgICAnZnVuY3Rpb25fY2FsbCcsXG4gICAgICAgICdmdW5jdGlvbl9jYWxsX291dHB1dCcsXG4gICAgICAgICdtY3BfbGlzdF90b29scycsXG4gICAgICAgICdtY3BfdG9vbF9jYWxsJyxcbiAgICAgICAgJ21jcF9jYWxsJyxcbiAgICAgICAgJ21jcF9hcHByb3ZhbF9yZXF1ZXN0JyxcbiAgICAgICAgJ21jcF9hcHByb3ZhbF9yZXNwb25zZScsXG4gICAgXSlcbiAgICAgICAgLm9wdGlvbmFsKCksXG4gICAgYXBwcm92YWxfcmVxdWVzdF9pZDogei5zdHJpbmcoKS5udWxsYWJsZSgpLm9wdGlvbmFsKCksXG4gICAgYXBwcm92ZTogei5ib29sZWFuKCkubnVsbGFibGUoKS5vcHRpb25hbCgpLFxuICAgIHJlYXNvbjogei5zdHJpbmcoKS5udWxsYWJsZSgpLm9wdGlvbmFsKCksXG4gICAgc2VydmVyX2xhYmVsOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgZXJyb3I6IHouYW55KCkubnVsbGFibGUoKS5vcHRpb25hbCgpLFxuICAgIHRvb2xzOiB6XG4gICAgICAgIC5hcnJheSh6XG4gICAgICAgIC5vYmplY3Qoe1xuICAgICAgICBuYW1lOiB6LnN0cmluZygpLFxuICAgICAgICBkZXNjcmlwdGlvbjogei5zdHJpbmcoKSxcbiAgICAgICAgaW5wdXRfc2NoZW1hOiB6LnJlY29yZCh6LmFueSgpKS5vcHRpb25hbCgpLFxuICAgIH0pXG4gICAgICAgIC5wYXNzdGhyb3VnaCgpKVxuICAgICAgICAub3B0aW9uYWwoKSxcbn0pXG4gICAgLnBhc3N0aHJvdWdoKCk7XG5leHBvcnQgY29uc3QgY29udmVyc2F0aW9uQ3JlYXRlZEV2ZW50U2NoZW1hID0gei5vYmplY3Qoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgnY29udmVyc2F0aW9uLmNyZWF0ZWQnKSxcbiAgICBldmVudF9pZDogei5zdHJpbmcoKSxcbiAgICBjb252ZXJzYXRpb246IHoub2JqZWN0KHtcbiAgICAgICAgaWQ6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICAgICAgb2JqZWN0OiB6LmxpdGVyYWwoJ3JlYWx0aW1lLmNvbnZlcnNhdGlvbicpLm9wdGlvbmFsKCksXG4gICAgfSksXG59KTtcbi8vIEdBIHJlbmFtZTogY29udmVyc2F0aW9uLml0ZW0uY3JlYXRlZCAtPiBjb252ZXJzYXRpb24uaXRlbS5hZGRlZFxuZXhwb3J0IGNvbnN0IGNvbnZlcnNhdGlvbkl0ZW1BZGRlZEV2ZW50U2NoZW1hID0gei5vYmplY3Qoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgnY29udmVyc2F0aW9uLml0ZW0uYWRkZWQnKSxcbiAgICBldmVudF9pZDogei5zdHJpbmcoKSxcbiAgICBpdGVtOiBjb252ZXJzYXRpb25JdGVtU2NoZW1hLFxuICAgIHByZXZpb3VzX2l0ZW1faWQ6IHouc3RyaW5nKCkubnVsbGFibGUoKS5vcHRpb25hbCgpLFxufSk7XG4vLyBHQSBhZGRpdGlvbjogY29udmVyc2F0aW9uLml0ZW0uZG9uZVxuZXhwb3J0IGNvbnN0IGNvbnZlcnNhdGlvbkl0ZW1Eb25lRXZlbnRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdjb252ZXJzYXRpb24uaXRlbS5kb25lJyksXG4gICAgZXZlbnRfaWQ6IHouc3RyaW5nKCksXG4gICAgaXRlbTogY29udmVyc2F0aW9uSXRlbVNjaGVtYSxcbiAgICBwcmV2aW91c19pdGVtX2lkOiB6LnN0cmluZygpLm51bGxhYmxlKCkub3B0aW9uYWwoKSxcbn0pO1xuZXhwb3J0IGNvbnN0IGNvbnZlcnNhdGlvbkl0ZW1EZWxldGVkRXZlbnRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdjb252ZXJzYXRpb24uaXRlbS5kZWxldGVkJyksXG4gICAgZXZlbnRfaWQ6IHouc3RyaW5nKCksXG4gICAgaXRlbV9pZDogei5zdHJpbmcoKSxcbn0pO1xuZXhwb3J0IGNvbnN0IGNvbnZlcnNhdGlvbkl0ZW1JbnB1dEF1ZGlvVHJhbnNjcmlwdGlvbkNvbXBsZXRlZEV2ZW50U2NoZW1hID0gei5vYmplY3Qoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgnY29udmVyc2F0aW9uLml0ZW0uaW5wdXRfYXVkaW9fdHJhbnNjcmlwdGlvbi5jb21wbGV0ZWQnKSxcbiAgICBldmVudF9pZDogei5zdHJpbmcoKSxcbiAgICBpdGVtX2lkOiB6LnN0cmluZygpLFxuICAgIGNvbnRlbnRfaW5kZXg6IHoubnVtYmVyKCksXG4gICAgdHJhbnNjcmlwdDogei5zdHJpbmcoKSxcbiAgICBsb2dwcm9iczogei5hcnJheSh6LmFueSgpKS5udWxsYWJsZSgpLm9wdGlvbmFsKCksXG59KTtcbmV4cG9ydCBjb25zdCBjb252ZXJzYXRpb25JdGVtSW5wdXRBdWRpb1RyYW5zY3JpcHRpb25EZWx0YUV2ZW50U2NoZW1hID0gei5vYmplY3Qoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgnY29udmVyc2F0aW9uLml0ZW0uaW5wdXRfYXVkaW9fdHJhbnNjcmlwdGlvbi5kZWx0YScpLFxuICAgIGV2ZW50X2lkOiB6LnN0cmluZygpLFxuICAgIGl0ZW1faWQ6IHouc3RyaW5nKCksXG4gICAgY29udGVudF9pbmRleDogei5udW1iZXIoKS5vcHRpb25hbCgpLFxuICAgIGRlbHRhOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgbG9ncHJvYnM6IHouYXJyYXkoei5hbnkoKSkubnVsbGFibGUoKS5vcHRpb25hbCgpLFxufSk7XG5leHBvcnQgY29uc3QgY29udmVyc2F0aW9uSXRlbUlucHV0QXVkaW9UcmFuc2NyaXB0aW9uRmFpbGVkRXZlbnRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdjb252ZXJzYXRpb24uaXRlbS5pbnB1dF9hdWRpb190cmFuc2NyaXB0aW9uLmZhaWxlZCcpLFxuICAgIGV2ZW50X2lkOiB6LnN0cmluZygpLFxuICAgIGl0ZW1faWQ6IHouc3RyaW5nKCksXG4gICAgY29udGVudF9pbmRleDogei5udW1iZXIoKSxcbiAgICBlcnJvcjogei5vYmplY3Qoe1xuICAgICAgICBjb2RlOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgICAgIG1lc3NhZ2U6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICAgICAgcGFyYW06IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICAgICAgdHlwZTogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAgIH0pLFxufSk7XG5leHBvcnQgY29uc3QgY29udmVyc2F0aW9uSXRlbVJldHJpZXZlZEV2ZW50U2NoZW1hID0gei5vYmplY3Qoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgnY29udmVyc2F0aW9uLml0ZW0ucmV0cmlldmVkJyksXG4gICAgZXZlbnRfaWQ6IHouc3RyaW5nKCksXG4gICAgaXRlbTogY29udmVyc2F0aW9uSXRlbVNjaGVtYSxcbn0pO1xuZXhwb3J0IGNvbnN0IGNvbnZlcnNhdGlvbkl0ZW1UcnVuY2F0ZWRFdmVudFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ2NvbnZlcnNhdGlvbi5pdGVtLnRydW5jYXRlZCcpLFxuICAgIGV2ZW50X2lkOiB6LnN0cmluZygpLFxuICAgIGl0ZW1faWQ6IHouc3RyaW5nKCksXG4gICAgYXVkaW9fZW5kX21zOiB6Lm51bWJlcigpLFxuICAgIGNvbnRlbnRfaW5kZXg6IHoubnVtYmVyKCksXG59KTtcbmV4cG9ydCBjb25zdCBjb252ZXJzYXRpb25JdGVtQ3JlYXRlRXZlbnRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdjb252ZXJzYXRpb24uaXRlbS5jcmVhdGUnKSxcbiAgICBpdGVtOiBjb252ZXJzYXRpb25JdGVtU2NoZW1hLFxuICAgIGV2ZW50X2lkOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgcHJldmlvdXNfaXRlbV9pZDogei5zdHJpbmcoKS5udWxsYWJsZSgpLm9wdGlvbmFsKCksXG59KTtcbmV4cG9ydCBjb25zdCBjb252ZXJzYXRpb25JdGVtRGVsZXRlRXZlbnRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdjb252ZXJzYXRpb24uaXRlbS5kZWxldGUnKSxcbiAgICBpdGVtX2lkOiB6LnN0cmluZygpLFxuICAgIGV2ZW50X2lkOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG59KTtcbmV4cG9ydCBjb25zdCBjb252ZXJzYXRpb25JdGVtUmV0cmlldmVFdmVudFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ2NvbnZlcnNhdGlvbi5pdGVtLnJldHJpZXZlJyksXG4gICAgaXRlbV9pZDogei5zdHJpbmcoKSxcbiAgICBldmVudF9pZDogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxufSk7XG5leHBvcnQgY29uc3QgY29udmVyc2F0aW9uSXRlbVRydW5jYXRlRXZlbnRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdjb252ZXJzYXRpb24uaXRlbS50cnVuY2F0ZScpLFxuICAgIGl0ZW1faWQ6IHouc3RyaW5nKCksXG4gICAgYXVkaW9fZW5kX21zOiB6Lm51bWJlcigpLFxuICAgIGNvbnRlbnRfaW5kZXg6IHoubnVtYmVyKCksXG4gICAgZXZlbnRfaWQ6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbn0pO1xuZXhwb3J0IGNvbnN0IGVycm9yRXZlbnRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdlcnJvcicpLFxuICAgIGV2ZW50X2lkOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgZXJyb3I6IHouYW55KCkub3B0aW9uYWwoKSxcbn0pO1xuZXhwb3J0IGNvbnN0IGlucHV0QXVkaW9CdWZmZXJDbGVhcmVkRXZlbnRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdpbnB1dF9hdWRpb19idWZmZXIuY2xlYXJlZCcpLFxuICAgIGV2ZW50X2lkOiB6LnN0cmluZygpLFxufSk7XG5leHBvcnQgY29uc3QgaW5wdXRBdWRpb0J1ZmZlckFwcGVuZEV2ZW50U2NoZW1hID0gei5vYmplY3Qoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgnaW5wdXRfYXVkaW9fYnVmZmVyLmFwcGVuZCcpLFxuICAgIGF1ZGlvOiB6LnN0cmluZygpLFxuICAgIGV2ZW50X2lkOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG59KTtcbmV4cG9ydCBjb25zdCBpbnB1dEF1ZGlvQnVmZmVyQ2xlYXJFdmVudFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ2lucHV0X2F1ZGlvX2J1ZmZlci5jbGVhcicpLFxuICAgIGV2ZW50X2lkOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG59KTtcbmV4cG9ydCBjb25zdCBpbnB1dEF1ZGlvQnVmZmVyQ29tbWl0RXZlbnRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdpbnB1dF9hdWRpb19idWZmZXIuY29tbWl0JyksXG4gICAgZXZlbnRfaWQ6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbn0pO1xuZXhwb3J0IGNvbnN0IGlucHV0QXVkaW9CdWZmZXJDb21taXR0ZWRFdmVudFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ2lucHV0X2F1ZGlvX2J1ZmZlci5jb21taXR0ZWQnKSxcbiAgICBldmVudF9pZDogei5zdHJpbmcoKSxcbiAgICBpdGVtX2lkOiB6LnN0cmluZygpLFxuICAgIHByZXZpb3VzX2l0ZW1faWQ6IHouc3RyaW5nKCkubnVsbGFibGUoKS5vcHRpb25hbCgpLFxufSk7XG5leHBvcnQgY29uc3QgaW5wdXRBdWRpb0J1ZmZlclNwZWVjaFN0YXJ0ZWRFdmVudFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ2lucHV0X2F1ZGlvX2J1ZmZlci5zcGVlY2hfc3RhcnRlZCcpLFxuICAgIGV2ZW50X2lkOiB6LnN0cmluZygpLFxuICAgIGl0ZW1faWQ6IHouc3RyaW5nKCksXG4gICAgYXVkaW9fc3RhcnRfbXM6IHoubnVtYmVyKCksXG59KTtcbmV4cG9ydCBjb25zdCBpbnB1dEF1ZGlvQnVmZmVyU3BlZWNoU3RvcHBlZEV2ZW50U2NoZW1hID0gei5vYmplY3Qoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgnaW5wdXRfYXVkaW9fYnVmZmVyLnNwZWVjaF9zdG9wcGVkJyksXG4gICAgZXZlbnRfaWQ6IHouc3RyaW5nKCksXG4gICAgaXRlbV9pZDogei5zdHJpbmcoKSxcbiAgICBhdWRpb19lbmRfbXM6IHoubnVtYmVyKCksXG59KTtcbmV4cG9ydCBjb25zdCBvdXRwdXRBdWRpb0J1ZmZlclN0YXJ0ZWRFdmVudFNjaGVtYSA9IHpcbiAgICAub2JqZWN0KHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ291dHB1dF9hdWRpb19idWZmZXIuc3RhcnRlZCcpLFxuICAgIGV2ZW50X2lkOiB6LnN0cmluZygpLFxufSlcbiAgICAucGFzc3Rocm91Z2goKTtcbmV4cG9ydCBjb25zdCBvdXRwdXRBdWRpb0J1ZmZlclN0b3BwZWRFdmVudFNjaGVtYSA9IHpcbiAgICAub2JqZWN0KHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ291dHB1dF9hdWRpb19idWZmZXIuc3RvcHBlZCcpLFxuICAgIGV2ZW50X2lkOiB6LnN0cmluZygpLFxufSlcbiAgICAucGFzc3Rocm91Z2goKTtcbmV4cG9ydCBjb25zdCBvdXRwdXRBdWRpb0J1ZmZlckNsZWFyZWRFdmVudFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ291dHB1dF9hdWRpb19idWZmZXIuY2xlYXJlZCcpLFxuICAgIGV2ZW50X2lkOiB6LnN0cmluZygpLFxufSk7XG5leHBvcnQgY29uc3QgcmF0ZUxpbWl0c1VwZGF0ZWRFdmVudFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ3JhdGVfbGltaXRzLnVwZGF0ZWQnKSxcbiAgICBldmVudF9pZDogei5zdHJpbmcoKSxcbiAgICByYXRlX2xpbWl0czogei5hcnJheSh6Lm9iamVjdCh7XG4gICAgICAgIGxpbWl0OiB6Lm51bWJlcigpLm9wdGlvbmFsKCksXG4gICAgICAgIG5hbWU6IHouZW51bShbJ3JlcXVlc3RzJywgJ3Rva2VucyddKS5vcHRpb25hbCgpLFxuICAgICAgICByZW1haW5pbmc6IHoubnVtYmVyKCkub3B0aW9uYWwoKSxcbiAgICAgICAgcmVzZXRfc2Vjb25kczogei5udW1iZXIoKS5vcHRpb25hbCgpLFxuICAgIH0pKSxcbn0pO1xuZXhwb3J0IGNvbnN0IHJlc3BvbnNlQXVkaW9EZWx0YUV2ZW50U2NoZW1hID0gei5vYmplY3Qoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgncmVzcG9uc2Uub3V0cHV0X2F1ZGlvLmRlbHRhJyksXG4gICAgZXZlbnRfaWQ6IHouc3RyaW5nKCksXG4gICAgaXRlbV9pZDogei5zdHJpbmcoKSxcbiAgICBjb250ZW50X2luZGV4OiB6Lm51bWJlcigpLFxuICAgIGRlbHRhOiB6LnN0cmluZygpLFxuICAgIG91dHB1dF9pbmRleDogei5udW1iZXIoKSxcbiAgICByZXNwb25zZV9pZDogei5zdHJpbmcoKSxcbn0pO1xuZXhwb3J0IGNvbnN0IHJlc3BvbnNlQXVkaW9Eb25lRXZlbnRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdyZXNwb25zZS5vdXRwdXRfYXVkaW8uZG9uZScpLFxuICAgIGV2ZW50X2lkOiB6LnN0cmluZygpLFxuICAgIGl0ZW1faWQ6IHouc3RyaW5nKCksXG4gICAgY29udGVudF9pbmRleDogei5udW1iZXIoKSxcbiAgICBvdXRwdXRfaW5kZXg6IHoubnVtYmVyKCksXG4gICAgcmVzcG9uc2VfaWQ6IHouc3RyaW5nKCksXG59KTtcbmV4cG9ydCBjb25zdCByZXNwb25zZUF1ZGlvVHJhbnNjcmlwdERlbHRhRXZlbnRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdyZXNwb25zZS5vdXRwdXRfYXVkaW9fdHJhbnNjcmlwdC5kZWx0YScpLFxuICAgIGV2ZW50X2lkOiB6LnN0cmluZygpLFxuICAgIGl0ZW1faWQ6IHouc3RyaW5nKCksXG4gICAgY29udGVudF9pbmRleDogei5udW1iZXIoKSxcbiAgICBkZWx0YTogei5zdHJpbmcoKSxcbiAgICBvdXRwdXRfaW5kZXg6IHoubnVtYmVyKCksXG4gICAgcmVzcG9uc2VfaWQ6IHouc3RyaW5nKCksXG59KTtcbmV4cG9ydCBjb25zdCByZXNwb25zZUF1ZGlvVHJhbnNjcmlwdERvbmVFdmVudFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICAvLyAgR0EgbWF5IGludHJvZHVjZSByZXNwb25zZS5vdXRwdXRfYXVkaW9fdHJhbnNjcmlwdC5kb25lXG4gICAgdHlwZTogei5saXRlcmFsKCdyZXNwb25zZS5vdXRwdXRfYXVkaW9fdHJhbnNjcmlwdC5kb25lJyksXG4gICAgZXZlbnRfaWQ6IHouc3RyaW5nKCksXG4gICAgaXRlbV9pZDogei5zdHJpbmcoKSxcbiAgICBjb250ZW50X2luZGV4OiB6Lm51bWJlcigpLFxuICAgIHRyYW5zY3JpcHQ6IHouc3RyaW5nKCksXG4gICAgb3V0cHV0X2luZGV4OiB6Lm51bWJlcigpLFxuICAgIHJlc3BvbnNlX2lkOiB6LnN0cmluZygpLFxufSk7XG5leHBvcnQgY29uc3QgcmVzcG9uc2VDb250ZW50UGFydEFkZGVkRXZlbnRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdyZXNwb25zZS5jb250ZW50X3BhcnQuYWRkZWQnKSxcbiAgICBldmVudF9pZDogei5zdHJpbmcoKSxcbiAgICBpdGVtX2lkOiB6LnN0cmluZygpLFxuICAgIGNvbnRlbnRfaW5kZXg6IHoubnVtYmVyKCksXG4gICAgb3V0cHV0X2luZGV4OiB6Lm51bWJlcigpLFxuICAgIHJlc3BvbnNlX2lkOiB6LnN0cmluZygpLFxuICAgIHBhcnQ6IHoub2JqZWN0KHtcbiAgICAgICAgYXVkaW86IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICAgICAgdGV4dDogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAgICAgICB0cmFuc2NyaXB0OiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgICAgIHR5cGU6IHouZW51bShbJ3RleHQnLCAnYXVkaW8nXSkub3B0aW9uYWwoKSxcbiAgICB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IHJlc3BvbnNlQ29udGVudFBhcnREb25lRXZlbnRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdyZXNwb25zZS5jb250ZW50X3BhcnQuZG9uZScpLFxuICAgIGV2ZW50X2lkOiB6LnN0cmluZygpLFxuICAgIGl0ZW1faWQ6IHouc3RyaW5nKCksXG4gICAgY29udGVudF9pbmRleDogei5udW1iZXIoKSxcbiAgICBvdXRwdXRfaW5kZXg6IHoubnVtYmVyKCksXG4gICAgcmVzcG9uc2VfaWQ6IHouc3RyaW5nKCksXG4gICAgcGFydDogei5vYmplY3Qoe1xuICAgICAgICBhdWRpbzogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAgICAgICB0ZXh0OiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgICAgIHRyYW5zY3JpcHQ6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICAgICAgdHlwZTogei5lbnVtKFsndGV4dCcsICdhdWRpbyddKS5vcHRpb25hbCgpLFxuICAgIH0pLFxufSk7XG5leHBvcnQgY29uc3QgcmVzcG9uc2VDcmVhdGVkRXZlbnRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdyZXNwb25zZS5jcmVhdGVkJyksXG4gICAgZXZlbnRfaWQ6IHouc3RyaW5nKCksXG4gICAgcmVzcG9uc2U6IHJlYWx0aW1lUmVzcG9uc2UsXG59KTtcbmV4cG9ydCBjb25zdCByZXNwb25zZURvbmVFdmVudFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ3Jlc3BvbnNlLmRvbmUnKSxcbiAgICBldmVudF9pZDogei5zdHJpbmcoKSxcbiAgICByZXNwb25zZTogcmVhbHRpbWVSZXNwb25zZSxcbn0pO1xuZXhwb3J0IGNvbnN0IHJlc3BvbnNlRnVuY3Rpb25DYWxsQXJndW1lbnRzRGVsdGFFdmVudFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ3Jlc3BvbnNlLmZ1bmN0aW9uX2NhbGxfYXJndW1lbnRzLmRlbHRhJyksXG4gICAgZXZlbnRfaWQ6IHouc3RyaW5nKCksXG4gICAgaXRlbV9pZDogei5zdHJpbmcoKSxcbiAgICBjYWxsX2lkOiB6LnN0cmluZygpLFxuICAgIGRlbHRhOiB6LnN0cmluZygpLFxuICAgIG91dHB1dF9pbmRleDogei5udW1iZXIoKSxcbiAgICByZXNwb25zZV9pZDogei5zdHJpbmcoKSxcbn0pO1xuZXhwb3J0IGNvbnN0IHJlc3BvbnNlRnVuY3Rpb25DYWxsQXJndW1lbnRzRG9uZUV2ZW50U2NoZW1hID0gei5vYmplY3Qoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgncmVzcG9uc2UuZnVuY3Rpb25fY2FsbF9hcmd1bWVudHMuZG9uZScpLFxuICAgIGV2ZW50X2lkOiB6LnN0cmluZygpLFxuICAgIGl0ZW1faWQ6IHouc3RyaW5nKCksXG4gICAgY2FsbF9pZDogei5zdHJpbmcoKSxcbiAgICBhcmd1bWVudHM6IHouc3RyaW5nKCksXG4gICAgb3V0cHV0X2luZGV4OiB6Lm51bWJlcigpLFxuICAgIHJlc3BvbnNlX2lkOiB6LnN0cmluZygpLFxufSk7XG5leHBvcnQgY29uc3QgcmVzcG9uc2VPdXRwdXRJdGVtQWRkZWRFdmVudFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ3Jlc3BvbnNlLm91dHB1dF9pdGVtLmFkZGVkJyksXG4gICAgZXZlbnRfaWQ6IHouc3RyaW5nKCksXG4gICAgaXRlbTogY29udmVyc2F0aW9uSXRlbVNjaGVtYSxcbiAgICBvdXRwdXRfaW5kZXg6IHoubnVtYmVyKCksXG4gICAgcmVzcG9uc2VfaWQ6IHouc3RyaW5nKCksXG59KTtcbmV4cG9ydCBjb25zdCByZXNwb25zZU91dHB1dEl0ZW1Eb25lRXZlbnRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdyZXNwb25zZS5vdXRwdXRfaXRlbS5kb25lJyksXG4gICAgZXZlbnRfaWQ6IHouc3RyaW5nKCksXG4gICAgaXRlbTogY29udmVyc2F0aW9uSXRlbVNjaGVtYSxcbiAgICBvdXRwdXRfaW5kZXg6IHoubnVtYmVyKCksXG4gICAgcmVzcG9uc2VfaWQ6IHouc3RyaW5nKCksXG59KTtcbmV4cG9ydCBjb25zdCByZXNwb25zZVRleHREZWx0YUV2ZW50U2NoZW1hID0gei5vYmplY3Qoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgncmVzcG9uc2Uub3V0cHV0X3RleHQuZGVsdGEnKSxcbiAgICBldmVudF9pZDogei5zdHJpbmcoKSxcbiAgICBpdGVtX2lkOiB6LnN0cmluZygpLFxuICAgIGNvbnRlbnRfaW5kZXg6IHoubnVtYmVyKCksXG4gICAgZGVsdGE6IHouc3RyaW5nKCksXG4gICAgb3V0cHV0X2luZGV4OiB6Lm51bWJlcigpLFxuICAgIHJlc3BvbnNlX2lkOiB6LnN0cmluZygpLFxufSk7XG5leHBvcnQgY29uc3QgcmVzcG9uc2VUZXh0RG9uZUV2ZW50U2NoZW1hID0gei5vYmplY3Qoe1xuICAgIC8vIE5vIHJlbmFtZSBzcGVjaWZpZWQgZm9yIGRvbmU7IGtlZXAgcmVzcG9uc2UudGV4dC5kb25lXG4gICAgdHlwZTogei5saXRlcmFsKCdyZXNwb25zZS5vdXRwdXRfdGV4dC5kb25lJyksXG4gICAgZXZlbnRfaWQ6IHouc3RyaW5nKCksXG4gICAgaXRlbV9pZDogei5zdHJpbmcoKSxcbiAgICBjb250ZW50X2luZGV4OiB6Lm51bWJlcigpLFxuICAgIHRleHQ6IHouc3RyaW5nKCksXG4gICAgb3V0cHV0X2luZGV4OiB6Lm51bWJlcigpLFxuICAgIHJlc3BvbnNlX2lkOiB6LnN0cmluZygpLFxufSk7XG5leHBvcnQgY29uc3Qgc2Vzc2lvbkNyZWF0ZWRFdmVudFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ3Nlc3Npb24uY3JlYXRlZCcpLFxuICAgIGV2ZW50X2lkOiB6LnN0cmluZygpLFxuICAgIHNlc3Npb246IHouYW55KCksXG59KTtcbmV4cG9ydCBjb25zdCBzZXNzaW9uVXBkYXRlZEV2ZW50U2NoZW1hID0gei5vYmplY3Qoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgnc2Vzc2lvbi51cGRhdGVkJyksXG4gICAgZXZlbnRfaWQ6IHouc3RyaW5nKCksXG4gICAgc2Vzc2lvbjogei5hbnkoKSxcbn0pO1xuZXhwb3J0IGNvbnN0IHJlc3BvbnNlQ2FuY2VsRXZlbnRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdyZXNwb25zZS5jYW5jZWwnKSxcbiAgICBldmVudF9pZDogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAgIHJlc3BvbnNlX2lkOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG59KTtcbmV4cG9ydCBjb25zdCByZXNwb25zZUNyZWF0ZUV2ZW50U2NoZW1hID0gei5vYmplY3Qoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgncmVzcG9uc2UuY3JlYXRlJyksXG4gICAgZXZlbnRfaWQ6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICByZXNwb25zZTogei5hbnkoKS5vcHRpb25hbCgpLFxufSk7XG5leHBvcnQgY29uc3Qgc2Vzc2lvblVwZGF0ZUV2ZW50U2NoZW1hID0gei5vYmplY3Qoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgnc2Vzc2lvbi51cGRhdGUnKSxcbiAgICBldmVudF9pZDogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAgIHNlc3Npb246IHouYW55KCksXG59KTtcbmV4cG9ydCBjb25zdCBtY3BMaXN0VG9vbHNJblByb2dyZXNzRXZlbnRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdtY3BfbGlzdF90b29scy5pbl9wcm9ncmVzcycpLFxuICAgIGV2ZW50X2lkOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgaXRlbV9pZDogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxufSk7XG5leHBvcnQgY29uc3QgbWNwTGlzdFRvb2xzQ29tcGxldGVkRXZlbnRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdtY3BfbGlzdF90b29scy5jb21wbGV0ZWQnKSxcbiAgICBldmVudF9pZDogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAgIGl0ZW1faWQ6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbn0pO1xuZXhwb3J0IGNvbnN0IHJlc3BvbnNlTWNwQ2FsbEFyZ3VtZW50c0RlbHRhRXZlbnRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdyZXNwb25zZS5tY3BfY2FsbF9hcmd1bWVudHMuZGVsdGEnKSxcbiAgICBldmVudF9pZDogei5zdHJpbmcoKSxcbiAgICByZXNwb25zZV9pZDogei5zdHJpbmcoKSxcbiAgICBpdGVtX2lkOiB6LnN0cmluZygpLFxuICAgIG91dHB1dF9pbmRleDogei5udW1iZXIoKSxcbiAgICBkZWx0YTogei5zdHJpbmcoKSxcbiAgICBvYmZ1c2NhdGlvbjogei5zdHJpbmcoKSxcbn0pO1xuZXhwb3J0IGNvbnN0IHJlc3BvbnNlTWNwQ2FsbEFyZ3VtZW50c0RvbmVFdmVudFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ3Jlc3BvbnNlLm1jcF9jYWxsX2FyZ3VtZW50cy5kb25lJyksXG4gICAgZXZlbnRfaWQ6IHouc3RyaW5nKCksXG4gICAgcmVzcG9uc2VfaWQ6IHouc3RyaW5nKCksXG4gICAgaXRlbV9pZDogei5zdHJpbmcoKSxcbiAgICBvdXRwdXRfaW5kZXg6IHoubnVtYmVyKCksXG4gICAgYXJndW1lbnRzOiB6LnN0cmluZygpLFxufSk7XG5leHBvcnQgY29uc3QgcmVzcG9uc2VNY3BDYWxsSW5Qcm9ncmVzc0V2ZW50U2NoZW1hID0gei5vYmplY3Qoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgncmVzcG9uc2UubWNwX2NhbGwuaW5fcHJvZ3Jlc3MnKSxcbiAgICBldmVudF9pZDogei5zdHJpbmcoKSxcbiAgICBvdXRwdXRfaW5kZXg6IHoubnVtYmVyKCksXG4gICAgaXRlbV9pZDogei5zdHJpbmcoKSxcbn0pO1xuZXhwb3J0IGNvbnN0IHJlc3BvbnNlTWNwQ2FsbENvbXBsZXRlZEV2ZW50U2NoZW1hID0gei5vYmplY3Qoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgncmVzcG9uc2UubWNwX2NhbGwuY29tcGxldGVkJyksXG4gICAgZXZlbnRfaWQ6IHouc3RyaW5nKCksXG4gICAgb3V0cHV0X2luZGV4OiB6Lm51bWJlcigpLFxuICAgIGl0ZW1faWQ6IHouc3RyaW5nKCksXG59KTtcbmV4cG9ydCBjb25zdCBtY3BMaXN0VG9vbHNGYWlsZWRFdmVudFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ21jcF9saXN0X3Rvb2xzLmZhaWxlZCcpLFxuICAgIGV2ZW50X2lkOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgaXRlbV9pZDogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxufSk7XG4vKipcbiAqIFRoaXMgc2NoZW1hIGlzIHVzZWQgaWYgYW4gZXZlbnQgaXMgdW5rbm93biB0byB0aGUgY2xpZW50LiBUaGUgUmVhbHRpbWUgQVBJIG1pZ2h0IGludHJvZHVjZVxuICogbmV3IGV2ZW50cyBhdCBzb21lIHBvaW50IGFuZCB3ZSBzaG91bGQgaGFuZGxlIHRoZW0gZ3JhY2VmdWxseSBieSB0cmVhdGluZyB0aGVtIGFzIGdlbmVyaWMgZXZlbnRzXG4gKiBvbmx5IHJlcXVpcmluZyBhIHR5cGUgYW5kIGFuIG9wdGlvbmFsIGV2ZW50X2lkLlxuICovXG5leHBvcnQgY29uc3QgZ2VuZXJpY0V2ZW50U2NoZW1hID0gelxuICAgIC5vYmplY3Qoe1xuICAgIHR5cGU6IHouc3RyaW5nKCksXG4gICAgZXZlbnRfaWQ6IHouc3RyaW5nKCkub3B0aW9uYWwoKS5udWxsYWJsZSgpLFxufSlcbiAgICAucGFzc3Rocm91Z2goKTtcbmV4cG9ydCBjb25zdCByZWFsdGltZVNlcnZlckV2ZW50U2NoZW1hID0gei5kaXNjcmltaW5hdGVkVW5pb24oJ3R5cGUnLCBbXG4gICAgY29udmVyc2F0aW9uQ3JlYXRlZEV2ZW50U2NoZW1hLFxuICAgIGNvbnZlcnNhdGlvbkl0ZW1BZGRlZEV2ZW50U2NoZW1hLFxuICAgIGNvbnZlcnNhdGlvbkl0ZW1Eb25lRXZlbnRTY2hlbWEsXG4gICAgY29udmVyc2F0aW9uSXRlbURlbGV0ZWRFdmVudFNjaGVtYSxcbiAgICBjb252ZXJzYXRpb25JdGVtSW5wdXRBdWRpb1RyYW5zY3JpcHRpb25Db21wbGV0ZWRFdmVudFNjaGVtYSxcbiAgICBjb252ZXJzYXRpb25JdGVtSW5wdXRBdWRpb1RyYW5zY3JpcHRpb25EZWx0YUV2ZW50U2NoZW1hLFxuICAgIGNvbnZlcnNhdGlvbkl0ZW1JbnB1dEF1ZGlvVHJhbnNjcmlwdGlvbkZhaWxlZEV2ZW50U2NoZW1hLFxuICAgIGNvbnZlcnNhdGlvbkl0ZW1SZXRyaWV2ZWRFdmVudFNjaGVtYSxcbiAgICBjb252ZXJzYXRpb25JdGVtVHJ1bmNhdGVkRXZlbnRTY2hlbWEsXG4gICAgZXJyb3JFdmVudFNjaGVtYSxcbiAgICBpbnB1dEF1ZGlvQnVmZmVyQ2xlYXJlZEV2ZW50U2NoZW1hLFxuICAgIGlucHV0QXVkaW9CdWZmZXJDb21taXR0ZWRFdmVudFNjaGVtYSxcbiAgICBpbnB1dEF1ZGlvQnVmZmVyU3BlZWNoU3RhcnRlZEV2ZW50U2NoZW1hLFxuICAgIGlucHV0QXVkaW9CdWZmZXJTcGVlY2hTdG9wcGVkRXZlbnRTY2hlbWEsXG4gICAgb3V0cHV0QXVkaW9CdWZmZXJTdGFydGVkRXZlbnRTY2hlbWEsXG4gICAgb3V0cHV0QXVkaW9CdWZmZXJTdG9wcGVkRXZlbnRTY2hlbWEsXG4gICAgb3V0cHV0QXVkaW9CdWZmZXJDbGVhcmVkRXZlbnRTY2hlbWEsXG4gICAgcmF0ZUxpbWl0c1VwZGF0ZWRFdmVudFNjaGVtYSxcbiAgICByZXNwb25zZUF1ZGlvRGVsdGFFdmVudFNjaGVtYSxcbiAgICByZXNwb25zZUF1ZGlvRG9uZUV2ZW50U2NoZW1hLFxuICAgIHJlc3BvbnNlQXVkaW9UcmFuc2NyaXB0RGVsdGFFdmVudFNjaGVtYSxcbiAgICByZXNwb25zZUF1ZGlvVHJhbnNjcmlwdERvbmVFdmVudFNjaGVtYSxcbiAgICByZXNwb25zZUNvbnRlbnRQYXJ0QWRkZWRFdmVudFNjaGVtYSxcbiAgICByZXNwb25zZUNvbnRlbnRQYXJ0RG9uZUV2ZW50U2NoZW1hLFxuICAgIHJlc3BvbnNlQ3JlYXRlZEV2ZW50U2NoZW1hLFxuICAgIHJlc3BvbnNlRG9uZUV2ZW50U2NoZW1hLFxuICAgIHJlc3BvbnNlRnVuY3Rpb25DYWxsQXJndW1lbnRzRGVsdGFFdmVudFNjaGVtYSxcbiAgICByZXNwb25zZUZ1bmN0aW9uQ2FsbEFyZ3VtZW50c0RvbmVFdmVudFNjaGVtYSxcbiAgICByZXNwb25zZU91dHB1dEl0ZW1BZGRlZEV2ZW50U2NoZW1hLFxuICAgIHJlc3BvbnNlT3V0cHV0SXRlbURvbmVFdmVudFNjaGVtYSxcbiAgICByZXNwb25zZVRleHREZWx0YUV2ZW50U2NoZW1hLFxuICAgIHJlc3BvbnNlVGV4dERvbmVFdmVudFNjaGVtYSxcbiAgICBzZXNzaW9uQ3JlYXRlZEV2ZW50U2NoZW1hLFxuICAgIHNlc3Npb25VcGRhdGVkRXZlbnRTY2hlbWEsXG4gICAgbWNwTGlzdFRvb2xzSW5Qcm9ncmVzc0V2ZW50U2NoZW1hLFxuICAgIG1jcExpc3RUb29sc0NvbXBsZXRlZEV2ZW50U2NoZW1hLFxuICAgIG1jcExpc3RUb29sc0ZhaWxlZEV2ZW50U2NoZW1hLFxuICAgIHJlc3BvbnNlTWNwQ2FsbEFyZ3VtZW50c0RlbHRhRXZlbnRTY2hlbWEsXG4gICAgcmVzcG9uc2VNY3BDYWxsQXJndW1lbnRzRG9uZUV2ZW50U2NoZW1hLFxuICAgIHJlc3BvbnNlTWNwQ2FsbEluUHJvZ3Jlc3NFdmVudFNjaGVtYSxcbiAgICByZXNwb25zZU1jcENhbGxDb21wbGV0ZWRFdmVudFNjaGVtYSxcbl0pO1xuZXhwb3J0IGNvbnN0IHJlYWx0aW1lQ2xpZW50RXZlbnRTY2hlbWEgPSB6LmRpc2NyaW1pbmF0ZWRVbmlvbigndHlwZScsIFtcbiAgICBjb252ZXJzYXRpb25JdGVtQ3JlYXRlRXZlbnRTY2hlbWEsXG4gICAgY29udmVyc2F0aW9uSXRlbURlbGV0ZUV2ZW50U2NoZW1hLFxuICAgIGNvbnZlcnNhdGlvbkl0ZW1SZXRyaWV2ZUV2ZW50U2NoZW1hLFxuICAgIGNvbnZlcnNhdGlvbkl0ZW1UcnVuY2F0ZUV2ZW50U2NoZW1hLFxuICAgIGlucHV0QXVkaW9CdWZmZXJBcHBlbmRFdmVudFNjaGVtYSxcbiAgICBpbnB1dEF1ZGlvQnVmZmVyQ2xlYXJFdmVudFNjaGVtYSxcbiAgICBpbnB1dEF1ZGlvQnVmZmVyQ29tbWl0RXZlbnRTY2hlbWEsXG4gICAgcmVzcG9uc2VDYW5jZWxFdmVudFNjaGVtYSxcbiAgICByZXNwb25zZUNyZWF0ZUV2ZW50U2NoZW1hLFxuICAgIHNlc3Npb25VcGRhdGVFdmVudFNjaGVtYSxcbl0pO1xuLyoqXG4gKiBQYXJzZXMgYSByZWFsdGltZSBldmVudCBmcm9tIHRoZSBzZXJ2ZXIuIElmIHRoZSBldmVudCBpcyB1bmtub3duIHRvIHRoZSBjbGllbnQsIGl0IHdpbGwgYmUgdHJlYXRlZCBhcyBhIGdlbmVyaWMgZXZlbnQuXG4gKiBAcGFyYW0gZXZlbnQgLSBUaGUgZXZlbnQgdG8gcGFyc2UuXG4gKiBAcmV0dXJucyBUaGUgcGFyc2VkIGV2ZW50IG9yIG51bGwgaWYgdGhlIGV2ZW50IGlzIHVua25vd24gdG8gdGhlIGNsaWVudC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlUmVhbHRpbWVFdmVudChldmVudCkge1xuICAgIGNvbnN0IHJhdyA9IEpTT04ucGFyc2UoZXZlbnQuZGF0YS50b1N0cmluZygpKTtcbiAgICBjb25zdCBwYXJzZWQgPSByZWFsdGltZVNlcnZlckV2ZW50U2NoZW1hLnNhZmVQYXJzZShyYXcpO1xuICAgIGlmICghcGFyc2VkLnN1Y2Nlc3MpIHtcbiAgICAgICAgY29uc3QgZ2VuZXJpY1BhcnNlZCA9IGdlbmVyaWNFdmVudFNjaGVtYS5zYWZlUGFyc2UocmF3KTtcbiAgICAgICAgaWYgKGdlbmVyaWNQYXJzZWQuc3VjY2Vzcykge1xuICAgICAgICAgICAgcmV0dXJuIHsgZGF0YTogZ2VuZXJpY1BhcnNlZC5kYXRhLCBpc0dlbmVyaWM6IHRydWUgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBkYXRhOiBudWxsLCBpc0dlbmVyaWM6IHRydWUgfTtcbiAgICB9XG4gICAgcmV0dXJuIHsgZGF0YTogcGFyc2VkLmRhdGEsIGlzR2VuZXJpYzogZmFsc2UgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9wZW5haVJlYWx0aW1lRXZlbnRzLm1qcy5tYXAiLCJpbXBvcnQgeyBSdW50aW1lRXZlbnRFbWl0dGVyLCBVc2FnZSB9IGZyb20gJ0BvcGVuYWkvYWdlbnRzLWNvcmUnO1xuaW1wb3J0IHsgdG9OZXdTZXNzaW9uQ29uZmlnLCB9IGZyb20gXCIuL2NsaWVudE1lc3NhZ2VzLm1qc1wiO1xuaW1wb3J0IHsgcmVhbHRpbWVNY3BDYWxsQXBwcm92YWxSZXF1ZXN0SXRlbSwgcmVhbHRpbWVNY3BDYWxsSXRlbSwgcmVhbHRpbWVNZXNzYWdlSXRlbVNjaGVtYSwgcmVhbHRpbWVUb29sQ2FsbEl0ZW0sIH0gZnJvbSBcIi4vaXRlbXMubWpzXCI7XG5pbXBvcnQgbG9nZ2VyIGZyb20gXCIuL2xvZ2dlci5tanNcIjtcbmltcG9ydCB7IHBhcnNlUmVhbHRpbWVFdmVudCwgcmVzcG9uc2VEb25lRXZlbnRTY2hlbWEsIH0gZnJvbSBcIi4vb3BlbmFpUmVhbHRpbWVFdmVudHMubWpzXCI7XG5pbXBvcnQgeyBhcnJheUJ1ZmZlclRvQmFzZTY0LCBkaWZmUmVhbHRpbWVIaXN0b3J5IH0gZnJvbSBcIi4vdXRpbHMubWpzXCI7XG5pbXBvcnQgeyBFdmVudEVtaXR0ZXJEZWxlZ2F0ZSB9IGZyb20gJ0BvcGVuYWkvYWdlbnRzLWNvcmUvdXRpbHMnO1xuLyoqXG4gKiBUaGUgZGVmYXVsdCBtb2RlbCB0aGF0IGlzIHVzZWQgZHVyaW5nIHRoZSBjb25uZWN0aW9uIGlmIG5vIG1vZGVsIGlzIHByb3ZpZGVkLlxuICovXG5leHBvcnQgY29uc3QgREVGQVVMVF9PUEVOQUlfUkVBTFRJTUVfTU9ERUwgPSAnZ3B0LXJlYWx0aW1lJztcbi8qKlxuICogVGhlIGRlZmF1bHQgc2Vzc2lvbiBjb25maWcgdGhhdCBnZXRzIHNlbmQgb3ZlciBkdXJpbmcgc2Vzc2lvbiBjb25uZWN0aW9uIHVubGVzcyBvdmVycmlkZGVuXG4gKiBieSB0aGUgdXNlci5cbiAqL1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfT1BFTkFJX1JFQUxUSU1FX1NFU1NJT05fQ09ORklHID0ge1xuICAgIG91dHB1dE1vZGFsaXRpZXM6IFsnYXVkaW8nXSxcbiAgICBhdWRpbzoge1xuICAgICAgICBpbnB1dDoge1xuICAgICAgICAgICAgZm9ybWF0OiB7IHR5cGU6ICdhdWRpby9wY20nLCByYXRlOiAyNDAwMCB9LFxuICAgICAgICAgICAgdHJhbnNjcmlwdGlvbjogeyBtb2RlbDogJ2dwdC00by1taW5pLXRyYW5zY3JpYmUnIH0sXG4gICAgICAgICAgICB0dXJuRGV0ZWN0aW9uOiB7IHR5cGU6ICdzZW1hbnRpY192YWQnIH0sXG4gICAgICAgICAgICBub2lzZVJlZHVjdGlvbjogbnVsbCxcbiAgICAgICAgfSxcbiAgICAgICAgb3V0cHV0OiB7XG4gICAgICAgICAgICBmb3JtYXQ6IHsgdHlwZTogJ2F1ZGlvL3BjbScsIHJhdGU6IDI0MDAwIH0sXG4gICAgICAgICAgICBzcGVlZDogMSxcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmV4cG9ydCBjbGFzcyBPcGVuQUlSZWFsdGltZUJhc2UgZXh0ZW5kcyBFdmVudEVtaXR0ZXJEZWxlZ2F0ZSB7XG4gICAgI21vZGVsO1xuICAgICNhcGlLZXk7XG4gICAgI3RyYWNpbmdDb25maWcgPSBudWxsO1xuICAgICNyYXdTZXNzaW9uQ29uZmlnID0gbnVsbDtcbiAgICBldmVudEVtaXR0ZXIgPSBuZXcgUnVudGltZUV2ZW50RW1pdHRlcigpO1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLiNtb2RlbCA9IG9wdGlvbnMubW9kZWwgPz8gREVGQVVMVF9PUEVOQUlfUkVBTFRJTUVfTU9ERUw7XG4gICAgICAgIHRoaXMuI2FwaUtleSA9IG9wdGlvbnMuYXBpS2V5O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgY3VycmVudCBtb2RlbCB0aGF0IGlzIGJlaW5nIHVzZWQgYnkgdGhlIHRyYW5zcG9ydCBsYXllci5cbiAgICAgKi9cbiAgICBnZXQgY3VycmVudE1vZGVsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jbW9kZWw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBjdXJyZW50IG1vZGVsIHRoYXQgaXMgYmVpbmcgdXNlZCBieSB0aGUgdHJhbnNwb3J0IGxheWVyLlxuICAgICAqICoqTm90ZSoqOiBUaGUgbW9kZWwgY2Fubm90IGJlIGNoYW5nZWQgbWlkIGNvbnZlcnNhdGlvbi5cbiAgICAgKi9cbiAgICBzZXQgY3VycmVudE1vZGVsKG1vZGVsKSB7XG4gICAgICAgIHRoaXMuI21vZGVsID0gbW9kZWw7XG4gICAgfVxuICAgIGdldCBfcmF3U2Vzc2lvbkNvbmZpZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI3Jhd1Nlc3Npb25Db25maWcgPz8gbnVsbDtcbiAgICB9XG4gICAgYXN5bmMgX2dldEFwaUtleShvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGFwaUtleSA9IG9wdGlvbnMuYXBpS2V5ID8/IHRoaXMuI2FwaUtleTtcbiAgICAgICAgaWYgKHR5cGVvZiBhcGlLZXkgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBhcGlLZXkoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXBpS2V5O1xuICAgIH1cbiAgICBfb25NZXNzYWdlKGV2ZW50KSB7XG4gICAgICAgIGNvbnN0IHsgZGF0YTogcGFyc2VkLCBpc0dlbmVyaWMgfSA9IHBhcnNlUmVhbHRpbWVFdmVudChldmVudCk7XG4gICAgICAgIGlmIChwYXJzZWQgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVtaXQoJyonLCBwYXJzZWQpO1xuICAgICAgICBpZiAoaXNHZW5lcmljKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcnNlZC50eXBlID09PSAnZXJyb3InKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXQoJ2Vycm9yJywgeyB0eXBlOiAnZXJyb3InLCBlcnJvcjogcGFyc2VkIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5lbWl0KHBhcnNlZC50eXBlLCBwYXJzZWQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJzZWQudHlwZSA9PT0gJ3Jlc3BvbnNlLmNyZWF0ZWQnKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXQoJ3R1cm5fc3RhcnRlZCcsIHtcbiAgICAgICAgICAgICAgICB0eXBlOiAncmVzcG9uc2Vfc3RhcnRlZCcsXG4gICAgICAgICAgICAgICAgcHJvdmlkZXJEYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIC4uLnBhcnNlZCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcnNlZC50eXBlID09PSAnc2Vzc2lvbi51cGRhdGVkJykge1xuICAgICAgICAgICAgdGhpcy4jcmF3U2Vzc2lvbkNvbmZpZyA9IHBhcnNlZC5zZXNzaW9uO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJzZWQudHlwZSA9PT0gJ3Jlc3BvbnNlLmRvbmUnKSB7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHJlc3BvbnNlRG9uZUV2ZW50U2NoZW1hLnNhZmVQYXJzZShwYXJzZWQpO1xuICAgICAgICAgICAgaWYgKCFyZXNwb25zZS5zdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKCdFcnJvciBwYXJzaW5nIHJlc3BvbnNlIGRvbmUgZXZlbnQnLCByZXNwb25zZS5lcnJvcik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgaW5wdXRUb2tlbnMgPSByZXNwb25zZS5kYXRhLnJlc3BvbnNlLnVzYWdlPy5pbnB1dF90b2tlbnMgPz8gMDtcbiAgICAgICAgICAgIGNvbnN0IG91dHB1dFRva2VucyA9IHJlc3BvbnNlLmRhdGEucmVzcG9uc2UudXNhZ2U/Lm91dHB1dF90b2tlbnMgPz8gMDtcbiAgICAgICAgICAgIGNvbnN0IHRvdGFsVG9rZW5zID0gaW5wdXRUb2tlbnMgKyBvdXRwdXRUb2tlbnM7XG4gICAgICAgICAgICBjb25zdCB1c2FnZSA9IG5ldyBVc2FnZSh7XG4gICAgICAgICAgICAgICAgaW5wdXRUb2tlbnMsXG4gICAgICAgICAgICAgICAgaW5wdXRUb2tlbnNEZXRhaWxzOiByZXNwb25zZS5kYXRhLnJlc3BvbnNlLnVzYWdlPy5pbnB1dF90b2tlbl9kZXRhaWxzID8/IHt9LFxuICAgICAgICAgICAgICAgIG91dHB1dFRva2VucyxcbiAgICAgICAgICAgICAgICBvdXRwdXRUb2tlbnNEZXRhaWxzOiByZXNwb25zZS5kYXRhLnJlc3BvbnNlLnVzYWdlPy5vdXRwdXRfdG9rZW5fZGV0YWlscyA/PyB7fSxcbiAgICAgICAgICAgICAgICB0b3RhbFRva2VucyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5lbWl0KCd1c2FnZV91cGRhdGUnLCB1c2FnZSk7XG4gICAgICAgICAgICB0aGlzLmVtaXQoJ3R1cm5fZG9uZScsIHtcbiAgICAgICAgICAgICAgICB0eXBlOiAncmVzcG9uc2VfZG9uZScsXG4gICAgICAgICAgICAgICAgcmVzcG9uc2U6IHtcbiAgICAgICAgICAgICAgICAgICAgaWQ6IHJlc3BvbnNlLmRhdGEucmVzcG9uc2UuaWQgPz8gJycsXG4gICAgICAgICAgICAgICAgICAgIG91dHB1dDogcmVzcG9uc2UuZGF0YS5yZXNwb25zZS5vdXRwdXQgPz8gW10sXG4gICAgICAgICAgICAgICAgICAgIHVzYWdlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dFRva2VucyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0VG9rZW5zRGV0YWlsczogcmVzcG9uc2UuZGF0YS5yZXNwb25zZS51c2FnZT8uaW5wdXRfdG9rZW5fZGV0YWlscyA/PyB7fSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dFRva2VucyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dFRva2Vuc0RldGFpbHM6IHJlc3BvbnNlLmRhdGEucmVzcG9uc2UudXNhZ2U/Lm91dHB1dF90b2tlbl9kZXRhaWxzID8/IHt9LFxuICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxUb2tlbnMsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJzZWQudHlwZSA9PT0gJ3Jlc3BvbnNlLm91dHB1dF9hdWRpby5kb25lJykge1xuICAgICAgICAgICAgdGhpcy5lbWl0KCdhdWRpb19kb25lJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcnNlZC50eXBlID09PSAnY29udmVyc2F0aW9uLml0ZW0uZGVsZXRlZCcpIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdCgnaXRlbV9kZWxldGVkJywge1xuICAgICAgICAgICAgICAgIGl0ZW1JZDogcGFyc2VkLml0ZW1faWQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFyc2VkLnR5cGUgPT09ICdjb252ZXJzYXRpb24uaXRlbS5pbnB1dF9hdWRpb190cmFuc2NyaXB0aW9uLmNvbXBsZXRlZCcgfHxcbiAgICAgICAgICAgIHBhcnNlZC50eXBlID09PSAnY29udmVyc2F0aW9uLml0ZW0udHJ1bmNhdGVkJykge1xuICAgICAgICAgICAgLy8gcmlnaHQgbm93IHJhdGhlciB0aGFuIGtlZXBpbmcgdHJhY2sgb2YgcGFydGlhbHMgYW5kIHJlYnVpbGRpbmcgdGhlIGl0ZW0gd2VcbiAgICAgICAgICAgIC8vIHdpbGwgcmV0cmlldmUgaXQgaW5zdGVhZCB3aGljaCB0cmlnZ2VycyB0aGUgYGNvbnZlcnNhdGlvbi5pdGVtLnJldHJpZXZlZGAgZXZlbnQgYmVsb3dcbiAgICAgICAgICAgIHRoaXMuc2VuZEV2ZW50KHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnY29udmVyc2F0aW9uLml0ZW0ucmV0cmlldmUnLFxuICAgICAgICAgICAgICAgIGl0ZW1faWQ6IHBhcnNlZC5pdGVtX2lkLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcnNlZC50eXBlID09PSAnY29udmVyc2F0aW9uLml0ZW0uaW5wdXRfYXVkaW9fdHJhbnNjcmlwdGlvbi5kZWx0YScgfHxcbiAgICAgICAgICAgIHBhcnNlZC50eXBlID09PSAncmVzcG9uc2Uub3V0cHV0X3RleHQuZGVsdGEnIHx8XG4gICAgICAgICAgICBwYXJzZWQudHlwZSA9PT0gJ3Jlc3BvbnNlLm91dHB1dF9hdWRpb190cmFuc2NyaXB0LmRlbHRhJyB8fFxuICAgICAgICAgICAgcGFyc2VkLnR5cGUgPT09ICdyZXNwb25zZS5mdW5jdGlvbl9jYWxsX2FyZ3VtZW50cy5kZWx0YScpIHtcbiAgICAgICAgICAgIGlmIChwYXJzZWQudHlwZSA9PT0gJ3Jlc3BvbnNlLm91dHB1dF9hdWRpb190cmFuc2NyaXB0LmRlbHRhJykge1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnYXVkaW9fdHJhbnNjcmlwdF9kZWx0YScsIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3RyYW5zY3JpcHRfZGVsdGEnLFxuICAgICAgICAgICAgICAgICAgICBkZWx0YTogcGFyc2VkLmRlbHRhLFxuICAgICAgICAgICAgICAgICAgICBpdGVtSWQ6IHBhcnNlZC5pdGVtX2lkLFxuICAgICAgICAgICAgICAgICAgICByZXNwb25zZUlkOiBwYXJzZWQucmVzcG9uc2VfaWQsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBubyBzdXBwb3J0IGZvciBwYXJ0aWFsIHRyYW5zY3JpcHRzIHlldC5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFyc2VkLnR5cGUgPT09ICdjb252ZXJzYXRpb24uaXRlbS5hZGRlZCcgfHxcbiAgICAgICAgICAgIHBhcnNlZC50eXBlID09PSAnY29udmVyc2F0aW9uLml0ZW0uZG9uZScgfHxcbiAgICAgICAgICAgIHBhcnNlZC50eXBlID09PSAnY29udmVyc2F0aW9uLml0ZW0ucmV0cmlldmVkJykge1xuICAgICAgICAgICAgLy8gSGFuZGxlIE1DUCBsaXN0IHRvb2xzIGl0ZW1zIChvbmx5IGFjdCB3aGVuIGRvbmUgdG8gZW5zdXJlIHRvb2xzIGFyZSBwcmVzZW50KVxuICAgICAgICAgICAgaWYgKHBhcnNlZC5pdGVtLnR5cGUgPT09ICdtY3BfbGlzdF90b29scycgJiZcbiAgICAgICAgICAgICAgICBwYXJzZWQudHlwZSA9PT0gJ2NvbnZlcnNhdGlvbi5pdGVtLmRvbmUnKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2VydmVyTGFiZWwgPSBwYXJzZWQuaXRlbS5zZXJ2ZXJfbGFiZWwgPz8gJyc7XG4gICAgICAgICAgICAgICAgY29uc3QgdG9vbHMgPSAocGFyc2VkLml0ZW0udG9vbHMgPz8gW10pO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnbWNwX3Rvb2xzX2xpc3RlZCcsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZlckxhYmVsLFxuICAgICAgICAgICAgICAgICAgICAgICAgdG9vbHMsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcignRXJyb3IgZW1pdHRpbmcgbWNwX3Rvb2xzX2xpc3RlZCcsIGVyciwgcGFyc2VkLml0ZW0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBXZSBkbyBub3QgYWRkIHRoaXMgaXRlbSB0byBoaXN0b3J5OyBpdCdzIGEgdHJhbnNwb3J0LWxldmVsIHNpZGUtY2hhbm5lbC5cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocGFyc2VkLml0ZW0udHlwZSA9PT0gJ21lc3NhZ2UnKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJldmlvdXNJdGVtSWQgPSBwYXJzZWQudHlwZSA9PT0gJ2NvbnZlcnNhdGlvbi5pdGVtLmFkZGVkJyB8fFxuICAgICAgICAgICAgICAgICAgICBwYXJzZWQudHlwZSA9PT0gJ2NvbnZlcnNhdGlvbi5pdGVtLmRvbmUnXG4gICAgICAgICAgICAgICAgICAgID8gcGFyc2VkLnByZXZpb3VzX2l0ZW1faWRcbiAgICAgICAgICAgICAgICAgICAgOiBudWxsO1xuICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSByZWFsdGltZU1lc3NhZ2VJdGVtU2NoZW1hLnBhcnNlKHtcbiAgICAgICAgICAgICAgICAgICAgaXRlbUlkOiBwYXJzZWQuaXRlbS5pZCxcbiAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNJdGVtSWQsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IHBhcnNlZC5pdGVtLnR5cGUsXG4gICAgICAgICAgICAgICAgICAgIHJvbGU6IHBhcnNlZC5pdGVtLnJvbGUsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IHBhcnNlZC5pdGVtLmNvbnRlbnQsXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1czogcGFyc2VkLml0ZW0uc3RhdHVzLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnaXRlbV91cGRhdGUnLCBpdGVtKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocGFyc2VkLml0ZW0udHlwZSA9PT0gJ21jcF9hcHByb3ZhbF9yZXF1ZXN0JyAmJlxuICAgICAgICAgICAgICAgIHBhcnNlZC50eXBlID09PSAnY29udmVyc2F0aW9uLml0ZW0uZG9uZScpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBpdGVtID0gcGFyc2VkLml0ZW07XG4gICAgICAgICAgICAgICAgY29uc3QgbWNwQXBwcm92YWxSZXF1ZXN0ID0gcmVhbHRpbWVNY3BDYWxsQXBwcm92YWxSZXF1ZXN0SXRlbS5wYXJzZSh7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW1JZDogaXRlbS5pZCxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogaXRlbS50eXBlLFxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJMYWJlbDogaXRlbS5zZXJ2ZXJfbGFiZWwsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IGl0ZW0ubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgYXJndW1lbnRzOiBKU09OLnBhcnNlKGl0ZW0uYXJndW1lbnRzIHx8ICd7fScpLFxuICAgICAgICAgICAgICAgICAgICBhcHByb3ZlZDogaXRlbS5hcHByb3ZlZCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ2l0ZW1fdXBkYXRlJywgbWNwQXBwcm92YWxSZXF1ZXN0KTtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ21jcF9hcHByb3ZhbF9yZXF1ZXN0JywgbWNwQXBwcm92YWxSZXF1ZXN0KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocGFyc2VkLml0ZW0udHlwZSA9PT0gJ21jcF90b29sX2NhbGwnIHx8XG4gICAgICAgICAgICAgICAgcGFyc2VkLml0ZW0udHlwZSA9PT0gJ21jcF9jYWxsJykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXR1cyA9IHBhcnNlZC50eXBlID09PSAnY29udmVyc2F0aW9uLml0ZW0uZG9uZSdcbiAgICAgICAgICAgICAgICAgICAgPyAnY29tcGxldGVkJ1xuICAgICAgICAgICAgICAgICAgICA6ICdpbl9wcm9ncmVzcyc7XG4gICAgICAgICAgICAgICAgY29uc3QgbWNwQ2FsbCA9IHJlYWx0aW1lTWNwQ2FsbEl0ZW0ucGFyc2Uoe1xuICAgICAgICAgICAgICAgICAgICBpdGVtSWQ6IHBhcnNlZC5pdGVtLmlkLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBwYXJzZWQuaXRlbS50eXBlLFxuICAgICAgICAgICAgICAgICAgICBzdGF0dXMsXG4gICAgICAgICAgICAgICAgICAgIGFyZ3VtZW50czogcGFyc2VkLml0ZW0uYXJndW1lbnRzLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBwYXJzZWQuaXRlbS5uYW1lLFxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQ6IHBhcnNlZC5pdGVtLm91dHB1dCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ2l0ZW1fdXBkYXRlJywgbWNwQ2FsbCk7XG4gICAgICAgICAgICAgICAgaWYgKHBhcnNlZC50eXBlID09PSAnY29udmVyc2F0aW9uLml0ZW0uZG9uZScpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdtY3BfdG9vbF9jYWxsX2NvbXBsZXRlZCcsIG1jcENhbGwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcnNlZC50eXBlID09PSAncmVzcG9uc2UubWNwX2NhbGwuaW5fcHJvZ3Jlc3MnKSB7XG4gICAgICAgICAgICBjb25zdCBpdGVtID0gcGFyc2VkO1xuICAgICAgICAgICAgdGhpcy5zZW5kRXZlbnQoe1xuICAgICAgICAgICAgICAgIHR5cGU6ICdjb252ZXJzYXRpb24uaXRlbS5yZXRyaWV2ZScsXG4gICAgICAgICAgICAgICAgaXRlbV9pZDogaXRlbS5pdGVtX2lkLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcnNlZC50eXBlID09PSAnbWNwX2xpc3RfdG9vbHMuaW5fcHJvZ3Jlc3MnKSB7XG4gICAgICAgICAgICBjb25zdCBpdGVtID0gcGFyc2VkO1xuICAgICAgICAgICAgaWYgKGl0ZW0uaXRlbV9pZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2VuZEV2ZW50KHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2NvbnZlcnNhdGlvbi5pdGVtLnJldHJpZXZlJyxcbiAgICAgICAgICAgICAgICAgICAgaXRlbV9pZDogaXRlbS5pdGVtX2lkLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJzZWQudHlwZSA9PT0gJ3Jlc3BvbnNlLm91dHB1dF9pdGVtLmRvbmUnIHx8XG4gICAgICAgICAgICBwYXJzZWQudHlwZSA9PT0gJ3Jlc3BvbnNlLm91dHB1dF9pdGVtLmFkZGVkJykge1xuICAgICAgICAgICAgY29uc3QgaXRlbSA9IHBhcnNlZC5pdGVtO1xuICAgICAgICAgICAgaWYgKGl0ZW0udHlwZSA9PT0gJ2Z1bmN0aW9uX2NhbGwnICYmIGl0ZW0uc3RhdHVzID09PSAnY29tcGxldGVkJykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRvb2xDYWxsID0gcmVhbHRpbWVUb29sQ2FsbEl0ZW0ucGFyc2Uoe1xuICAgICAgICAgICAgICAgICAgICBpdGVtSWQ6IGl0ZW0uaWQsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IGl0ZW0udHlwZSxcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiAnaW5fcHJvZ3Jlc3MnLCAvLyB3ZSBzZXQgaXQgdG8gaW5fcHJvZ3Jlc3MgZm9yIHRoZSBVSSBhcyBpdCB3aWxsIG9ubHkgYmUgY29tcGxldGVkIHdpdGggdGhlIG91dHB1dFxuICAgICAgICAgICAgICAgICAgICBhcmd1bWVudHM6IGl0ZW0uYXJndW1lbnRzLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBpdGVtLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIG91dHB1dDogbnVsbCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ2l0ZW1fdXBkYXRlJywgdG9vbENhbGwpO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnZnVuY3Rpb25fY2FsbCcsIHtcbiAgICAgICAgICAgICAgICAgICAgaWQ6IGl0ZW0uaWQsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdmdW5jdGlvbl9jYWxsJyxcbiAgICAgICAgICAgICAgICAgICAgY2FsbElkOiBpdGVtLmNhbGxfaWQgPz8gJycsXG4gICAgICAgICAgICAgICAgICAgIGFyZ3VtZW50czogaXRlbS5hcmd1bWVudHMgPz8gJycsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IGl0ZW0ubmFtZSA/PyAnJyxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXRlbS50eXBlID09PSAnbWNwX3Rvb2xfY2FsbCcgfHwgaXRlbS50eXBlID09PSAnbWNwX2NhbGwnKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWNwQ2FsbCA9IHJlYWx0aW1lTWNwQ2FsbEl0ZW0ucGFyc2Uoe1xuICAgICAgICAgICAgICAgICAgICBpdGVtSWQ6IGl0ZW0uaWQsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IGl0ZW0udHlwZSxcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiBwYXJzZWQudHlwZSA9PT0gJ3Jlc3BvbnNlLm91dHB1dF9pdGVtLmRvbmUnXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICdjb21wbGV0ZWQnXG4gICAgICAgICAgICAgICAgICAgICAgICA6ICdpbl9wcm9ncmVzcycsIC8vIHdlIHNldCBpdCB0byBpbl9wcm9ncmVzcyBmb3IgdGhlIFVJIGFzIGl0IHdpbGwgb25seSBiZSBjb21wbGV0ZWQgd2l0aCB0aGUgb3V0cHV0XG4gICAgICAgICAgICAgICAgICAgIGFyZ3VtZW50czogaXRlbS5hcmd1bWVudHMsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IGl0ZW0ubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0OiBpdGVtLm91dHB1dCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ2l0ZW1fdXBkYXRlJywgbWNwQ2FsbCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGl0ZW0udHlwZSA9PT0gJ21lc3NhZ2UnKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVhbHRpbWVJdGVtID0gcmVhbHRpbWVNZXNzYWdlSXRlbVNjaGVtYS5wYXJzZSh7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW1JZDogcGFyc2VkLml0ZW0uaWQsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IHBhcnNlZC5pdGVtLnR5cGUsXG4gICAgICAgICAgICAgICAgICAgIHJvbGU6IHBhcnNlZC5pdGVtLnJvbGUsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IHBhcnNlZC5pdGVtLmNvbnRlbnQsXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1czogcGFyc2VkLnR5cGUgPT09ICdyZXNwb25zZS5vdXRwdXRfaXRlbS5kb25lJ1xuICAgICAgICAgICAgICAgICAgICAgICAgPyAoaXRlbS5zdGF0dXMgPz8gJ2NvbXBsZXRlZCcpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IChpdGVtLnN0YXR1cyA/PyAnaW5fcHJvZ3Jlc3MnKSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ2l0ZW1fdXBkYXRlJywgcmVhbHRpbWVJdGVtKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgX29uRXJyb3IoZXJyb3IpIHtcbiAgICAgICAgdGhpcy5lbWl0KCdlcnJvcicsIHtcbiAgICAgICAgICAgIHR5cGU6ICdlcnJvcicsXG4gICAgICAgICAgICBlcnJvcixcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIF9vbk9wZW4oKSB7XG4gICAgICAgIHRoaXMuZW1pdCgnY29ubmVjdGVkJyk7XG4gICAgfVxuICAgIF9vbkNsb3NlKCkge1xuICAgICAgICB0aGlzLmVtaXQoJ2Rpc2Nvbm5lY3RlZCcpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZW5kIGEgbWVzc2FnZSB0byB0aGUgUmVhbHRpbWUgQVBJLiBUaGlzIHdpbGwgY3JlYXRlIGEgbmV3IGl0ZW0gaW4gdGhlIGNvbnZlcnNhdGlvbiBhbmRcbiAgICAgKiB0cmlnZ2VyIGEgcmVzcG9uc2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbWVzc2FnZSAtIFRoZSBtZXNzYWdlIHRvIHNlbmQuXG4gICAgICogQHBhcmFtIG90aGVyRXZlbnREYXRhIC0gQWRkaXRpb25hbCBldmVudCBkYXRhIHRvIHNlbmQuXG4gICAgICovXG4gICAgc2VuZE1lc3NhZ2UobWVzc2FnZSwgb3RoZXJFdmVudERhdGEsIHsgdHJpZ2dlclJlc3BvbnNlID0gdHJ1ZSB9ID0ge30pIHtcbiAgICAgICAgY29uc3QgY29udGVudCA9IHR5cGVvZiBtZXNzYWdlID09PSAnc3RyaW5nJ1xuICAgICAgICAgICAgPyBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnaW5wdXRfdGV4dCcsXG4gICAgICAgICAgICAgICAgICAgIHRleHQ6IG1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF1cbiAgICAgICAgICAgIDogbWVzc2FnZS5jb250ZW50Lm1hcCgoY29udGVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChjb250ZW50LnR5cGUgPT09ICdpbnB1dF9pbWFnZScpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdpbnB1dF9pbWFnZScsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbWFnZV91cmw6IGNvbnRlbnQuaW1hZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi4oY29udGVudC5wcm92aWRlckRhdGEgPz8ge30pLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gY29udGVudDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB0aGlzLnNlbmRFdmVudCh7XG4gICAgICAgICAgICB0eXBlOiAnY29udmVyc2F0aW9uLml0ZW0uY3JlYXRlJyxcbiAgICAgICAgICAgIGl0ZW06IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnbWVzc2FnZScsXG4gICAgICAgICAgICAgICAgcm9sZTogJ3VzZXInLFxuICAgICAgICAgICAgICAgIGNvbnRlbnQsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLi4ub3RoZXJFdmVudERhdGEsXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAodHJpZ2dlclJlc3BvbnNlKSB7XG4gICAgICAgICAgICB0aGlzLnNlbmRFdmVudCh7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3Jlc3BvbnNlLmNyZWF0ZScsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhZGRJbWFnZShpbWFnZSwgeyB0cmlnZ2VyUmVzcG9uc2UgPSB0cnVlIH0gPSB7fSkge1xuICAgICAgICB0aGlzLnNlbmRNZXNzYWdlKHtcbiAgICAgICAgICAgIHR5cGU6ICdtZXNzYWdlJyxcbiAgICAgICAgICAgIHJvbGU6ICd1c2VyJyxcbiAgICAgICAgICAgIGNvbnRlbnQ6IFt7IHR5cGU6ICdpbnB1dF9pbWFnZScsIGltYWdlIH1dLFxuICAgICAgICB9LCB7fSwgeyB0cmlnZ2VyUmVzcG9uc2UgfSk7XG4gICAgfVxuICAgIF9nZXRNZXJnZWRTZXNzaW9uQ29uZmlnKGNvbmZpZykge1xuICAgICAgICBjb25zdCBuZXdDb25maWcgPSB0b05ld1Nlc3Npb25Db25maWcoY29uZmlnKTtcbiAgICAgICAgY29uc3Qgc2Vzc2lvbkRhdGEgPSB7XG4gICAgICAgICAgICB0eXBlOiAncmVhbHRpbWUnLFxuICAgICAgICAgICAgaW5zdHJ1Y3Rpb25zOiBuZXdDb25maWcuaW5zdHJ1Y3Rpb25zLFxuICAgICAgICAgICAgbW9kZWw6IG5ld0NvbmZpZy5tb2RlbCA/PyB0aGlzLiNtb2RlbCxcbiAgICAgICAgICAgIG91dHB1dF9tb2RhbGl0aWVzOiBuZXdDb25maWcub3V0cHV0TW9kYWxpdGllcyA/P1xuICAgICAgICAgICAgICAgIERFRkFVTFRfT1BFTkFJX1JFQUxUSU1FX1NFU1NJT05fQ09ORklHLm91dHB1dE1vZGFsaXRpZXMsXG4gICAgICAgICAgICBhdWRpbzoge1xuICAgICAgICAgICAgICAgIGlucHV0OiB7XG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdDogbmV3Q29uZmlnLmF1ZGlvPy5pbnB1dD8uZm9ybWF0ID8/XG4gICAgICAgICAgICAgICAgICAgICAgICBERUZBVUxUX09QRU5BSV9SRUFMVElNRV9TRVNTSU9OX0NPTkZJRy5hdWRpbz8uaW5wdXQ/LmZvcm1hdCxcbiAgICAgICAgICAgICAgICAgICAgbm9pc2VfcmVkdWN0aW9uOiBuZXdDb25maWcuYXVkaW8/LmlucHV0Py5ub2lzZVJlZHVjdGlvbiA/P1xuICAgICAgICAgICAgICAgICAgICAgICAgREVGQVVMVF9PUEVOQUlfUkVBTFRJTUVfU0VTU0lPTl9DT05GSUcuYXVkaW8/LmlucHV0Py5ub2lzZVJlZHVjdGlvbixcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNjcmlwdGlvbjogbmV3Q29uZmlnLmF1ZGlvPy5pbnB1dD8udHJhbnNjcmlwdGlvbiA/P1xuICAgICAgICAgICAgICAgICAgICAgICAgREVGQVVMVF9PUEVOQUlfUkVBTFRJTUVfU0VTU0lPTl9DT05GSUcuYXVkaW8/LmlucHV0Py50cmFuc2NyaXB0aW9uLFxuICAgICAgICAgICAgICAgICAgICB0dXJuX2RldGVjdGlvbjogT3BlbkFJUmVhbHRpbWVCYXNlLmJ1aWxkVHVybkRldGVjdGlvbkNvbmZpZyhuZXdDb25maWcuYXVkaW8/LmlucHV0Py50dXJuRGV0ZWN0aW9uKSA/P1xuICAgICAgICAgICAgICAgICAgICAgICAgREVGQVVMVF9PUEVOQUlfUkVBTFRJTUVfU0VTU0lPTl9DT05GSUcuYXVkaW8/LmlucHV0Py50dXJuRGV0ZWN0aW9uLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb3V0cHV0OiB7XG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdDogbmV3Q29uZmlnLmF1ZGlvPy5vdXRwdXQ/LmZvcm1hdCA/P1xuICAgICAgICAgICAgICAgICAgICAgICAgREVGQVVMVF9PUEVOQUlfUkVBTFRJTUVfU0VTU0lPTl9DT05GSUcuYXVkaW8/Lm91dHB1dD8uZm9ybWF0LFxuICAgICAgICAgICAgICAgICAgICB2b2ljZTogbmV3Q29uZmlnLmF1ZGlvPy5vdXRwdXQ/LnZvaWNlID8/XG4gICAgICAgICAgICAgICAgICAgICAgICBERUZBVUxUX09QRU5BSV9SRUFMVElNRV9TRVNTSU9OX0NPTkZJRy5hdWRpbz8ub3V0cHV0Py52b2ljZSxcbiAgICAgICAgICAgICAgICAgICAgc3BlZWQ6IG5ld0NvbmZpZy5hdWRpbz8ub3V0cHV0Py5zcGVlZCA/P1xuICAgICAgICAgICAgICAgICAgICAgICAgREVGQVVMVF9PUEVOQUlfUkVBTFRJTUVfU0VTU0lPTl9DT05GSUcuYXVkaW8/Lm91dHB1dD8uc3BlZWQsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0b29sX2Nob2ljZTogbmV3Q29uZmlnLnRvb2xDaG9pY2UgPz9cbiAgICAgICAgICAgICAgICBERUZBVUxUX09QRU5BSV9SRUFMVElNRV9TRVNTSU9OX0NPTkZJRy50b29sQ2hvaWNlLFxuICAgICAgICAgICAgLy8gV2UgZG9uJ3Qgc2V0IHRyYWNpbmcgaGVyZSB0byBtYWtlIHN1cmUgdGhhdCB3ZSBkb24ndCB0cnkgdG8gb3ZlcnJpZGUgaXQgb24gZXZlcnlcbiAgICAgICAgICAgIC8vIHNlc3Npb24udXBkYXRlIGFzIGl0IG1pZ2h0IGxlYWQgdG8gZXJyb3JzXG4gICAgICAgICAgICAuLi4obmV3Q29uZmlnLnByb3ZpZGVyRGF0YSA/PyB7fSksXG4gICAgICAgIH07XG4gICAgICAgIGlmIChuZXdDb25maWcucHJvbXB0KSB7XG4gICAgICAgICAgICBzZXNzaW9uRGF0YS5wcm9tcHQgPSB7XG4gICAgICAgICAgICAgICAgaWQ6IG5ld0NvbmZpZy5wcm9tcHQucHJvbXB0SWQsXG4gICAgICAgICAgICAgICAgdmVyc2lvbjogbmV3Q29uZmlnLnByb21wdC52ZXJzaW9uLFxuICAgICAgICAgICAgICAgIHZhcmlhYmxlczogbmV3Q29uZmlnLnByb21wdC52YXJpYWJsZXMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChuZXdDb25maWcudG9vbHMgJiYgbmV3Q29uZmlnLnRvb2xzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHNlc3Npb25EYXRhLnRvb2xzID0gbmV3Q29uZmlnLnRvb2xzLm1hcCgodG9vbCkgPT4gKHtcbiAgICAgICAgICAgICAgICAuLi50b29sLFxuICAgICAgICAgICAgICAgIHN0cmljdDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZXNzaW9uRGF0YTtcbiAgICB9XG4gICAgc3RhdGljIGJ1aWxkVHVybkRldGVjdGlvbkNvbmZpZyhjKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyB0eXBlLCBjcmVhdGVSZXNwb25zZSwgY3JlYXRlX3Jlc3BvbnNlLCBlYWdlcm5lc3MsIGludGVycnVwdFJlc3BvbnNlLCBpbnRlcnJ1cHRfcmVzcG9uc2UsIHByZWZpeFBhZGRpbmdNcywgcHJlZml4X3BhZGRpbmdfbXMsIHNpbGVuY2VEdXJhdGlvbk1zLCBzaWxlbmNlX2R1cmF0aW9uX21zLCB0aHJlc2hvbGQsIGlkbGVUaW1lb3V0TXMsIGlkbGVfdGltZW91dF9tcywgLi4ucmVzdCB9ID0gYztcbiAgICAgICAgY29uc3QgY29uZmlnID0ge1xuICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgIGNyZWF0ZV9yZXNwb25zZTogY3JlYXRlUmVzcG9uc2UgPyBjcmVhdGVSZXNwb25zZSA6IGNyZWF0ZV9yZXNwb25zZSxcbiAgICAgICAgICAgIGVhZ2VybmVzcyxcbiAgICAgICAgICAgIGludGVycnVwdF9yZXNwb25zZTogaW50ZXJydXB0UmVzcG9uc2VcbiAgICAgICAgICAgICAgICA/IGludGVycnVwdFJlc3BvbnNlXG4gICAgICAgICAgICAgICAgOiBpbnRlcnJ1cHRfcmVzcG9uc2UsXG4gICAgICAgICAgICBwcmVmaXhfcGFkZGluZ19tczogcHJlZml4UGFkZGluZ01zID8gcHJlZml4UGFkZGluZ01zIDogcHJlZml4X3BhZGRpbmdfbXMsXG4gICAgICAgICAgICBzaWxlbmNlX2R1cmF0aW9uX21zOiBzaWxlbmNlRHVyYXRpb25Nc1xuICAgICAgICAgICAgICAgID8gc2lsZW5jZUR1cmF0aW9uTXNcbiAgICAgICAgICAgICAgICA6IHNpbGVuY2VfZHVyYXRpb25fbXMsXG4gICAgICAgICAgICBpZGxlX3RpbWVvdXRfbXM6IGlkbGVUaW1lb3V0TXMgPyBpZGxlVGltZW91dE1zIDogaWRsZV90aW1lb3V0X21zLFxuICAgICAgICAgICAgdGhyZXNob2xkLFxuICAgICAgICAgICAgLi4ucmVzdCxcbiAgICAgICAgfTtcbiAgICAgICAgLy8gUmVtb3ZlIHVuZGVmaW5lZCB2YWx1ZXMgZnJvbSB0aGUgY29uZmlnXG4gICAgICAgIE9iamVjdC5rZXlzKGNvbmZpZykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgICAgICBpZiAoY29uZmlnW2tleV0gPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICBkZWxldGUgY29uZmlnW2tleV07XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMoY29uZmlnKS5sZW5ndGggPiAwID8gY29uZmlnIDogdW5kZWZpbmVkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBpbnRlcm5hbCB0cmFjaW5nIGNvbmZpZy4gVGhpcyBpcyB1c2VkIHRvIHRyYWNrIHRoZSB0cmFjaW5nIGNvbmZpZyB0aGF0IGhhcyBiZWVuIHNldFxuICAgICAqIGR1cmluZyB0aGUgc2Vzc2lvbi5jcmVhdGUgZXZlbnQuXG4gICAgICovXG4gICAgc2V0IF90cmFjaW5nQ29uZmlnKHRyYWNpbmdDb25maWcpIHtcbiAgICAgICAgdGhpcy4jdHJhY2luZ0NvbmZpZyA9IHRyYWNpbmdDb25maWc7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHRyYWNpbmcgY29uZmlnIGZvciB0aGUgc2Vzc2lvbi4gVGhpcyB3aWxsIHNlbmQgdGhlIHRyYWNpbmcgY29uZmlnIHRvIHRoZSBSZWFsdGltZSBBUEkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdHJhY2luZ0NvbmZpZyAtIFRoZSB0cmFjaW5nIGNvbmZpZyB0byBzZXQuIFdlIGRvbid0IHN1cHBvcnQgJ2F1dG8nIGhlcmUgYXMgdGhlIFNESyB3aWxsIGFsd2F5cyBjb25maWd1cmUgYSBXb3JrZmxvdyBOYW1lIHVubGVzcyBpdCBleGlzdHNcbiAgICAgKi9cbiAgICBfdXBkYXRlVHJhY2luZ0NvbmZpZyh0cmFjaW5nQ29uZmlnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy4jdHJhY2luZ0NvbmZpZyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIC8vIHRyZWF0aW5nIGl0IGFzIGRlZmF1bHQgdmFsdWVcbiAgICAgICAgICAgIHRoaXMuI3RyYWNpbmdDb25maWcgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0cmFjaW5nQ29uZmlnID09PSAnYXV0bycpIHtcbiAgICAgICAgICAgIC8vIHR1cm4gb24gdHJhY2luZyBpbiBhdXRvIG1vZGVcbiAgICAgICAgICAgIHRoaXMuc2VuZEV2ZW50KHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnc2Vzc2lvbi51cGRhdGUnLFxuICAgICAgICAgICAgICAgIHNlc3Npb246IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3JlYWx0aW1lJyxcbiAgICAgICAgICAgICAgICAgICAgdHJhY2luZzogJ2F1dG8nLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy4jdHJhY2luZ0NvbmZpZyAhPT0gbnVsbCAmJlxuICAgICAgICAgICAgdHlwZW9mIHRoaXMuI3RyYWNpbmdDb25maWcgIT09ICdzdHJpbmcnICYmXG4gICAgICAgICAgICB0eXBlb2YgdHJhY2luZ0NvbmZpZyAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIC8vIHRyYWNpbmcgaXMgYWxyZWFkeSBzZXQsIHdlIGNhbid0IGNoYW5nZSBpdFxuICAgICAgICAgICAgbG9nZ2VyLndhcm4oJ1RyYWNpbmcgY29uZmlnIGlzIGFscmVhZHkgc2V0LCBza2lwcGluZyBzZXR0aW5nIGl0IGFnYWluLiBUaGlzIGxpa2VseSBoYXBwZW5zIHdoZW4geW91IGFscmVhZHkgc2V0IGEgdHJhY2luZyBjb25maWcgb24gc2Vzc2lvbiBjcmVhdGlvbi4nKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHJhY2luZ0NvbmZpZyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKCdEaXNhYmxpbmcgdHJhY2luZyBmb3IgdGhpcyBzZXNzaW9uLiBJdCBjYW5ub3QgYmUgdHVybmVkIG9uIGZvciB0aGlzIHNlc3Npb24gZnJvbSB0aGlzIHBvaW50IG9uLicpO1xuICAgICAgICAgICAgdGhpcy5zZW5kRXZlbnQoe1xuICAgICAgICAgICAgICAgIHR5cGU6ICdzZXNzaW9uLnVwZGF0ZScsXG4gICAgICAgICAgICAgICAgc2Vzc2lvbjoge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAncmVhbHRpbWUnLFxuICAgICAgICAgICAgICAgICAgICB0cmFjaW5nOiBudWxsLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy4jdHJhY2luZ0NvbmZpZyA9PT0gbnVsbCB8fFxuICAgICAgICAgICAgdHlwZW9mIHRoaXMuI3RyYWNpbmdDb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAvLyB0cmFjaW5nIGlzIGN1cnJlbnRseSBub3Qgc2V0IHNvIHdlIGNhbiBzZXQgaXQgdG8gdGhlIG5ldyB2YWx1ZVxuICAgICAgICAgICAgdGhpcy5zZW5kRXZlbnQoe1xuICAgICAgICAgICAgICAgIHR5cGU6ICdzZXNzaW9uLnVwZGF0ZScsXG4gICAgICAgICAgICAgICAgc2Vzc2lvbjoge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAncmVhbHRpbWUnLFxuICAgICAgICAgICAgICAgICAgICB0cmFjaW5nOiB0cmFjaW5nQ29uZmlnLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHJhY2luZ0NvbmZpZz8uZ3JvdXBfaWQgIT09IHRoaXMuI3RyYWNpbmdDb25maWc/Lmdyb3VwX2lkIHx8XG4gICAgICAgICAgICB0cmFjaW5nQ29uZmlnPy5tZXRhZGF0YSAhPT0gdGhpcy4jdHJhY2luZ0NvbmZpZz8ubWV0YWRhdGEgfHxcbiAgICAgICAgICAgIHRyYWNpbmdDb25maWc/LndvcmtmbG93X25hbWUgIT09IHRoaXMuI3RyYWNpbmdDb25maWc/LndvcmtmbG93X25hbWUpIHtcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKCdNaXNtYXRjaCBpbiB0cmFjaW5nIGNvbmZpZy4gSWdub3JpbmcgdGhlIG5ldyB0cmFjaW5nIGNvbmZpZy4gVGhpcyBsaWtlbHkgaGFwcGVucyB3aGVuIHlvdSBhbHJlYWR5IHNldCBhIHRyYWNpbmcgY29uZmlnIG9uIHNlc3Npb24gY3JlYXRpb24uIEN1cnJlbnQgdHJhY2luZyBjb25maWc6ICVzLCBuZXcgdHJhY2luZyBjb25maWc6ICVzJywgSlNPTi5zdHJpbmdpZnkodGhpcy4jdHJhY2luZ0NvbmZpZyksIEpTT04uc3RyaW5naWZ5KHRyYWNpbmdDb25maWcpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNlbmRFdmVudCh7XG4gICAgICAgICAgICB0eXBlOiAnc2Vzc2lvbi51cGRhdGUnLFxuICAgICAgICAgICAgc2Vzc2lvbjoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdyZWFsdGltZScsXG4gICAgICAgICAgICAgICAgdHJhY2luZzogdHJhY2luZ0NvbmZpZyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBzZXNzaW9uIGNvbmZpZy4gVGhpcyB3aWxsIG1lcmdlIGl0IHdpdGggdGhlIGN1cnJlbnQgc2Vzc2lvbiBjb25maWcgd2l0aCB0aGUgZGVmYXVsdFxuICAgICAqIHZhbHVlcyBhbmQgc2VuZCBpdCB0byB0aGUgUmVhbHRpbWUgQVBJLlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbmZpZyAtIFRoZSBzZXNzaW9uIGNvbmZpZyB0byB1cGRhdGUuXG4gICAgICovXG4gICAgdXBkYXRlU2Vzc2lvbkNvbmZpZyhjb25maWcpIHtcbiAgICAgICAgY29uc3Qgc2Vzc2lvbkRhdGEgPSB0aGlzLl9nZXRNZXJnZWRTZXNzaW9uQ29uZmlnKGNvbmZpZyk7XG4gICAgICAgIHRoaXMuc2VuZEV2ZW50KHtcbiAgICAgICAgICAgIHR5cGU6ICdzZXNzaW9uLnVwZGF0ZScsXG4gICAgICAgICAgICBzZXNzaW9uOiBzZXNzaW9uRGF0YSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNlbmQgdGhlIG91dHB1dCBvZiBhIGZ1bmN0aW9uIGNhbGwgdG8gdGhlIFJlYWx0aW1lIEFQSS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB0b29sQ2FsbCAtIFRoZSB0b29sIGNhbGwgdG8gc2VuZCB0aGUgb3V0cHV0IGZvci5cbiAgICAgKiBAcGFyYW0gb3V0cHV0IC0gVGhlIG91dHB1dCBvZiB0aGUgZnVuY3Rpb24gY2FsbC5cbiAgICAgKiBAcGFyYW0gc3RhcnRSZXNwb25zZSAtIFdoZXRoZXIgdG8gc3RhcnQgYSBuZXcgcmVzcG9uc2UgYWZ0ZXIgc2VuZGluZyB0aGUgb3V0cHV0LlxuICAgICAqL1xuICAgIHNlbmRGdW5jdGlvbkNhbGxPdXRwdXQodG9vbENhbGwsIG91dHB1dCwgc3RhcnRSZXNwb25zZSA9IHRydWUpIHtcbiAgICAgICAgdGhpcy5zZW5kRXZlbnQoe1xuICAgICAgICAgICAgdHlwZTogJ2NvbnZlcnNhdGlvbi5pdGVtLmNyZWF0ZScsXG4gICAgICAgICAgICBpdGVtOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ2Z1bmN0aW9uX2NhbGxfb3V0cHV0JyxcbiAgICAgICAgICAgICAgICBvdXRwdXQsXG4gICAgICAgICAgICAgICAgY2FsbF9pZDogdG9vbENhbGwuY2FsbElkLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBpdGVtID0gcmVhbHRpbWVUb29sQ2FsbEl0ZW0ucGFyc2Uoe1xuICAgICAgICAgICAgICAgIGl0ZW1JZDogdG9vbENhbGwuaWQsXG4gICAgICAgICAgICAgICAgcHJldmlvdXNJdGVtSWQ6IHRvb2xDYWxsLnByZXZpb3VzSXRlbUlkLFxuICAgICAgICAgICAgICAgIHR5cGU6ICdmdW5jdGlvbl9jYWxsJyxcbiAgICAgICAgICAgICAgICBzdGF0dXM6ICdjb21wbGV0ZWQnLFxuICAgICAgICAgICAgICAgIGFyZ3VtZW50czogdG9vbENhbGwuYXJndW1lbnRzLFxuICAgICAgICAgICAgICAgIG5hbWU6IHRvb2xDYWxsLm5hbWUsXG4gICAgICAgICAgICAgICAgb3V0cHV0LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLmVtaXQoJ2l0ZW1fdXBkYXRlJywgaXRlbSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBsb2dnZXIuZXJyb3IoJ0Vycm9yIHBhcnNpbmcgdG9vbCBjYWxsIGl0ZW0nLCBlcnJvciwgdG9vbENhbGwpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGFydFJlc3BvbnNlKSB7XG4gICAgICAgICAgICB0aGlzLnNlbmRFdmVudCh7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3Jlc3BvbnNlLmNyZWF0ZScsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZW5kIGFuIGF1ZGlvIGJ1ZmZlciB0byB0aGUgUmVhbHRpbWUgQVBJLiBJZiBgeyBjb21taXQ6IHRydWUgfWAgaXMgcGFzc2VkLCB0aGUgYXVkaW8gYnVmZmVyXG4gICAgICogd2lsbCBiZSBjb21taXR0ZWQgYW5kIHRoZSBtb2RlbCB3aWxsIHN0YXJ0IHByb2Nlc3NpbmcgaXQuIFRoaXMgaXMgbmVjZXNzYXJ5IGlmIHlvdSBoYXZlXG4gICAgICogZGlzYWJsZWQgdHVybiBkZXRlY3Rpb24gLyB2b2ljZSBhY3Rpdml0eSBkZXRlY3Rpb24gKFZBRCkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYXVkaW8gLSBUaGUgYXVkaW8gYnVmZmVyIHRvIHNlbmQuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBUaGUgb3B0aW9ucyBmb3IgdGhlIGF1ZGlvIGJ1ZmZlci5cbiAgICAgKi9cbiAgICBzZW5kQXVkaW8oYXVkaW8sIHsgY29tbWl0ID0gZmFsc2UgfSA9IHt9KSB7XG4gICAgICAgIHRoaXMuc2VuZEV2ZW50KHtcbiAgICAgICAgICAgIHR5cGU6ICdpbnB1dF9hdWRpb19idWZmZXIuYXBwZW5kJyxcbiAgICAgICAgICAgIGF1ZGlvOiBhcnJheUJ1ZmZlclRvQmFzZTY0KGF1ZGlvKSxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChjb21taXQpIHtcbiAgICAgICAgICAgIHRoaXMuc2VuZEV2ZW50KHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnaW5wdXRfYXVkaW9fYnVmZmVyLmNvbW1pdCcsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXNldCB0aGUgaGlzdG9yeSBvZiB0aGUgY29udmVyc2F0aW9uLiBUaGlzIHdpbGwgY3JlYXRlIGEgZGlmZiBiZXR3ZWVuIHRoZSBvbGQgYW5kIG5ldyBoaXN0b3J5XG4gICAgICogYW5kIHNlbmQgdGhlIG5lY2Vzc2FyeSBldmVudHMgdG8gdGhlIFJlYWx0aW1lIEFQSSB0byB1cGRhdGUgdGhlIGhpc3RvcnkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb2xkSGlzdG9yeSAtIFRoZSBvbGQgaGlzdG9yeSBvZiB0aGUgY29udmVyc2F0aW9uLlxuICAgICAqIEBwYXJhbSBuZXdIaXN0b3J5IC0gVGhlIG5ldyBoaXN0b3J5IG9mIHRoZSBjb252ZXJzYXRpb24uXG4gICAgICovXG4gICAgcmVzZXRIaXN0b3J5KG9sZEhpc3RvcnksIG5ld0hpc3RvcnkpIHtcbiAgICAgICAgY29uc3QgeyByZW1vdmFscywgYWRkaXRpb25zLCB1cGRhdGVzIH0gPSBkaWZmUmVhbHRpbWVIaXN0b3J5KG9sZEhpc3RvcnksIG5ld0hpc3RvcnkpO1xuICAgICAgICBjb25zdCByZW1vdmFsSWRzID0gbmV3IFNldChyZW1vdmFscy5tYXAoKGl0ZW0pID0+IGl0ZW0uaXRlbUlkKSk7XG4gICAgICAgIC8vIHdlIGRvbid0IGhhdmUgYW4gdXBkYXRlIGV2ZW50IGZvciBpdGVtcyBzbyB3ZSB3aWxsIHJlbW92ZSBhbmQgcmUtYWRkIHdoYXQncyB0aGVyZVxuICAgICAgICBmb3IgKGNvbnN0IHVwZGF0ZSBvZiB1cGRhdGVzKSB7XG4gICAgICAgICAgICByZW1vdmFsSWRzLmFkZCh1cGRhdGUuaXRlbUlkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVtb3ZhbElkcy5zaXplID4gMCkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBpdGVtSWQgb2YgcmVtb3ZhbElkcykge1xuICAgICAgICAgICAgICAgIHRoaXMuc2VuZEV2ZW50KHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2NvbnZlcnNhdGlvbi5pdGVtLmRlbGV0ZScsXG4gICAgICAgICAgICAgICAgICAgIGl0ZW1faWQ6IGl0ZW1JZCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhZGRpdGlvbnNBbmRVcGRhdGVzID0gWy4uLmFkZGl0aW9ucywgLi4udXBkYXRlc107XG4gICAgICAgIGZvciAoY29uc3QgYWRkaXRpb24gb2YgYWRkaXRpb25zQW5kVXBkYXRlcykge1xuICAgICAgICAgICAgaWYgKGFkZGl0aW9uLnR5cGUgPT09ICdtZXNzYWdlJykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW1FbnRyeSA9IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ21lc3NhZ2UnLFxuICAgICAgICAgICAgICAgICAgICByb2xlOiBhZGRpdGlvbi5yb2xlLFxuICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBhZGRpdGlvbi5jb250ZW50LFxuICAgICAgICAgICAgICAgICAgICBpZDogYWRkaXRpb24uaXRlbUlkLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgaWYgKGFkZGl0aW9uLnJvbGUgIT09ICdzeXN0ZW0nICYmIGFkZGl0aW9uLnN0YXR1cykge1xuICAgICAgICAgICAgICAgICAgICBpdGVtRW50cnkuc3RhdHVzID0gYWRkaXRpb24uc3RhdHVzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnNlbmRFdmVudCh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdjb252ZXJzYXRpb24uaXRlbS5jcmVhdGUnLFxuICAgICAgICAgICAgICAgICAgICBpdGVtOiBpdGVtRW50cnksXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChhZGRpdGlvbi50eXBlID09PSAnZnVuY3Rpb25fY2FsbCcpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIud2FybignRnVuY3Rpb24gY2FsbHMgY2Fubm90IGJlIG1hbnVhbGx5IGFkZGVkIG9yIHVwZGF0ZWQgYXQgdGhlIG1vbWVudC4gSWdub3JpbmcuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2VuZE1jcFJlc3BvbnNlKGFwcHJvdmFsUmVxdWVzdCwgYXBwcm92ZWQpIHtcbiAgICAgICAgdGhpcy5zZW5kRXZlbnQoe1xuICAgICAgICAgICAgdHlwZTogJ2NvbnZlcnNhdGlvbi5pdGVtLmNyZWF0ZScsXG4gICAgICAgICAgICBwcmV2aW91c19pdGVtX2lkOiBhcHByb3ZhbFJlcXVlc3QuaXRlbUlkLFxuICAgICAgICAgICAgaXRlbToge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdtY3BfYXBwcm92YWxfcmVzcG9uc2UnLFxuICAgICAgICAgICAgICAgIGFwcHJvdmFsX3JlcXVlc3RfaWQ6IGFwcHJvdmFsUmVxdWVzdC5pdGVtSWQsXG4gICAgICAgICAgICAgICAgYXBwcm92ZTogYXBwcm92ZWQsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vcGVuYWlSZWFsdGltZUJhc2UubWpzLm1hcCIsIi8vLyA8cmVmZXJlbmNlIGxpYj1cImRvbVwiIC8+XG5pbXBvcnQgeyBpc0Jyb3dzZXJFbnZpcm9ubWVudCB9IGZyb20gJ0BvcGVuYWkvYWdlbnRzLWNvcmUvX3NoaW1zJztcbmltcG9ydCB7IFVzZXJFcnJvciB9IGZyb20gJ0BvcGVuYWkvYWdlbnRzLWNvcmUnO1xuaW1wb3J0IGxvZ2dlciBmcm9tIFwiLi9sb2dnZXIubWpzXCI7XG5pbXBvcnQgeyBPcGVuQUlSZWFsdGltZUJhc2UsIH0gZnJvbSBcIi4vb3BlbmFpUmVhbHRpbWVCYXNlLm1qc1wiO1xuaW1wb3J0IHsgcGFyc2VSZWFsdGltZUV2ZW50IH0gZnJvbSBcIi4vb3BlbmFpUmVhbHRpbWVFdmVudHMubWpzXCI7XG5pbXBvcnQgeyBIRUFERVJTIH0gZnJvbSBcIi4vdXRpbHMubWpzXCI7XG4vKipcbiAqIFRyYW5zcG9ydCBsYXllciB0aGF0J3MgaGFuZGxpbmcgdGhlIGNvbm5lY3Rpb24gYmV0d2VlbiB0aGUgY2xpZW50IGFuZCBPcGVuQUkncyBSZWFsdGltZSBBUElcbiAqIHZpYSBXZWJSVEMuIFdoaWxlIHRoaXMgdHJhbnNwb3J0IGxheWVyIGlzIGRlc2lnbmVkIHRvIGJlIHVzZWQgd2l0aGluIGEgUmVhbHRpbWVTZXNzaW9uLCBpdCBjYW5cbiAqIGFsc28gYmUgdXNlZCBzdGFuZGFsb25lIGlmIHlvdSB3YW50IHRvIGhhdmUgYSBkaXJlY3QgY29ubmVjdGlvbiB0byB0aGUgUmVhbHRpbWUgQVBJLlxuICpcbiAqIFVubGVzcyB5b3Ugc3BlY2lmeSBhIGBtZWRpYVN0cmVhbWAgb3IgYGF1ZGlvRWxlbWVudGAgb3B0aW9uLCB0aGUgdHJhbnNwb3J0IGxheWVyIHdpbGxcbiAqIGF1dG9tYXRpY2FsbHkgY29uZmlndXJlIHRoZSBtaWNyb3Bob25lIGFuZCBhdWRpbyBvdXRwdXQgdG8gYmUgdXNlZCBieSB0aGUgc2Vzc2lvbi5cbiAqL1xuZXhwb3J0IGNsYXNzIE9wZW5BSVJlYWx0aW1lV2ViUlRDIGV4dGVuZHMgT3BlbkFJUmVhbHRpbWVCYXNlIHtcbiAgICBvcHRpb25zO1xuICAgICN1cmw7XG4gICAgI3N0YXRlID0ge1xuICAgICAgICBzdGF0dXM6ICdkaXNjb25uZWN0ZWQnLFxuICAgICAgICBwZWVyQ29ubmVjdGlvbjogdW5kZWZpbmVkLFxuICAgICAgICBkYXRhQ2hhbm5lbDogdW5kZWZpbmVkLFxuICAgICAgICBjYWxsSWQ6IHVuZGVmaW5lZCxcbiAgICB9O1xuICAgICN1c2VJbnNlY3VyZUFwaUtleTtcbiAgICAjb25nb2luZ1Jlc3BvbnNlID0gZmFsc2U7XG4gICAgI211dGVkID0gZmFsc2U7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIGlmICh0eXBlb2YgUlRDUGVlckNvbm5lY3Rpb24gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1dlYlJUQyBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgZW52aXJvbm1lbnQnKTtcbiAgICAgICAgfVxuICAgICAgICBzdXBlcihvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy4jdXJsID0gb3B0aW9ucy5iYXNlVXJsID8/IGBodHRwczovL2FwaS5vcGVuYWkuY29tL3YxL3JlYWx0aW1lL2NhbGxzYDtcbiAgICAgICAgdGhpcy4jdXNlSW5zZWN1cmVBcGlLZXkgPSBvcHRpb25zLnVzZUluc2VjdXJlQXBpS2V5ID8/IGZhbHNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgY3VycmVudCBjYWxsIElEIG9mIHRoZSBXZWJSVEMgY29ubmVjdGlvbi5cbiAgICAgKi9cbiAgICBnZXQgY2FsbElkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jc3RhdGUuY2FsbElkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgY3VycmVudCBzdGF0dXMgb2YgdGhlIFdlYlJUQyBjb25uZWN0aW9uLlxuICAgICAqL1xuICAgIGdldCBzdGF0dXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNzdGF0ZS5zdGF0dXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBjdXJyZW50IGNvbm5lY3Rpb24gc3RhdGUgb2YgdGhlIFdlYlJUQyBjb25uZWN0aW9uIGluY2x1ZGluZyB0aGUgcGVlciBjb25uZWN0aW9uIGFuZCBkYXRhXG4gICAgICogY2hhbm5lbC5cbiAgICAgKi9cbiAgICBnZXQgY29ubmVjdGlvblN0YXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jc3RhdGU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhlIHNlc3Npb24gaXMgbXV0ZWQuXG4gICAgICovXG4gICAgZ2V0IG11dGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jbXV0ZWQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbm5lY3QgdG8gdGhlIFJlYWx0aW1lIEFQSS4gVGhpcyB3aWxsIGVzdGFibGlzaCB0aGUgY29ubmVjdGlvbiB0byB0aGUgT3BlbkFJIFJlYWx0aW1lIEFQSVxuICAgICAqIHZpYSBXZWJSVEMuXG4gICAgICpcbiAgICAgKiBJZiB5b3UgYXJlIHVzaW5nIGEgYnJvd3NlciwgdGhlIHRyYW5zcG9ydCBsYXllciB3aWxsIGFsc28gYXV0b21hdGljYWxseSBjb25maWd1cmUgdGhlXG4gICAgICogbWljcm9waG9uZSBhbmQgYXVkaW8gb3V0cHV0IHRvIGJlIHVzZWQgYnkgdGhlIHNlc3Npb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIFRoZSBvcHRpb25zIGZvciB0aGUgY29ubmVjdGlvbi5cbiAgICAgKi9cbiAgICBhc3luYyBjb25uZWN0KG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKHRoaXMuI3N0YXRlLnN0YXR1cyA9PT0gJ2Nvbm5lY3RlZCcpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy4jc3RhdGUuc3RhdHVzID09PSAnY29ubmVjdGluZycpIHtcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKCdSZWFsdGltZSBjb25uZWN0aW9uIGFscmVhZHkgaW4gcHJvZ3Jlc3MuIFBsZWFzZSBhd2FpdCBvcmlnaW5hbCBwcm9taXNlJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbW9kZWwgPSBvcHRpb25zLm1vZGVsID8/IHRoaXMuY3VycmVudE1vZGVsO1xuICAgICAgICB0aGlzLmN1cnJlbnRNb2RlbCA9IG1vZGVsO1xuICAgICAgICBjb25zdCBiYXNlVXJsID0gb3B0aW9ucy51cmwgPz8gdGhpcy4jdXJsO1xuICAgICAgICBjb25zdCBhcGlLZXkgPSBhd2FpdCB0aGlzLl9nZXRBcGlLZXkob3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IGlzQ2xpZW50S2V5ID0gdHlwZW9mIGFwaUtleSA9PT0gJ3N0cmluZycgJiYgYXBpS2V5LnN0YXJ0c1dpdGgoJ2VrXycpO1xuICAgICAgICBpZiAoaXNCcm93c2VyRW52aXJvbm1lbnQoKSAmJiAhdGhpcy4jdXNlSW5zZWN1cmVBcGlLZXkgJiYgIWlzQ2xpZW50S2V5KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVXNlckVycm9yKCdVc2luZyB0aGUgV2ViUlRDIGNvbm5lY3Rpb24gaW4gYSBicm93c2VyIGVudmlyb25tZW50IHJlcXVpcmVzIGFuIGVwaGVtZXJhbCBjbGllbnQga2V5LiBJZiB5b3UgbmVlZCB0byB1c2UgYSByZWd1bGFyIEFQSSBrZXksIHVzZSB0aGUgV2ViU29ja2V0IHRyYW5zcG9ydCBvciBzZXQgdGhlIGB1c2VJbnNlY3VyZUFwaUtleWAgb3B0aW9uIHRvIHRydWUuJyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWFzeW5jLXByb21pc2UtZXhlY3V0b3JcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGFzeW5jIChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdXNlclNlc3Npb25Db25maWcgPSB7XG4gICAgICAgICAgICAgICAgICAgIC4uLihvcHRpb25zLmluaXRpYWxTZXNzaW9uQ29uZmlnIHx8IHt9KSxcbiAgICAgICAgICAgICAgICAgICAgbW9kZWw6IHRoaXMuY3VycmVudE1vZGVsLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgY29uc3QgY29ubmVjdGlvblVybCA9IG5ldyBVUkwoYmFzZVVybCk7XG4gICAgICAgICAgICAgICAgbGV0IHBlZXJDb25uZWN0aW9uID0gbmV3IFJUQ1BlZXJDb25uZWN0aW9uKCk7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YUNoYW5uZWwgPSBwZWVyQ29ubmVjdGlvbi5jcmVhdGVEYXRhQ2hhbm5lbCgnb2FpLWV2ZW50cycpO1xuICAgICAgICAgICAgICAgIGxldCBjYWxsSWQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgdGhpcy4jc3RhdGUgPSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXR1czogJ2Nvbm5lY3RpbmcnLFxuICAgICAgICAgICAgICAgICAgICBwZWVyQ29ubmVjdGlvbixcbiAgICAgICAgICAgICAgICAgICAgZGF0YUNoYW5uZWwsXG4gICAgICAgICAgICAgICAgICAgIGNhbGxJZCxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnY29ubmVjdGlvbl9jaGFuZ2UnLCB0aGlzLiNzdGF0ZS5zdGF0dXMpO1xuICAgICAgICAgICAgICAgIGRhdGFDaGFubmVsLmFkZEV2ZW50TGlzdGVuZXIoJ29wZW4nLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuI3N0YXRlID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiAnY29ubmVjdGVkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBlZXJDb25uZWN0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YUNoYW5uZWwsXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsSWQsXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIC8vIFNlbmRpbmcgdGhlIHNlc3Npb24gY29uZmlnIGFnYWluIGhlcmUgb25jZSB0aGUgY2hhbm5lbCBpcyBjb25uZWN0ZWQgdG8gZW5zdXJlXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoYXQgdGhlIHNlc3Npb24gY29uZmlnIGlzIHNlbnQgdG8gdGhlIHNlcnZlciBiZWZvcmUgdGhlIGZpcnN0IHJlc3BvbnNlIGlzIHJlY2VpdmVkXG4gICAgICAgICAgICAgICAgICAgIC8vIFNldHRpbmcgaXQgb24gY29ubmVjdGlvbiBzaG91bGQgd29yayBidXQgdGhlIGNvbmZpZyBpcyBub3QgYmVpbmcgdmFsaWRhdGVkIG9uIHRoZVxuICAgICAgICAgICAgICAgICAgICAvLyBzZXJ2ZXIuIFRoaXMgdHJpZ2dlcnMgYSB2YWxpZGF0aW9uIGVycm9yIGlmIHRoZSBjb25maWcgaXMgbm90IHZhbGlkLlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVNlc3Npb25Db25maWcodXNlclNlc3Npb25Db25maWcpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ2Nvbm5lY3Rpb25fY2hhbmdlJywgdGhpcy4jc3RhdGUuc3RhdHVzKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fb25PcGVuKCk7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBkYXRhQ2hhbm5lbC5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX29uRXJyb3IoZXZlbnQpO1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXZlbnQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGRhdGFDaGFubmVsLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fb25NZXNzYWdlKGV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBkYXRhOiBwYXJzZWQsIGlzR2VuZXJpYyB9ID0gcGFyc2VSZWFsdGltZUV2ZW50KGV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFwYXJzZWQgfHwgaXNHZW5lcmljKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhcnNlZC50eXBlID09PSAncmVzcG9uc2UuY3JlYXRlZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuI29uZ29pbmdSZXNwb25zZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAocGFyc2VkLnR5cGUgPT09ICdyZXNwb25zZS5kb25lJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4jb25nb2luZ1Jlc3BvbnNlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhcnNlZC50eXBlID09PSAnc2Vzc2lvbi5jcmVhdGVkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdHJhY2luZ0NvbmZpZyA9IHBhcnNlZC5zZXNzaW9uLnRyYWNpbmc7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUcnlpbmcgdG8gdHVybiBvbiB0cmFjaW5nIGFmdGVyIHRoZSBzZXNzaW9uIGlzIGNyZWF0ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVRyYWNpbmdDb25maWcodXNlclNlc3Npb25Db25maWcudHJhY2luZyA/PyAnYXV0bycpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgLy8gc2V0IHVwIGF1ZGlvIHBsYXliYWNrXG4gICAgICAgICAgICAgICAgY29uc3QgYXVkaW9FbGVtZW50ID0gdGhpcy5vcHRpb25zLmF1ZGlvRWxlbWVudCA/PyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhdWRpbycpO1xuICAgICAgICAgICAgICAgIGF1ZGlvRWxlbWVudC5hdXRvcGxheSA9IHRydWU7XG4gICAgICAgICAgICAgICAgcGVlckNvbm5lY3Rpb24ub250cmFjayA9IChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBhdWRpb0VsZW1lbnQuc3JjT2JqZWN0ID0gZXZlbnQuc3RyZWFtc1swXTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIC8vIGdldCBtaWNyb3Bob25lIHN0cmVhbVxuICAgICAgICAgICAgICAgIGNvbnN0IHN0cmVhbSA9IHRoaXMub3B0aW9ucy5tZWRpYVN0cmVhbSA/P1xuICAgICAgICAgICAgICAgICAgICAoYXdhaXQgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEoe1xuICAgICAgICAgICAgICAgICAgICAgICAgYXVkaW86IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICBwZWVyQ29ubmVjdGlvbi5hZGRUcmFjayhzdHJlYW0uZ2V0QXVkaW9UcmFja3MoKVswXSk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5jaGFuZ2VQZWVyQ29ubmVjdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBwZWVyQ29ubmVjdGlvbiA9XG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLm9wdGlvbnMuY2hhbmdlUGVlckNvbm5lY3Rpb24ocGVlckNvbm5lY3Rpb24pO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiNzdGF0ZSA9IHsgLi4udGhpcy4jc3RhdGUsIHBlZXJDb25uZWN0aW9uIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IG9mZmVyID0gYXdhaXQgcGVlckNvbm5lY3Rpb24uY3JlYXRlT2ZmZXIoKTtcbiAgICAgICAgICAgICAgICBhd2FpdCBwZWVyQ29ubmVjdGlvbi5zZXRMb2NhbERlc2NyaXB0aW9uKG9mZmVyKTtcbiAgICAgICAgICAgICAgICBpZiAoIW9mZmVyLnNkcCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBjcmVhdGUgb2ZmZXInKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3Qgc2RwUmVzcG9uc2UgPSBhd2FpdCBmZXRjaChjb25uZWN0aW9uVXJsLCB7XG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgICAgICAgICBib2R5OiBvZmZlci5zZHAsXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vc2RwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHthcGlLZXl9YCxcbiAgICAgICAgICAgICAgICAgICAgICAgICdYLU9wZW5BSS1BZ2VudHMtU0RLJzogSEVBREVSU1snWC1PcGVuQUktQWdlbnRzLVNESyddLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNhbGxJZCA9IHNkcFJlc3BvbnNlLmhlYWRlcnM/LmdldCgnTG9jYXRpb24nKT8uc3BsaXQoJy8nKS5wb3AoKTtcbiAgICAgICAgICAgICAgICB0aGlzLiNzdGF0ZSA9IHsgLi4udGhpcy4jc3RhdGUsIGNhbGxJZCB9O1xuICAgICAgICAgICAgICAgIGNvbnN0IGFuc3dlciA9IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2Fuc3dlcicsXG4gICAgICAgICAgICAgICAgICAgIHNkcDogYXdhaXQgc2RwUmVzcG9uc2UudGV4dCgpLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgYXdhaXQgcGVlckNvbm5lY3Rpb24uc2V0UmVtb3RlRGVzY3JpcHRpb24oYW5zd2VyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9vbkVycm9yKGVycm9yKTtcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VuZCBhbiBldmVudCB0byB0aGUgUmVhbHRpbWUgQVBJLiBUaGlzIHdpbGwgc3RyaW5naWZ5IHRoZSBldmVudCBhbmQgc2VuZCBpdCBkaXJlY3RseSB0byB0aGVcbiAgICAgKiBBUEkuIFRoaXMgY2FuIGJlIHVzZWQgaWYgeW91IHdhbnQgdG8gdGFrZSBjb250cm9sIG92ZXIgdGhlIGNvbm5lY3Rpb24gYW5kIHNlbmQgZXZlbnRzIG1hbnVhbGx5LlxuICAgICAqXG4gICAgICogQHBhcmFtIGV2ZW50IC0gVGhlIGV2ZW50IHRvIHNlbmQuXG4gICAgICovXG4gICAgc2VuZEV2ZW50KGV2ZW50KSB7XG4gICAgICAgIGlmICghdGhpcy4jc3RhdGUuZGF0YUNoYW5uZWwgfHxcbiAgICAgICAgICAgIHRoaXMuI3N0YXRlLmRhdGFDaGFubmVsLnJlYWR5U3RhdGUgIT09ICdvcGVuJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdXZWJSVEMgZGF0YSBjaGFubmVsIGlzIG5vdCBjb25uZWN0ZWQuIE1ha2Ugc3VyZSB5b3UgY2FsbCBgY29ubmVjdCgpYCBiZWZvcmUgc2VuZGluZyBldmVudHMuJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy4jc3RhdGUuZGF0YUNoYW5uZWwuc2VuZChKU09OLnN0cmluZ2lmeShldmVudCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNdXRlIG9yIHVubXV0ZSB0aGUgc2Vzc2lvbi5cbiAgICAgKiBAcGFyYW0gbXV0ZWQgLSBXaGV0aGVyIHRvIG11dGUgdGhlIHNlc3Npb24uXG4gICAgICovXG4gICAgbXV0ZShtdXRlZCkge1xuICAgICAgICB0aGlzLiNtdXRlZCA9IG11dGVkO1xuICAgICAgICBpZiAodGhpcy4jc3RhdGUucGVlckNvbm5lY3Rpb24pIHtcbiAgICAgICAgICAgIGNvbnN0IHBlZXJDb25uZWN0aW9uID0gdGhpcy4jc3RhdGUucGVlckNvbm5lY3Rpb247XG4gICAgICAgICAgICBwZWVyQ29ubmVjdGlvbi5nZXRTZW5kZXJzKCkuZm9yRWFjaCgoc2VuZGVyKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHNlbmRlci50cmFjaykge1xuICAgICAgICAgICAgICAgICAgICBzZW5kZXIudHJhY2suZW5hYmxlZCA9ICFtdXRlZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDbG9zZSB0aGUgY29ubmVjdGlvbiB0byB0aGUgUmVhbHRpbWUgQVBJIGFuZCBkaXNjb25uZWN0cyB0aGUgdW5kZXJseWluZyBXZWJSVEMgY29ubmVjdGlvbi5cbiAgICAgKi9cbiAgICBjbG9zZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuI3N0YXRlLmRhdGFDaGFubmVsKSB7XG4gICAgICAgICAgICB0aGlzLiNzdGF0ZS5kYXRhQ2hhbm5lbC5jbG9zZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLiNzdGF0ZS5wZWVyQ29ubmVjdGlvbikge1xuICAgICAgICAgICAgY29uc3QgcGVlckNvbm5lY3Rpb24gPSB0aGlzLiNzdGF0ZS5wZWVyQ29ubmVjdGlvbjtcbiAgICAgICAgICAgIHBlZXJDb25uZWN0aW9uLmdldFNlbmRlcnMoKS5mb3JFYWNoKChzZW5kZXIpID0+IHtcbiAgICAgICAgICAgICAgICBzZW5kZXIudHJhY2s/LnN0b3AoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcGVlckNvbm5lY3Rpb24uY2xvc2UoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy4jc3RhdGUuc3RhdHVzICE9PSAnZGlzY29ubmVjdGVkJykge1xuICAgICAgICAgICAgdGhpcy4jc3RhdGUgPSB7XG4gICAgICAgICAgICAgICAgc3RhdHVzOiAnZGlzY29ubmVjdGVkJyxcbiAgICAgICAgICAgICAgICBwZWVyQ29ubmVjdGlvbjogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGRhdGFDaGFubmVsOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgY2FsbElkOiB1bmRlZmluZWQsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5lbWl0KCdjb25uZWN0aW9uX2NoYW5nZScsIHRoaXMuI3N0YXRlLnN0YXR1cyk7XG4gICAgICAgICAgICB0aGlzLl9vbkNsb3NlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogSW50ZXJydXB0IHRoZSBjdXJyZW50IHJlc3BvbnNlIGlmIG9uZSBpcyBvbmdvaW5nIGFuZCBjbGVhciB0aGUgYXVkaW8gYnVmZmVyIHNvIHRoYXQgdGhlIGFnZW50XG4gICAgICogc3RvcHMgdGFsa2luZy5cbiAgICAgKi9cbiAgICBpbnRlcnJ1cHQoKSB7XG4gICAgICAgIGlmICh0aGlzLiNvbmdvaW5nUmVzcG9uc2UpIHtcbiAgICAgICAgICAgIHRoaXMuc2VuZEV2ZW50KHtcbiAgICAgICAgICAgICAgICB0eXBlOiAncmVzcG9uc2UuY2FuY2VsJyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy4jb25nb2luZ1Jlc3BvbnNlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZW5kRXZlbnQoe1xuICAgICAgICAgICAgdHlwZTogJ291dHB1dF9hdWRpb19idWZmZXIuY2xlYXInLFxuICAgICAgICB9KTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vcGVuYWlSZWFsdGltZVdlYlJ0Yy5tanMubWFwIiwiLy8vIDxyZWZlcmVuY2UgbGliPVwiZG9tXCIgLz5cbmV4cG9ydCBjb25zdCBXZWJTb2NrZXQgPSBnbG9iYWxUaGlzLldlYlNvY2tldDtcbmV4cG9ydCBmdW5jdGlvbiBpc0Jyb3dzZXJFbnZpcm9ubWVudCgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbn1cbmV4cG9ydCBjb25zdCB1c2VXZWJTb2NrZXRQcm90b2NvbHMgPSB0cnVlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2hpbXMtYnJvd3Nlci5tanMubWFwIiwiaW1wb3J0IHsgaXNCcm93c2VyRW52aXJvbm1lbnQsIHVzZVdlYlNvY2tldFByb3RvY29scywgV2ViU29ja2V0LCB9IGZyb20gJ0BvcGVuYWkvYWdlbnRzLXJlYWx0aW1lL19zaGltcyc7XG5pbXBvcnQgeyBPcGVuQUlSZWFsdGltZUJhc2UsIH0gZnJvbSBcIi4vb3BlbmFpUmVhbHRpbWVCYXNlLm1qc1wiO1xuaW1wb3J0IHsgYmFzZTY0VG9BcnJheUJ1ZmZlciwgSEVBREVSUywgV0VCU09DS0VUX01FVEEgfSBmcm9tIFwiLi91dGlscy5tanNcIjtcbmltcG9ydCB7IFVzZXJFcnJvciB9IGZyb20gJ0BvcGVuYWkvYWdlbnRzLWNvcmUnO1xuaW1wb3J0IHsgcGFyc2VSZWFsdGltZUV2ZW50IH0gZnJvbSBcIi4vb3BlbmFpUmVhbHRpbWVFdmVudHMubWpzXCI7XG4vKipcbiAqIFRyYW5zcG9ydCBsYXllciB0aGF0J3MgaGFuZGxpbmcgdGhlIGNvbm5lY3Rpb24gYmV0d2VlbiB0aGUgY2xpZW50IGFuZCBPcGVuQUkncyBSZWFsdGltZSBBUElcbiAqIHZpYSBXZWJTb2NrZXRzLiBXaGlsZSB0aGlzIHRyYW5zcG9ydCBsYXllciBpcyBkZXNpZ25lZCB0byBiZSB1c2VkIHdpdGhpbiBhIFJlYWx0aW1lU2Vzc2lvbiwgaXRcbiAqIGNhbiBhbHNvIGJlIHVzZWQgc3RhbmRhbG9uZSBpZiB5b3Ugd2FudCB0byBoYXZlIGEgZGlyZWN0IGNvbm5lY3Rpb24gdG8gdGhlIFJlYWx0aW1lIEFQSS5cbiAqL1xuZXhwb3J0IGNsYXNzIE9wZW5BSVJlYWx0aW1lV2ViU29ja2V0IGV4dGVuZHMgT3BlbkFJUmVhbHRpbWVCYXNlIHtcbiAgICAjYXBpS2V5O1xuICAgICN1cmw7XG4gICAgI3N0YXRlID0ge1xuICAgICAgICBzdGF0dXM6ICdkaXNjb25uZWN0ZWQnLFxuICAgICAgICB3ZWJzb2NrZXQ6IHVuZGVmaW5lZCxcbiAgICB9O1xuICAgICN1c2VJbnNlY3VyZUFwaUtleTtcbiAgICAjY3VycmVudEl0ZW1JZDtcbiAgICAjY3VycmVudEF1ZGlvQ29udGVudEluZGV4O1xuICAgIC8qKlxuICAgICAqIFRpbWVzdGFtcCBtYWludGFpbmVkIGJ5IHRoZSB0cmFuc3BvcnQgbGF5ZXIgdG8gYWlkIHdpdGggdGhlIGNhbGN1bGF0aW9uIG9mIHRoZSBlbGFwc2VkIHRpbWVcbiAgICAgKiBzaW5jZSB0aGUgcmVzcG9uc2Ugc3RhcnRlZCB0byBjb21wdXRlIHRoZSByaWdodCBpbnRlcnJ1cHRpb24gdGltZS5cbiAgICAgKlxuICAgICAqIE1vc3RseSBpbnRlcm5hbCBidXQgbWlnaHQgYmUgdXNlZCBieSBleHRlbmRlZCB0cmFuc3BvcnQgbGF5ZXJzIGZvciB0aGVpciBpbnRlcnJ1cHRpb25cbiAgICAgKiBjYWxjdWxhdGlvbi5cbiAgICAgKi9cbiAgICBfZmlyc3RBdWRpb1RpbWVzdGFtcDtcbiAgICBfYXVkaW9MZW5ndGhNcyA9IDA7XG4gICAgI29uZ29pbmdSZXNwb25zZSA9IGZhbHNlO1xuICAgICNjcmVhdGVXZWJTb2NrZXQ7XG4gICAgI3NraXBPcGVuRXZlbnRMaXN0ZW5lcnM7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgICAgICB0aGlzLiN1cmwgPSBvcHRpb25zLnVybDtcbiAgICAgICAgdGhpcy4jdXNlSW5zZWN1cmVBcGlLZXkgPSBvcHRpb25zLnVzZUluc2VjdXJlQXBpS2V5ID8/IGZhbHNlO1xuICAgICAgICB0aGlzLiNjcmVhdGVXZWJTb2NrZXQgPSBvcHRpb25zLmNyZWF0ZVdlYlNvY2tldDtcbiAgICAgICAgdGhpcy4jc2tpcE9wZW5FdmVudExpc3RlbmVycyA9IG9wdGlvbnMuc2tpcE9wZW5FdmVudExpc3RlbmVycyA/PyBmYWxzZTtcbiAgICB9XG4gICAgZ2V0Q29tbW9uUmVxdWVzdEhlYWRlcnMoKSB7XG4gICAgICAgIHJldHVybiBIRUFERVJTO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgY3VycmVudCBzdGF0dXMgb2YgdGhlIFdlYlNvY2tldCBjb25uZWN0aW9uLlxuICAgICAqL1xuICAgIGdldCBzdGF0dXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNzdGF0ZS5zdGF0dXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBjdXJyZW50IGNvbm5lY3Rpb24gc3RhdGUgb2YgdGhlIFdlYlNvY2tldCBjb25uZWN0aW9uLlxuICAgICAqL1xuICAgIGdldCBjb25uZWN0aW9uU3RhdGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNzdGF0ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWx3YXlzIHJldHVybnMgYG51bGxgIGFzIHRoZSBXZWJTb2NrZXQgdHJhbnNwb3J0IGxheWVyIGRvZXMgbm90IGhhbmRsZSBtdXRpbmcuIEluc3RlYWQsXG4gICAgICogdGhpcyBzaG91bGQgYmUgaGFuZGxlZCBieSB0aGUgY2xpZW50IGJ5IG5vdCB0cmlnZ2VyaW5nIHRoZSBgc2VuZEF1ZGlvYCBtZXRob2QuXG4gICAgICovXG4gICAgZ2V0IG11dGVkKCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIGN1cnJlbnQgaXRlbSBJRCBvZiB0aGUgb25nb2luZyByZXNwb25zZS5cbiAgICAgKi9cbiAgICBnZXQgY3VycmVudEl0ZW1JZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI2N1cnJlbnRJdGVtSWQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRyaWdnZXJzIHRoZSBgYXVkaW9gIGV2ZW50IHRoYXQgYSBjbGllbnQgbWlnaHQgbGlzdGVuIHRvIHRvIHJlY2VpdmUgdGhlIGF1ZGlvIGJ1ZmZlci5cbiAgICAgKiBQcm90ZWN0ZWQgZm9yIHlvdSB0byBiZSBhYmxlIHRvIG92ZXJyaWRlIGFuZCBkaXNhYmxlIGVtaXR0aW5nIHRoaXMgZXZlbnQgaW4gY2FzZSB5b3VyIGV4dGVuZGVkXG4gICAgICogdHJhbnNwb3J0IGxheWVyIGhhbmRsZXMgYXVkaW8gaW50ZXJuYWxseS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBhdWRpb0V2ZW50IC0gVGhlIGF1ZGlvIGV2ZW50IHRvIGVtaXQuXG4gICAgICovXG4gICAgX29uQXVkaW8oYXVkaW9FdmVudCkge1xuICAgICAgICB0aGlzLmVtaXQoJ2F1ZGlvJywgYXVkaW9FdmVudCk7XG4gICAgfVxuICAgIGFzeW5jICNzZXR1cFdlYlNvY2tldChyZXNvbHZlLCByZWplY3QsIHNlc3Npb25Db25maWcpIHtcbiAgICAgICAgaWYgKHRoaXMuI3N0YXRlLndlYnNvY2tldCkge1xuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy4jYXBpS2V5KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVXNlckVycm9yKCdBUEkga2V5IGlzIG5vdCBzZXQuIFBsZWFzZSBjYWxsIGBjb25uZWN0KClgIHdpdGggYW4gQVBJIGtleSBmaXJzdC4nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNCcm93c2VyRW52aXJvbm1lbnQoKSAmJlxuICAgICAgICAgICAgIXRoaXMuI2FwaUtleS5zdGFydHNXaXRoKCdla18nKSAmJlxuICAgICAgICAgICAgIXRoaXMuI3VzZUluc2VjdXJlQXBpS2V5KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVXNlckVycm9yKCdVc2luZyB0aGUgV2ViU29ja2V0IGNvbm5lY3Rpb24gaW4gYSBicm93c2VyIGVudmlyb25tZW50IHJlcXVpcmVzIGFuIGVwaGVtZXJhbCBjbGllbnQga2V5LiBJZiB5b3UgaGF2ZSB0byB1c2UgYSByZWd1bGFyIEFQSSBrZXksIHNldCB0aGUgYHVzZUluc2VjdXJlQXBpS2V5YCBvcHRpb24gdG8gdHJ1ZS4nKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgd3MgPSBudWxsO1xuICAgICAgICBpZiAodGhpcy4jY3JlYXRlV2ViU29ja2V0KSB7XG4gICAgICAgICAgICB3cyA9IGF3YWl0IHRoaXMuI2NyZWF0ZVdlYlNvY2tldCh7XG4gICAgICAgICAgICAgICAgdXJsOiB0aGlzLiN1cmwsXG4gICAgICAgICAgICAgICAgYXBpS2V5OiB0aGlzLiNhcGlLZXksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIGJyb3dzZXJzIGFuZCB3b3JrZXJkIHNob3VsZCB1c2UgdGhlIHByb3RvY29scyBhcmd1bWVudCwgbm9kZSBzaG91bGQgdXNlIHRoZSBoZWFkZXJzIGFyZ3VtZW50XG4gICAgICAgICAgICBjb25zdCB3ZWJzb2NrZXRBcmd1bWVudHMgPSB1c2VXZWJTb2NrZXRQcm90b2NvbHNcbiAgICAgICAgICAgICAgICA/IFtcbiAgICAgICAgICAgICAgICAgICAgJ3JlYWx0aW1lJyxcbiAgICAgICAgICAgICAgICAgICAgLy8gQXV0aFxuICAgICAgICAgICAgICAgICAgICAnb3BlbmFpLWluc2VjdXJlLWFwaS1rZXkuJyArIHRoaXMuI2FwaUtleSxcbiAgICAgICAgICAgICAgICAgICAgLy8gVmVyc2lvbiBoZWFkZXJcbiAgICAgICAgICAgICAgICAgICAgV0VCU09DS0VUX01FVEEsXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIDoge1xuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7dGhpcy4jYXBpS2V5fWAsXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi50aGlzLmdldENvbW1vblJlcXVlc3RIZWFkZXJzKCksXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdzID0gbmV3IFdlYlNvY2tldCh0aGlzLiN1cmwsIHdlYnNvY2tldEFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy4jc3RhdGUgPSB7XG4gICAgICAgICAgICBzdGF0dXM6ICdjb25uZWN0aW5nJyxcbiAgICAgICAgICAgIHdlYnNvY2tldDogd3MsXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZW1pdCgnY29ubmVjdGlvbl9jaGFuZ2UnLCB0aGlzLiNzdGF0ZS5zdGF0dXMpO1xuICAgICAgICBjb25zdCBvblNvY2tldE9wZW5SZWFkeSA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuI3N0YXRlID0ge1xuICAgICAgICAgICAgICAgIHN0YXR1czogJ2Nvbm5lY3RlZCcsXG4gICAgICAgICAgICAgICAgd2Vic29ja2V0OiB3cyxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLmVtaXQoJ2Nvbm5lY3Rpb25fY2hhbmdlJywgdGhpcy4jc3RhdGUuc3RhdHVzKTtcbiAgICAgICAgICAgIHRoaXMuX29uT3BlbigpO1xuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9O1xuICAgICAgICBpZiAodGhpcy4jc2tpcE9wZW5FdmVudExpc3RlbmVycyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgb25Tb2NrZXRPcGVuUmVhZHkoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHdzLmFkZEV2ZW50TGlzdGVuZXIoJ29wZW4nLCBvblNvY2tldE9wZW5SZWFkeSk7XG4gICAgICAgIH1cbiAgICAgICAgd3MuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX29uRXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgdGhpcy4jc3RhdGUgPSB7XG4gICAgICAgICAgICAgICAgc3RhdHVzOiAnZGlzY29ubmVjdGVkJyxcbiAgICAgICAgICAgICAgICB3ZWJzb2NrZXQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLmVtaXQoJ2Nvbm5lY3Rpb25fY2hhbmdlJywgdGhpcy4jc3RhdGUuc3RhdHVzKTtcbiAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgIH0pO1xuICAgICAgICB3cy5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgKG1lc3NhZ2UpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX29uTWVzc2FnZShtZXNzYWdlKTtcbiAgICAgICAgICAgIGNvbnN0IHsgZGF0YTogcGFyc2VkLCBpc0dlbmVyaWMgfSA9IHBhcnNlUmVhbHRpbWVFdmVudChtZXNzYWdlKTtcbiAgICAgICAgICAgIGlmICghcGFyc2VkIHx8IGlzR2VuZXJpYykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwYXJzZWQudHlwZSA9PT0gJ3Jlc3BvbnNlLm91dHB1dF9hdWRpby5kZWx0YScpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiNjdXJyZW50QXVkaW9Db250ZW50SW5kZXggPSBwYXJzZWQuY29udGVudF9pbmRleDtcbiAgICAgICAgICAgICAgICB0aGlzLiNjdXJyZW50SXRlbUlkID0gcGFyc2VkLml0ZW1faWQ7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2ZpcnN0QXVkaW9UaW1lc3RhbXAgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgcmVzcG9uc2Ugc3RhcnQgdGltZXN0YW1wIGlzIG5vdCBzZXQsIHdlIHNldCBpdCB0byB0aGUgY3VycmVudCB0aW1lLlxuICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIHVzZWQgdG8gY2FsY3VsYXRlIHRoZSBlbGFwc2VkIHRpbWUgZm9yIGludGVycnVwdGlvbi5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZmlyc3RBdWRpb1RpbWVzdGFtcCA9IERhdGUubm93KCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2F1ZGlvTGVuZ3RoTXMgPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBidWZmID0gYmFzZTY0VG9BcnJheUJ1ZmZlcihwYXJzZWQuZGVsdGEpO1xuICAgICAgICAgICAgICAgIC8vIGNhbGN1bGF0ZSB0aGUgYXVkaW8gbGVuZ3RoIGluIG1pbGxpc2Vjb25kc1xuICAgICAgICAgICAgICAgIC8vIEdBIGZvcm1hdDogc2Vzc2lvbi5hdWRpby5vdXRwdXQuZm9ybWF0IHN1cHBvcnRzIHN0cnVjdHVyZWQgeyB0eXBlOiBcImF1ZGlvL3BjbVwiLCByYXRlIH0gb3IgXCJhdWRpby9wY211XCIgZXRjLlxuICAgICAgICAgICAgICAgIGNvbnN0IGZtdCA9IHRoaXMuX3Jhd1Nlc3Npb25Db25maWc/LmF1ZGlvPy5vdXRwdXQ/LmZvcm1hdDtcbiAgICAgICAgICAgICAgICBpZiAoZm10ICYmIHR5cGVvZiBmbXQgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFN0cnVjdHVyZWQgZm9ybWF0XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBmbXQudHlwZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgPT09ICdhdWRpby9wY211JyB8fCB0ID09PSAnYXVkaW8vcGNtYScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIDhrSHosIDEgYnl0ZSBwZXIgc2FtcGxlXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9hdWRpb0xlbmd0aE1zICs9IGJ1ZmYuYnl0ZUxlbmd0aCAvIDg7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodCA9PT0gJ2F1ZGlvL3BjbScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJhdGUgPSBmbXQucmF0ZSA/PyAyNDAwMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGJ5dGVzIC0+IHNhbXBsZXMgKDIgYnl0ZXMgcGVyIHNhbXBsZSkgLT4gbXNcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2F1ZGlvTGVuZ3RoTXMgKz0gKGJ1ZmYuYnl0ZUxlbmd0aCAvIDIgLyByYXRlKSAqIDEwMDA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBGYWxsYmFjayBhc3N1bXB0aW9uIHNpbWlsYXIgdG8gbGVnYWN5XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9hdWRpb0xlbmd0aE1zICs9IGJ1ZmYuYnl0ZUxlbmd0aCAvIDI0IC8gMjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZm10ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZm10LnN0YXJ0c1dpdGgoJ2c3MTFfJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2F1ZGlvTGVuZ3RoTXMgKz0gYnVmZi5ieXRlTGVuZ3RoIC8gODtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFzc3VtZSAyNGtIeiBQQ00xNlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYXVkaW9MZW5ndGhNcyArPSBidWZmLmJ5dGVMZW5ndGggLyAyNCAvIDI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIERlZmF1bHQgdG8gMjRrSHogUENNMTYgYmVoYXZpb3IgaWYgdW5zcGVjaWZpZWRcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYXVkaW9MZW5ndGhNcyArPSBidWZmLmJ5dGVMZW5ndGggLyAyNCAvIDI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGF1ZGlvRXZlbnQgPSB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdhdWRpbycsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IGJ1ZmYsXG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlSWQ6IHBhcnNlZC5yZXNwb25zZV9pZCxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHRoaXMuX29uQXVkaW8oYXVkaW9FdmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChwYXJzZWQudHlwZSA9PT0gJ2lucHV0X2F1ZGlvX2J1ZmZlci5zcGVlY2hfc3RhcnRlZCcpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBhdXRvbWF0aWNSZXNwb25zZUNhbmNlbGxhdGlvbkVuYWJsZWQgPSB0aGlzLl9yYXdTZXNzaW9uQ29uZmlnPy5hdWRpbz8uaW5wdXQ/LnR1cm5fZGV0ZWN0aW9uXG4gICAgICAgICAgICAgICAgICAgID8uaW50ZXJydXB0X3Jlc3BvbnNlID8/IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMuaW50ZXJydXB0KCFhdXRvbWF0aWNSZXNwb25zZUNhbmNlbGxhdGlvbkVuYWJsZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocGFyc2VkLnR5cGUgPT09ICdyZXNwb25zZS5jcmVhdGVkJykge1xuICAgICAgICAgICAgICAgIHRoaXMuI29uZ29pbmdSZXNwb25zZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChwYXJzZWQudHlwZSA9PT0gJ3Jlc3BvbnNlLmRvbmUnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4jb25nb2luZ1Jlc3BvbnNlID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChwYXJzZWQudHlwZSA9PT0gJ3Nlc3Npb24uY3JlYXRlZCcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl90cmFjaW5nQ29uZmlnID0gcGFyc2VkLnNlc3Npb24udHJhY2luZztcbiAgICAgICAgICAgICAgICAvLyBUcnlpbmcgdG8gdHVybiBvbiB0cmFjaW5nIGFmdGVyIHRoZSBzZXNzaW9uIGlzIGNyZWF0ZWRcbiAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGVUcmFjaW5nQ29uZmlnKHNlc3Npb25Db25maWcudHJhY2luZyA/PyAnYXV0bycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgd3MuYWRkRXZlbnRMaXN0ZW5lcignY2xvc2UnLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLiNzdGF0ZSA9IHtcbiAgICAgICAgICAgICAgICBzdGF0dXM6ICdkaXNjb25uZWN0ZWQnLFxuICAgICAgICAgICAgICAgIHdlYnNvY2tldDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuZW1pdCgnY29ubmVjdGlvbl9jaGFuZ2UnLCB0aGlzLiNzdGF0ZS5zdGF0dXMpO1xuICAgICAgICAgICAgdGhpcy5fb25DbG9zZSgpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgYXN5bmMgY29ubmVjdChvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IG1vZGVsID0gb3B0aW9ucy5tb2RlbCA/PyB0aGlzLmN1cnJlbnRNb2RlbDtcbiAgICAgICAgdGhpcy5jdXJyZW50TW9kZWwgPSBtb2RlbDtcbiAgICAgICAgdGhpcy4jYXBpS2V5ID0gYXdhaXQgdGhpcy5fZ2V0QXBpS2V5KG9wdGlvbnMpO1xuICAgICAgICBjb25zdCB1cmwgPSBvcHRpb25zLnVybCA/P1xuICAgICAgICAgICAgdGhpcy4jdXJsID8/XG4gICAgICAgICAgICBgd3NzOi8vYXBpLm9wZW5haS5jb20vdjEvcmVhbHRpbWU/bW9kZWw9JHt0aGlzLmN1cnJlbnRNb2RlbH1gO1xuICAgICAgICB0aGlzLiN1cmwgPSB1cmw7XG4gICAgICAgIGNvbnN0IHNlc3Npb25Db25maWcgPSB7XG4gICAgICAgICAgICAuLi4ob3B0aW9ucy5pbml0aWFsU2Vzc2lvbkNvbmZpZyB8fCB7fSksXG4gICAgICAgICAgICBtb2RlbDogdGhpcy5jdXJyZW50TW9kZWwsXG4gICAgICAgIH07XG4gICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHRoaXMuI3NldHVwV2ViU29ja2V0KHJlc29sdmUsIHJlamVjdCwgc2Vzc2lvbkNvbmZpZykuY2F0Y2gocmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGF3YWl0IHRoaXMudXBkYXRlU2Vzc2lvbkNvbmZpZyhzZXNzaW9uQ29uZmlnKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VuZCBhbiBldmVudCB0byB0aGUgUmVhbHRpbWUgQVBJLiBUaGlzIHdpbGwgc3RyaW5naWZ5IHRoZSBldmVudCBhbmQgc2VuZCBpdCBkaXJlY3RseSB0byB0aGVcbiAgICAgKiBBUEkuIFRoaXMgY2FuIGJlIHVzZWQgaWYgeW91IHdhbnQgdG8gdGFrZSBjb250cm9sIG92ZXIgdGhlIGNvbm5lY3Rpb24gYW5kIHNlbmQgZXZlbnRzIG1hbnVhbGx5LlxuICAgICAqXG4gICAgICogQHBhcmFtIGV2ZW50IC0gVGhlIGV2ZW50IHRvIHNlbmQuXG4gICAgICovXG4gICAgc2VuZEV2ZW50KGV2ZW50KSB7XG4gICAgICAgIGlmICghdGhpcy4jc3RhdGUud2Vic29ja2V0KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1dlYlNvY2tldCBpcyBub3QgY29ubmVjdGVkLiBNYWtlIHN1cmUgeW91IGNhbGwgYGNvbm5lY3QoKWAgYmVmb3JlIHNlbmRpbmcgZXZlbnRzLicpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuI3N0YXRlLndlYnNvY2tldC5zZW5kKEpTT04uc3RyaW5naWZ5KGV2ZW50KSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENsb3NlIHRoZSBXZWJTb2NrZXQgY29ubmVjdGlvbi5cbiAgICAgKlxuICAgICAqIFRoaXMgd2lsbCBhbHNvIHJlc2V0IGFueSBpbnRlcm5hbCBjb25uZWN0aW9uIHRyYWNraW5nIHVzZWQgZm9yIGludGVycnVwdGlvbiBoYW5kbGluZy5cbiAgICAgKi9cbiAgICBjbG9zZSgpIHtcbiAgICAgICAgdGhpcy4jc3RhdGUud2Vic29ja2V0Py5jbG9zZSgpO1xuICAgICAgICB0aGlzLiNjdXJyZW50SXRlbUlkID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9maXJzdEF1ZGlvVGltZXN0YW1wID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9hdWRpb0xlbmd0aE1zID0gMDtcbiAgICAgICAgdGhpcy4jY3VycmVudEF1ZGlvQ29udGVudEluZGV4ID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXaWxsIHRocm93IGFuIGVycm9yIGFzIHRoZSBXZWJTb2NrZXQgdHJhbnNwb3J0IGxheWVyIGRvZXMgbm90IHN1cHBvcnQgbXV0aW5nLlxuICAgICAqL1xuICAgIG11dGUoX211dGVkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTXV0ZSBpcyBub3Qgc3VwcG9ydGVkIGZvciB0aGUgV2ViU29ja2V0IHRyYW5zcG9ydC4gWW91IGhhdmUgdG8gbXV0ZSB0aGUgYXVkaW8gaW5wdXQgeW91cnNlbGYuJyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNlbmQgYW4gYXVkaW8gYnVmZmVyIHRvIHRoZSBSZWFsdGltZSBBUEkuIFRoaXMgaXMgdXNlZCBmb3IgeW91ciBjbGllbnQgdG8gc2VuZCBhdWRpbyB0byB0aGVcbiAgICAgKiBtb2RlbCB0byByZXNwb25kLlxuICAgICAqXG4gICAgICogQHBhcmFtIGF1ZGlvIC0gVGhlIGF1ZGlvIGJ1ZmZlciB0byBzZW5kLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgZm9yIHRoZSBhdWRpbyBidWZmZXIuXG4gICAgICovXG4gICAgc2VuZEF1ZGlvKGF1ZGlvLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgaWYgKHRoaXMuI3N0YXRlLnN0YXR1cyA9PT0gJ2Nvbm5lY3RlZCcpIHtcbiAgICAgICAgICAgIHN1cGVyLnNlbmRBdWRpbyhhdWRpbywgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VuZCBhIGNhbmNlbCByZXNwb25zZSBldmVudCB0byB0aGUgUmVhbHRpbWUgQVBJLiBUaGlzIGlzIHVzZWQgdG8gY2FuY2VsIGFuIG9uZ29pbmdcbiAgICAgKiAgcmVzcG9uc2UgdGhhdCB0aGUgbW9kZWwgaXMgY3VycmVudGx5IGdlbmVyYXRpbmcuXG4gICAgICovXG4gICAgX2NhbmNlbFJlc3BvbnNlKCkge1xuICAgICAgICAvLyBjYW5jZWwgdGhlIG9uZ29pbmcgcmVzcG9uc2VcbiAgICAgICAgaWYgKHRoaXMuI29uZ29pbmdSZXNwb25zZSkge1xuICAgICAgICAgICAgdGhpcy5zZW5kRXZlbnQoe1xuICAgICAgICAgICAgICAgIHR5cGU6ICdyZXNwb25zZS5jYW5jZWwnLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLiNvbmdvaW5nUmVzcG9uc2UgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBEbyBOT1QgY2FsbCB0aGlzIG1ldGhvZCBkaXJlY3RseS4gQ2FsbCBgaW50ZXJydXB0KClgIGluc3RlYWQgZm9yIHByb3BlciBpbnRlcnJ1cHRpb24gaGFuZGxpbmcuXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyB1c2VkIHRvIHNlbmQgdGhlIHJpZ2h0IGV2ZW50cyB0byB0aGUgQVBJIHRvIGluZm9ybSB0aGUgbW9kZWwgdGhhdCB0aGUgdXNlciBoYXNcbiAgICAgKiBpbnRlcnJ1cHRlZCB0aGUgcmVzcG9uc2UuIEl0IG1pZ2h0IGJlIG92ZXJyaWRkZW4vZXh0ZW5kZWQgYnkgYW4gZXh0ZW5kZWQgdHJhbnNwb3J0IGxheWVyLiBTZWVcbiAgICAgKiB0aGUgYFR3aWxpb1JlYWx0aW1lVHJhbnNwb3J0TGF5ZXJgIGZvciBhbiBleGFtcGxlLlxuICAgICAqXG4gICAgICogQHBhcmFtIGVsYXBzZWRUaW1lIC0gVGhlIGVsYXBzZWQgdGltZSBzaW5jZSB0aGUgcmVzcG9uc2Ugc3RhcnRlZC5cbiAgICAgKi9cbiAgICBfaW50ZXJydXB0KGVsYXBzZWRUaW1lLCBjYW5jZWxPbmdvaW5nUmVzcG9uc2UgPSB0cnVlKSB7XG4gICAgICAgIGlmIChlbGFwc2VkVGltZSA8IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBpbW1lZGlhdGVseSBlbWl0IHRoaXMgZXZlbnQgc28gdGhlIGNsaWVudCBjYW4gc3RvcCBwbGF5aW5nIGF1ZGlvXG4gICAgICAgIGlmIChjYW5jZWxPbmdvaW5nUmVzcG9uc2UpIHtcbiAgICAgICAgICAgIHRoaXMuX2NhbmNlbFJlc3BvbnNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbGVuZ3RoID0gdGhpcy5fYXVkaW9MZW5ndGhNcyA/PyBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gICAgICAgIC8vIGF1ZGlvX2VuZF9tcyBtdXN0IGJlIGFuIGludGVnZXJcbiAgICAgICAgY29uc3QgYXVkaW9fZW5kX21zID0gTWF0aC5tYXgoMCwgTWF0aC5mbG9vcihNYXRoLm1pbihlbGFwc2VkVGltZSwgbGVuZ3RoKSkpO1xuICAgICAgICB0aGlzLmVtaXQoJ2F1ZGlvX2ludGVycnVwdGVkJyk7XG4gICAgICAgIHRoaXMuc2VuZEV2ZW50KHtcbiAgICAgICAgICAgIHR5cGU6ICdjb252ZXJzYXRpb24uaXRlbS50cnVuY2F0ZScsXG4gICAgICAgICAgICBpdGVtX2lkOiB0aGlzLiNjdXJyZW50SXRlbUlkLFxuICAgICAgICAgICAgY29udGVudF9pbmRleDogdGhpcy4jY3VycmVudEF1ZGlvQ29udGVudEluZGV4LFxuICAgICAgICAgICAgYXVkaW9fZW5kX21zLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW50ZXJydXB0IHRoZSBvbmdvaW5nIHJlc3BvbnNlLiBUaGlzIG1ldGhvZCBpcyB0cmlnZ2VyZWQgYXV0b21hdGljYWxseSBieSB0aGUgY2xpZW50IHdoZW5cbiAgICAgKiB2b2ljZSBhY3Rpdml0eSBkZXRlY3Rpb24gKFZBRCkgaXMgZW5hYmxlZCAoZGVmYXVsdCkgYXMgd2VsbCBhcyB3aGVuIGFuIG91dHB1dCBndWFyZHJhaWwgZ290XG4gICAgICogdHJpZ2dlcmVkLlxuICAgICAqXG4gICAgICogWW91IGNhbiBhbHNvIGNhbGwgdGhpcyBtZXRob2QgZGlyZWN0bHkgaWYgeW91IHdhbnQgdG8gaW50ZXJydXB0IHRoZSBjb252ZXJzYXRpb24gZm9yIGV4YW1wbGVcbiAgICAgKiBiYXNlZCBvbiBhbiBldmVudCBpbiB0aGUgY2xpZW50LlxuICAgICAqL1xuICAgIGludGVycnVwdChjYW5jZWxPbmdvaW5nUmVzcG9uc2UgPSB0cnVlKSB7XG4gICAgICAgIGlmICghdGhpcy4jY3VycmVudEl0ZW1JZCB8fCB0eXBlb2YgdGhpcy5fZmlyc3RBdWRpb1RpbWVzdGFtcCAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBlbGFwc2VkVGltZSA9IERhdGUubm93KCkgLSB0aGlzLl9maXJzdEF1ZGlvVGltZXN0YW1wO1xuICAgICAgICBpZiAoZWxhcHNlZFRpbWUgPj0gMCkge1xuICAgICAgICAgICAgdGhpcy5faW50ZXJydXB0KGVsYXBzZWRUaW1lLCBjYW5jZWxPbmdvaW5nUmVzcG9uc2UpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuI2N1cnJlbnRJdGVtSWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX2ZpcnN0QXVkaW9UaW1lc3RhbXAgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX2F1ZGlvTGVuZ3RoTXMgPSAwO1xuICAgICAgICB0aGlzLiNjdXJyZW50QXVkaW9Db250ZW50SW5kZXggPSB1bmRlZmluZWQ7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b3BlbmFpUmVhbHRpbWVXZWJzb2NrZXQubWpzLm1hcCIsImltcG9ydCB7IFVzZXJFcnJvciwgfSBmcm9tICdAb3BlbmFpL2FnZW50cy1jb3JlJztcbmV4cG9ydCBjb25zdCBCQUNLR1JPVU5EX1JFU1VMVF9TWU1CT0wgPSBTeW1ib2woJ2JhY2tncm91bmRSZXN1bHQnKTtcbmV4cG9ydCBmdW5jdGlvbiBiYWNrZ3JvdW5kUmVzdWx0KGNvbnRlbnQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBbQkFDS0dST1VORF9SRVNVTFRfU1lNQk9MXTogdHJ1ZSxcbiAgICAgICAgY29udGVudCxcbiAgICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzQmFja2dyb3VuZFJlc3VsdChyZXN1bHQpIHtcbiAgICByZXR1cm4gKHR5cGVvZiByZXN1bHQgPT09ICdvYmplY3QnICYmXG4gICAgICAgIHJlc3VsdCAhPT0gbnVsbCAmJlxuICAgICAgICBCQUNLR1JPVU5EX1JFU1VMVF9TWU1CT0wgaW4gcmVzdWx0KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkUmVhbHRpbWVUb29sKHRvb2wpIHtcbiAgICByZXR1cm4gKHRvb2wudHlwZSA9PT0gJ2Z1bmN0aW9uJyB8fFxuICAgICAgICAodG9vbC50eXBlID09PSAnaG9zdGVkX3Rvb2wnICYmIHRvb2wubmFtZSA9PT0gJ2hvc3RlZF9tY3AnKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gdG9SZWFsdGltZVRvb2xEZWZpbml0aW9uKHRvb2wpIHtcbiAgICBpZiAodG9vbC50eXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiB0b29sO1xuICAgIH1cbiAgICBpZiAodG9vbC50eXBlID09PSAnaG9zdGVkX3Rvb2wnICYmIHRvb2wubmFtZSA9PT0gJ2hvc3RlZF9tY3AnKSB7XG4gICAgICAgIGNvbnN0IHNlcnZlclVybCA9IHRvb2wucHJvdmlkZXJEYXRhLnNlcnZlcl91cmwgJiYgdG9vbC5wcm92aWRlckRhdGEuc2VydmVyX3VybC5sZW5ndGggPiAwXG4gICAgICAgICAgICA/IHRvb2wucHJvdmlkZXJEYXRhLnNlcnZlcl91cmxcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogJ21jcCcsXG4gICAgICAgICAgICBzZXJ2ZXJfbGFiZWw6IHRvb2wucHJvdmlkZXJEYXRhLnNlcnZlcl9sYWJlbCxcbiAgICAgICAgICAgIHNlcnZlcl91cmw6IHNlcnZlclVybCxcbiAgICAgICAgICAgIGhlYWRlcnM6IHRvb2wucHJvdmlkZXJEYXRhLmhlYWRlcnMsXG4gICAgICAgICAgICBhbGxvd2VkX3Rvb2xzOiB0b29sLnByb3ZpZGVyRGF0YS5hbGxvd2VkX3Rvb2xzLFxuICAgICAgICAgICAgcmVxdWlyZV9hcHByb3ZhbDogdG9vbC5wcm92aWRlckRhdGEucmVxdWlyZV9hcHByb3ZhbCxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IFVzZXJFcnJvcihgSW52YWxpZCB0b29sIHR5cGU6ICR7dG9vbH1gKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRvb2wubWpzLm1hcCIsImltcG9ydCB7IGdldFRyYW5zZmVyTWVzc2FnZSwgTW9kZWxCZWhhdmlvckVycm9yLCBPdXRwdXRHdWFyZHJhaWxUcmlwd2lyZVRyaWdnZXJlZCwgUnVuQ29udGV4dCwgUnVuVG9vbEFwcHJvdmFsSXRlbSwgfSBmcm9tICdAb3BlbmFpL2FnZW50cy1jb3JlJztcbmltcG9ydCB7IFJ1bnRpbWVFdmVudEVtaXR0ZXIgfSBmcm9tICdAb3BlbmFpL2FnZW50cy1jb3JlL19zaGltcyc7XG5pbXBvcnQgeyBpc1pvZE9iamVjdCwgdG9TbWFydFN0cmluZyB9IGZyb20gJ0BvcGVuYWkvYWdlbnRzLWNvcmUvdXRpbHMnO1xuaW1wb3J0IHsgZGVmaW5lUmVhbHRpbWVPdXRwdXRHdWFyZHJhaWwsIGdldFJlYWx0aW1lR3VhcmRyYWlsRmVlZGJhY2tNZXNzYWdlLCBnZXRSZWFsdGltZUd1YXJkcmFpbFNldHRpbmdzLCB9IGZyb20gXCIuL2d1YXJkcmFpbC5tanNcIjtcbmltcG9ydCB7IERFRkFVTFRfT1BFTkFJX1JFQUxUSU1FX1NFU1NJT05fQ09ORklHLCB9IGZyb20gXCIuL29wZW5haVJlYWx0aW1lQmFzZS5tanNcIjtcbmltcG9ydCB7IE9wZW5BSVJlYWx0aW1lV2ViUlRDIH0gZnJvbSBcIi4vb3BlbmFpUmVhbHRpbWVXZWJSdGMubWpzXCI7XG5pbXBvcnQgeyBPcGVuQUlSZWFsdGltZVdlYlNvY2tldCB9IGZyb20gXCIuL29wZW5haVJlYWx0aW1lV2Vic29ja2V0Lm1qc1wiO1xuaW1wb3J0IHsgYXBwcm92YWxJdGVtVG9SZWFsdGltZUFwcHJvdmFsSXRlbSwgZ2V0TGFzdFRleHRGcm9tQXVkaW9PdXRwdXRNZXNzYWdlLCBoYXNXZWJSVENTdXBwb3J0LCByZWFsdGltZUFwcHJvdmFsSXRlbVRvQXBwcm92YWxJdGVtLCB1cGRhdGVSZWFsdGltZUhpc3RvcnksIH0gZnJvbSBcIi4vdXRpbHMubWpzXCI7XG5pbXBvcnQgbG9nZ2VyIGZyb20gXCIuL2xvZ2dlci5tanNcIjtcbmltcG9ydCB7IGlzQmFja2dyb3VuZFJlc3VsdCwgaXNWYWxpZFJlYWx0aW1lVG9vbCwgdG9SZWFsdGltZVRvb2xEZWZpbml0aW9uLCB9IGZyb20gXCIuL3Rvb2wubWpzXCI7XG5mdW5jdGlvbiBjbG9uZURlZmF1bHRTZXNzaW9uQ29uZmlnKCkge1xuICAgIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KERFRkFVTFRfT1BFTkFJX1JFQUxUSU1FX1NFU1NJT05fQ09ORklHKSk7XG59XG4vKipcbiAqIEEgYFJlYWx0aW1lU2Vzc2lvbmAgaXMgdGhlIGNvcm5lcnN0b25lIG9mIGJ1aWxkaW5nIFZvaWNlIEFnZW50cy4gSXQncyB0aGUgZXF1aXZhbGVudCBvZiBhXG4gKiBSdW5uZXIgaW4gdGV4dC1iYXNlZCBhZ2VudHMgZXhjZXB0IHRoYXQgaXQgYXV0b21hdGljYWxseSBoYW5kbGVzIG11bHRpcGxlIHR1cm5zIGJ5IG1haW50YWluaW5nIGFcbiAqIGNvbm5lY3Rpb24gd2l0aCB0aGUgdW5kZXJseWluZyB0cmFuc3BvcnQgbGF5ZXIuXG4gKlxuICogVGhlIHNlc3Npb24gaGFuZGxlcyBtYW5hZ2luZyB0aGUgbG9jYWwgaGlzdG9yeSBjb3B5LCBleGVjdXRlcyB0b29scywgcnVucyBvdXRwdXQgZ3VhcmRyYWlscywgYW5kXG4gKiBmYWNpbGl0YXRlcyBoYW5kb2Zmcy5cbiAqXG4gKiBUaGUgYWN0dWFsIGF1ZGlvIGhhbmRsaW5nIGFuZCBnZW5lcmF0aW9uIG9mIG1vZGVsIHJlc3BvbnNlcyBpcyBoYW5kbGVkIGJ5IHRoZSB1bmRlcmx5aW5nXG4gKiB0cmFuc3BvcnQgbGF5ZXIuIEJ5IGRlZmF1bHQgaWYgeW91IGFyZSB1c2luZyBhIGJyb3dzZXIgd2l0aCBXZWJSVEMgc3VwcG9ydCwgdGhlIHNlc3Npb24gd2lsbFxuICogYXV0b21hdGljYWxseSB1c2UgdGhlIFdlYlJUQyB2ZXJzaW9uIG9mIHRoZSBPcGVuQUkgUmVhbHRpbWUgQVBJLiBPbiB0aGUgc2VydmVyIG9yIGlmIHlvdSBwYXNzXG4gKiBgd2Vic29ja2V0YCBhcyB0aGUgdHJhbnNwb3J0IGxheWVyLCB0aGUgc2Vzc2lvbiB3aWxsIGVzdGFibGlzaCBhIGNvbm5lY3Rpb24gdXNpbmcgV2ViU29ja2V0cy5cbiAqXG4gKiBJbiB0aGUgY2FzZSBvZiBXZWJSVEMsIGluIHRoZSBicm93c2VyLCB0aGUgdHJhbnNwb3J0IGxheWVyIHdpbGwgYWxzbyBhdXRvbWF0aWNhbGx5IGNvbmZpZ3VyZSB0aGVcbiAqIG1pY3JvcGhvbmUgYW5kIGF1ZGlvIG91dHB1dCB0byBiZSB1c2VkIGJ5IHRoZSBzZXNzaW9uLlxuICpcbiAqIFlvdSBjYW4gYWxzbyBjcmVhdGUgYSB0cmFuc3BvcnQgbGF5ZXIgaW5zdGFuY2UgeW91cnNlbGYgYW5kIHBhc3MgaXQgaW4gdG8gaGF2ZSBtb3JlIGNvbnRyb2wgb3ZlclxuICogdGhlIGNvbmZpZ3VyYXRpb24gb3IgZXZlbiBleHRlbmQgdGhlIGV4aXN0aW5nIG9uZXMuIENoZWNrIG91dCB0aGUgYFR3aWxpb1JlYWx0aW1lVHJhbnNwb3J0TGF5ZXJgXG4gKiBmb3IgYW4gZXhhbXBsZSBvZiBob3cgdG8gY3JlYXRlIGEgY3VzdG9tIHRyYW5zcG9ydCBsYXllci5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHNcbiAqIGNvbnN0IGFnZW50ID0gbmV3IFJlYWx0aW1lQWdlbnQoe1xuICogICBuYW1lOiAnbXktYWdlbnQnLFxuICogICBpbnN0cnVjdGlvbnM6ICdZb3UgYXJlIGEgaGVscGZ1bCBhc3Npc3RhbnQgdGhhdCBjYW4gYW5zd2VyIHF1ZXN0aW9ucyBhbmQgaGVscCB3aXRoIHRhc2tzLicsXG4gKiB9KVxuICpcbiAqIGNvbnN0IHNlc3Npb24gPSBuZXcgUmVhbHRpbWVTZXNzaW9uKGFnZW50KTtcbiAqIHNlc3Npb24uY29ubmVjdCh7XG4gKiAgIGFwaUtleTogJ3lvdXItYXBpLWtleScsXG4gKiB9KTtcbiAqIGBgYFxuICovXG5leHBvcnQgY2xhc3MgUmVhbHRpbWVTZXNzaW9uIGV4dGVuZHMgUnVudGltZUV2ZW50RW1pdHRlciB7XG4gICAgaW5pdGlhbEFnZW50O1xuICAgIG9wdGlvbnM7XG4gICAgI3RyYW5zcG9ydDtcbiAgICAjY3VycmVudEFnZW50O1xuICAgICNjdXJyZW50VG9vbHM7XG4gICAgI2NvbnRleHQ7XG4gICAgI291dHB1dEd1YXJkcmFpbHMgPSBbXTtcbiAgICAjb3V0cHV0R3VhcmRyYWlsU2V0dGluZ3M7XG4gICAgI3RyYW5zY3JpYmVkVGV4dERlbHRhcyA9IHt9O1xuICAgICNoaXN0b3J5ID0gW107XG4gICAgI3Nob3VsZEluY2x1ZGVBdWRpb0RhdGE7XG4gICAgI2ludGVycnVwdGVkQnlHdWFyZHJhaWwgPSB7fTtcbiAgICAjYXVkaW9TdGFydGVkID0gZmFsc2U7XG4gICAgLy8gVHJhY2tzIGFsbCBNQ1AgdG9vbHMgZmV0Y2hlZCBwZXIgc2VydmVyIGxhYmVsIChmcm9tIG1jcF9saXN0X3Rvb2xzIHJlc3VsdHMpLlxuICAgICNhbGxNY3BUb29sc0J5U2VydmVyID0gbmV3IE1hcCgpO1xuICAgIC8vIFRyYWNrcyBjdXJyZW50bHkgYXZhaWxhYmxlIE1DUCB0b29scyBiYXNlZCBvbiB0aGUgYWN0aXZlIGFnZW50J3MgY29uZmlndXJlZCBzZXJ2ZXJfbGFiZWxzLlxuICAgICNhdmFpbGFibGVNY3BUb29scyA9IFtdO1xuICAgIC8vIEtlZXBzIHRyYWNrIG9mIHRoZSBsYXN0IGZ1bGwgc2Vzc2lvbiBjb25maWcgd2Ugc2VudCAoY2FtZWxDYXNlIGtleXMpIHNvIHRoYXRcbiAgICAvLyBzdWJzZXF1ZW50IHVwZGF0ZXMgKGUuZy4gZHVyaW5nIGFnZW50IGhhbmRvZmZzKSBwcmVzZXJ2ZSBwcm9wZXJ0aWVzIHRoYXQgYXJlXG4gICAgLy8gbm90IGV4cGxpY2l0bHkgcmVjYWxjdWxhdGVkIGhlcmUgKHN1Y2ggYXMgaW5wdXRBdWRpb0Zvcm1hdCwgb3V0cHV0QXVkaW9Gb3JtYXQsXG4gICAgLy8gbW9kYWxpdGllcywgc3BlZWQsIHRvb2xDaG9pY2UsIHR1cm5EZXRlY3Rpb24sIGV0Yy4pLiBXaXRob3V0IHRoaXMsIHVwZGF0aW5nXG4gICAgLy8gdGhlIGFnZW50IHdvdWxkIGRyb3AgYXVkaW8gZm9ybWF0IG92ZXJyaWRlcyAoZS5nLiBnNzExX3VsYXcpIGFuZCByZXZlcnQgdG9cbiAgICAvLyB0cmFuc3BvcnQgZGVmYXVsdHMgY2F1c2luZyBpc3N1ZXMgZm9yIGludGVncmF0aW9ucyBsaWtlIFR3aWxpby5cbiAgICAjbGFzdFNlc3Npb25Db25maWcgPSBjbG9uZURlZmF1bHRTZXNzaW9uQ29uZmlnKCk7XG4gICAgI2F1dG9tYXRpY2FsbHlUcmlnZ2VyUmVzcG9uc2VGb3JNY3BUb29sQ2FsbHMgPSB0cnVlO1xuICAgIGNvbnN0cnVjdG9yKGluaXRpYWxBZ2VudCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuaW5pdGlhbEFnZW50ID0gaW5pdGlhbEFnZW50O1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICBpZiAoKHR5cGVvZiBvcHRpb25zLnRyYW5zcG9ydCA9PT0gJ3VuZGVmaW5lZCcgJiYgaGFzV2ViUlRDU3VwcG9ydCgpKSB8fFxuICAgICAgICAgICAgb3B0aW9ucy50cmFuc3BvcnQgPT09ICd3ZWJydGMnKSB7XG4gICAgICAgICAgICB0aGlzLiN0cmFuc3BvcnQgPSBuZXcgT3BlbkFJUmVhbHRpbWVXZWJSVEMoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChvcHRpb25zLnRyYW5zcG9ydCA9PT0gJ3dlYnNvY2tldCcgfHxcbiAgICAgICAgICAgIHR5cGVvZiBvcHRpb25zLnRyYW5zcG9ydCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRoaXMuI3RyYW5zcG9ydCA9IG5ldyBPcGVuQUlSZWFsdGltZVdlYlNvY2tldCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy4jdHJhbnNwb3J0ID0gb3B0aW9ucy50cmFuc3BvcnQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy4jY3VycmVudEFnZW50ID0gaW5pdGlhbEFnZW50O1xuICAgICAgICB0aGlzLiNjb250ZXh0ID0gbmV3IFJ1bkNvbnRleHQoe1xuICAgICAgICAgICAgLi4uKG9wdGlvbnMuY29udGV4dCA/PyB7fSksXG4gICAgICAgICAgICBoaXN0b3J5OiB0aGlzLiNoaXN0b3J5LFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy4jb3V0cHV0R3VhcmRyYWlscyA9IChvcHRpb25zLm91dHB1dEd1YXJkcmFpbHMgPz8gW10pLm1hcChkZWZpbmVSZWFsdGltZU91dHB1dEd1YXJkcmFpbCk7XG4gICAgICAgIHRoaXMuI291dHB1dEd1YXJkcmFpbFNldHRpbmdzID0gZ2V0UmVhbHRpbWVHdWFyZHJhaWxTZXR0aW5ncyhvcHRpb25zLm91dHB1dEd1YXJkcmFpbFNldHRpbmdzID8/IHt9KTtcbiAgICAgICAgdGhpcy4jc2hvdWxkSW5jbHVkZUF1ZGlvRGF0YSA9IG9wdGlvbnMuaGlzdG9yeVN0b3JlQXVkaW8gPz8gZmFsc2U7XG4gICAgICAgIHRoaXMuI2F1dG9tYXRpY2FsbHlUcmlnZ2VyUmVzcG9uc2VGb3JNY3BUb29sQ2FsbHMgPVxuICAgICAgICAgICAgb3B0aW9ucy5hdXRvbWF0aWNhbGx5VHJpZ2dlclJlc3BvbnNlRm9yTWNwVG9vbENhbGxzID8/IHRydWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSB0cmFuc3BvcnQgbGF5ZXIgdXNlZCBieSB0aGUgc2Vzc2lvbi5cbiAgICAgKi9cbiAgICBnZXQgdHJhbnNwb3J0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jdHJhbnNwb3J0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgY3VycmVudCBhZ2VudCBpbiB0aGUgc2Vzc2lvbi5cbiAgICAgKi9cbiAgICBnZXQgY3VycmVudEFnZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jY3VycmVudEFnZW50O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgY3VycmVudCB1c2FnZSBvZiB0aGUgc2Vzc2lvbi5cbiAgICAgKi9cbiAgICBnZXQgdXNhZ2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNjb250ZXh0LnVzYWdlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgY3VycmVudCBjb250ZXh0IG9mIHRoZSBzZXNzaW9uLlxuICAgICAqL1xuICAgIGdldCBjb250ZXh0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy4jY29udGV4dDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogV2hldGhlciB0aGUgc2Vzc2lvbiBpcyBtdXRlZC4gTWlnaHQgYmUgYG51bGxgIGlmIHRoZSB1bmRlcmx5aW5nIHRyYW5zcG9ydCBsYXllciBkb2VzIG5vdFxuICAgICAqIHN1cHBvcnQgbXV0aW5nLlxuICAgICAqL1xuICAgIGdldCBtdXRlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuI3RyYW5zcG9ydC5tdXRlZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIGhpc3Rvcnkgb2YgdGhlIHNlc3Npb24uXG4gICAgICovXG4gICAgZ2V0IGhpc3RvcnkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNoaXN0b3J5O1xuICAgIH1cbiAgICBnZXQgYXZhaWxhYmxlTWNwVG9vbHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNhdmFpbGFibGVNY3BUb29scztcbiAgICB9XG4gICAgYXN5bmMgI3NldEN1cnJlbnRBZ2VudChhZ2VudCkge1xuICAgICAgICB0aGlzLiNjdXJyZW50QWdlbnQgPSBhZ2VudDtcbiAgICAgICAgY29uc3QgaGFuZG9mZnMgPSBhd2FpdCB0aGlzLiNjdXJyZW50QWdlbnQuZ2V0RW5hYmxlZEhhbmRvZmZzKHRoaXMuI2NvbnRleHQpO1xuICAgICAgICBjb25zdCBoYW5kb2ZmVG9vbHMgPSBoYW5kb2Zmcy5tYXAoKGhhbmRvZmYpID0+IGhhbmRvZmYuZ2V0SGFuZG9mZkFzRnVuY3Rpb25Ub29sKCkpO1xuICAgICAgICBjb25zdCBhbGxUb29scyA9IChhd2FpdCB0aGlzLiNjdXJyZW50QWdlbnQuZ2V0QWxsVG9vbHModGhpcy4jY29udGV4dCkpXG4gICAgICAgICAgICAuZmlsdGVyKGlzVmFsaWRSZWFsdGltZVRvb2wpXG4gICAgICAgICAgICAubWFwKHRvUmVhbHRpbWVUb29sRGVmaW5pdGlvbik7XG4gICAgICAgIGNvbnN0IGhhc1Rvb2xzRGVmaW5lZCA9IHR5cGVvZiB0aGlzLiNjdXJyZW50QWdlbnQudG9vbHMgIT09ICd1bmRlZmluZWQnIHx8XG4gICAgICAgICAgICB0eXBlb2YgdGhpcy4jY3VycmVudEFnZW50Lm1jcFNlcnZlcnMgIT09ICd1bmRlZmluZWQnO1xuICAgICAgICBjb25zdCBoYXNIYW5kb2Zmc0RlZmluZWQgPSBoYW5kb2Zmcy5sZW5ndGggPiAwO1xuICAgICAgICB0aGlzLiNjdXJyZW50VG9vbHMgPVxuICAgICAgICAgICAgaGFzVG9vbHNEZWZpbmVkIHx8IGhhc0hhbmRvZmZzRGVmaW5lZFxuICAgICAgICAgICAgICAgID8gWy4uLmFsbFRvb2xzLCAuLi5oYW5kb2ZmVG9vbHNdXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgIC8vIFJlY29tcHV0ZSBjdXJyZW50bHkgYXZhaWxhYmxlIE1DUCB0b29scyBiYXNlZCBvbiB0aGUgbmV3IGFnZW50J3MgYWN0aXZlIHNlcnZlciBsYWJlbHMuXG4gICAgICAgIHRoaXMuI3VwZGF0ZUF2YWlsYWJsZU1jcFRvb2xzKCk7XG4gICAgfVxuICAgIGFzeW5jICNnZXRTZXNzaW9uQ29uZmlnKGFkZGl0aW9uYWxDb25maWcgPSB7fSkge1xuICAgICAgICBjb25zdCBpbnN0cnVjdGlvbnMgPSBhd2FpdCB0aGlzLiNjdXJyZW50QWdlbnQuZ2V0U3lzdGVtUHJvbXB0KHRoaXMuI2NvbnRleHQpO1xuICAgICAgICBjb25zdCB0cmFjaW5nQ29uZmlnID0gdGhpcy5vcHRpb25zXG4gICAgICAgICAgICAudHJhY2luZ0Rpc2FibGVkXG4gICAgICAgICAgICA/IG51bGxcbiAgICAgICAgICAgIDogdGhpcy5vcHRpb25zLndvcmtmbG93TmFtZVxuICAgICAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgICAgICB3b3JrZmxvd19uYW1lOiB0aGlzLm9wdGlvbnMud29ya2Zsb3dOYW1lLFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICA6ICdhdXRvJztcbiAgICAgICAgaWYgKHRyYWNpbmdDb25maWcgIT09IG51bGwgJiYgdHJhY2luZ0NvbmZpZyAhPT0gJ2F1dG8nKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmdyb3VwSWQpIHtcbiAgICAgICAgICAgICAgICB0cmFjaW5nQ29uZmlnLmdyb3VwX2lkID0gdGhpcy5vcHRpb25zLmdyb3VwSWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnRyYWNlTWV0YWRhdGEpIHtcbiAgICAgICAgICAgICAgICB0cmFjaW5nQ29uZmlnLm1ldGFkYXRhID0gdGhpcy5vcHRpb25zLnRyYWNlTWV0YWRhdGE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5vcHRpb25zLmdyb3VwSWQgfHwgdGhpcy5vcHRpb25zLnRyYWNlTWV0YWRhdGEpIHtcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKCdJbiBvcmRlciB0byBzZXQgdHJhY2VNZXRhZGF0YSBvciBhIGdyb3VwSWQgeW91IG5lZWQgdG8gc3BlY2lmeSBhIHdvcmtmbG93TmFtZS4nKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTdGFydCBmcm9tIGFueSBwcmV2aW91c2x5LXNlbnQgY29uZmlnIChzbyB3ZSBwcmVzZXJ2ZSB2YWx1ZXMgbGlrZSBhdWRpbyBmb3JtYXRzKVxuICAgICAgICAvLyBhbmQgdGhlIG9yaWdpbmFsIG9wdGlvbnMuY29uZmlnIHByb3ZpZGVkIGJ5IHRoZSB1c2VyLiBQcmVmZXJlbmNlIG9yZGVyOlxuICAgICAgICAvLyAxLiBMYXN0IHNlc3Npb24gY29uZmlnIHdlIHNlbnQgKCNsYXN0U2Vzc2lvbkNvbmZpZylcbiAgICAgICAgLy8gMi4gT3JpZ2luYWwgb3B0aW9ucy5jb25maWdcbiAgICAgICAgLy8gMy4gQWRkaXRpb25hbCBjb25maWcgcGFzc2VkIGludG8gdGhpcyBpbnZvY2F0aW9uIChleHBsaWNpdCBvdmVycmlkZXMpXG4gICAgICAgIC8vIEZpbmFsbHkgd2Ugb3ZlcndyaXRlIGR5bmFtaWMgZmllbGRzIChpbnN0cnVjdGlvbnMsIHZvaWNlLCBtb2RlbCwgdG9vbHMsIHRyYWNpbmcpXG4gICAgICAgIC8vIHRvIGVuc3VyZSB0aGV5IGFsd2F5cyByZWZsZWN0IHRoZSBjdXJyZW50IGFnZW50ICYgcnVudGltZSBzdGF0ZS5cbiAgICAgICAgY29uc3QgYmFzZSA9IHtcbiAgICAgICAgICAgIC4uLih0aGlzLiNsYXN0U2Vzc2lvbkNvbmZpZyA/PyB7fSksXG4gICAgICAgICAgICAuLi4odGhpcy5vcHRpb25zLmNvbmZpZyA/PyB7fSksXG4gICAgICAgICAgICAuLi4oYWRkaXRpb25hbENvbmZpZyA/PyB7fSksXG4gICAgICAgIH07XG4gICAgICAgIC8vIE5vdGU6IENlcnRhaW4gZmllbGRzIGNhbm5vdCBiZSB1cGRhdGVkIGFmdGVyIHRoZSBzZXNzaW9uIGJlZ2lucywgc3VjaCBhcyB2b2ljZSBhbmQgbW9kZWxcbiAgICAgICAgY29uc3QgZnVsbENvbmZpZyA9IHtcbiAgICAgICAgICAgIC4uLmJhc2UsXG4gICAgICAgICAgICBpbnN0cnVjdGlvbnMsXG4gICAgICAgICAgICB2b2ljZTogdGhpcy4jY3VycmVudEFnZW50LnZvaWNlLFxuICAgICAgICAgICAgbW9kZWw6IHRoaXMub3B0aW9ucy5tb2RlbCxcbiAgICAgICAgICAgIHRvb2xzOiB0aGlzLiNjdXJyZW50VG9vbHMsXG4gICAgICAgICAgICB0cmFjaW5nOiB0cmFjaW5nQ29uZmlnLFxuICAgICAgICAgICAgcHJvbXB0OiB0eXBlb2YgdGhpcy4jY3VycmVudEFnZW50LnByb21wdCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgICAgID8gYXdhaXQgdGhpcy4jY3VycmVudEFnZW50LnByb21wdCh0aGlzLiNjb250ZXh0LCB0aGlzLiNjdXJyZW50QWdlbnQpXG4gICAgICAgICAgICAgICAgOiB0aGlzLiNjdXJyZW50QWdlbnQucHJvbXB0LFxuICAgICAgICB9O1xuICAgICAgICAvLyBVcGRhdGUgb3VyIGNhY2hlIHNvIHN1YnNlcXVlbnQgdXBkYXRlcyBpbmhlcml0IHRoZSBmdWxsIHNldCBpbmNsdWRpbmcgYW55XG4gICAgICAgIC8vIGR5bmFtaWMgZmllbGRzIHdlIGp1c3Qgb3Zlcndyb3RlLlxuICAgICAgICB0aGlzLiNsYXN0U2Vzc2lvbkNvbmZpZyA9IGZ1bGxDb25maWc7XG4gICAgICAgIHJldHVybiBmdWxsQ29uZmlnO1xuICAgIH1cbiAgICBhc3luYyB1cGRhdGVBZ2VudChuZXdBZ2VudCkge1xuICAgICAgICB0aGlzLiNjdXJyZW50QWdlbnQuZW1pdCgnYWdlbnRfaGFuZG9mZicsIHRoaXMuI2NvbnRleHQsIG5ld0FnZW50KTtcbiAgICAgICAgdGhpcy5lbWl0KCdhZ2VudF9oYW5kb2ZmJywgdGhpcy4jY29udGV4dCwgdGhpcy4jY3VycmVudEFnZW50LCBuZXdBZ2VudCk7XG4gICAgICAgIGF3YWl0IHRoaXMuI3NldEN1cnJlbnRBZ2VudChuZXdBZ2VudCk7XG4gICAgICAgIGF3YWl0IHRoaXMuI3RyYW5zcG9ydC51cGRhdGVTZXNzaW9uQ29uZmlnKGF3YWl0IHRoaXMuI2dldFNlc3Npb25Db25maWcoKSk7XG4gICAgICAgIHJldHVybiBuZXdBZ2VudDtcbiAgICB9XG4gICAgYXN5bmMgI2hhbmRsZUhhbmRvZmYodG9vbENhbGwsIGhhbmRvZmYpIHtcbiAgICAgICAgY29uc3QgbmV3QWdlbnQgPSAoYXdhaXQgaGFuZG9mZi5vbkludm9rZUhhbmRvZmYodGhpcy4jY29udGV4dCwgdG9vbENhbGwuYXJndW1lbnRzKSk7XG4gICAgICAgIHRoaXMuI2N1cnJlbnRBZ2VudC5lbWl0KCdhZ2VudF9oYW5kb2ZmJywgdGhpcy4jY29udGV4dCwgbmV3QWdlbnQpO1xuICAgICAgICB0aGlzLmVtaXQoJ2FnZW50X2hhbmRvZmYnLCB0aGlzLiNjb250ZXh0LCB0aGlzLiNjdXJyZW50QWdlbnQsIG5ld0FnZW50KTtcbiAgICAgICAgLy8gdXBkYXRlIHNlc3Npb24gd2l0aCBuZXcgYWdlbnRcbiAgICAgICAgYXdhaXQgdGhpcy4jc2V0Q3VycmVudEFnZW50KG5ld0FnZW50KTtcbiAgICAgICAgYXdhaXQgdGhpcy4jdHJhbnNwb3J0LnVwZGF0ZVNlc3Npb25Db25maWcoYXdhaXQgdGhpcy4jZ2V0U2Vzc2lvbkNvbmZpZygpKTtcbiAgICAgICAgY29uc3Qgb3V0cHV0ID0gZ2V0VHJhbnNmZXJNZXNzYWdlKG5ld0FnZW50KTtcbiAgICAgICAgdGhpcy4jdHJhbnNwb3J0LnNlbmRGdW5jdGlvbkNhbGxPdXRwdXQodG9vbENhbGwsIG91dHB1dCwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiBuZXdBZ2VudDtcbiAgICB9XG4gICAgYXN5bmMgI2hhbmRsZUZ1bmN0aW9uVG9vbENhbGwodG9vbENhbGwsIHRvb2wpIHtcbiAgICAgICAgdGhpcy4jY29udGV4dC5jb250ZXh0Lmhpc3RvcnkgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMuI2hpc3RvcnkpKTsgLy8gZGVlcCBjb3B5IG9mIHRoZSBoaXN0b3J5XG4gICAgICAgIGxldCBwYXJzZWRBcmdzID0gdG9vbENhbGwuYXJndW1lbnRzO1xuICAgICAgICBpZiAodG9vbC5wYXJhbWV0ZXJzKSB7XG4gICAgICAgICAgICBpZiAoaXNab2RPYmplY3QodG9vbC5wYXJhbWV0ZXJzKSkge1xuICAgICAgICAgICAgICAgIHBhcnNlZEFyZ3MgPSB0b29sLnBhcmFtZXRlcnMucGFyc2UocGFyc2VkQXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBwYXJzZWRBcmdzID0gSlNPTi5wYXJzZShwYXJzZWRBcmdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuZWVkc0FwcHJvdmFsID0gYXdhaXQgdG9vbC5uZWVkc0FwcHJvdmFsKHRoaXMuI2NvbnRleHQsIHBhcnNlZEFyZ3MsIHRvb2xDYWxsLmNhbGxJZCk7XG4gICAgICAgIGlmIChuZWVkc0FwcHJvdmFsKSB7XG4gICAgICAgICAgICBjb25zdCBhcHByb3ZhbCA9IHRoaXMuY29udGV4dC5pc1Rvb2xBcHByb3ZlZCh7XG4gICAgICAgICAgICAgICAgdG9vbE5hbWU6IHRvb2wubmFtZSxcbiAgICAgICAgICAgICAgICBjYWxsSWQ6IHRvb2xDYWxsLmNhbGxJZCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGFwcHJvdmFsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnYWdlbnRfdG9vbF9zdGFydCcsIHRoaXMuI2NvbnRleHQsIHRoaXMuI2N1cnJlbnRBZ2VudCwgdG9vbCwge1xuICAgICAgICAgICAgICAgICAgICB0b29sQ2FsbCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLiNjdXJyZW50QWdlbnQuZW1pdCgnYWdlbnRfdG9vbF9zdGFydCcsIHRoaXMuI2NvbnRleHQsIHRvb2wsIHtcbiAgICAgICAgICAgICAgICAgICAgdG9vbENhbGwsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gJ1Rvb2wgZXhlY3V0aW9uIHdhcyBub3QgYXBwcm92ZWQuJztcbiAgICAgICAgICAgICAgICB0aGlzLiN0cmFuc3BvcnQuc2VuZEZ1bmN0aW9uQ2FsbE91dHB1dCh0b29sQ2FsbCwgcmVzdWx0LCB0cnVlKTtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ2FnZW50X3Rvb2xfZW5kJywgdGhpcy4jY29udGV4dCwgdGhpcy4jY3VycmVudEFnZW50LCB0b29sLCByZXN1bHQsIHsgdG9vbENhbGwgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy4jY3VycmVudEFnZW50LmVtaXQoJ2FnZW50X3Rvb2xfZW5kJywgdGhpcy4jY29udGV4dCwgdG9vbCwgcmVzdWx0LCB7XG4gICAgICAgICAgICAgICAgICAgIHRvb2xDYWxsLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBhcHByb3ZhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ3Rvb2xfYXBwcm92YWxfcmVxdWVzdGVkJywgdGhpcy4jY29udGV4dCwgdGhpcy4jY3VycmVudEFnZW50LCB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdmdW5jdGlvbl9hcHByb3ZhbCcsXG4gICAgICAgICAgICAgICAgICAgIHRvb2wsXG4gICAgICAgICAgICAgICAgICAgIGFwcHJvdmFsSXRlbTogbmV3IFJ1blRvb2xBcHByb3ZhbEl0ZW0odG9vbENhbGwsIHRoaXMuI2N1cnJlbnRBZ2VudCksXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuZW1pdCgnYWdlbnRfdG9vbF9zdGFydCcsIHRoaXMuI2NvbnRleHQsIHRoaXMuI2N1cnJlbnRBZ2VudCwgdG9vbCwge1xuICAgICAgICAgICAgdG9vbENhbGwsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLiNjdXJyZW50QWdlbnQuZW1pdCgnYWdlbnRfdG9vbF9zdGFydCcsIHRoaXMuI2NvbnRleHQsIHRvb2wsIHtcbiAgICAgICAgICAgIHRvb2xDYWxsLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy4jY29udGV4dC5jb250ZXh0Lmhpc3RvcnkgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMuI2hpc3RvcnkpKTsgLy8gZGVlcCBjb3B5IG9mIHRoZSBoaXN0b3J5XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRvb2wuaW52b2tlKHRoaXMuI2NvbnRleHQsIHRvb2xDYWxsLmFyZ3VtZW50cywge1xuICAgICAgICAgICAgdG9vbENhbGwsXG4gICAgICAgIH0pO1xuICAgICAgICBsZXQgc3RyaW5nUmVzdWx0O1xuICAgICAgICBpZiAoaXNCYWNrZ3JvdW5kUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgICAgICAgIC8vIERvbid0IGdlbmVyYXRlIGEgbmV3IHJlc3BvbnNlLCBqdXN0IHNlbmQgdGhlIHJlc3VsdFxuICAgICAgICAgICAgc3RyaW5nUmVzdWx0ID0gdG9TbWFydFN0cmluZyhyZXN1bHQuY29udGVudCk7XG4gICAgICAgICAgICB0aGlzLiN0cmFuc3BvcnQuc2VuZEZ1bmN0aW9uQ2FsbE91dHB1dCh0b29sQ2FsbCwgc3RyaW5nUmVzdWx0LCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzdHJpbmdSZXN1bHQgPSB0b1NtYXJ0U3RyaW5nKHJlc3VsdCk7XG4gICAgICAgICAgICB0aGlzLiN0cmFuc3BvcnQuc2VuZEZ1bmN0aW9uQ2FsbE91dHB1dCh0b29sQ2FsbCwgc3RyaW5nUmVzdWx0LCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVtaXQoJ2FnZW50X3Rvb2xfZW5kJywgdGhpcy4jY29udGV4dCwgdGhpcy4jY3VycmVudEFnZW50LCB0b29sLCBzdHJpbmdSZXN1bHQsIHsgdG9vbENhbGwgfSk7XG4gICAgICAgIHRoaXMuI2N1cnJlbnRBZ2VudC5lbWl0KCdhZ2VudF90b29sX2VuZCcsIHRoaXMuI2NvbnRleHQsIHRvb2wsIHN0cmluZ1Jlc3VsdCwgeyB0b29sQ2FsbCB9KTtcbiAgICB9XG4gICAgYXN5bmMgI2hhbmRsZUZ1bmN0aW9uQ2FsbCh0b29sQ2FsbCkge1xuICAgICAgICBjb25zdCBlbmFibGVkSGFuZG9mZnMgPSBhd2FpdCB0aGlzLiNjdXJyZW50QWdlbnQuZ2V0RW5hYmxlZEhhbmRvZmZzKHRoaXMuI2NvbnRleHQpO1xuICAgICAgICBjb25zdCBoYW5kb2ZmTWFwID0gbmV3IE1hcChlbmFibGVkSGFuZG9mZnMubWFwKChoYW5kb2ZmKSA9PiBbaGFuZG9mZi50b29sTmFtZSwgaGFuZG9mZl0pKTtcbiAgICAgICAgY29uc3QgYWxsVG9vbHMgPSBhd2FpdCB0aGlzLiNjdXJyZW50QWdlbnQuZ2V0QWxsVG9vbHModGhpcy4jY29udGV4dCk7XG4gICAgICAgIGNvbnN0IGZ1bmN0aW9uVG9vbE1hcCA9IG5ldyBNYXAoYWxsVG9vbHMubWFwKCh0b29sKSA9PiBbdG9vbC5uYW1lLCB0b29sXSkpO1xuICAgICAgICBjb25zdCBwb3NzaWJsZUhhbmRvZmYgPSBoYW5kb2ZmTWFwLmdldCh0b29sQ2FsbC5uYW1lKTtcbiAgICAgICAgaWYgKHBvc3NpYmxlSGFuZG9mZikge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy4jaGFuZGxlSGFuZG9mZih0b29sQ2FsbCwgcG9zc2libGVIYW5kb2ZmKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGZ1bmN0aW9uVG9vbCA9IGZ1bmN0aW9uVG9vbE1hcC5nZXQodG9vbENhbGwubmFtZSk7XG4gICAgICAgICAgICBpZiAoZnVuY3Rpb25Ub29sICYmIGZ1bmN0aW9uVG9vbC50eXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy4jaGFuZGxlRnVuY3Rpb25Ub29sQ2FsbCh0b29sQ2FsbCwgZnVuY3Rpb25Ub29sKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBNb2RlbEJlaGF2aW9yRXJyb3IoYFRvb2wgJHt0b29sQ2FsbC5uYW1lfSBub3QgZm91bmRgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyAjcnVuT3V0cHV0R3VhcmRyYWlscyhvdXRwdXQsIHJlc3BvbnNlSWQsIGl0ZW1JZCkge1xuICAgICAgICBpZiAodGhpcy4jb3V0cHV0R3VhcmRyYWlscy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBndWFyZHJhaWxBcmdzID0ge1xuICAgICAgICAgICAgYWdlbnQ6IHRoaXMuI2N1cnJlbnRBZ2VudCxcbiAgICAgICAgICAgIGFnZW50T3V0cHV0OiBvdXRwdXQsXG4gICAgICAgICAgICBjb250ZXh0OiB0aGlzLiNjb250ZXh0LFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCByZXN1bHRzID0gYXdhaXQgUHJvbWlzZS5hbGwodGhpcy4jb3V0cHV0R3VhcmRyYWlscy5tYXAoKGd1YXJkcmFpbCkgPT4gZ3VhcmRyYWlsLnJ1bihndWFyZHJhaWxBcmdzKSkpO1xuICAgICAgICBjb25zdCBmaXJzdFRyaXB3aXJlVHJpZ2dlcmVkID0gcmVzdWx0cy5maW5kKChyZXN1bHQpID0+IHJlc3VsdC5vdXRwdXQudHJpcHdpcmVUcmlnZ2VyZWQpO1xuICAgICAgICBpZiAoZmlyc3RUcmlwd2lyZVRyaWdnZXJlZCkge1xuICAgICAgICAgICAgLy8gdGhpcyBlbnN1cmVzIHRoYXQgaWYgb25lIGd1YXJkcmFpbCBhbHJlYWR5IHRyaXBzIGFuZCB3ZSBhcmUgaW4gdGhlIG1pZGRsZSBvZiBhbm90aGVyXG4gICAgICAgICAgICAvLyBndWFyZHJhaWwgcnVuLCB3ZSBkb24ndCB0cmlwIGFnYWluXG4gICAgICAgICAgICBpZiAodGhpcy4jaW50ZXJydXB0ZWRCeUd1YXJkcmFpbFtyZXNwb25zZUlkXSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuI2ludGVycnVwdGVkQnlHdWFyZHJhaWxbcmVzcG9uc2VJZF0gPSB0cnVlO1xuICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgT3V0cHV0R3VhcmRyYWlsVHJpcHdpcmVUcmlnZ2VyZWQoYE91dHB1dCBndWFyZHJhaWwgdHJpZ2dlcmVkOiAke0pTT04uc3RyaW5naWZ5KGZpcnN0VHJpcHdpcmVUcmlnZ2VyZWQub3V0cHV0Lm91dHB1dEluZm8pfWAsIGZpcnN0VHJpcHdpcmVUcmlnZ2VyZWQpO1xuICAgICAgICAgICAgdGhpcy5lbWl0KCdndWFyZHJhaWxfdHJpcHBlZCcsIHRoaXMuI2NvbnRleHQsIHRoaXMuI2N1cnJlbnRBZ2VudCwgZXJyb3IsIHtcbiAgICAgICAgICAgICAgICBpdGVtSWQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuaW50ZXJydXB0KCk7XG4gICAgICAgICAgICBjb25zdCBmZWVkYmFja1RleHQgPSBnZXRSZWFsdGltZUd1YXJkcmFpbEZlZWRiYWNrTWVzc2FnZShmaXJzdFRyaXB3aXJlVHJpZ2dlcmVkKTtcbiAgICAgICAgICAgIHRoaXMuc2VuZE1lc3NhZ2UoZmVlZGJhY2tUZXh0KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cbiAgICAjc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgICAgIHRoaXMuI3RyYW5zcG9ydC5vbignKicsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5lbWl0KCd0cmFuc3BvcnRfZXZlbnQnLCBldmVudCk7XG4gICAgICAgICAgICAvLyBIYW5kbGUgY29tcGxldGVkIHVzZXIgdHJhbnNjcmlwdGlvbiBldmVudHNcbiAgICAgICAgICAgIGlmIChldmVudC50eXBlID09PSAnY29udmVyc2F0aW9uLml0ZW0uaW5wdXRfYXVkaW9fdHJhbnNjcmlwdGlvbi5jb21wbGV0ZWQnKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29tcGxldGVkRXZlbnQgPSBldmVudDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4jaGlzdG9yeSA9IHVwZGF0ZVJlYWx0aW1lSGlzdG9yeSh0aGlzLiNoaXN0b3J5LCBjb21wbGV0ZWRFdmVudCwgdGhpcy4jc2hvdWxkSW5jbHVkZUF1ZGlvRGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuI2NvbnRleHQuY29udGV4dC5oaXN0b3J5ID0gdGhpcy4jaGlzdG9yeTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdoaXN0b3J5X3VwZGF0ZWQnLCB0aGlzLiNoaXN0b3J5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ2Vycm9yJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2Vycm9yJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiBlcnIsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuI3RyYW5zcG9ydC5vbignbWNwX3Rvb2xzX2xpc3RlZCcsICh7IHNlcnZlckxhYmVsLCB0b29scyB9KSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHRoaXMuI2FsbE1jcFRvb2xzQnlTZXJ2ZXIuc2V0KHNlcnZlckxhYmVsLCB0b29scyA/PyBbXSk7XG4gICAgICAgICAgICAgICAgdGhpcy4jdXBkYXRlQXZhaWxhYmxlTWNwVG9vbHMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ2Vycm9yJywgeyB0eXBlOiAnZXJyb3InLCBlcnJvcjogZXJyIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy4jdHJhbnNwb3J0Lm9uKCdhdWRpbycsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLiNhdWRpb1N0YXJ0ZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiNhdWRpb1N0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnYXVkaW9fc3RhcnQnLCB0aGlzLiNjb250ZXh0LCB0aGlzLiNjdXJyZW50QWdlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5lbWl0KCdhdWRpbycsIGV2ZW50KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuI3RyYW5zcG9ydC5vbigndHVybl9zdGFydGVkJywgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy4jYXVkaW9TdGFydGVkID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmVtaXQoJ2FnZW50X3N0YXJ0JywgdGhpcy4jY29udGV4dCwgdGhpcy4jY3VycmVudEFnZW50KTtcbiAgICAgICAgICAgIHRoaXMuI2N1cnJlbnRBZ2VudC5lbWl0KCdhZ2VudF9zdGFydCcsIHRoaXMuI2NvbnRleHQsIHRoaXMuI2N1cnJlbnRBZ2VudCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLiN0cmFuc3BvcnQub24oJ3R1cm5fZG9uZScsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaXRlbSA9IGV2ZW50LnJlc3BvbnNlLm91dHB1dFtldmVudC5yZXNwb25zZS5vdXRwdXQubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICBjb25zdCB0ZXh0T3V0cHV0ID0gZ2V0TGFzdFRleHRGcm9tQXVkaW9PdXRwdXRNZXNzYWdlKGl0ZW0pID8/ICcnO1xuICAgICAgICAgICAgY29uc3QgaXRlbUlkID0gaXRlbT8uaWQgPz8gJyc7XG4gICAgICAgICAgICB0aGlzLmVtaXQoJ2FnZW50X2VuZCcsIHRoaXMuI2NvbnRleHQsIHRoaXMuI2N1cnJlbnRBZ2VudCwgdGV4dE91dHB1dCk7XG4gICAgICAgICAgICB0aGlzLiNjdXJyZW50QWdlbnQuZW1pdCgnYWdlbnRfZW5kJywgdGhpcy4jY29udGV4dCwgdGV4dE91dHB1dCk7XG4gICAgICAgICAgICB0aGlzLiNydW5PdXRwdXRHdWFyZHJhaWxzKHRleHRPdXRwdXQsIGV2ZW50LnJlc3BvbnNlLmlkLCBpdGVtSWQpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy4jdHJhbnNwb3J0Lm9uKCdhdWRpb19kb25lJywgKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuI2F1ZGlvU3RhcnRlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuI2F1ZGlvU3RhcnRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5lbWl0KCdhdWRpb19zdG9wcGVkJywgdGhpcy4jY29udGV4dCwgdGhpcy4jY3VycmVudEFnZW50KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGxldCBsYXN0UnVuSW5kZXggPSAwO1xuICAgICAgICBsZXQgbGFzdEl0ZW1JZDtcbiAgICAgICAgdGhpcy4jdHJhbnNwb3J0Lm9uKCdhdWRpb190cmFuc2NyaXB0X2RlbHRhJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRlbHRhID0gZXZlbnQuZGVsdGE7XG4gICAgICAgICAgICAgICAgY29uc3QgaXRlbUlkID0gZXZlbnQuaXRlbUlkO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlSWQgPSBldmVudC5yZXNwb25zZUlkO1xuICAgICAgICAgICAgICAgIGlmIChsYXN0SXRlbUlkICE9PSBpdGVtSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgbGFzdEl0ZW1JZCA9IGl0ZW1JZDtcbiAgICAgICAgICAgICAgICAgICAgbGFzdFJ1bkluZGV4ID0gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgY3VycmVudFRleHQgPSB0aGlzLiN0cmFuc2NyaWJlZFRleHREZWx0YXNbaXRlbUlkXSA/PyAnJztcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdUZXh0ID0gY3VycmVudFRleHQgKyBkZWx0YTtcbiAgICAgICAgICAgICAgICB0aGlzLiN0cmFuc2NyaWJlZFRleHREZWx0YXNbaXRlbUlkXSA9IG5ld1RleHQ7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuI291dHB1dEd1YXJkcmFpbFNldHRpbmdzLmRlYm91bmNlVGV4dExlbmd0aCA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBuZXdSdW5JbmRleCA9IE1hdGguZmxvb3IobmV3VGV4dC5sZW5ndGggLyB0aGlzLiNvdXRwdXRHdWFyZHJhaWxTZXR0aW5ncy5kZWJvdW5jZVRleHRMZW5ndGgpO1xuICAgICAgICAgICAgICAgIGlmIChuZXdSdW5JbmRleCA+IGxhc3RSdW5JbmRleCkge1xuICAgICAgICAgICAgICAgICAgICBsYXN0UnVuSW5kZXggPSBuZXdSdW5JbmRleDtcbiAgICAgICAgICAgICAgICAgICAgLy8gV2UgZG9uJ3QgY2FuY2VsIGV4aXN0aW5nIHJ1bnMgYmVjYXVzZSB3ZSB3YW50IHRoZSBmaXJzdCBvbmUgdG8gZmFpbCB0byBmYWlsXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSB0cmFuc3BvcnQgbGF5ZXIgc2hvdWxkIHVwb24gZmFpbHVyZSBoYW5kbGUgdGhlIGludGVycnVwdGlvbiBhbmQgc3RvcCB0aGUgbW9kZWxcbiAgICAgICAgICAgICAgICAgICAgLy8gZnJvbSBnZW5lcmF0aW5nIGZ1cnRoZXJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4jcnVuT3V0cHV0R3VhcmRyYWlscyhuZXdUZXh0LCByZXNwb25zZUlkLCBpdGVtSWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ2Vycm9yJywge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZXJyb3InLFxuICAgICAgICAgICAgICAgICAgICBlcnJvcjogZXJyLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy4jdHJhbnNwb3J0Lm9uKCdpdGVtX3VwZGF0ZScsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBpc05ldyA9ICF0aGlzLiNoaXN0b3J5LnNvbWUoKGl0ZW0pID0+IGl0ZW0uaXRlbUlkID09PSBldmVudC5pdGVtSWQpO1xuICAgICAgICAgICAgICAgIHRoaXMuI2hpc3RvcnkgPSB1cGRhdGVSZWFsdGltZUhpc3RvcnkodGhpcy4jaGlzdG9yeSwgZXZlbnQsIHRoaXMuI3Nob3VsZEluY2x1ZGVBdWRpb0RhdGEpO1xuICAgICAgICAgICAgICAgIHRoaXMuI2NvbnRleHQuY29udGV4dC5oaXN0b3J5ID0gdGhpcy4jaGlzdG9yeTtcbiAgICAgICAgICAgICAgICBpZiAoaXNOZXcpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYWRkZWRJdGVtID0gdGhpcy4jaGlzdG9yeS5maW5kKChpdGVtKSA9PiBpdGVtLml0ZW1JZCA9PT0gZXZlbnQuaXRlbUlkKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFkZGVkSXRlbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdoaXN0b3J5X2FkZGVkJywgYWRkZWRJdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ2hpc3RvcnlfdXBkYXRlZCcsIHRoaXMuI2hpc3RvcnkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnZXJyb3InLCB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdlcnJvcicsXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiBlcnIsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLiN0cmFuc3BvcnQub24oJ2l0ZW1fZGVsZXRlZCcsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB0aGlzLiNoaXN0b3J5ID0gdGhpcy4jaGlzdG9yeS5maWx0ZXIoKGl0ZW0pID0+IGl0ZW0uaXRlbUlkICE9PSBldmVudC5pdGVtSWQpO1xuICAgICAgICAgICAgICAgIHRoaXMuI2NvbnRleHQuY29udGV4dC5oaXN0b3J5ID0gdGhpcy4jaGlzdG9yeTtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ2hpc3RvcnlfdXBkYXRlZCcsIHRoaXMuI2hpc3RvcnkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnZXJyb3InLCB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdlcnJvcicsXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiBlcnIsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLiN0cmFuc3BvcnQub24oJ2Z1bmN0aW9uX2NhbGwnLCBhc3luYyAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy4jaGFuZGxlRnVuY3Rpb25DYWxsKGV2ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcignRXJyb3IgaGFuZGxpbmcgZnVuY3Rpb24gY2FsbCcsIGVycm9yKTtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ2Vycm9yJywge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZXJyb3InLFxuICAgICAgICAgICAgICAgICAgICBlcnJvcixcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuI3RyYW5zcG9ydC5vbigndXNhZ2VfdXBkYXRlJywgKHVzYWdlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLiNjb250ZXh0LnVzYWdlLmFkZCh1c2FnZSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLiN0cmFuc3BvcnQub24oJ2F1ZGlvX2ludGVycnVwdGVkJywgKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuI2F1ZGlvU3RhcnRlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuI2F1ZGlvU3RhcnRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5lbWl0KCdhdWRpb19pbnRlcnJ1cHRlZCcsIHRoaXMuI2NvbnRleHQsIHRoaXMuI2N1cnJlbnRBZ2VudCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLiN0cmFuc3BvcnQub24oJ2Vycm9yJywgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmVtaXQoJ2Vycm9yJywgZXJyb3IpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy4jdHJhbnNwb3J0Lm9uKCdtY3BfdG9vbF9jYWxsX2NvbXBsZXRlZCcsICh0b29sQ2FsbCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5lbWl0KCdtY3BfdG9vbF9jYWxsX2NvbXBsZXRlZCcsIHRoaXMuI2NvbnRleHQsIHRoaXMuI2N1cnJlbnRBZ2VudCwgdG9vbENhbGwpO1xuICAgICAgICAgICAgaWYgKHRoaXMuI2F1dG9tYXRpY2FsbHlUcmlnZ2VyUmVzcG9uc2VGb3JNY3BUb29sQ2FsbHMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiN0cmFuc3BvcnQuc2VuZEV2ZW50KHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3Jlc3BvbnNlLmNyZWF0ZScsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLiN0cmFuc3BvcnQub24oJ21jcF9hcHByb3ZhbF9yZXF1ZXN0JywgKGFwcHJvdmFsUmVxdWVzdCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5lbWl0KCd0b29sX2FwcHJvdmFsX3JlcXVlc3RlZCcsIHRoaXMuI2NvbnRleHQsIHRoaXMuI2N1cnJlbnRBZ2VudCwge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdtY3BfYXBwcm92YWxfcmVxdWVzdCcsXG4gICAgICAgICAgICAgICAgYXBwcm92YWxJdGVtOiByZWFsdGltZUFwcHJvdmFsSXRlbVRvQXBwcm92YWxJdGVtKHRoaXMuI2N1cnJlbnRBZ2VudCwgYXBwcm92YWxSZXF1ZXN0KSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVjb21wdXRlcyB0aGUgY3VycmVudGx5IGF2YWlsYWJsZSBNQ1AgdG9vbHMgYmFzZWQgb24gdGhlIGN1cnJlbnQgYWdlbnQncyBhY3RpdmVcbiAgICAgKiBNQ1Agc2VydmVyIGNvbmZpZ3VyYXRpb25zIGFuZCB0aGUgY2FjaGVkIHBlci1zZXJ2ZXIgdG9vbCBsaXN0aW5ncy4gRW1pdHNcbiAgICAgKiBgbWNwX3Rvb2xzX2NoYW5nZWRgIGlmIHRoZSBzZXQgY2hhbmdlZC5cbiAgICAgKi9cbiAgICAjdXBkYXRlQXZhaWxhYmxlTWNwVG9vbHMoKSB7XG4gICAgICAgIC8vIENvbGxlY3QgYWN0aXZlIE1DUCBzZXJ2ZXIgbGFiZWxzIGFuZCBvcHRpb25hbCBhbGxvd2VkIGZpbHRlcnMgZnJvbSB0aGUgY3VycmVudCBhZ2VudFxuICAgICAgICBjb25zdCBhY3RpdmVNY3BDb25maWdzID0gdGhpcy4jY3VycmVudFRvb2xzPy5maWx0ZXIoKHQpID0+IHQudHlwZSA9PT0gJ21jcCcpO1xuICAgICAgICBjb25zdCBhbGxvd2VkRnJvbUNvbmZpZyA9IChjZmcpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGFsbG93ZWQgPSBjZmcuYWxsb3dlZF90b29scztcbiAgICAgICAgICAgIGlmICghYWxsb3dlZClcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYWxsb3dlZCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFsbG93ZWQ7XG4gICAgICAgICAgICBpZiAoYWxsb3dlZCAmJiBBcnJheS5pc0FycmF5KGFsbG93ZWQudG9vbF9uYW1lcykpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFsbG93ZWQudG9vbF9uYW1lcztcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGRlZHVwQnlOYW1lID0gbmV3IE1hcCgpO1xuICAgICAgICBmb3IgKGNvbnN0IGNmZyBvZiBhY3RpdmVNY3BDb25maWdzKSB7XG4gICAgICAgICAgICBjb25zdCB0b29scyA9IHRoaXMuI2FsbE1jcFRvb2xzQnlTZXJ2ZXIuZ2V0KGNmZy5zZXJ2ZXJfbGFiZWwpID8/IFtdO1xuICAgICAgICAgICAgY29uc3QgYWxsb3dlZCA9IGFsbG93ZWRGcm9tQ29uZmlnKGNmZyk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHRvb2wgb2YgdG9vbHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoYWxsb3dlZCAmJiAhYWxsb3dlZC5pbmNsdWRlcyh0b29sLm5hbWUpKVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBpZiAoIWRlZHVwQnlOYW1lLmhhcyh0b29sLm5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlZHVwQnlOYW1lLnNldCh0b29sLm5hbWUsIHRvb2wpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuZXh0ID0gQXJyYXkuZnJvbShkZWR1cEJ5TmFtZS52YWx1ZXMoKSk7XG4gICAgICAgIGNvbnN0IHByZXYgPSB0aGlzLiNhdmFpbGFibGVNY3BUb29scztcbiAgICAgICAgY29uc3QgY2hhbmdlZCA9IHByZXYubGVuZ3RoICE9PSBuZXh0Lmxlbmd0aCB8fFxuICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkocHJldi5tYXAoKHQpID0+IHQubmFtZSkuc29ydCgpKSAhPT1cbiAgICAgICAgICAgICAgICBKU09OLnN0cmluZ2lmeShuZXh0Lm1hcCgodCkgPT4gdC5uYW1lKS5zb3J0KCkpO1xuICAgICAgICBpZiAoY2hhbmdlZCkge1xuICAgICAgICAgICAgdGhpcy4jYXZhaWxhYmxlTWNwVG9vbHMgPSBuZXh0O1xuICAgICAgICAgICAgdGhpcy5lbWl0KCdtY3BfdG9vbHNfY2hhbmdlZCcsIHRoaXMuI2F2YWlsYWJsZU1jcFRvb2xzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb25uZWN0IHRvIHRoZSBzZXNzaW9uLiBUaGlzIHdpbGwgZXN0YWJsaXNoIHRoZSBjb25uZWN0aW9uIHRvIHRoZSB1bmRlcmx5aW5nIHRyYW5zcG9ydCBsYXllclxuICAgICAqIGFuZCBzdGFydCB0aGUgc2Vzc2lvbi5cbiAgICAgKlxuICAgICAqIEFmdGVyIGNvbm5lY3RpbmcsIHRoZSBzZXNzaW9uIHdpbGwgYWxzbyBlbWl0IGEgYGhpc3RvcnlfdXBkYXRlZGAgZXZlbnQgd2l0aCBhbiBlbXB0eSBoaXN0b3J5LlxuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBUaGUgb3B0aW9ucyBmb3IgdGhlIGNvbm5lY3Rpb24uXG4gICAgICovXG4gICAgYXN5bmMgY29ubmVjdChvcHRpb25zKSB7XG4gICAgICAgIC8vIG1ha2VzIHN1cmUgdGhlIGN1cnJlbnQgYWdlbnQgaXMgY29ycmVjdGx5IHNldCBhbmQgbG9hZHMgdGhlIHRvb2xzXG4gICAgICAgIGF3YWl0IHRoaXMuI3NldEN1cnJlbnRBZ2VudCh0aGlzLmluaXRpYWxBZ2VudCk7XG4gICAgICAgIHRoaXMuI3NldEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgICAgIGF3YWl0IHRoaXMuI3RyYW5zcG9ydC5jb25uZWN0KHtcbiAgICAgICAgICAgIGFwaUtleTogb3B0aW9ucy5hcGlLZXkgPz8gdGhpcy5vcHRpb25zLmFwaUtleSxcbiAgICAgICAgICAgIG1vZGVsOiB0aGlzLm9wdGlvbnMubW9kZWwsXG4gICAgICAgICAgICB1cmw6IG9wdGlvbnMudXJsLFxuICAgICAgICAgICAgaW5pdGlhbFNlc3Npb25Db25maWc6IGF3YWl0IHRoaXMuI2dldFNlc3Npb25Db25maWcodGhpcy5vcHRpb25zLmNvbmZpZyksXG4gICAgICAgIH0pO1xuICAgICAgICAvLyBFbnN1cmUgdGhlIGNhY2hlZCBsYXN0U2Vzc2lvbkNvbmZpZyBpbmNsdWRlcyBldmVyeXRoaW5nIHBhc3NlZCBhcyB0aGUgaW5pdGlhbCBzZXNzaW9uIGNvbmZpZ1xuICAgICAgICAvLyAodGhlIGNhbGwgYWJvdmUgYWxyZWFkeSBzZXQgaXQgdmlhICNnZXRTZXNzaW9uQ29uZmlnIGJ1dCBpbiBjYXNlIGFkZGl0aW9uYWwgb3ZlcnJpZGVzIHdlcmVcbiAgICAgICAgLy8gcGFzc2VkIGRpcmVjdGx5IGhlcmUgaW4gdGhlIGZ1dHVyZSB3ZSBjb3VsZCBtZXJnZSB0aGVtKS4gRm9yIG5vdyBpdCdzIGEgbm8tb3AuXG4gICAgICAgIHRoaXMuI2hpc3RvcnkgPSBbXTtcbiAgICAgICAgdGhpcy5lbWl0KCdoaXN0b3J5X3VwZGF0ZWQnLCB0aGlzLiNoaXN0b3J5KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVXBkYXRlIHRoZSBoaXN0b3J5IG9mIHRoZSBzZXNzaW9uLlxuICAgICAqIEBwYXJhbSBuZXdIaXN0b3J5IC0gVGhlIG5ldyBoaXN0b3J5IHRvIHNldC5cbiAgICAgKi9cbiAgICB1cGRhdGVIaXN0b3J5KG5ld0hpc3RvcnkpIHtcbiAgICAgICAgbGV0IHVwZGF0ZWRIaXN0b3J5O1xuICAgICAgICBpZiAodHlwZW9mIG5ld0hpc3RvcnkgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHVwZGF0ZWRIaXN0b3J5ID0gbmV3SGlzdG9yeSh0aGlzLiNoaXN0b3J5KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHVwZGF0ZWRIaXN0b3J5ID0gbmV3SGlzdG9yeTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLiN0cmFuc3BvcnQucmVzZXRIaXN0b3J5KHRoaXMuI2hpc3RvcnksIHVwZGF0ZWRIaXN0b3J5KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VuZCBhIG1lc3NhZ2UgdG8gdGhlIHNlc3Npb24uXG4gICAgICogQHBhcmFtIG1lc3NhZ2UgLSBUaGUgbWVzc2FnZSB0byBzZW5kLlxuICAgICAqIEBwYXJhbSBvdGhlckV2ZW50RGF0YSAtIEFkZGl0aW9uYWwgZXZlbnQgZGF0YSB0byBzZW5kLlxuICAgICAqL1xuICAgIHNlbmRNZXNzYWdlKG1lc3NhZ2UsIG90aGVyRXZlbnREYXRhID0ge30pIHtcbiAgICAgICAgdGhpcy4jdHJhbnNwb3J0LnNlbmRNZXNzYWdlKG1lc3NhZ2UsIG90aGVyRXZlbnREYXRhKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkIGltYWdlIHRvIHRoZSBzZXNzaW9uXG4gICAgICogQHBhcmFtIGltYWdlIC0gVGhlIGltYWdlIHRvIGFkZC5cbiAgICAgKi9cbiAgICBhZGRJbWFnZShpbWFnZSwgeyB0cmlnZ2VyUmVzcG9uc2UgPSB0cnVlIH0gPSB7fSkge1xuICAgICAgICB0aGlzLiN0cmFuc3BvcnQuYWRkSW1hZ2UoaW1hZ2UsIHsgdHJpZ2dlclJlc3BvbnNlIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNdXRlIHRoZSBzZXNzaW9uLlxuICAgICAqIEBwYXJhbSBtdXRlZCAtIFdoZXRoZXIgdG8gbXV0ZSB0aGUgc2Vzc2lvbi5cbiAgICAgKi9cbiAgICBtdXRlKG11dGVkKSB7XG4gICAgICAgIHRoaXMuI3RyYW5zcG9ydC5tdXRlKG11dGVkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGlzY29ubmVjdCBmcm9tIHRoZSBzZXNzaW9uLlxuICAgICAqL1xuICAgIGNsb3NlKCkge1xuICAgICAgICB0aGlzLiNpbnRlcnJ1cHRlZEJ5R3VhcmRyYWlsID0ge307XG4gICAgICAgIHRoaXMuI3RyYW5zcG9ydC5jbG9zZSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZW5kIGF1ZGlvIHRvIHRoZSBzZXNzaW9uLlxuICAgICAqIEBwYXJhbSBhdWRpbyAtIFRoZSBhdWRpbyB0byBzZW5kLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gQWRkaXRpb25hbCBvcHRpb25zLlxuICAgICAqIEBwYXJhbSBvcHRpb25zLmNvbW1pdCAtIFdoZXRoZXIgdG8gZmluaXNoIHRoZSB0dXJuIHdpdGggdGhpcyBhdWRpby5cbiAgICAgKi9cbiAgICBzZW5kQXVkaW8oYXVkaW8sIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICB0aGlzLiN0cmFuc3BvcnQuc2VuZEF1ZGlvKGF1ZGlvLCBvcHRpb25zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW50ZXJydXB0IHRoZSBzZXNzaW9uIGFydGlmaWNpYWxseSBmb3IgZXhhbXBsZSBpZiB5b3Ugd2FudCB0byBidWlsZCBhIFwic3RvcCB0YWxraW5nXCJcbiAgICAgKiBidXR0b24uXG4gICAgICovXG4gICAgaW50ZXJydXB0KCkge1xuICAgICAgICB0aGlzLiN0cmFuc3BvcnQuaW50ZXJydXB0KCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFwcHJvdmUgYSB0b29sIGNhbGwuIFRoaXMgd2lsbCBhbHNvIHRyaWdnZXIgdGhlIHRvb2wgY2FsbCB0byB0aGUgYWdlbnQuXG4gICAgICogQHBhcmFtIGFwcHJvdmFsSXRlbSAtIFRoZSBhcHByb3ZhbCBpdGVtIHRvIGFwcHJvdmUuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBBZGRpdGlvbmFsIG9wdGlvbnMuXG4gICAgICogQHBhcmFtIG9wdGlvbnMuYWx3YXlzQXBwcm92ZSAtIFdoZXRoZXIgdG8gYWx3YXlzIGFwcHJvdmUgdGhlIHRvb2wgY2FsbC5cbiAgICAgKi9cbiAgICBhc3luYyBhcHByb3ZlKGFwcHJvdmFsSXRlbSwgb3B0aW9ucyA9IHsgYWx3YXlzQXBwcm92ZTogZmFsc2UgfSkge1xuICAgICAgICB0aGlzLiNjb250ZXh0LmFwcHJvdmVUb29sKGFwcHJvdmFsSXRlbSwgb3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IHRvb2wgPSB0aGlzLiNjdXJyZW50QWdlbnQudG9vbHMuZmluZCgodG9vbCkgPT4gdG9vbC5uYW1lID09PSBhcHByb3ZhbEl0ZW0ucmF3SXRlbS5uYW1lKTtcbiAgICAgICAgaWYgKHRvb2wgJiZcbiAgICAgICAgICAgIHRvb2wudHlwZSA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgICAgICAgYXBwcm92YWxJdGVtLnJhd0l0ZW0udHlwZSA9PT0gJ2Z1bmN0aW9uX2NhbGwnKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLiNoYW5kbGVGdW5jdGlvblRvb2xDYWxsKGFwcHJvdmFsSXRlbS5yYXdJdGVtLCB0b29sKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChhcHByb3ZhbEl0ZW0ucmF3SXRlbS50eXBlID09PSAnaG9zdGVkX3Rvb2xfY2FsbCcpIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmFsd2F5c0FwcHJvdmUpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIud2FybignQWx3YXlzIGFwcHJvdmluZyBNQ1AgdG9vbHMgaXMgbm90IHN1cHBvcnRlZC4gVXNlIHRoZSBhbGxvd2VkIHRvb2xzIGNvbmZpZ3VyYXRpb24gaW5zdGVhZC4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IG1jcEFwcHJvdmFsUmVxdWVzdCA9IGFwcHJvdmFsSXRlbVRvUmVhbHRpbWVBcHByb3ZhbEl0ZW0oYXBwcm92YWxJdGVtKTtcbiAgICAgICAgICAgIHRoaXMuI3RyYW5zcG9ydC5zZW5kTWNwUmVzcG9uc2UobWNwQXBwcm92YWxSZXF1ZXN0LCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBNb2RlbEJlaGF2aW9yRXJyb3IoYFRvb2wgJHthcHByb3ZhbEl0ZW0ucmF3SXRlbS5uYW1lfSBub3QgZm91bmRgKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWplY3QgYSB0b29sIGNhbGwuIFRoaXMgd2lsbCBhbHNvIHRyaWdnZXIgdGhlIHRvb2wgY2FsbCB0byB0aGUgYWdlbnQuXG4gICAgICogQHBhcmFtIGFwcHJvdmFsSXRlbSAtIFRoZSBhcHByb3ZhbCBpdGVtIHRvIHJlamVjdC5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIEFkZGl0aW9uYWwgb3B0aW9ucy5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucy5hbHdheXNSZWplY3QgLSBXaGV0aGVyIHRvIGFsd2F5cyByZWplY3QgdGhlIHRvb2wgY2FsbC5cbiAgICAgKi9cbiAgICBhc3luYyByZWplY3QoYXBwcm92YWxJdGVtLCBvcHRpb25zID0geyBhbHdheXNSZWplY3Q6IGZhbHNlIH0pIHtcbiAgICAgICAgdGhpcy4jY29udGV4dC5yZWplY3RUb29sKGFwcHJvdmFsSXRlbSwgb3B0aW9ucyk7XG4gICAgICAgIC8vIHdlIHN0aWxsIG5lZWQgdG8gc2ltdWxhdGUgYSB0b29sIGNhbGwgdG8gdGhlIGFnZW50IHRvIGxldCB0aGUgYWdlbnQga25vd1xuICAgICAgICBjb25zdCB0b29sID0gdGhpcy4jY3VycmVudEFnZW50LnRvb2xzLmZpbmQoKHRvb2wpID0+IHRvb2wubmFtZSA9PT0gYXBwcm92YWxJdGVtLnJhd0l0ZW0ubmFtZSk7XG4gICAgICAgIGlmICh0b29sICYmXG4gICAgICAgICAgICB0b29sLnR5cGUgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgICAgICAgIGFwcHJvdmFsSXRlbS5yYXdJdGVtLnR5cGUgPT09ICdmdW5jdGlvbl9jYWxsJykge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy4jaGFuZGxlRnVuY3Rpb25Ub29sQ2FsbChhcHByb3ZhbEl0ZW0ucmF3SXRlbSwgdG9vbCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYXBwcm92YWxJdGVtLnJhd0l0ZW0udHlwZSA9PT0gJ2hvc3RlZF90b29sX2NhbGwnKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5hbHdheXNSZWplY3QpIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIud2FybignQWx3YXlzIHJlamVjdGluZyBNQ1AgdG9vbHMgaXMgbm90IHN1cHBvcnRlZC4gVXNlIHRoZSBhbGxvd2VkIHRvb2xzIGNvbmZpZ3VyYXRpb24gaW5zdGVhZC4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IG1jcEFwcHJvdmFsUmVxdWVzdCA9IGFwcHJvdmFsSXRlbVRvUmVhbHRpbWVBcHByb3ZhbEl0ZW0oYXBwcm92YWxJdGVtKTtcbiAgICAgICAgICAgIHRoaXMuI3RyYW5zcG9ydC5zZW5kTWNwUmVzcG9uc2UobWNwQXBwcm92YWxSZXF1ZXN0LCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgTW9kZWxCZWhhdmlvckVycm9yKGBUb29sICR7YXBwcm92YWxJdGVtLnJhd0l0ZW0ubmFtZX0gbm90IGZvdW5kYCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWFsdGltZVNlc3Npb24ubWpzLm1hcCIsImltcG9ydCAqIGFzIHV0aWxJbXBvcnQgZnJvbSBcIi4vdXRpbHMubWpzXCI7XG5leHBvcnQgeyBSZWFsdGltZUFnZW50IH0gZnJvbSBcIi4vcmVhbHRpbWVBZ2VudC5tanNcIjtcbmV4cG9ydCB7IFJlYWx0aW1lU2Vzc2lvbiwgfSBmcm9tIFwiLi9yZWFsdGltZVNlc3Npb24ubWpzXCI7XG5leHBvcnQgeyBPcGVuQUlSZWFsdGltZVdlYlJUQywgfSBmcm9tIFwiLi9vcGVuYWlSZWFsdGltZVdlYlJ0Yy5tanNcIjtcbmV4cG9ydCB7IE9wZW5BSVJlYWx0aW1lV2ViU29ja2V0LCB9IGZyb20gXCIuL29wZW5haVJlYWx0aW1lV2Vic29ja2V0Lm1qc1wiO1xuZXhwb3J0IHsgT3BlbkFJUmVhbHRpbWVCYXNlLCBERUZBVUxUX09QRU5BSV9SRUFMVElNRV9NT0RFTCwgREVGQVVMVF9PUEVOQUlfUkVBTFRJTUVfU0VTU0lPTl9DT05GSUcsIH0gZnJvbSBcIi4vb3BlbmFpUmVhbHRpbWVCYXNlLm1qc1wiO1xuZXhwb3J0IGNvbnN0IHV0aWxzID0ge1xuICAgIGJhc2U2NFRvQXJyYXlCdWZmZXI6IHV0aWxJbXBvcnQuYmFzZTY0VG9BcnJheUJ1ZmZlcixcbiAgICBhcnJheUJ1ZmZlclRvQmFzZTY0OiB1dGlsSW1wb3J0LmFycmF5QnVmZmVyVG9CYXNlNjQsXG4gICAgZ2V0TGFzdFRleHRGcm9tQXVkaW9PdXRwdXRNZXNzYWdlOiB1dGlsSW1wb3J0LmdldExhc3RUZXh0RnJvbUF1ZGlvT3V0cHV0TWVzc2FnZSxcbn07XG5leHBvcnQgeyBNb2RlbEJlaGF2aW9yRXJyb3IsIE91dHB1dEd1YXJkcmFpbFRyaXB3aXJlVHJpZ2dlcmVkLCB0b29sLCBVc2VyRXJyb3IsIH0gZnJvbSAnQG9wZW5haS9hZ2VudHMtY29yZSc7XG5leHBvcnQgeyBiYWNrZ3JvdW5kUmVzdWx0LCBpc0JhY2tncm91bmRSZXN1bHQgfSBmcm9tIFwiLi90b29sLm1qc1wiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcCJdLCJuYW1lcyI6WyJNRVRBREFUQSIsInNhZmVFeGVjdXRlIiwiZm4iLCJlcnJvciIsIm1ha2VQYXJzZWFibGVUZXh0Rm9ybWF0IiwicmVzcG9uc2VfZm9ybWF0IiwicGFyc2VyIiwib2JqIiwiaWdub3JlT3ZlcnJpZGUiLCJkZWZhdWx0T3B0aW9ucyIsImdldERlZmF1bHRPcHRpb25zIiwib3B0aW9ucyIsInpvZERlZiIsInpvZFNjaGVtYSIsImlzRW1wdHlPYmoiLCJfayIsImdldFJlZnMiLCJfb3B0aW9ucyIsImN1cnJlbnRQYXRoIiwibmFtZSIsImRlZiIsImFkZEVycm9yTWVzc2FnZSIsInJlcyIsImtleSIsImVycm9yTWVzc2FnZSIsInJlZnMiLCJzZXRSZXNwb25zZVZhbHVlQW5kRXJyb3JzIiwidmFsdWUiLCJ1dGlsIiwiXyIsImFzc2VydElzIiwiX2FyZyIsImFzc2VydE5ldmVyIiwiX3giLCJpdGVtcyIsIml0ZW0iLCJ2YWxpZEtleXMiLCJrIiwiZmlsdGVyZWQiLCJlIiwib2JqZWN0Iiwia2V5cyIsImFyciIsImNoZWNrZXIiLCJ2YWwiLCJqb2luVmFsdWVzIiwiYXJyYXkiLCJzZXBhcmF0b3IiLCJvYmplY3RVdGlsIiwiZmlyc3QiLCJzZWNvbmQiLCJab2RQYXJzZWRUeXBlIiwiZ2V0UGFyc2VkVHlwZSIsImRhdGEiLCJab2RJc3N1ZUNvZGUiLCJab2RFcnJvciIsImlzc3VlcyIsInN1YiIsInN1YnMiLCJhY3R1YWxQcm90byIsIl9tYXBwZXIiLCJtYXBwZXIiLCJpc3N1ZSIsImZpZWxkRXJyb3JzIiwicHJvY2Vzc0Vycm9yIiwiY3VyciIsImkiLCJlbCIsImZvcm1FcnJvcnMiLCJlcnJvck1hcCIsIl9jdHgiLCJtZXNzYWdlIiwib3ZlcnJpZGVFcnJvck1hcCIsImRlZmF1bHRFcnJvck1hcCIsImdldEVycm9yTWFwIiwibWFrZUlzc3VlIiwicGFyYW1zIiwicGF0aCIsImVycm9yTWFwcyIsImlzc3VlRGF0YSIsImZ1bGxQYXRoIiwiZnVsbElzc3VlIiwibWFwcyIsIm0iLCJtYXAiLCJhZGRJc3N1ZVRvQ29udGV4dCIsImN0eCIsIm92ZXJyaWRlTWFwIiwieCIsIlBhcnNlU3RhdHVzIiwic3RhdHVzIiwicmVzdWx0cyIsImFycmF5VmFsdWUiLCJJTlZBTElEIiwicGFpcnMiLCJzeW5jUGFpcnMiLCJwYWlyIiwiZmluYWxPYmplY3QiLCJESVJUWSIsIk9LIiwiaXNBYm9ydGVkIiwiaXNEaXJ0eSIsImlzVmFsaWQiLCJpc0FzeW5jIiwiZXJyb3JVdGlsIiwiUGFyc2VJbnB1dExhenlQYXRoIiwicGFyZW50IiwiaGFuZGxlUmVzdWx0IiwicmVzdWx0IiwicHJvY2Vzc0NyZWF0ZVBhcmFtcyIsImludmFsaWRfdHlwZV9lcnJvciIsInJlcXVpcmVkX2Vycm9yIiwiZGVzY3JpcHRpb24iLCJpc3MiLCJab2RUeXBlIiwiaW5wdXQiLCJlcnIiLCJfYiIsIl9hIiwibWF5YmVBc3luY1Jlc3VsdCIsImNoZWNrIiwiZ2V0SXNzdWVQcm9wZXJ0aWVzIiwic2V0RXJyb3IiLCJyZWZpbmVtZW50RGF0YSIsInJlZmluZW1lbnQiLCJab2RFZmZlY3RzIiwiWm9kRmlyc3RQYXJ0eVR5cGVLaW5kIiwiWm9kT3B0aW9uYWwiLCJab2ROdWxsYWJsZSIsIlpvZEFycmF5IiwiWm9kUHJvbWlzZSIsIm9wdGlvbiIsIlpvZFVuaW9uIiwiaW5jb21pbmciLCJab2RJbnRlcnNlY3Rpb24iLCJ0cmFuc2Zvcm0iLCJkZWZhdWx0VmFsdWVGdW5jIiwiWm9kRGVmYXVsdCIsIlpvZEJyYW5kZWQiLCJjYXRjaFZhbHVlRnVuYyIsIlpvZENhdGNoIiwiVGhpcyIsInRhcmdldCIsIlpvZFBpcGVsaW5lIiwiWm9kUmVhZG9ubHkiLCJjdWlkUmVnZXgiLCJjdWlkMlJlZ2V4IiwidWxpZFJlZ2V4IiwidXVpZFJlZ2V4IiwibmFub2lkUmVnZXgiLCJqd3RSZWdleCIsImR1cmF0aW9uUmVnZXgiLCJlbWFpbFJlZ2V4IiwiX2Vtb2ppUmVnZXgiLCJlbW9qaVJlZ2V4IiwiaXB2NFJlZ2V4IiwiaXB2NENpZHJSZWdleCIsImlwdjZSZWdleCIsImlwdjZDaWRyUmVnZXgiLCJiYXNlNjRSZWdleCIsImJhc2U2NHVybFJlZ2V4IiwiZGF0ZVJlZ2V4U291cmNlIiwiZGF0ZVJlZ2V4IiwidGltZVJlZ2V4U291cmNlIiwiYXJncyIsInNlY29uZHNSZWdleFNvdXJjZSIsInNlY29uZHNRdWFudGlmaWVyIiwidGltZVJlZ2V4IiwiZGF0ZXRpbWVSZWdleCIsInJlZ2V4Iiwib3B0cyIsImlzVmFsaWRJUCIsImlwIiwidmVyc2lvbiIsImlzVmFsaWRKV1QiLCJqd3QiLCJhbGciLCJoZWFkZXIiLCJiYXNlNjQiLCJkZWNvZGVkIiwiaXNWYWxpZENpZHIiLCJab2RTdHJpbmciLCJ0b29CaWciLCJ0b29TbWFsbCIsInZhbGlkYXRpb24iLCJtaW5MZW5ndGgiLCJtYXhMZW5ndGgiLCJsZW4iLCJjaCIsIm1pbiIsIm1heCIsImZsb2F0U2FmZVJlbWFpbmRlciIsInN0ZXAiLCJ2YWxEZWNDb3VudCIsInN0ZXBEZWNDb3VudCIsImRlY0NvdW50IiwidmFsSW50Iiwic3RlcEludCIsIlpvZE51bWJlciIsImtpbmQiLCJpbmNsdXNpdmUiLCJab2RCaWdJbnQiLCJab2RCb29sZWFuIiwiWm9kRGF0ZSIsIm1pbkRhdGUiLCJtYXhEYXRlIiwiWm9kU3ltYm9sIiwiWm9kVW5kZWZpbmVkIiwiWm9kTnVsbCIsIlpvZEFueSIsIlpvZFVua25vd24iLCJab2ROZXZlciIsIlpvZFZvaWQiLCJzY2hlbWEiLCJkZWVwUGFydGlhbGlmeSIsIlpvZE9iamVjdCIsIm5ld1NoYXBlIiwiZmllbGRTY2hlbWEiLCJab2RUdXBsZSIsInNoYXBlIiwic2hhcGVLZXlzIiwiZXh0cmFLZXlzIiwia2V5VmFsaWRhdG9yIiwidW5rbm93bktleXMiLCJjYXRjaGFsbCIsImRlZmF1bHRFcnJvciIsImF1Z21lbnRhdGlvbiIsIm1lcmdpbmciLCJpbmRleCIsIm1hc2siLCJuZXdGaWVsZCIsImNyZWF0ZVpvZEVudW0iLCJoYW5kbGVSZXN1bHRzIiwidW5pb25FcnJvcnMiLCJjaGlsZEN0eCIsImRpcnR5IiwidHlwZXMiLCJnZXREaXNjcmltaW5hdG9yIiwidHlwZSIsIlpvZExhenkiLCJab2RMaXRlcmFsIiwiWm9kRW51bSIsIlpvZE5hdGl2ZUVudW0iLCJab2REaXNjcmltaW5hdGVkVW5pb24iLCJkaXNjcmltaW5hdG9yIiwiZGlzY3JpbWluYXRvclZhbHVlIiwib3B0aW9uc01hcCIsImRpc2NyaW1pbmF0b3JWYWx1ZXMiLCJtZXJnZVZhbHVlcyIsImEiLCJiIiwiYVR5cGUiLCJiVHlwZSIsImJLZXlzIiwic2hhcmVkS2V5cyIsIm5ld09iaiIsInNoYXJlZFZhbHVlIiwibmV3QXJyYXkiLCJpdGVtQSIsIml0ZW1CIiwiaGFuZGxlUGFyc2VkIiwicGFyc2VkTGVmdCIsInBhcnNlZFJpZ2h0IiwibWVyZ2VkIiwibGVmdCIsInJpZ2h0IiwiaXRlbUluZGV4IiwicmVzdCIsInNjaGVtYXMiLCJab2RSZWNvcmQiLCJrZXlUeXBlIiwidmFsdWVUeXBlIiwidGhpcmQiLCJab2RNYXAiLCJmaW5hbE1hcCIsIlpvZFNldCIsImZpbmFsaXplU2V0IiwiZWxlbWVudHMiLCJwYXJzZWRTZXQiLCJlbGVtZW50IiwibWluU2l6ZSIsIm1heFNpemUiLCJzaXplIiwiZ2V0dGVyIiwidmFsdWVzIiwiZXhwZWN0ZWRWYWx1ZXMiLCJlbnVtVmFsdWVzIiwibmV3RGVmIiwib3B0IiwibmF0aXZlRW51bVZhbHVlcyIsInByb21pc2lmaWVkIiwiZWZmZWN0IiwiY2hlY2tDdHgiLCJhcmciLCJwcm9jZXNzZWQiLCJleGVjdXRlUmVmaW5lbWVudCIsImFjYyIsImlubmVyIiwiYmFzZSIsInByZXByb2Nlc3MiLCJuZXdDdHgiLCJab2ROYU4iLCJpblJlc3VsdCIsImZyZWV6ZSIsInN0cmluZ1R5cGUiLCJudW1iZXJUeXBlIiwiYm9vbGVhblR5cGUiLCJhbnlUeXBlIiwiYXJyYXlUeXBlIiwib2JqZWN0VHlwZSIsInVuaW9uVHlwZSIsImRpc2NyaW1pbmF0ZWRVbmlvblR5cGUiLCJyZWNvcmRUeXBlIiwibGF6eVR5cGUiLCJsaXRlcmFsVHlwZSIsImVudW1UeXBlIiwicGFyc2VBbnlEZWYiLCJwYXJzZUFycmF5RGVmIiwicGFyc2VEZWYiLCJwYXJzZUJpZ2ludERlZiIsInBhcnNlQm9vbGVhbkRlZiIsInBhcnNlQnJhbmRlZERlZiIsIl9kZWYiLCJwYXJzZUNhdGNoRGVmIiwicGFyc2VEYXRlRGVmIiwib3ZlcnJpZGVEYXRlU3RyYXRlZ3kiLCJzdHJhdGVneSIsImludGVnZXJEYXRlUGFyc2VyIiwicGFyc2VEZWZhdWx0RGVmIiwicGFyc2VFZmZlY3RzRGVmIiwiZm9yY2VSZXNvbHV0aW9uIiwicGFyc2VFbnVtRGVmIiwiaXNKc29uU2NoZW1hN0FsbE9mVHlwZSIsInBhcnNlSW50ZXJzZWN0aW9uRGVmIiwiYWxsT2YiLCJ1bmV2YWx1YXRlZFByb3BlcnRpZXMiLCJtZXJnZWRBbGxPZiIsIm5lc3RlZFNjaGVtYSIsImFkZGl0aW9uYWxQcm9wZXJ0aWVzIiwicGFyc2VMaXRlcmFsRGVmIiwicGFyc2VkVHlwZSIsInpvZFBhdHRlcm5zIiwicGFyc2VTdHJpbmdEZWYiLCJwcm9jZXNzUGF0dGVybiIsImVzY2FwZU5vbkFscGhhTnVtZXJpYyIsImFkZEZvcm1hdCIsImFkZFBhdHRlcm4iLCJjIiwicHJvY2Vzc1JlZ0V4cCIsInJlZ2V4T3JGdW5jdGlvbiIsImZsYWdzIiwic291cmNlIiwicGF0dGVybiIsImlzRXNjYXBlZCIsImluQ2hhckdyb3VwIiwiaW5DaGFyUmFuZ2UiLCJyZWdleFRlc3QiLCJwYXJzZVJlY29yZERlZiIsIl9jIiwiX2QiLCJwYXJzZU1hcERlZiIsInBhcnNlTmF0aXZlRW51bURlZiIsImFjdHVhbFZhbHVlcyIsInBhcnNlZFR5cGVzIiwicGFyc2VOZXZlckRlZiIsInBhcnNlTnVsbERlZiIsInByaW1pdGl2ZU1hcHBpbmdzIiwicGFyc2VVbmlvbkRlZiIsImFzQW55T2YiLCJ1bmlxdWVUeXBlcyIsImFueU9mIiwicGFyc2VOdWxsYWJsZURlZiIsInBhcnNlTnVtYmVyRGVmIiwiZGVjaWRlQWRkaXRpb25hbFByb3BlcnRpZXMiLCJwYXJzZU9iamVjdERlZiIsInByb3BOYW1lIiwicHJvcERlZiIsInByb3BlcnR5UGF0aCIsInBhcnNlZERlZiIsInBhcnNlT3B0aW9uYWxEZWYiLCJpbm5lclNjaGVtYSIsInBhcnNlUGlwZWxpbmVEZWYiLCJwYXJzZVByb21pc2VEZWYiLCJwYXJzZVNldERlZiIsInBhcnNlVHVwbGVEZWYiLCJwYXJzZVVuZGVmaW5lZERlZiIsInBhcnNlVW5rbm93bkRlZiIsInBhcnNlUmVhZG9ubHlEZWYiLCJzZWVuSXRlbSIsIm92ZXJyaWRlUmVzdWx0Iiwic2VlblNjaGVtYSIsImdldCRyZWYiLCJuZXdJdGVtIiwianNvblNjaGVtYSIsInNlbGVjdFBhcnNlciIsImFkZE1ldGEiLCJnZXRSZWxhdGl2ZVBhdGgiLCJwYXRoQSIsInBhdGhCIiwidHlwZU5hbWUiLCJ6b2RUb0pzb25TY2hlbWEiLCJtYWluIiwidGl0bGUiLCJkZWZpbml0aW9ucyIsInByb2Nlc3NlZERlZmluaXRpb25zIiwibmV3RGVmaW5pdGlvbnMiLCJjb21iaW5lZCIsIm1ha2VQYXJzZWFibGVSZXNwb25zZVRvb2wiLCJ0b29sIiwiY2FsbGJhY2siLCJfem9kVG9Kc29uU2NoZW1hIiwiem9kVGV4dEZvcm1hdCIsInpvZE9iamVjdCIsInByb3BzIiwiY29udGVudCIsInpvZFJlc3BvbnNlc0Z1bmN0aW9uIiwiQWdlbnRzRXJyb3IiLCJzdGF0ZSIsIl9fcHVibGljRmllbGQiLCJTeXN0ZW1FcnJvciIsIk1heFR1cm5zRXhjZWVkZWRFcnJvciIsIk1vZGVsQmVoYXZpb3JFcnJvciIsIlVzZXJFcnJvciIsIkd1YXJkcmFpbEV4ZWN1dGlvbkVycm9yIiwiVG9vbENhbGxFcnJvciIsIklucHV0R3VhcmRyYWlsVHJpcHdpcmVUcmlnZ2VyZWQiLCJPdXRwdXRHdWFyZHJhaWxUcmlwd2lyZVRyaWdnZXJlZCIsImlzWm9kT2JqZWN0IiwiaXNBZ2VudFRvb2xJbnB1dCIsInRvRnVuY3Rpb25Ub29sTmFtZSIsImdldFNjaGVtYUFuZFBhcnNlckZyb21JbnB1dFR5cGUiLCJpbnB1dFR5cGUiLCJmb3JtYXR0ZWRGdW5jdGlvbiIsImNvbnZlcnRBZ2VudE91dHB1dFR5cGVUb1NlcmlhbGl6YWJsZSIsIm91dHB1dFR5cGUiLCJvdXRwdXQiLCJzIiwiaCIsImQiLCJ3IiwieSIsIm1zIiwicGFyc2UiLCJmbXRMb25nIiwiZm10U2hvcnQiLCJzdHIiLCJtYXRjaCIsIm4iLCJtc0FicyIsInBsdXJhbCIsImlzUGx1cmFsIiwic2V0dXAiLCJlbnYiLCJjcmVhdGVEZWJ1ZyIsImNvZXJjZSIsImRpc2FibGUiLCJlbmFibGUiLCJlbmFibGVkIiwicmVxdWlyZSQkMCIsImRlc3Ryb3kiLCJzZWxlY3RDb2xvciIsIm5hbWVzcGFjZSIsImhhc2giLCJwcmV2VGltZSIsImVuYWJsZU92ZXJyaWRlIiwibmFtZXNwYWNlc0NhY2hlIiwiZW5hYmxlZENhY2hlIiwiZGVidWciLCJzZWxmIiwiZm9ybWF0IiwiZm9ybWF0dGVyIiwiZXh0ZW5kIiwidiIsImRlbGltaXRlciIsIm5ld0RlYnVnIiwibmFtZXNwYWNlcyIsInNwbGl0IiwibnMiLCJtYXRjaGVzVGVtcGxhdGUiLCJzZWFyY2giLCJ0ZW1wbGF0ZSIsInNlYXJjaEluZGV4IiwidGVtcGxhdGVJbmRleCIsInN0YXJJbmRleCIsIm1hdGNoSW5kZXgiLCJza2lwIiwiY29tbW9uIiwiZXhwb3J0cyIsImZvcm1hdEFyZ3MiLCJzYXZlIiwibG9hZCIsInVzZUNvbG9ycyIsImxvY2Fsc3RvcmFnZSIsIndhcm5lZCIsIm1vZHVsZSIsImxhc3RDIiwiciIsImZvcm1hdHRlcnMiLCJsb2FkRW52IiwiX2xvYWRFbnYiLCJpc0VuYWJsZWQiLCJmbGFnTmFtZSIsInRyYWNpbmciLCJsb2dnaW5nIiwiZG9udExvZ01vZGVsRGF0YSIsImRvbnRMb2dUb29sRGF0YSIsImdldExvZ2dlciIsImxvZ2dlciIsInRvU21hcnRTdHJpbmciLCJkZWZhdWx0VG9vbEVycm9yRnVuY3Rpb24iLCJjb250ZXh0IiwidG9vbEVycm9yRnVuY3Rpb24iLCJzdHJpY3RNb2RlIiwicGFyYW1ldGVycyIsIl9pbnZva2UiLCJydW5Db250ZXh0IiwiZGV0YWlscyIsInBhcnNlZCIsInN0cmluZ1Jlc3VsdCIsImludm9rZSIsImN1cnJlbnRTcGFuIiwiZ2V0Q3VycmVudFNwYW4iLCJuZWVkc0FwcHJvdmFsIiwiYWdlbnQiLCJwcmVkaWNhdGUiLCJ6Lm9iamVjdCIsInouc3RyaW5nIiwiei5saXRlcmFsIiwiei5yZWNvcmQiLCJ6LmFueSIsInouYXJyYXkiLCJ6LmJvb2xlYW4iLCJfY2FjaGVkVG9vbHMiLCJnZXRGdW5jdGlvblRvb2xzRnJvbVNlcnZlciIsInNlcnZlciIsImNvbnZlcnRTY2hlbWFzVG9TdHJpY3QiLCJ0IiwibWNwVG9GdW5jdGlvblRvb2wiLCJ3aXRoTUNQTGlzdFRvb2xzU3BhbiIsInNwYW4iLCJmZXRjaGVkTWNwVG9vbHMiLCJtY3BUb29scyIsImZpbHRlcmVkVG9vbHMiLCJmaWx0ZXIiLCJnbG9iYWxMb2dnZXIiLCJhbGxvd2VkVG9vbE5hbWVzIiwiYmxvY2tlZFRvb2xOYW1lcyIsImFsbG93ZWQiLCJibG9ja2VkIiwidG9vbHMiLCJnZXRBbGxNY3BUb29scyIsIm1jcFNlcnZlcnNPck9wdHMiLCJtY3BTZXJ2ZXJzIiwiY29udmVydFNjaGVtYXNUb1N0cmljdEZyb21PcHRzIiwicnVuQ29udGV4dEZyb21PcHRzIiwiYWdlbnRGcm9tT3B0cyIsImFsbFRvb2xzIiwidG9vbE5hbWVzIiwic2VydmVyVG9vbHMiLCJpbnRlcnNlY3Rpb24iLCJtY3BUb29sIiwiX2NvbnRleHQiLCJzdHJpY3RTY2hlbWEiLCJlbnN1cmVTdHJpY3RKc29uU2NoZW1hIiwibm9uU3RyaWN0U2NoZW1hIiwib3V0IiwiQnJvd3NlckV2ZW50RW1pdHRlciIsIl9fcHJpdmF0ZUFkZCIsIl90YXJnZXQiLCJfbGlzdGVuZXJXcmFwcGVycyIsImxpc3RlbmVyIiwiZXZlbnRUeXBlIiwibGlzdGVuZXJzRm9yVHlwZSIsIl9fcHJpdmF0ZUdldCIsIndyYXBwZXJzIiwid3JhcHBlciIsImV2ZW50IiwiaGFuZGxlciIsInJhbmRvbVVVSUQiLCJSZWFkYWJsZSIsIl9kZXN0aW5hdGlvbiIsIl90cmFuc2Zvcm0iLCJSZWFkYWJsZVN0cmVhbSIsIlRyYW5zZm9ybVN0cmVhbSIsIkFzeW5jTG9jYWxTdG9yYWdlIiwiQnJvd3NlclRpbWVyIiwidGltZW91dCIsInRpbWVvdXRJZCIsInRpbWVyIiwiRXZlbnRFbWl0dGVyRGVsZWdhdGUiLCJBZ2VudEhvb2tzIiwiUnVudGltZUV2ZW50RW1pdHRlciIsIlJ1bkhvb2tzIiwiT1BFTkFJX0RFRkFVTFRfTU9ERUxfRU5WX1ZBUklBQkxFX05BTUUiLCJncHQ1UmVhc29uaW5nU2V0dGluZ3NSZXF1aXJlZCIsIm1vZGVsTmFtZSIsImlzR3B0NURlZmF1bHQiLCJnZXREZWZhdWx0TW9kZWwiLCJnZXREZWZhdWx0TW9kZWxTZXR0aW5ncyIsIm1vZGVsIiwiX21vZGVsIiwiZ2V0VHJhbnNmZXJNZXNzYWdlIiwiZGVmYXVsdEhhbmRvZmZUb29sTmFtZSIsImRlZmF1bHRIYW5kb2ZmVG9vbERlc2NyaXB0aW9uIiwiSGFuZG9mZiIsIm9uSW52b2tlSGFuZG9mZiIsImhhbmRvZmYiLCJjb25maWciLCJoYXNPbkhhbmRvZmYiLCJoYXNJbnB1dFR5cGUiLCJpbnB1dEpzb25TdHJpbmciLCJhZGRFcnJvclRvQ3VycmVudFNwYW4iLCJnZXRIYW5kb2ZmIiwiZ2V0TGFzdFRleHRGcm9tT3V0cHV0TWVzc2FnZSIsIm91dHB1dE1lc3NhZ2UiLCJsYXN0SXRlbSIsImdldE91dHB1dFRleHQiLCJhZ2VudFRvb2xSdW5SZXN1bHRzIiwic2F2ZUFnZW50VG9vbFJ1blJlc3VsdCIsInRvb2xDYWxsIiwicnVuUmVzdWx0IiwiY29uc3VtZUFnZW50VG9vbFJ1blJlc3VsdCIsIkFnZW50QXNUb29sTmVlZEFwcHJvdmFsU2NoYW1lIiwiX0FnZW50Iiwib3V0cHV0VHlwZXMiLCJ0b29sTmFtZSIsInRvb2xEZXNjcmlwdGlvbiIsImN1c3RvbU91dHB1dEV4dHJhY3RvciIsInJ1bkNvbmZpZyIsInJ1bk9wdGlvbnMiLCJSdW5uZXIiLCJ1c2VzU3RvcEF0VG9vbE5hbWVzIiwib3V0cHV0VGV4dCIsImVuYWJsZWRUb29scyIsImNhbmRpZGF0ZSIsIm1heWJlSXNFbmFibGVkIiwiaGFuZG9mZnMiLCJBZ2VudCIsImRlZmluZUlucHV0R3VhcmRyYWlsIiwiZXhlY3V0ZSIsImRlZmluZU91dHB1dEd1YXJkcmFpbCIsImdldERlZmF1bHRNb2RlbFByb3ZpZGVyIiwiU2hhcmVkQmFzZSIsIkl0ZW1CYXNlIiwiUmVmdXNhbCIsIk91dHB1dFRleHQiLCJJbnB1dFRleHQiLCJSZWFzb25pbmdUZXh0IiwiSW5wdXRJbWFnZSIsInpcbiAgICAgICAgLnN0cmluZyIsIklucHV0RmlsZSIsIkF1ZGlvQ29udGVudCIsIkltYWdlQ29udGVudCIsIlRvb2xPdXRwdXRUZXh0IiwiVG9vbE91dHB1dEltYWdlIiwiQ29tcHV0ZXJUb29sT3V0cHV0IiwiY29tcHV0ZXJBY3Rpb25zIiwiei5kaXNjcmltaW5hdGVkVW5pb24iLCJ6Lm51bWJlciIsInouZW51bSIsIkFzc2lzdGFudENvbnRlbnQiLCJNZXNzYWdlQmFzZSIsIkFzc2lzdGFudE1lc3NhZ2VJdGVtIiwiVXNlckNvbnRlbnQiLCJVc2VyTWVzc2FnZUl0ZW0iLCJTeXN0ZW1NZXNzYWdlSXRlbSIsIkhvc3RlZFRvb2xDYWxsSXRlbSIsIkZ1bmN0aW9uQ2FsbEl0ZW0iLCJGdW5jdGlvbkNhbGxSZXN1bHRJdGVtIiwiQ29tcHV0ZXJVc2VDYWxsSXRlbSIsIkNvbXB1dGVyQ2FsbFJlc3VsdEl0ZW0iLCJUb29sQ2FsbEl0ZW0iLCJSZWFzb25pbmdJdGVtIiwiVW5rbm93bkl0ZW0iLCJPdXRwdXRNb2RlbEl0ZW0iLCJNb2RlbEl0ZW0iLCJ6LnVuaW9uIiwiVXNhZ2VEYXRhIiwiU3RyZWFtRXZlbnRUZXh0U3RyZWFtIiwiU3RyZWFtRXZlbnRSZXNwb25zZVN0YXJ0ZWQiLCJTdHJlYW1FdmVudFJlc3BvbnNlQ29tcGxldGVkIiwiU3RyZWFtRXZlbnRHZW5lcmljSXRlbSIsIlVzYWdlIiwiaW5wdXRUb2tlbnNEZXRhaWxzIiwib3V0cHV0VG9rZW5zRGV0YWlscyIsIm5ld1VzYWdlIiwiUnVuQ29udGV4dCIsIl9hcHByb3ZhbHMiLCJfX3ByaXZhdGVTZXQiLCJhcHByb3ZhbHMiLCJhcHByb3ZhbCIsImNhbGxJZCIsImFwcHJvdmFsRW50cnkiLCJpbmRpdmlkdWFsQ2FsbEFwcHJvdmFsIiwiaW5kaXZpZHVhbENhbGxSZWplY3Rpb24iLCJhcHByb3ZhbEl0ZW0iLCJhbHdheXNBcHByb3ZlIiwiYWx3YXlzUmVqZWN0Iiwic2VyaWFsaXplVG9vbCIsInNlcmlhbGl6ZUhhbmRvZmYiLCJSdW5JdGVtQmFzZSIsIlJ1bk1lc3NhZ2VPdXRwdXRJdGVtIiwicmF3SXRlbSIsInBhcnQiLCJSdW5Ub29sQ2FsbEl0ZW0iLCJSdW5Ub29sQ2FsbE91dHB1dEl0ZW0iLCJSdW5SZWFzb25pbmdJdGVtIiwiUnVuSGFuZG9mZkNhbGxJdGVtIiwiUnVuSGFuZG9mZk91dHB1dEl0ZW0iLCJzb3VyY2VBZ2VudCIsInRhcmdldEFnZW50IiwiUnVuVG9vbEFwcHJvdmFsSXRlbSIsIl93aXRoU3BhbkZhY3RvcnkiLCJjcmVhdGVTcGFuIiwid2l0aE5ld1NwYW5Db250ZXh0Iiwic2V0Q3VycmVudFNwYW4iLCJyZXNldEN1cnJlbnRTcGFuIiwiY3JlYXRlQWdlbnRTcGFuIiwiZ2V0R2xvYmFsVHJhY2VQcm92aWRlciIsImNyZWF0ZUZ1bmN0aW9uU3BhbiIsIndpdGhGdW5jdGlvblNwYW4iLCJjcmVhdGVIYW5kb2ZmU3BhbiIsIndpdGhIYW5kb2ZmU3BhbiIsImNyZWF0ZUd1YXJkcmFpbFNwYW4iLCJ3aXRoR3VhcmRyYWlsU3BhbiIsImNyZWF0ZU1DUExpc3RUb29sc1NwYW4iLCJSdW5SYXdNb2RlbFN0cmVhbUV2ZW50IiwiUnVuSXRlbVN0cmVhbUV2ZW50IiwiUnVuQWdlbnRVcGRhdGVkU3RyZWFtRXZlbnQiLCJwcm9jZXNzTW9kZWxSZXNwb25zZSIsIm1vZGVsUmVzcG9uc2UiLCJydW5IYW5kb2ZmcyIsInJ1bkZ1bmN0aW9ucyIsInJ1bkNvbXB1dGVyQWN0aW9ucyIsInJ1bk1DUEFwcHJvdmFsUmVxdWVzdHMiLCJ0b29sc1VzZWQiLCJoYW5kb2ZmTWFwIiwiZnVuY3Rpb25NYXAiLCJjb21wdXRlclRvb2wiLCJtY3BUb29sTWFwIiwicHJvdmlkZXJEYXRhIiwibWNwU2VydmVyTGFiZWwiLCJtY3BTZXJ2ZXJUb29sIiwiZnVuY3Rpb25Ub29sIiwibmV4dFN0ZXBTY2hlbWEiLCJTaW5nbGVTdGVwUmVzdWx0Iiwib3JpZ2luYWxJbnB1dCIsInByZVN0ZXBJdGVtcyIsIm5ld1N0ZXBJdGVtcyIsIm5leHRTdGVwIiwibWF5YmVSZXNldFRvb2xDaG9pY2UiLCJ0b29sVXNlVHJhY2tlciIsIm1vZGVsU2V0dGluZ3MiLCJleGVjdXRlSW50ZXJydXB0ZWRUb29sc0FuZFNpZGVFZmZlY3RzIiwib3JpZ2luYWxQcmVTdGVwSXRlbXMiLCJuZXdSZXNwb25zZSIsInByb2Nlc3NlZFJlc3BvbnNlIiwicnVubmVyIiwiZnVuY3Rpb25DYWxsSWRzIiwiZnVuY3Rpb25Ub29sUnVucyIsInJ1biIsImZ1bmN0aW9uUmVzdWx0cyIsImV4ZWN1dGVGdW5jdGlvblRvb2xDYWxscyIsIm5ld0l0ZW1zIiwibWNwQXBwcm92YWxSdW5zIiwiYXBwcm92YWxSZXF1ZXN0SWQiLCJhcHByb3ZlZCIsImNoZWNrVG9vbE91dHB1dCIsImNoZWNrRm9yRmluYWxPdXRwdXRGcm9tVG9vbHMiLCJleGVjdXRlVG9vbHNBbmRTaWRlRWZmZWN0cyIsImNvbXB1dGVyUmVzdWx0cyIsImV4ZWN1dGVDb21wdXRlckFjdGlvbnMiLCJhcHByb3ZhbFJlcXVlc3QiLCJ0b29sRGF0YSIsInJlcXVlc3REYXRhIiwiYXBwcm92YWxSZXN1bHQiLCJhcHByb3ZhbFJlc3BvbnNlRGF0YSIsImV4ZWN1dGVIYW5kb2ZmQ2FsbHMiLCJtZXNzYWdlSXRlbXMiLCJwb3RlbnRpYWxGaW5hbE91dHB1dCIsImdldFRvb2xDYWxsT3V0cHV0SXRlbSIsInRvb2xSdW5zIiwicnVuU2luZ2xlVG9vbCIsInRvb2xSdW4iLCJwYXJzZWRBcmdzIiwicmVzcG9uc2UiLCJ0b29sT3V0cHV0IiwiZnVuY3Rpb25SZXN1bHQiLCJuZXN0ZWRSdW5SZXN1bHQiLCJuZXN0ZWRJbnRlcnJ1cHRpb25zIiwiX3J1bkNvbXB1dGVyQWN0aW9uQW5kU2NyZWVuc2hvdCIsImNvbXB1dGVyIiwiYWN0aW9uIiwic2NyZWVuc2hvdCIsInAiLCJhY3Rpb25zIiwiY3VzdG9tTG9nZ2VyIiwiX2xvZ2dlciIsImltYWdlVXJsIiwiYWN0dWFsSGFuZG9mZiIsImhhbmRvZmZTcGFuIiwibmV3QWdlbnQiLCJyZXF1ZXN0ZWRBZ2VudHMiLCJpbnB1dEZpbHRlciIsImhhbmRvZmZJbnB1dERhdGEiLCJOT1RfRklOQUxfT1VUUFVUIiwidG9vbFJlc3VsdHMiLCJpbnRlcnJ1cHRpb25zIiwiZmlyc3RUb29sUmVzdWx0IiwidG9vbFVzZUJlaGF2aW9yIiwic3RvcHBpbmdUb29sIiwiZ2V0UnVuSXRlbVN0cmVhbUV2ZW50TmFtZSIsImVucXVldWVSdW5JdGVtU3RyZWFtRXZlbnQiLCJpdGVtTmFtZSIsInN0cmVhbVN0ZXBJdGVtc1RvUnVuUmVzdWx0IiwiYWRkU3RlcFRvUnVuUmVzdWx0Iiwic2tpcHBlZEl0ZW1zIiwiQWdlbnRUb29sVXNlVHJhY2tlciIsIl9hZ2VudFRvVG9vbHMiLCJDVVJSRU5UX1NDSEVNQV9WRVJTSU9OIiwiJHNjaGVtYVZlcnNpb24iLCJzZXJpYWxpemVkQWdlbnRTY2hlbWEiLCJTZXJpYWxpemVkU3BhbiIsInpcbiAgICAgICAgLm9iamVjdCIsInoubGF6eSIsInVzYWdlU2NoZW1hIiwibW9kZWxSZXNwb25zZVNjaGVtYSIsInByb3RvY29sLk91dHB1dE1vZGVsSXRlbSIsIml0ZW1TY2hlbWEiLCJwcm90b2NvbC5Bc3Npc3RhbnRNZXNzYWdlSXRlbSIsInByb3RvY29sLlRvb2xDYWxsSXRlbSIsInByb3RvY29sLkhvc3RlZFRvb2xDYWxsSXRlbSIsInByb3RvY29sLkZ1bmN0aW9uQ2FsbFJlc3VsdEl0ZW0iLCJwcm90b2NvbC5SZWFzb25pbmdJdGVtIiwicHJvdG9jb2wuRnVuY3Rpb25DYWxsSXRlbSIsInNlcmlhbGl6ZWRUcmFjZVNjaGVtYSIsInNlcmlhbGl6ZWRQcm9jZXNzZWRSZXNwb25zZVNjaGVtYSIsInpcbiAgICAgICAgLmFycmF5IiwiZ3VhcmRyYWlsRnVuY3Rpb25PdXRwdXRTY2hlbWEiLCJpbnB1dEd1YXJkcmFpbFJlc3VsdFNjaGVtYSIsIm91dHB1dEd1YXJkcmFpbFJlc3VsdFNjaGVtYSIsIlNlcmlhbGl6ZWRSdW5TdGF0ZSIsInByb3RvY29sLk1vZGVsSXRlbSIsIlJ1blN0YXRlIiwic3RhcnRpbmdBZ2VudCIsIm1heFR1cm5zIiwiZ2V0Q3VycmVudFRyYWNlIiwiZ2V0VHVybklucHV0IiwiaW5pdGlhbEFnZW50IiwicGFyc2luZ0Vycm9yIiwianNvblJlc3VsdCIsImN1cnJlbnRTY2hlbWFWZXJzaW9uIiwic3RhdGVKc29uIiwiYWdlbnRNYXAiLCJidWlsZEFnZW50TWFwIiwiY3VycmVudEFnZW50IiwiYWdlbnROYW1lIiwidHJhY2UiLCJkZXNlcmlhbGl6ZVNwYW4iLCJkZXNlcmlhbGl6ZU1vZGVsUmVzcG9uc2UiLCJkZXNlcmlhbGl6ZUl0ZW0iLCJkZXNlcmlhbGl6ZVByb2Nlc3NlZFJlc3BvbnNlIiwiX2UiLCJxdWV1ZSIsInNlcmlhbGl6ZWRTcGFuIiwic3BhbkRhdGEiLCJwcmV2aW91c1NwYW4iLCJzZXJpYWxpemVkTW9kZWxSZXNwb25zZSIsInVzYWdlIiwic2VyaWFsaXplZEl0ZW0iLCJzZXJpYWxpemVkUHJvY2Vzc2VkUmVzcG9uc2UiLCJjb21wdXRlclRvb2xzIiwiZW50cnkiLCJmdW5jdGlvbkNhbGwiLCJjb21wdXRlckFjdGlvbiIsIkRFRkFVTFRfTUFYX1RVUk5TIiwiZ2V0VHJhY2luZyIsInRyYWNpbmdEaXNhYmxlZCIsInRyYWNlSW5jbHVkZVNlbnNpdGl2ZURhdGEiLCJ0b0FnZW50SW5wdXRMaXN0IiwiU2VydmVyQ29udmVyc2F0aW9uVHJhY2tlciIsImNvbnZlcnNhdGlvbklkIiwicHJldmlvdXNSZXNwb25zZUlkIiwiZ2VuZXJhdGVkSXRlbXMiLCJtb2RlbFJlc3BvbnNlcyIsImxhdGVzdFJlc3BvbnNlIiwiaW5wdXRJdGVtcyIsImluaXRpYWxJdGVtcyIsInJhd0l0ZW1zIiwiX1J1bm5lcl9pbnN0YW5jZXMiLCJ3aXRoVHJhY2UiLCJfX3ByaXZhdGVNZXRob2QiLCJydW5JbmRpdmlkdWFsU3RyZWFtX2ZuIiwicnVuSW5kaXZpZHVhbE5vblN0cmVhbV9mbiIsImdldE9yQ3JlYXRlVHJhY2UiLCJpc1Jlc3VtZWRTdGF0ZSIsInNlcnZlckNvbnZlcnNhdGlvblRyYWNrZXIiLCJleHBsaWN0bHlNb2RlbFNldCIsInNlbGVjdE1vZGVsIiwidHVyblJlc3VsdCIsIlJ1blJlc3VsdCIsImhhbmRvZmZOYW1lcyIsInNlcmlhbGl6ZWRUb29scyIsInNlcmlhbGl6ZWRIYW5kb2ZmcyIsInJ1bklucHV0R3VhcmRyYWlsc19mbiIsInR1cm5JbnB1dCIsImFnZW50TW9kZWxTZXR0aW5ncyIsImFkanVzdE1vZGVsU2V0dGluZ3NGb3JOb25HUFQ1UnVubmVyTW9kZWwiLCJydW5PdXRwdXRHdWFyZHJhaWxzX2ZuIiwiZ3VhcmRyYWlscyIsImd1YXJkcmFpbEFyZ3MiLCJndWFyZHJhaWwiLCJhZ2VudE91dHB1dCIsInJ1blN0cmVhbUxvb3BfZm4iLCJmaW5hbFJlc3BvbnNlIiwicHJlVG9vbEl0ZW1zIiwiU3RyZWFtZWRSdW5SZXN1bHQiLCJzdHJlYW1Mb29wUHJvbWlzZSIsImFnZW50TW9kZWwiLCJydW5Db25maWdNb2RlbCIsInJ1bm5lck1vZGVsIiwiY29waWVkTW9kZWxTZXR0aW5ncyIsIl9nIiwiX2YiLCJfaCIsIlJ1blJlc3VsdEJhc2UiLCJyZXNwb25zZXMiLCJfZXJyb3IiLCJfc2lnbmFsIiwiX3JlYWRhYmxlQ29udHJvbGxlciIsIl9yZWFkYWJsZVN0cmVhbSIsIl9jb21wbGV0ZWRQcm9taXNlIiwiX2NvbXBsZXRlZFByb21pc2VSZXNvbHZlIiwiX2NvbXBsZXRlZFByb21pc2VSZWplY3QiLCJfY2FuY2VsbGVkIiwiX3N0cmVhbUxvb3BQcm9taXNlIiwiX1JlYWRhYmxlU3RyZWFtIiwiY29udHJvbGxlciIsInJlc29sdmUiLCJyZWplY3QiLCJoYW5kbGVBYm9ydCIsInN0cmVhbSIsInByb21pc2UiLCJfY29udGV4dEFzeW5jTG9jYWxTdG9yYWdlIiwiZ2V0Q29udGV4dEFzeW5jTG9jYWxTdG9yYWdlIiwiY3VycmVudFRyYWNlIiwiX3dyYXBGdW5jdGlvbldpdGhUcmFjZUxpZmVjeWNsZSIsIm5ld1RyYWNlIiwic3BhbkVycm9yIiwiY2xvbmVDdXJyZW50Q29udGV4dCIsImN1cnJlbnRDb250ZXh0IiwiY29weU9mQ29udGV4dCIsIkNvbnNvbGVTcGFuRXhwb3J0ZXIiLCJCYXRjaFRyYWNlUHJvY2Vzc29yIiwiZXhwb3J0ZXIiLCJtYXhRdWV1ZVNpemUiLCJtYXhCYXRjaFNpemUiLCJzY2hlZHVsZURlbGF5IiwiZXhwb3J0VHJpZ2dlclJhdGlvIiwiX0JhdGNoVHJhY2VQcm9jZXNzb3JfaW5zdGFuY2VzIiwiX21heFF1ZXVlU2l6ZSIsIl9tYXhCYXRjaFNpemUiLCJfc2NoZWR1bGVEZWxheSIsIl9leHBvcnRUcmlnZ2VyU2l6ZSIsIl9leHBvcnRlciIsIl9idWZmZXIiLCJfdGltZXIiLCJfdGltZW91dCIsIl9leHBvcnRJblByb2dyZXNzIiwiX3RpbWVvdXRBYm9ydENvbnRyb2xsZXIiLCJydW5FeHBvcnRMb29wX2ZuIiwic2FmZUFkZEl0ZW1fZm4iLCJfdHJhY2UiLCJfc3BhbiIsImV4cG9ydEJhdGNoZXNfZm4iLCJmb3JjZSIsInRvRXhwb3J0IiwiYmF0Y2giLCJNdWx0aVRyYWNpbmdQcm9jZXNzb3IiLCJfcHJvY2Vzc29ycyIsInByb2Nlc3NvciIsInByb2Nlc3NvcnMiLCJfZGVmYXVsdEV4cG9ydGVyIiwiX2RlZmF1bHRQcm9jZXNzb3IiLCJkZWZhdWx0RXhwb3J0ZXIiLCJkZWZhdWx0UHJvY2Vzc29yIiwidGltZUlzbyIsImdlbmVyYXRlVHJhY2VJZCIsImdlbmVyYXRlU3BhbklkIiwicmVtb3ZlUHJpdmF0ZUZpZWxkcyIsIl9TcGFuIiwiX2RhdGEiLCJfdHJhY2VJZCIsIl9zcGFuSWQiLCJfcGFyZW50SWQiLCJfcHJvY2Vzc29yIiwiX3N0YXJ0ZWRBdCIsIl9lbmRlZEF0IiwiX3ByZXZpb3VzU3BhbiIsIlNwYW4iLCJOb29wU3BhbiIsIl9UcmFjZSIsIl9zdGFydGVkIiwiVHJhY2UiLCJOb29wVHJhY2UiLCJUcmFjZVByb3ZpZGVyIiwiX1RyYWNlUHJvdmlkZXJfaW5zdGFuY2VzIiwiX211bHRpUHJvY2Vzc29yIiwiX2Rpc2FibGVkIiwiYWRkQ2xlYW51cExpc3RlbmVyc19mbiIsImRpc2FibGVkIiwidHJhY2VPcHRpb25zIiwidHJhY2VJZCIsInNwYW5PcHRpb25zIiwicGFyZW50SWQiLCJjbGVhbnVwIiwiaGFzT3RoZXJMaXN0ZW5lcnNGb3JTaWduYWxzIiwicmVhc29uIiwiaGFzT3RoZXJMaXN0ZW5lcnNGb3JFdmVudHMiLCJHTE9CQUxfVFJBQ0VfUFJPVklERVIiLCJhZGRUcmFjZVByb2Nlc3NvciIsImJhc2U2NFRvQXJyYXlCdWZmZXIiLCJiaW5hcnlTdHJpbmciLCJieXRlcyIsImFycmF5QnVmZmVyVG9CYXNlNjQiLCJhcnJheUJ1ZmZlciIsImdldExhc3RUZXh0RnJvbUF1ZGlvT3V0cHV0TWVzc2FnZSIsImxhc3RDb250ZW50SXRlbSIsImRpZmZSZWFsdGltZUhpc3RvcnkiLCJvbGRIaXN0b3J5IiwibmV3SGlzdG9yeSIsInJlbW92YWxzIiwiYWRkaXRpb25zIiwib2xkSXRlbSIsInVwZGF0ZXMiLCJoYXNXZWJSVENTdXBwb3J0IiwicmVtb3ZlQXVkaW9Gcm9tQ29udGVudCIsInVwZGF0ZVJlYWx0aW1lSGlzdG9yeSIsImhpc3RvcnkiLCJzaG91bGRJbmNsdWRlQXVkaW9EYXRhIiwidXBkYXRlZENvbnRlbnQiLCJuZXdFdmVudCIsImV4aXN0aW5nSW5kZXgiLCJpZHgiLCJwcmV2SW5kZXgiLCJIRUFERVJTIiwiV0VCU09DS0VUX01FVEEiLCJyZWFsdGltZUFwcHJvdmFsSXRlbVRvQXBwcm92YWxJdGVtIiwiYXBwcm92YWxJdGVtVG9SZWFsdGltZUFwcHJvdmFsSXRlbSIsIml0ZW1JZCIsInNlcnZlckxhYmVsIiwiUmVhbHRpbWVBZ2VudCIsImdldFJlYWx0aW1lR3VhcmRyYWlsU2V0dGluZ3MiLCJzZXR0aW5ncyIsImRlZmluZVJlYWx0aW1lT3V0cHV0R3VhcmRyYWlsIiwicG9saWN5SGludElucHV0IiwiYmFzZUd1YXJkcmFpbCIsInBvbGljeUhpbnQiLCJnZXRSZWFsdGltZUd1YXJkcmFpbEZlZWRiYWNrTWVzc2FnZSIsImlzRGVmaW5lZCIsImlzRGVwcmVjYXRlZENvbmZpZyIsInRvTmV3U2Vzc2lvbkNvbmZpZyIsImlucHV0Q29uZmlnIiwibm9ybWFsaXplQXVkaW9Gb3JtYXQiLCJyZXF1ZXN0ZWRPdXRwdXRWb2ljZSIsIm91dHB1dENvbmZpZyIsImYiLCJyZWFsdGltZU1lc3NhZ2VJdGVtU2NoZW1hIiwicmVhbHRpbWVUb29sQ2FsbEl0ZW0iLCJyZWFsdGltZU1jcENhbGxJdGVtIiwicmVhbHRpbWVNY3BDYWxsQXBwcm92YWxSZXF1ZXN0SXRlbSIsInJlYWx0aW1lUmVzcG9uc2UiLCJ6XG4gICAgICAgICAgICAub2JqZWN0IiwielxuICAgICAgICAuZW51bSIsImNvbnZlcnNhdGlvbkl0ZW1Db250ZW50U2NoZW1hIiwiY29udmVyc2F0aW9uSXRlbVNjaGVtYSIsInpcbiAgICAub2JqZWN0IiwiY29udmVyc2F0aW9uQ3JlYXRlZEV2ZW50U2NoZW1hIiwiY29udmVyc2F0aW9uSXRlbUFkZGVkRXZlbnRTY2hlbWEiLCJjb252ZXJzYXRpb25JdGVtRG9uZUV2ZW50U2NoZW1hIiwiY29udmVyc2F0aW9uSXRlbURlbGV0ZWRFdmVudFNjaGVtYSIsImNvbnZlcnNhdGlvbkl0ZW1JbnB1dEF1ZGlvVHJhbnNjcmlwdGlvbkNvbXBsZXRlZEV2ZW50U2NoZW1hIiwiY29udmVyc2F0aW9uSXRlbUlucHV0QXVkaW9UcmFuc2NyaXB0aW9uRGVsdGFFdmVudFNjaGVtYSIsImNvbnZlcnNhdGlvbkl0ZW1JbnB1dEF1ZGlvVHJhbnNjcmlwdGlvbkZhaWxlZEV2ZW50U2NoZW1hIiwiY29udmVyc2F0aW9uSXRlbVJldHJpZXZlZEV2ZW50U2NoZW1hIiwiY29udmVyc2F0aW9uSXRlbVRydW5jYXRlZEV2ZW50U2NoZW1hIiwiY29udmVyc2F0aW9uSXRlbUNyZWF0ZUV2ZW50U2NoZW1hIiwiY29udmVyc2F0aW9uSXRlbURlbGV0ZUV2ZW50U2NoZW1hIiwiY29udmVyc2F0aW9uSXRlbVJldHJpZXZlRXZlbnRTY2hlbWEiLCJjb252ZXJzYXRpb25JdGVtVHJ1bmNhdGVFdmVudFNjaGVtYSIsImVycm9yRXZlbnRTY2hlbWEiLCJpbnB1dEF1ZGlvQnVmZmVyQ2xlYXJlZEV2ZW50U2NoZW1hIiwiaW5wdXRBdWRpb0J1ZmZlckFwcGVuZEV2ZW50U2NoZW1hIiwiaW5wdXRBdWRpb0J1ZmZlckNsZWFyRXZlbnRTY2hlbWEiLCJpbnB1dEF1ZGlvQnVmZmVyQ29tbWl0RXZlbnRTY2hlbWEiLCJpbnB1dEF1ZGlvQnVmZmVyQ29tbWl0dGVkRXZlbnRTY2hlbWEiLCJpbnB1dEF1ZGlvQnVmZmVyU3BlZWNoU3RhcnRlZEV2ZW50U2NoZW1hIiwiaW5wdXRBdWRpb0J1ZmZlclNwZWVjaFN0b3BwZWRFdmVudFNjaGVtYSIsIm91dHB1dEF1ZGlvQnVmZmVyU3RhcnRlZEV2ZW50U2NoZW1hIiwib3V0cHV0QXVkaW9CdWZmZXJTdG9wcGVkRXZlbnRTY2hlbWEiLCJvdXRwdXRBdWRpb0J1ZmZlckNsZWFyZWRFdmVudFNjaGVtYSIsInJhdGVMaW1pdHNVcGRhdGVkRXZlbnRTY2hlbWEiLCJyZXNwb25zZUF1ZGlvRGVsdGFFdmVudFNjaGVtYSIsInJlc3BvbnNlQXVkaW9Eb25lRXZlbnRTY2hlbWEiLCJyZXNwb25zZUF1ZGlvVHJhbnNjcmlwdERlbHRhRXZlbnRTY2hlbWEiLCJyZXNwb25zZUF1ZGlvVHJhbnNjcmlwdERvbmVFdmVudFNjaGVtYSIsInJlc3BvbnNlQ29udGVudFBhcnRBZGRlZEV2ZW50U2NoZW1hIiwicmVzcG9uc2VDb250ZW50UGFydERvbmVFdmVudFNjaGVtYSIsInJlc3BvbnNlQ3JlYXRlZEV2ZW50U2NoZW1hIiwicmVzcG9uc2VEb25lRXZlbnRTY2hlbWEiLCJyZXNwb25zZUZ1bmN0aW9uQ2FsbEFyZ3VtZW50c0RlbHRhRXZlbnRTY2hlbWEiLCJyZXNwb25zZUZ1bmN0aW9uQ2FsbEFyZ3VtZW50c0RvbmVFdmVudFNjaGVtYSIsInJlc3BvbnNlT3V0cHV0SXRlbUFkZGVkRXZlbnRTY2hlbWEiLCJyZXNwb25zZU91dHB1dEl0ZW1Eb25lRXZlbnRTY2hlbWEiLCJyZXNwb25zZVRleHREZWx0YUV2ZW50U2NoZW1hIiwicmVzcG9uc2VUZXh0RG9uZUV2ZW50U2NoZW1hIiwic2Vzc2lvbkNyZWF0ZWRFdmVudFNjaGVtYSIsInNlc3Npb25VcGRhdGVkRXZlbnRTY2hlbWEiLCJyZXNwb25zZUNhbmNlbEV2ZW50U2NoZW1hIiwicmVzcG9uc2VDcmVhdGVFdmVudFNjaGVtYSIsInNlc3Npb25VcGRhdGVFdmVudFNjaGVtYSIsIm1jcExpc3RUb29sc0luUHJvZ3Jlc3NFdmVudFNjaGVtYSIsIm1jcExpc3RUb29sc0NvbXBsZXRlZEV2ZW50U2NoZW1hIiwicmVzcG9uc2VNY3BDYWxsQXJndW1lbnRzRGVsdGFFdmVudFNjaGVtYSIsInJlc3BvbnNlTWNwQ2FsbEFyZ3VtZW50c0RvbmVFdmVudFNjaGVtYSIsInJlc3BvbnNlTWNwQ2FsbEluUHJvZ3Jlc3NFdmVudFNjaGVtYSIsInJlc3BvbnNlTWNwQ2FsbENvbXBsZXRlZEV2ZW50U2NoZW1hIiwibWNwTGlzdFRvb2xzRmFpbGVkRXZlbnRTY2hlbWEiLCJnZW5lcmljRXZlbnRTY2hlbWEiLCJyZWFsdGltZVNlcnZlckV2ZW50U2NoZW1hIiwicGFyc2VSZWFsdGltZUV2ZW50IiwicmF3IiwiZ2VuZXJpY1BhcnNlZCIsIkRFRkFVTFRfT1BFTkFJX1JFQUxUSU1FX01PREVMIiwiREVGQVVMVF9PUEVOQUlfUkVBTFRJTUVfU0VTU0lPTl9DT05GSUciLCJfT3BlbkFJUmVhbHRpbWVCYXNlIiwiX2FwaUtleSIsIl90cmFjaW5nQ29uZmlnIiwiX3Jhd1Nlc3Npb25Db25maWciLCJhcGlLZXkiLCJpc0dlbmVyaWMiLCJpbnB1dFRva2VucyIsIm91dHB1dFRva2VucyIsInRvdGFsVG9rZW5zIiwicHJldmlvdXNJdGVtSWQiLCJtY3BBcHByb3ZhbFJlcXVlc3QiLCJtY3BDYWxsIiwicmVhbHRpbWVJdGVtIiwib3RoZXJFdmVudERhdGEiLCJ0cmlnZ2VyUmVzcG9uc2UiLCJpbWFnZSIsIm5ld0NvbmZpZyIsInNlc3Npb25EYXRhIiwiX2oiLCJfaSIsIl9sIiwiX24iLCJfbSIsIl9wIiwiX28iLCJfciIsIl9xIiwiX3QiLCJfcyIsIl92IiwiX3UiLCJfdyIsIl96IiwiX3kiLCJfQiIsIl9BIiwiY3JlYXRlUmVzcG9uc2UiLCJjcmVhdGVfcmVzcG9uc2UiLCJlYWdlcm5lc3MiLCJpbnRlcnJ1cHRSZXNwb25zZSIsImludGVycnVwdF9yZXNwb25zZSIsInByZWZpeFBhZGRpbmdNcyIsInByZWZpeF9wYWRkaW5nX21zIiwic2lsZW5jZUR1cmF0aW9uTXMiLCJzaWxlbmNlX2R1cmF0aW9uX21zIiwidGhyZXNob2xkIiwiaWRsZVRpbWVvdXRNcyIsImlkbGVfdGltZW91dF9tcyIsInRyYWNpbmdDb25maWciLCJzdGFydFJlc3BvbnNlIiwiYXVkaW8iLCJjb21taXQiLCJyZW1vdmFsSWRzIiwidXBkYXRlIiwiYWRkaXRpb25zQW5kVXBkYXRlcyIsImFkZGl0aW9uIiwiaXRlbUVudHJ5IiwiT3BlbkFJUmVhbHRpbWVCYXNlIiwiT3BlbkFJUmVhbHRpbWVXZWJSVEMiLCJfdXJsIiwiX3N0YXRlIiwiX3VzZUluc2VjdXJlQXBpS2V5IiwiX29uZ29pbmdSZXNwb25zZSIsIl9tdXRlZCIsImJhc2VVcmwiLCJpc0NsaWVudEtleSIsInVzZXJTZXNzaW9uQ29uZmlnIiwiY29ubmVjdGlvblVybCIsInBlZXJDb25uZWN0aW9uIiwiZGF0YUNoYW5uZWwiLCJhdWRpb0VsZW1lbnQiLCJvZmZlciIsInNkcFJlc3BvbnNlIiwiYW5zd2VyIiwibXV0ZWQiLCJzZW5kZXIiLCJXZWJTb2NrZXQiLCJPcGVuQUlSZWFsdGltZVdlYlNvY2tldCIsIl9PcGVuQUlSZWFsdGltZVdlYlNvY2tldF9pbnN0YW5jZXMiLCJfY3VycmVudEl0ZW1JZCIsIl9jdXJyZW50QXVkaW9Db250ZW50SW5kZXgiLCJfY3JlYXRlV2ViU29ja2V0IiwiX3NraXBPcGVuRXZlbnRMaXN0ZW5lcnMiLCJhdWRpb0V2ZW50IiwidXJsIiwic2Vzc2lvbkNvbmZpZyIsInNldHVwV2ViU29ja2V0X2ZuIiwiZWxhcHNlZFRpbWUiLCJjYW5jZWxPbmdvaW5nUmVzcG9uc2UiLCJsZW5ndGgiLCJhdWRpb19lbmRfbXMiLCJ3cyIsIndlYnNvY2tldEFyZ3VtZW50cyIsIm9uU29ja2V0T3BlblJlYWR5IiwiYnVmZiIsImZtdCIsInJhdGUiLCJhdXRvbWF0aWNSZXNwb25zZUNhbmNlbGxhdGlvbkVuYWJsZWQiLCJCQUNLR1JPVU5EX1JFU1VMVF9TWU1CT0wiLCJiYWNrZ3JvdW5kUmVzdWx0IiwiaXNCYWNrZ3JvdW5kUmVzdWx0IiwiaXNWYWxpZFJlYWx0aW1lVG9vbCIsInRvUmVhbHRpbWVUb29sRGVmaW5pdGlvbiIsInNlcnZlclVybCIsImNsb25lRGVmYXVsdFNlc3Npb25Db25maWciLCJSZWFsdGltZVNlc3Npb24iLCJfUmVhbHRpbWVTZXNzaW9uX2luc3RhbmNlcyIsIl90cmFuc3BvcnQiLCJfY3VycmVudEFnZW50IiwiX2N1cnJlbnRUb29scyIsIl9vdXRwdXRHdWFyZHJhaWxzIiwiX291dHB1dEd1YXJkcmFpbFNldHRpbmdzIiwiX3RyYW5zY3JpYmVkVGV4dERlbHRhcyIsIl9oaXN0b3J5IiwiX3Nob3VsZEluY2x1ZGVBdWRpb0RhdGEiLCJfaW50ZXJydXB0ZWRCeUd1YXJkcmFpbCIsIl9hdWRpb1N0YXJ0ZWQiLCJfYWxsTWNwVG9vbHNCeVNlcnZlciIsIl9hdmFpbGFibGVNY3BUb29scyIsIl9sYXN0U2Vzc2lvbkNvbmZpZyIsIl9hdXRvbWF0aWNhbGx5VHJpZ2dlclJlc3BvbnNlRm9yTWNwVG9vbENhbGxzIiwic2V0Q3VycmVudEFnZW50X2ZuIiwiZ2V0U2Vzc2lvbkNvbmZpZ19mbiIsInNldEV2ZW50TGlzdGVuZXJzX2ZuIiwidXBkYXRlZEhpc3RvcnkiLCJoYW5kbGVGdW5jdGlvblRvb2xDYWxsX2ZuIiwiaGFuZG9mZlRvb2xzIiwiaGFzVG9vbHNEZWZpbmVkIiwiaGFzSGFuZG9mZnNEZWZpbmVkIiwidXBkYXRlQXZhaWxhYmxlTWNwVG9vbHNfZm4iLCJhZGRpdGlvbmFsQ29uZmlnIiwiaW5zdHJ1Y3Rpb25zIiwiZnVsbENvbmZpZyIsImhhbmRsZUhhbmRvZmZfZm4iLCJoYW5kbGVGdW5jdGlvbkNhbGxfZm4iLCJlbmFibGVkSGFuZG9mZnMiLCJmdW5jdGlvblRvb2xNYXAiLCJwb3NzaWJsZUhhbmRvZmYiLCJyZXNwb25zZUlkIiwiZmlyc3RUcmlwd2lyZVRyaWdnZXJlZCIsImZlZWRiYWNrVGV4dCIsImNvbXBsZXRlZEV2ZW50IiwidGV4dE91dHB1dCIsImxhc3RSdW5JbmRleCIsImxhc3RJdGVtSWQiLCJkZWx0YSIsIm5ld1RleHQiLCJuZXdSdW5JbmRleCIsImlzTmV3IiwiYWRkZWRJdGVtIiwiYWN0aXZlTWNwQ29uZmlncyIsImFsbG93ZWRGcm9tQ29uZmlnIiwiY2ZnIiwiZGVkdXBCeU5hbWUiLCJuZXh0IiwicHJldiIsInV0aWxzIiwidXRpbEltcG9ydC5iYXNlNjRUb0FycmF5QnVmZmVyIiwidXRpbEltcG9ydC5hcnJheUJ1ZmZlclRvQmFzZTY0IiwidXRpbEltcG9ydC5nZXRMYXN0VGV4dEZyb21BdWRpb091dHB1dE1lc3NhZ2UiXSwibWFwcGluZ3MiOiIyakNBQ08sTUFBTUEsRUFBVyxDQUVwQixRQUFXLFFBS2YsRUNSTyxlQUFlQyxHQUFZQyxFQUFJLENB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YixNQUFPLENBQUMsQ0FBQyxLQUFLLEtBQUssT0FBTyxLQUFNQSxHQUFPQSxFQUFHLE9BQVMsVUFBVSxDQUNqRSxDQUNBLElBQUksU0FBVSxDQUNWLE1BQU8sQ0FBQyxDQUFDLEtBQUssS0FBSyxPQUFPLEtBQU1BLEdBQU9BLEVBQUcsT0FBUyxPQUFPLENBQzlELENBQ0EsSUFBSSxPQUFRLENBQ1IsTUFBTyxDQUFDLENBQUMsS0FBSyxLQUFLLE9BQU8sS0FBTUEsR0FBT0EsRUFBRyxPQUFTLEtBQUssQ0FDNUQsQ0FDQSxJQUFJLFNBQVUsQ0FDVixNQUFPLENBQUMsQ0FBQyxLQUFLLEtBQUssT0FBTyxLQUFNQSxHQUFPQSxFQUFHLE9BQVMsT0FBTyxDQUM5RCxDQUNBLElBQUksUUFBUyxDQUNULE1BQU8sQ0FBQyxDQUFDLEtBQUssS0FBSyxPQUFPLEtBQU1BLEdBQU9BLEVBQUcsT0FBUyxNQUFNLENBQzdELENBQ0EsSUFBSSxVQUFXLENBQ1gsTUFBTyxDQUFDLENBQUMsS0FBSyxLQUFLLE9BQU8sS0FBTUEsR0FBT0EsRUFBRyxPQUFTLFFBQVEsQ0FDL0QsQ0FDQSxJQUFJLFFBQVMsQ0FDVCxNQUFPLENBQUMsQ0FBQyxLQUFLLEtBQUssT0FBTyxLQUFNQSxHQUFPQSxFQUFHLE9BQVMsTUFBTSxDQUM3RCxDQUNBLElBQUksU0FBVSxDQUNWLE1BQU8sQ0FBQyxDQUFDLEtBQUssS0FBSyxPQUFPLEtBQU1BLEdBQU9BLEVBQUcsT0FBUyxPQUFPLENBQzlELENBQ0EsSUFBSSxRQUFTLENBQ1QsTUFBTyxDQUFDLENBQUMsS0FBSyxLQUFLLE9BQU8sS0FBTUEsR0FBT0EsRUFBRyxPQUFTLE1BQU0sQ0FDN0QsQ0FDQSxJQUFJLE1BQU8sQ0FDUCxNQUFPLENBQUMsQ0FBQyxLQUFLLEtBQUssT0FBTyxLQUFNQSxHQUFPQSxFQUFHLE9BQVMsSUFBSSxDQUMzRCxDQUNBLElBQUksUUFBUyxDQUNULE1BQU8sQ0FBQyxDQUFDLEtBQUssS0FBSyxPQUFPLEtBQU1BLEdBQU9BLEVBQUcsT0FBUyxNQUFNLENBQzdELENBQ0Es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
