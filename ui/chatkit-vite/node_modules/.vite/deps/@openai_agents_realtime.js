import {
  ZodFirstPartyTypeKind,
  external_exports
} from "./chunk-2MMGTHCL.js";
import {
  __commonJS,
  __toESM
} from "./chunk-G3PMV62Z.js";

// node_modules/ms/index.js
var require_ms = __commonJS({
  "node_modules/ms/index.js"(exports, module) {
    var s = 1e3;
    var m = s * 60;
    var h = m * 60;
    var d = h * 24;
    var w = d * 7;
    var y = d * 365.25;
    module.exports = function(val, options) {
      options = options || {};
      var type = typeof val;
      if (type === "string" && val.length > 0) {
        return parse(val);
      } else if (type === "number" && isFinite(val)) {
        return options.long ? fmtLong(val) : fmtShort(val);
      }
      throw new Error(
        "val is not a non-empty string or a valid number. val=" + JSON.stringify(val)
      );
    };
    function parse(str) {
      str = String(str);
      if (str.length > 100) {
        return;
      }
      var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
        str
      );
      if (!match) {
        return;
      }
      var n = parseFloat(match[1]);
      var type = (match[2] || "ms").toLowerCase();
      switch (type) {
        case "years":
        case "year":
        case "yrs":
        case "yr":
        case "y":
          return n * y;
        case "weeks":
        case "week":
        case "w":
          return n * w;
        case "days":
        case "day":
        case "d":
          return n * d;
        case "hours":
        case "hour":
        case "hrs":
        case "hr":
        case "h":
          return n * h;
        case "minutes":
        case "minute":
        case "mins":
        case "min":
        case "m":
          return n * m;
        case "seconds":
        case "second":
        case "secs":
        case "sec":
        case "s":
          return n * s;
        case "milliseconds":
        case "millisecond":
        case "msecs":
        case "msec":
        case "ms":
          return n;
        default:
          return void 0;
      }
    }
    function fmtShort(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return Math.round(ms / d) + "d";
      }
      if (msAbs >= h) {
        return Math.round(ms / h) + "h";
      }
      if (msAbs >= m) {
        return Math.round(ms / m) + "m";
      }
      if (msAbs >= s) {
        return Math.round(ms / s) + "s";
      }
      return ms + "ms";
    }
    function fmtLong(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return plural(ms, msAbs, d, "day");
      }
      if (msAbs >= h) {
        return plural(ms, msAbs, h, "hour");
      }
      if (msAbs >= m) {
        return plural(ms, msAbs, m, "minute");
      }
      if (msAbs >= s) {
        return plural(ms, msAbs, s, "second");
      }
      return ms + " ms";
    }
    function plural(ms, msAbs, n, name) {
      var isPlural = msAbs >= n * 1.5;
      return Math.round(ms / n) + " " + name + (isPlural ? "s" : "");
    }
  }
});

// node_modules/debug/src/common.js
var require_common = __commonJS({
  "node_modules/debug/src/common.js"(exports, module) {
    function setup(env) {
      createDebug.debug = createDebug;
      createDebug.default = createDebug;
      createDebug.coerce = coerce;
      createDebug.disable = disable;
      createDebug.enable = enable;
      createDebug.enabled = enabled;
      createDebug.humanize = require_ms();
      createDebug.destroy = destroy;
      Object.keys(env).forEach((key) => {
        createDebug[key] = env[key];
      });
      createDebug.names = [];
      createDebug.skips = [];
      createDebug.formatters = {};
      function selectColor(namespace) {
        let hash = 0;
        for (let i = 0; i < namespace.length; i++) {
          hash = (hash << 5) - hash + namespace.charCodeAt(i);
          hash |= 0;
        }
        return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
      }
      createDebug.selectColor = selectColor;
      function createDebug(namespace) {
        let prevTime;
        let enableOverride = null;
        let namespacesCache;
        let enabledCache;
        function debug3(...args) {
          if (!debug3.enabled) {
            return;
          }
          const self = debug3;
          const curr = Number(/* @__PURE__ */ new Date());
          const ms = curr - (prevTime || curr);
          self.diff = ms;
          self.prev = prevTime;
          self.curr = curr;
          prevTime = curr;
          args[0] = createDebug.coerce(args[0]);
          if (typeof args[0] !== "string") {
            args.unshift("%O");
          }
          let index = 0;
          args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
            if (match === "%%") {
              return "%";
            }
            index++;
            const formatter = createDebug.formatters[format];
            if (typeof formatter === "function") {
              const val = args[index];
              match = formatter.call(self, val);
              args.splice(index, 1);
              index--;
            }
            return match;
          });
          createDebug.formatArgs.call(self, args);
          const logFn = self.log || createDebug.log;
          logFn.apply(self, args);
        }
        debug3.namespace = namespace;
        debug3.useColors = createDebug.useColors();
        debug3.color = createDebug.selectColor(namespace);
        debug3.extend = extend;
        debug3.destroy = createDebug.destroy;
        Object.defineProperty(debug3, "enabled", {
          enumerable: true,
          configurable: false,
          get: () => {
            if (enableOverride !== null) {
              return enableOverride;
            }
            if (namespacesCache !== createDebug.namespaces) {
              namespacesCache = createDebug.namespaces;
              enabledCache = createDebug.enabled(namespace);
            }
            return enabledCache;
          },
          set: (v) => {
            enableOverride = v;
          }
        });
        if (typeof createDebug.init === "function") {
          createDebug.init(debug3);
        }
        return debug3;
      }
      function extend(namespace, delimiter) {
        const newDebug = createDebug(this.namespace + (typeof delimiter === "undefined" ? ":" : delimiter) + namespace);
        newDebug.log = this.log;
        return newDebug;
      }
      function enable(namespaces) {
        createDebug.save(namespaces);
        createDebug.namespaces = namespaces;
        createDebug.names = [];
        createDebug.skips = [];
        const split = (typeof namespaces === "string" ? namespaces : "").trim().replace(/\s+/g, ",").split(",").filter(Boolean);
        for (const ns of split) {
          if (ns[0] === "-") {
            createDebug.skips.push(ns.slice(1));
          } else {
            createDebug.names.push(ns);
          }
        }
      }
      function matchesTemplate(search, template) {
        let searchIndex = 0;
        let templateIndex = 0;
        let starIndex = -1;
        let matchIndex = 0;
        while (searchIndex < search.length) {
          if (templateIndex < template.length && (template[templateIndex] === search[searchIndex] || template[templateIndex] === "*")) {
            if (template[templateIndex] === "*") {
              starIndex = templateIndex;
              matchIndex = searchIndex;
              templateIndex++;
            } else {
              searchIndex++;
              templateIndex++;
            }
          } else if (starIndex !== -1) {
            templateIndex = starIndex + 1;
            matchIndex++;
            searchIndex = matchIndex;
          } else {
            return false;
          }
        }
        while (templateIndex < template.length && template[templateIndex] === "*") {
          templateIndex++;
        }
        return templateIndex === template.length;
      }
      function disable() {
        const namespaces = [
          ...createDebug.names,
          ...createDebug.skips.map((namespace) => "-" + namespace)
        ].join(",");
        createDebug.enable("");
        return namespaces;
      }
      function enabled(name) {
        for (const skip of createDebug.skips) {
          if (matchesTemplate(name, skip)) {
            return false;
          }
        }
        for (const ns of createDebug.names) {
          if (matchesTemplate(name, ns)) {
            return true;
          }
        }
        return false;
      }
      function coerce(val) {
        if (val instanceof Error) {
          return val.stack || val.message;
        }
        return val;
      }
      function destroy() {
        console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
      }
      createDebug.enable(createDebug.load());
      return createDebug;
    }
    module.exports = setup;
  }
});

// node_modules/debug/src/browser.js
var require_browser = __commonJS({
  "node_modules/debug/src/browser.js"(exports, module) {
    exports.formatArgs = formatArgs;
    exports.save = save;
    exports.load = load;
    exports.useColors = useColors;
    exports.storage = localstorage();
    exports.destroy = /* @__PURE__ */ (() => {
      let warned = false;
      return () => {
        if (!warned) {
          warned = true;
          console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
        }
      };
    })();
    exports.colors = [
      "#0000CC",
      "#0000FF",
      "#0033CC",
      "#0033FF",
      "#0066CC",
      "#0066FF",
      "#0099CC",
      "#0099FF",
      "#00CC00",
      "#00CC33",
      "#00CC66",
      "#00CC99",
      "#00CCCC",
      "#00CCFF",
      "#3300CC",
      "#3300FF",
      "#3333CC",
      "#3333FF",
      "#3366CC",
      "#3366FF",
      "#3399CC",
      "#3399FF",
      "#33CC00",
      "#33CC33",
      "#33CC66",
      "#33CC99",
      "#33CCCC",
      "#33CCFF",
      "#6600CC",
      "#6600FF",
      "#6633CC",
      "#6633FF",
      "#66CC00",
      "#66CC33",
      "#9900CC",
      "#9900FF",
      "#9933CC",
      "#9933FF",
      "#99CC00",
      "#99CC33",
      "#CC0000",
      "#CC0033",
      "#CC0066",
      "#CC0099",
      "#CC00CC",
      "#CC00FF",
      "#CC3300",
      "#CC3333",
      "#CC3366",
      "#CC3399",
      "#CC33CC",
      "#CC33FF",
      "#CC6600",
      "#CC6633",
      "#CC9900",
      "#CC9933",
      "#CCCC00",
      "#CCCC33",
      "#FF0000",
      "#FF0033",
      "#FF0066",
      "#FF0099",
      "#FF00CC",
      "#FF00FF",
      "#FF3300",
      "#FF3333",
      "#FF3366",
      "#FF3399",
      "#FF33CC",
      "#FF33FF",
      "#FF6600",
      "#FF6633",
      "#FF9900",
      "#FF9933",
      "#FFCC00",
      "#FFCC33"
    ];
    function useColors() {
      if (typeof window !== "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs)) {
        return true;
      }
      if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
        return false;
      }
      let m;
      return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
      typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
      typeof navigator !== "undefined" && navigator.userAgent && (m = navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)) && parseInt(m[1], 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
      typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }
    function formatArgs(args) {
      args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module.exports.humanize(this.diff);
      if (!this.useColors) {
        return;
      }
      const c = "color: " + this.color;
      args.splice(1, 0, c, "color: inherit");
      let index = 0;
      let lastC = 0;
      args[0].replace(/%[a-zA-Z%]/g, (match) => {
        if (match === "%%") {
          return;
        }
        index++;
        if (match === "%c") {
          lastC = index;
        }
      });
      args.splice(lastC, 0, c);
    }
    exports.log = console.debug || console.log || (() => {
    });
    function save(namespaces) {
      try {
        if (namespaces) {
          exports.storage.setItem("debug", namespaces);
        } else {
          exports.storage.removeItem("debug");
        }
      } catch (error) {
      }
    }
    function load() {
      let r;
      try {
        r = exports.storage.getItem("debug") || exports.storage.getItem("DEBUG");
      } catch (error) {
      }
      if (!r && typeof process !== "undefined" && "env" in process) {
        r = process.env.DEBUG;
      }
      return r;
    }
    function localstorage() {
      try {
        return localStorage;
      } catch (error) {
      }
    }
    module.exports = require_common()(exports);
    var { formatters } = module.exports;
    formatters.j = function(v) {
      try {
        return JSON.stringify(v);
      } catch (error) {
        return "[UnexpectedJSONParseError]: " + error.message;
      }
    };
  }
});

// node_modules/@openai/agents-realtime/dist/metadata.mjs
var METADATA = {
  "name": "@openai/agents-realtime",
  "version": "0.1.10",
  "versions": {
    "@openai/agents-realtime": "0.1.10",
    "@openai/agents-core": "workspace:*"
  }
};
var metadata_default = METADATA;

// node_modules/@openai/agents-core/dist/utils/safeExecute.mjs
async function safeExecute(fn) {
  try {
    return [null, await fn()];
  } catch (error) {
    return [error, null];
  }
}

// node_modules/openai/lib/parser.mjs
function makeParseableTextFormat(response_format, parser) {
  const obj = { ...response_format };
  Object.defineProperties(obj, {
    $brand: {
      value: "auto-parseable-response-format",
      enumerable: false
    },
    $parseRaw: {
      value: parser,
      enumerable: false
    }
  });
  return obj;
}

// node_modules/openai/_vendor/zod-to-json-schema/Options.mjs
var ignoreOverride = Symbol("Let zodToJsonSchema decide on which parser to use");
var defaultOptions = {
  name: void 0,
  $refStrategy: "root",
  effectStrategy: "input",
  pipeStrategy: "all",
  dateStrategy: "format:date-time",
  mapStrategy: "entries",
  nullableStrategy: "from-target",
  removeAdditionalStrategy: "passthrough",
  definitionPath: "definitions",
  target: "jsonSchema7",
  strictUnions: false,
  errorMessages: false,
  markdownDescription: false,
  patternStrategy: "escape",
  applyRegexFlags: false,
  emailStrategy: "format:email",
  base64Strategy: "contentEncoding:base64",
  nameStrategy: "ref"
};
var getDefaultOptions = (options) => {
  return typeof options === "string" ? {
    ...defaultOptions,
    basePath: ["#"],
    definitions: {},
    name: options
  } : {
    ...defaultOptions,
    basePath: ["#"],
    definitions: {},
    ...options
  };
};

// node_modules/openai/_vendor/zod-to-json-schema/util.mjs
var zodDef = (zodSchema) => {
  return "_def" in zodSchema ? zodSchema._def : zodSchema;
};
function isEmptyObj(obj) {
  if (!obj)
    return true;
  for (const _k in obj)
    return false;
  return true;
}

// node_modules/openai/_vendor/zod-to-json-schema/Refs.mjs
var getRefs = (options) => {
  const _options = getDefaultOptions(options);
  const currentPath = _options.name !== void 0 ? [..._options.basePath, _options.definitionPath, _options.name] : _options.basePath;
  return {
    ..._options,
    currentPath,
    propertyPath: void 0,
    seenRefs: /* @__PURE__ */ new Set(),
    seen: new Map(Object.entries(_options.definitions).map(([name, def]) => [
      zodDef(def),
      {
        def: zodDef(def),
        path: [..._options.basePath, _options.definitionPath, name],
        // Resolution of references will be forced even though seen, so it's ok that the schema is undefined here for now.
        jsonSchema: void 0
      }
    ]))
  };
};

// node_modules/openai/_vendor/zod-to-json-schema/errorMessages.mjs
function addErrorMessage(res, key, errorMessage, refs) {
  if (!refs?.errorMessages)
    return;
  if (errorMessage) {
    res.errorMessage = {
      ...res.errorMessage,
      [key]: errorMessage
    };
  }
}
function setResponseValueAndErrors(res, key, value, errorMessage, refs) {
  res[key] = value;
  addErrorMessage(res, key, errorMessage, refs);
}

// node_modules/openai/_vendor/zod-to-json-schema/parsers/any.mjs
function parseAnyDef() {
  return {};
}

// node_modules/openai/_vendor/zod-to-json-schema/parsers/array.mjs
function parseArrayDef(def, refs) {
  const res = {
    type: "array"
  };
  if (def.type?._def?.typeName !== ZodFirstPartyTypeKind.ZodAny) {
    res.items = parseDef(def.type._def, {
      ...refs,
      currentPath: [...refs.currentPath, "items"]
    });
  }
  if (def.minLength) {
    setResponseValueAndErrors(res, "minItems", def.minLength.value, def.minLength.message, refs);
  }
  if (def.maxLength) {
    setResponseValueAndErrors(res, "maxItems", def.maxLength.value, def.maxLength.message, refs);
  }
  if (def.exactLength) {
    setResponseValueAndErrors(res, "minItems", def.exactLength.value, def.exactLength.message, refs);
    setResponseValueAndErrors(res, "maxItems", def.exactLength.value, def.exactLength.message, refs);
  }
  return res;
}

// node_modules/openai/_vendor/zod-to-json-schema/parsers/bigint.mjs
function parseBigintDef(def, refs) {
  const res = {
    type: "integer",
    format: "int64"
  };
  if (!def.checks)
    return res;
  for (const check of def.checks) {
    switch (check.kind) {
      case "min":
        if (refs.target === "jsonSchema7") {
          if (check.inclusive) {
            setResponseValueAndErrors(res, "minimum", check.value, check.message, refs);
          } else {
            setResponseValueAndErrors(res, "exclusiveMinimum", check.value, check.message, refs);
          }
        } else {
          if (!check.inclusive) {
            res.exclusiveMinimum = true;
          }
          setResponseValueAndErrors(res, "minimum", check.value, check.message, refs);
        }
        break;
      case "max":
        if (refs.target === "jsonSchema7") {
          if (check.inclusive) {
            setResponseValueAndErrors(res, "maximum", check.value, check.message, refs);
          } else {
            setResponseValueAndErrors(res, "exclusiveMaximum", check.value, check.message, refs);
          }
        } else {
          if (!check.inclusive) {
            res.exclusiveMaximum = true;
          }
          setResponseValueAndErrors(res, "maximum", check.value, check.message, refs);
        }
        break;
      case "multipleOf":
        setResponseValueAndErrors(res, "multipleOf", check.value, check.message, refs);
        break;
    }
  }
  return res;
}

// node_modules/openai/_vendor/zod-to-json-schema/parsers/boolean.mjs
function parseBooleanDef() {
  return {
    type: "boolean"
  };
}

// node_modules/openai/_vendor/zod-to-json-schema/parsers/branded.mjs
function parseBrandedDef(_def, refs) {
  return parseDef(_def.type._def, refs);
}

// node_modules/openai/_vendor/zod-to-json-schema/parsers/catch.mjs
var parseCatchDef = (def, refs) => {
  return parseDef(def.innerType._def, refs);
};

// node_modules/openai/_vendor/zod-to-json-schema/parsers/date.mjs
function parseDateDef(def, refs, overrideDateStrategy) {
  const strategy = overrideDateStrategy ?? refs.dateStrategy;
  if (Array.isArray(strategy)) {
    return {
      anyOf: strategy.map((item, i) => parseDateDef(def, refs, item))
    };
  }
  switch (strategy) {
    case "string":
    case "format:date-time":
      return {
        type: "string",
        format: "date-time"
      };
    case "format:date":
      return {
        type: "string",
        format: "date"
      };
    case "integer":
      return integerDateParser(def, refs);
  }
}
var integerDateParser = (def, refs) => {
  const res = {
    type: "integer",
    format: "unix-time"
  };
  if (refs.target === "openApi3") {
    return res;
  }
  for (const check of def.checks) {
    switch (check.kind) {
      case "min":
        setResponseValueAndErrors(
          res,
          "minimum",
          check.value,
          // This is in milliseconds
          check.message,
          refs
        );
        break;
      case "max":
        setResponseValueAndErrors(
          res,
          "maximum",
          check.value,
          // This is in milliseconds
          check.message,
          refs
        );
        break;
    }
  }
  return res;
};

// node_modules/openai/_vendor/zod-to-json-schema/parsers/default.mjs
function parseDefaultDef(_def, refs) {
  return {
    ...parseDef(_def.innerType._def, refs),
    default: _def.defaultValue()
  };
}

// node_modules/openai/_vendor/zod-to-json-schema/parsers/effects.mjs
function parseEffectsDef(_def, refs, forceResolution) {
  return refs.effectStrategy === "input" ? parseDef(_def.schema._def, refs, forceResolution) : {};
}

// node_modules/openai/_vendor/zod-to-json-schema/parsers/enum.mjs
function parseEnumDef(def) {
  return {
    type: "string",
    enum: [...def.values]
  };
}

// node_modules/openai/_vendor/zod-to-json-schema/parsers/intersection.mjs
var isJsonSchema7AllOfType = (type) => {
  if ("type" in type && type.type === "string")
    return false;
  return "allOf" in type;
};
function parseIntersectionDef(def, refs) {
  const allOf = [
    parseDef(def.left._def, {
      ...refs,
      currentPath: [...refs.currentPath, "allOf", "0"]
    }),
    parseDef(def.right._def, {
      ...refs,
      currentPath: [...refs.currentPath, "allOf", "1"]
    })
  ].filter((x) => !!x);
  let unevaluatedProperties = refs.target === "jsonSchema2019-09" ? { unevaluatedProperties: false } : void 0;
  const mergedAllOf = [];
  allOf.forEach((schema) => {
    if (isJsonSchema7AllOfType(schema)) {
      mergedAllOf.push(...schema.allOf);
      if (schema.unevaluatedProperties === void 0) {
        unevaluatedProperties = void 0;
      }
    } else {
      let nestedSchema = schema;
      if ("additionalProperties" in schema && schema.additionalProperties === false) {
        const { additionalProperties, ...rest } = schema;
        nestedSchema = rest;
      } else {
        unevaluatedProperties = void 0;
      }
      mergedAllOf.push(nestedSchema);
    }
  });
  return mergedAllOf.length ? {
    allOf: mergedAllOf,
    ...unevaluatedProperties
  } : void 0;
}

// node_modules/openai/_vendor/zod-to-json-schema/parsers/literal.mjs
function parseLiteralDef(def, refs) {
  const parsedType = typeof def.value;
  if (parsedType !== "bigint" && parsedType !== "number" && parsedType !== "boolean" && parsedType !== "string") {
    return {
      type: Array.isArray(def.value) ? "array" : "object"
    };
  }
  if (refs.target === "openApi3") {
    return {
      type: parsedType === "bigint" ? "integer" : parsedType,
      enum: [def.value]
    };
  }
  return {
    type: parsedType === "bigint" ? "integer" : parsedType,
    const: def.value
  };
}

// node_modules/openai/_vendor/zod-to-json-schema/parsers/string.mjs
var emojiRegex;
var zodPatterns = {
  /**
   * `c` was changed to `[cC]` to replicate /i flag
   */
  cuid: /^[cC][^\s-]{8,}$/,
  cuid2: /^[0-9a-z]+$/,
  ulid: /^[0-9A-HJKMNP-TV-Z]{26}$/,
  /**
   * `a-z` was added to replicate /i flag
   */
  email: /^(?!\.)(?!.*\.\.)([a-zA-Z0-9_'+\-\.]*)[a-zA-Z0-9_+-]@([a-zA-Z0-9][a-zA-Z0-9\-]*\.)+[a-zA-Z]{2,}$/,
  /**
   * Constructed a valid Unicode RegExp
   *
   * Lazily instantiate since this type of regex isn't supported
   * in all envs (e.g. React Native).
   *
   * See:
   * https://github.com/colinhacks/zod/issues/2433
   * Fix in Zod:
   * https://github.com/colinhacks/zod/commit/9340fd51e48576a75adc919bff65dbc4a5d4c99b
   */
  emoji: () => {
    if (emojiRegex === void 0) {
      emojiRegex = RegExp("^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$", "u");
    }
    return emojiRegex;
  },
  /**
   * Unused
   */
  uuid: /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/,
  /**
   * Unused
   */
  ipv4: /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/,
  /**
   * Unused
   */
  ipv6: /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/,
  base64: /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/,
  nanoid: /^[a-zA-Z0-9_-]{21}$/
};
function parseStringDef(def, refs) {
  const res = {
    type: "string"
  };
  function processPattern(value) {
    return refs.patternStrategy === "escape" ? escapeNonAlphaNumeric(value) : value;
  }
  if (def.checks) {
    for (const check of def.checks) {
      switch (check.kind) {
        case "min":
          setResponseValueAndErrors(res, "minLength", typeof res.minLength === "number" ? Math.max(res.minLength, check.value) : check.value, check.message, refs);
          break;
        case "max":
          setResponseValueAndErrors(res, "maxLength", typeof res.maxLength === "number" ? Math.min(res.maxLength, check.value) : check.value, check.message, refs);
          break;
        case "email":
          switch (refs.emailStrategy) {
            case "format:email":
              addFormat(res, "email", check.message, refs);
              break;
            case "format:idn-email":
              addFormat(res, "idn-email", check.message, refs);
              break;
            case "pattern:zod":
              addPattern(res, zodPatterns.email, check.message, refs);
              break;
          }
          break;
        case "url":
          addFormat(res, "uri", check.message, refs);
          break;
        case "uuid":
          addFormat(res, "uuid", check.message, refs);
          break;
        case "regex":
          addPattern(res, check.regex, check.message, refs);
          break;
        case "cuid":
          addPattern(res, zodPatterns.cuid, check.message, refs);
          break;
        case "cuid2":
          addPattern(res, zodPatterns.cuid2, check.message, refs);
          break;
        case "startsWith":
          addPattern(res, RegExp(`^${processPattern(check.value)}`), check.message, refs);
          break;
        case "endsWith":
          addPattern(res, RegExp(`${processPattern(check.value)}$`), check.message, refs);
          break;
        case "datetime":
          addFormat(res, "date-time", check.message, refs);
          break;
        case "date":
          addFormat(res, "date", check.message, refs);
          break;
        case "time":
          addFormat(res, "time", check.message, refs);
          break;
        case "duration":
          addFormat(res, "duration", check.message, refs);
          break;
        case "length":
          setResponseValueAndErrors(res, "minLength", typeof res.minLength === "number" ? Math.max(res.minLength, check.value) : check.value, check.message, refs);
          setResponseValueAndErrors(res, "maxLength", typeof res.maxLength === "number" ? Math.min(res.maxLength, check.value) : check.value, check.message, refs);
          break;
        case "includes": {
          addPattern(res, RegExp(processPattern(check.value)), check.message, refs);
          break;
        }
        case "ip": {
          if (check.version !== "v6") {
            addFormat(res, "ipv4", check.message, refs);
          }
          if (check.version !== "v4") {
            addFormat(res, "ipv6", check.message, refs);
          }
          break;
        }
        case "emoji":
          addPattern(res, zodPatterns.emoji, check.message, refs);
          break;
        case "ulid": {
          addPattern(res, zodPatterns.ulid, check.message, refs);
          break;
        }
        case "base64": {
          switch (refs.base64Strategy) {
            case "format:binary": {
              addFormat(res, "binary", check.message, refs);
              break;
            }
            case "contentEncoding:base64": {
              setResponseValueAndErrors(res, "contentEncoding", "base64", check.message, refs);
              break;
            }
            case "pattern:zod": {
              addPattern(res, zodPatterns.base64, check.message, refs);
              break;
            }
          }
          break;
        }
        case "nanoid": {
          addPattern(res, zodPatterns.nanoid, check.message, refs);
        }
        case "toLowerCase":
        case "toUpperCase":
        case "trim":
          break;
        default:
          /* @__PURE__ */ ((_) => {
          })(check);
      }
    }
  }
  return res;
}
var escapeNonAlphaNumeric = (value) => Array.from(value).map((c) => /[a-zA-Z0-9]/.test(c) ? c : `\\${c}`).join("");
var addFormat = (schema, value, message, refs) => {
  if (schema.format || schema.anyOf?.some((x) => x.format)) {
    if (!schema.anyOf) {
      schema.anyOf = [];
    }
    if (schema.format) {
      schema.anyOf.push({
        format: schema.format,
        ...schema.errorMessage && refs.errorMessages && {
          errorMessage: { format: schema.errorMessage.format }
        }
      });
      delete schema.format;
      if (schema.errorMessage) {
        delete schema.errorMessage.format;
        if (Object.keys(schema.errorMessage).length === 0) {
          delete schema.errorMessage;
        }
      }
    }
    schema.anyOf.push({
      format: value,
      ...message && refs.errorMessages && { errorMessage: { format: message } }
    });
  } else {
    setResponseValueAndErrors(schema, "format", value, message, refs);
  }
};
var addPattern = (schema, regex, message, refs) => {
  if (schema.pattern || schema.allOf?.some((x) => x.pattern)) {
    if (!schema.allOf) {
      schema.allOf = [];
    }
    if (schema.pattern) {
      schema.allOf.push({
        pattern: schema.pattern,
        ...schema.errorMessage && refs.errorMessages && {
          errorMessage: { pattern: schema.errorMessage.pattern }
        }
      });
      delete schema.pattern;
      if (schema.errorMessage) {
        delete schema.errorMessage.pattern;
        if (Object.keys(schema.errorMessage).length === 0) {
          delete schema.errorMessage;
        }
      }
    }
    schema.allOf.push({
      pattern: processRegExp(regex, refs),
      ...message && refs.errorMessages && { errorMessage: { pattern: message } }
    });
  } else {
    setResponseValueAndErrors(schema, "pattern", processRegExp(regex, refs), message, refs);
  }
};
var processRegExp = (regexOrFunction, refs) => {
  const regex = typeof regexOrFunction === "function" ? regexOrFunction() : regexOrFunction;
  if (!refs.applyRegexFlags || !regex.flags)
    return regex.source;
  const flags = {
    i: regex.flags.includes("i"),
    // Case-insensitive
    m: regex.flags.includes("m"),
    // `^` and `$` matches adjacent to newline characters
    s: regex.flags.includes("s")
    // `.` matches newlines
  };
  const source = flags.i ? regex.source.toLowerCase() : regex.source;
  let pattern = "";
  let isEscaped = false;
  let inCharGroup = false;
  let inCharRange = false;
  for (let i = 0; i < source.length; i++) {
    if (isEscaped) {
      pattern += source[i];
      isEscaped = false;
      continue;
    }
    if (flags.i) {
      if (inCharGroup) {
        if (source[i].match(/[a-z]/)) {
          if (inCharRange) {
            pattern += source[i];
            pattern += `${source[i - 2]}-${source[i]}`.toUpperCase();
            inCharRange = false;
          } else if (source[i + 1] === "-" && source[i + 2]?.match(/[a-z]/)) {
            pattern += source[i];
            inCharRange = true;
          } else {
            pattern += `${source[i]}${source[i].toUpperCase()}`;
          }
          continue;
        }
      } else if (source[i].match(/[a-z]/)) {
        pattern += `[${source[i]}${source[i].toUpperCase()}]`;
        continue;
      }
    }
    if (flags.m) {
      if (source[i] === "^") {
        pattern += `(^|(?<=[\r
]))`;
        continue;
      } else if (source[i] === "$") {
        pattern += `($|(?=[\r
]))`;
        continue;
      }
    }
    if (flags.s && source[i] === ".") {
      pattern += inCharGroup ? `${source[i]}\r
` : `[${source[i]}\r
]`;
      continue;
    }
    pattern += source[i];
    if (source[i] === "\\") {
      isEscaped = true;
    } else if (inCharGroup && source[i] === "]") {
      inCharGroup = false;
    } else if (!inCharGroup && source[i] === "[") {
      inCharGroup = true;
    }
  }
  try {
    const regexTest = new RegExp(pattern);
  } catch {
    console.warn(`Could not convert regex pattern at ${refs.currentPath.join("/")} to a flag-independent form! Falling back to the flag-ignorant source`);
    return regex.source;
  }
  return pattern;
};

// node_modules/openai/_vendor/zod-to-json-schema/parsers/record.mjs
function parseRecordDef(def, refs) {
  if (refs.target === "openApi3" && def.keyType?._def.typeName === ZodFirstPartyTypeKind.ZodEnum) {
    return {
      type: "object",
      required: def.keyType._def.values,
      properties: def.keyType._def.values.reduce((acc, key) => ({
        ...acc,
        [key]: parseDef(def.valueType._def, {
          ...refs,
          currentPath: [...refs.currentPath, "properties", key]
        }) ?? {}
      }), {}),
      additionalProperties: false
    };
  }
  const schema = {
    type: "object",
    additionalProperties: parseDef(def.valueType._def, {
      ...refs,
      currentPath: [...refs.currentPath, "additionalProperties"]
    }) ?? {}
  };
  if (refs.target === "openApi3") {
    return schema;
  }
  if (def.keyType?._def.typeName === ZodFirstPartyTypeKind.ZodString && def.keyType._def.checks?.length) {
    const keyType = Object.entries(parseStringDef(def.keyType._def, refs)).reduce((acc, [key, value]) => key === "type" ? acc : { ...acc, [key]: value }, {});
    return {
      ...schema,
      propertyNames: keyType
    };
  } else if (def.keyType?._def.typeName === ZodFirstPartyTypeKind.ZodEnum) {
    return {
      ...schema,
      propertyNames: {
        enum: def.keyType._def.values
      }
    };
  }
  return schema;
}

// node_modules/openai/_vendor/zod-to-json-schema/parsers/map.mjs
function parseMapDef(def, refs) {
  if (refs.mapStrategy === "record") {
    return parseRecordDef(def, refs);
  }
  const keys = parseDef(def.keyType._def, {
    ...refs,
    currentPath: [...refs.currentPath, "items", "items", "0"]
  }) || {};
  const values = parseDef(def.valueType._def, {
    ...refs,
    currentPath: [...refs.currentPath, "items", "items", "1"]
  }) || {};
  return {
    type: "array",
    maxItems: 125,
    items: {
      type: "array",
      items: [keys, values],
      minItems: 2,
      maxItems: 2
    }
  };
}

// node_modules/openai/_vendor/zod-to-json-schema/parsers/nativeEnum.mjs
function parseNativeEnumDef(def) {
  const object = def.values;
  const actualKeys = Object.keys(def.values).filter((key) => {
    return typeof object[object[key]] !== "number";
  });
  const actualValues = actualKeys.map((key) => object[key]);
  const parsedTypes = Array.from(new Set(actualValues.map((values) => typeof values)));
  return {
    type: parsedTypes.length === 1 ? parsedTypes[0] === "string" ? "string" : "number" : ["string", "number"],
    enum: actualValues
  };
}

// node_modules/openai/_vendor/zod-to-json-schema/parsers/never.mjs
function parseNeverDef() {
  return {
    not: {}
  };
}

// node_modules/openai/_vendor/zod-to-json-schema/parsers/null.mjs
function parseNullDef(refs) {
  return refs.target === "openApi3" ? {
    enum: ["null"],
    nullable: true
  } : {
    type: "null"
  };
}

// node_modules/openai/_vendor/zod-to-json-schema/parsers/union.mjs
var primitiveMappings = {
  ZodString: "string",
  ZodNumber: "number",
  ZodBigInt: "integer",
  ZodBoolean: "boolean",
  ZodNull: "null"
};
function parseUnionDef(def, refs) {
  if (refs.target === "openApi3")
    return asAnyOf(def, refs);
  const options = def.options instanceof Map ? Array.from(def.options.values()) : def.options;
  if (options.every((x) => x._def.typeName in primitiveMappings && (!x._def.checks || !x._def.checks.length))) {
    const types = options.reduce((types2, x) => {
      const type = primitiveMappings[x._def.typeName];
      return type && !types2.includes(type) ? [...types2, type] : types2;
    }, []);
    return {
      type: types.length > 1 ? types : types[0]
    };
  } else if (options.every((x) => x._def.typeName === "ZodLiteral" && !x.description)) {
    const types = options.reduce((acc, x) => {
      const type = typeof x._def.value;
      switch (type) {
        case "string":
        case "number":
        case "boolean":
          return [...acc, type];
        case "bigint":
          return [...acc, "integer"];
        case "object":
          if (x._def.value === null)
            return [...acc, "null"];
        case "symbol":
        case "undefined":
        case "function":
        default:
          return acc;
      }
    }, []);
    if (types.length === options.length) {
      const uniqueTypes = types.filter((x, i, a) => a.indexOf(x) === i);
      return {
        type: uniqueTypes.length > 1 ? uniqueTypes : uniqueTypes[0],
        enum: options.reduce((acc, x) => {
          return acc.includes(x._def.value) ? acc : [...acc, x._def.value];
        }, [])
      };
    }
  } else if (options.every((x) => x._def.typeName === "ZodEnum")) {
    return {
      type: "string",
      enum: options.reduce((acc, x) => [...acc, ...x._def.values.filter((x2) => !acc.includes(x2))], [])
    };
  }
  return asAnyOf(def, refs);
}
var asAnyOf = (def, refs) => {
  const anyOf = (def.options instanceof Map ? Array.from(def.options.values()) : def.options).map((x, i) => parseDef(x._def, {
    ...refs,
    currentPath: [...refs.currentPath, "anyOf", `${i}`]
  })).filter((x) => !!x && (!refs.strictUnions || typeof x === "object" && Object.keys(x).length > 0));
  return anyOf.length ? { anyOf } : void 0;
};

// node_modules/openai/_vendor/zod-to-json-schema/parsers/nullable.mjs
function parseNullableDef(def, refs) {
  if (["ZodString", "ZodNumber", "ZodBigInt", "ZodBoolean", "ZodNull"].includes(def.innerType._def.typeName) && (!def.innerType._def.checks || !def.innerType._def.checks.length)) {
    if (refs.target === "openApi3" || refs.nullableStrategy === "property") {
      return {
        type: primitiveMappings[def.innerType._def.typeName],
        nullable: true
      };
    }
    return {
      type: [primitiveMappings[def.innerType._def.typeName], "null"]
    };
  }
  if (refs.target === "openApi3") {
    const base2 = parseDef(def.innerType._def, {
      ...refs,
      currentPath: [...refs.currentPath]
    });
    if (base2 && "$ref" in base2)
      return { allOf: [base2], nullable: true };
    return base2 && { ...base2, nullable: true };
  }
  const base = parseDef(def.innerType._def, {
    ...refs,
    currentPath: [...refs.currentPath, "anyOf", "0"]
  });
  return base && { anyOf: [base, { type: "null" }] };
}

// node_modules/openai/_vendor/zod-to-json-schema/parsers/number.mjs
function parseNumberDef(def, refs) {
  const res = {
    type: "number"
  };
  if (!def.checks)
    return res;
  for (const check of def.checks) {
    switch (check.kind) {
      case "int":
        res.type = "integer";
        addErrorMessage(res, "type", check.message, refs);
        break;
      case "min":
        if (refs.target === "jsonSchema7") {
          if (check.inclusive) {
            setResponseValueAndErrors(res, "minimum", check.value, check.message, refs);
          } else {
            setResponseValueAndErrors(res, "exclusiveMinimum", check.value, check.message, refs);
          }
        } else {
          if (!check.inclusive) {
            res.exclusiveMinimum = true;
          }
          setResponseValueAndErrors(res, "minimum", check.value, check.message, refs);
        }
        break;
      case "max":
        if (refs.target === "jsonSchema7") {
          if (check.inclusive) {
            setResponseValueAndErrors(res, "maximum", check.value, check.message, refs);
          } else {
            setResponseValueAndErrors(res, "exclusiveMaximum", check.value, check.message, refs);
          }
        } else {
          if (!check.inclusive) {
            res.exclusiveMaximum = true;
          }
          setResponseValueAndErrors(res, "maximum", check.value, check.message, refs);
        }
        break;
      case "multipleOf":
        setResponseValueAndErrors(res, "multipleOf", check.value, check.message, refs);
        break;
    }
  }
  return res;
}

// node_modules/openai/_vendor/zod-to-json-schema/parsers/object.mjs
function decideAdditionalProperties(def, refs) {
  if (refs.removeAdditionalStrategy === "strict") {
    return def.catchall._def.typeName === "ZodNever" ? def.unknownKeys !== "strict" : parseDef(def.catchall._def, {
      ...refs,
      currentPath: [...refs.currentPath, "additionalProperties"]
    }) ?? true;
  } else {
    return def.catchall._def.typeName === "ZodNever" ? def.unknownKeys === "passthrough" : parseDef(def.catchall._def, {
      ...refs,
      currentPath: [...refs.currentPath, "additionalProperties"]
    }) ?? true;
  }
}
function parseObjectDef(def, refs) {
  const result = {
    type: "object",
    ...Object.entries(def.shape()).reduce((acc, [propName, propDef]) => {
      if (propDef === void 0 || propDef._def === void 0)
        return acc;
      const propertyPath = [...refs.currentPath, "properties", propName];
      const parsedDef = parseDef(propDef._def, {
        ...refs,
        currentPath: propertyPath,
        propertyPath
      });
      if (parsedDef === void 0)
        return acc;
      if (refs.openaiStrictMode && propDef.isOptional() && !propDef.isNullable() && typeof propDef._def?.defaultValue === "undefined") {
        throw new Error(`Zod field at \`${propertyPath.join("/")}\` uses \`.optional()\` without \`.nullable()\` which is not supported by the API. See: https://platform.openai.com/docs/guides/structured-outputs?api-mode=responses#all-fields-must-be-required`);
      }
      return {
        properties: {
          ...acc.properties,
          [propName]: parsedDef
        },
        required: propDef.isOptional() && !refs.openaiStrictMode ? acc.required : [...acc.required, propName]
      };
    }, { properties: {}, required: [] }),
    additionalProperties: decideAdditionalProperties(def, refs)
  };
  if (!result.required.length)
    delete result.required;
  return result;
}

// node_modules/openai/_vendor/zod-to-json-schema/parsers/optional.mjs
var parseOptionalDef = (def, refs) => {
  if (refs.propertyPath && refs.currentPath.slice(0, refs.propertyPath.length).toString() === refs.propertyPath.toString()) {
    return parseDef(def.innerType._def, { ...refs, currentPath: refs.currentPath });
  }
  const innerSchema = parseDef(def.innerType._def, {
    ...refs,
    currentPath: [...refs.currentPath, "anyOf", "1"]
  });
  return innerSchema ? {
    anyOf: [
      {
        not: {}
      },
      innerSchema
    ]
  } : {};
};

// node_modules/openai/_vendor/zod-to-json-schema/parsers/pipeline.mjs
var parsePipelineDef = (def, refs) => {
  if (refs.pipeStrategy === "input") {
    return parseDef(def.in._def, refs);
  } else if (refs.pipeStrategy === "output") {
    return parseDef(def.out._def, refs);
  }
  const a = parseDef(def.in._def, {
    ...refs,
    currentPath: [...refs.currentPath, "allOf", "0"]
  });
  const b = parseDef(def.out._def, {
    ...refs,
    currentPath: [...refs.currentPath, "allOf", a ? "1" : "0"]
  });
  return {
    allOf: [a, b].filter((x) => x !== void 0)
  };
};

// node_modules/openai/_vendor/zod-to-json-schema/parsers/promise.mjs
function parsePromiseDef(def, refs) {
  return parseDef(def.type._def, refs);
}

// node_modules/openai/_vendor/zod-to-json-schema/parsers/set.mjs
function parseSetDef(def, refs) {
  const items = parseDef(def.valueType._def, {
    ...refs,
    currentPath: [...refs.currentPath, "items"]
  });
  const schema = {
    type: "array",
    uniqueItems: true,
    items
  };
  if (def.minSize) {
    setResponseValueAndErrors(schema, "minItems", def.minSize.value, def.minSize.message, refs);
  }
  if (def.maxSize) {
    setResponseValueAndErrors(schema, "maxItems", def.maxSize.value, def.maxSize.message, refs);
  }
  return schema;
}

// node_modules/openai/_vendor/zod-to-json-schema/parsers/tuple.mjs
function parseTupleDef(def, refs) {
  if (def.rest) {
    return {
      type: "array",
      minItems: def.items.length,
      items: def.items.map((x, i) => parseDef(x._def, {
        ...refs,
        currentPath: [...refs.currentPath, "items", `${i}`]
      })).reduce((acc, x) => x === void 0 ? acc : [...acc, x], []),
      additionalItems: parseDef(def.rest._def, {
        ...refs,
        currentPath: [...refs.currentPath, "additionalItems"]
      })
    };
  } else {
    return {
      type: "array",
      minItems: def.items.length,
      maxItems: def.items.length,
      items: def.items.map((x, i) => parseDef(x._def, {
        ...refs,
        currentPath: [...refs.currentPath, "items", `${i}`]
      })).reduce((acc, x) => x === void 0 ? acc : [...acc, x], [])
    };
  }
}

// node_modules/openai/_vendor/zod-to-json-schema/parsers/undefined.mjs
function parseUndefinedDef() {
  return {
    not: {}
  };
}

// node_modules/openai/_vendor/zod-to-json-schema/parsers/unknown.mjs
function parseUnknownDef() {
  return {};
}

// node_modules/openai/_vendor/zod-to-json-schema/parsers/readonly.mjs
var parseReadonlyDef = (def, refs) => {
  return parseDef(def.innerType._def, refs);
};

// node_modules/openai/_vendor/zod-to-json-schema/parseDef.mjs
function parseDef(def, refs, forceResolution = false) {
  const seenItem = refs.seen.get(def);
  if (refs.override) {
    const overrideResult = refs.override?.(def, refs, seenItem, forceResolution);
    if (overrideResult !== ignoreOverride) {
      return overrideResult;
    }
  }
  if (seenItem && !forceResolution) {
    const seenSchema = get$ref(seenItem, refs);
    if (seenSchema !== void 0) {
      if ("$ref" in seenSchema) {
        refs.seenRefs.add(seenSchema.$ref);
      }
      return seenSchema;
    }
  }
  const newItem = { def, path: refs.currentPath, jsonSchema: void 0 };
  refs.seen.set(def, newItem);
  const jsonSchema = selectParser(def, def.typeName, refs, forceResolution);
  if (jsonSchema) {
    addMeta(def, refs, jsonSchema);
  }
  newItem.jsonSchema = jsonSchema;
  return jsonSchema;
}
var get$ref = (item, refs) => {
  switch (refs.$refStrategy) {
    case "root":
      return { $ref: item.path.join("/") };
    // this case is needed as OpenAI strict mode doesn't support top-level `$ref`s, i.e.
    // the top-level schema *must* be `{"type": "object", "properties": {...}}` but if we ever
    // need to define a `$ref`, relative `$ref`s aren't supported, so we need to extract
    // the schema to `#/definitions/` and reference that.
    //
    // e.g. if we need to reference a schema at
    // `["#","definitions","contactPerson","properties","person1","properties","name"]`
    // then we'll extract it out to `contactPerson_properties_person1_properties_name`
    case "extract-to-root":
      const name = item.path.slice(refs.basePath.length + 1).join("_");
      if (name !== refs.name && refs.nameStrategy === "duplicate-ref") {
        refs.definitions[name] = item.def;
      }
      return { $ref: [...refs.basePath, refs.definitionPath, name].join("/") };
    case "relative":
      return { $ref: getRelativePath(refs.currentPath, item.path) };
    case "none":
    case "seen": {
      if (item.path.length < refs.currentPath.length && item.path.every((value, index) => refs.currentPath[index] === value)) {
        console.warn(`Recursive reference detected at ${refs.currentPath.join("/")}! Defaulting to any`);
        return {};
      }
      return refs.$refStrategy === "seen" ? {} : void 0;
    }
  }
};
var getRelativePath = (pathA, pathB) => {
  let i = 0;
  for (; i < pathA.length && i < pathB.length; i++) {
    if (pathA[i] !== pathB[i])
      break;
  }
  return [(pathA.length - i).toString(), ...pathB.slice(i)].join("/");
};
var selectParser = (def, typeName, refs, forceResolution) => {
  switch (typeName) {
    case ZodFirstPartyTypeKind.ZodString:
      return parseStringDef(def, refs);
    case ZodFirstPartyTypeKind.ZodNumber:
      return parseNumberDef(def, refs);
    case ZodFirstPartyTypeKind.ZodObject:
      return parseObjectDef(def, refs);
    case ZodFirstPartyTypeKind.ZodBigInt:
      return parseBigintDef(def, refs);
    case ZodFirstPartyTypeKind.ZodBoolean:
      return parseBooleanDef();
    case ZodFirstPartyTypeKind.ZodDate:
      return parseDateDef(def, refs);
    case ZodFirstPartyTypeKind.ZodUndefined:
      return parseUndefinedDef();
    case ZodFirstPartyTypeKind.ZodNull:
      return parseNullDef(refs);
    case ZodFirstPartyTypeKind.ZodArray:
      return parseArrayDef(def, refs);
    case ZodFirstPartyTypeKind.ZodUnion:
    case ZodFirstPartyTypeKind.ZodDiscriminatedUnion:
      return parseUnionDef(def, refs);
    case ZodFirstPartyTypeKind.ZodIntersection:
      return parseIntersectionDef(def, refs);
    case ZodFirstPartyTypeKind.ZodTuple:
      return parseTupleDef(def, refs);
    case ZodFirstPartyTypeKind.ZodRecord:
      return parseRecordDef(def, refs);
    case ZodFirstPartyTypeKind.ZodLiteral:
      return parseLiteralDef(def, refs);
    case ZodFirstPartyTypeKind.ZodEnum:
      return parseEnumDef(def);
    case ZodFirstPartyTypeKind.ZodNativeEnum:
      return parseNativeEnumDef(def);
    case ZodFirstPartyTypeKind.ZodNullable:
      return parseNullableDef(def, refs);
    case ZodFirstPartyTypeKind.ZodOptional:
      return parseOptionalDef(def, refs);
    case ZodFirstPartyTypeKind.ZodMap:
      return parseMapDef(def, refs);
    case ZodFirstPartyTypeKind.ZodSet:
      return parseSetDef(def, refs);
    case ZodFirstPartyTypeKind.ZodLazy:
      return parseDef(def.getter()._def, refs);
    case ZodFirstPartyTypeKind.ZodPromise:
      return parsePromiseDef(def, refs);
    case ZodFirstPartyTypeKind.ZodNaN:
    case ZodFirstPartyTypeKind.ZodNever:
      return parseNeverDef();
    case ZodFirstPartyTypeKind.ZodEffects:
      return parseEffectsDef(def, refs, forceResolution);
    case ZodFirstPartyTypeKind.ZodAny:
      return parseAnyDef();
    case ZodFirstPartyTypeKind.ZodUnknown:
      return parseUnknownDef();
    case ZodFirstPartyTypeKind.ZodDefault:
      return parseDefaultDef(def, refs);
    case ZodFirstPartyTypeKind.ZodBranded:
      return parseBrandedDef(def, refs);
    case ZodFirstPartyTypeKind.ZodReadonly:
      return parseReadonlyDef(def, refs);
    case ZodFirstPartyTypeKind.ZodCatch:
      return parseCatchDef(def, refs);
    case ZodFirstPartyTypeKind.ZodPipeline:
      return parsePipelineDef(def, refs);
    case ZodFirstPartyTypeKind.ZodFunction:
    case ZodFirstPartyTypeKind.ZodVoid:
    case ZodFirstPartyTypeKind.ZodSymbol:
      return void 0;
    default:
      return /* @__PURE__ */ ((_) => void 0)(typeName);
  }
};
var addMeta = (def, refs, jsonSchema) => {
  if (def.description) {
    jsonSchema.description = def.description;
    if (refs.markdownDescription) {
      jsonSchema.markdownDescription = def.description;
    }
  }
  return jsonSchema;
};

// node_modules/openai/_vendor/zod-to-json-schema/zodToJsonSchema.mjs
var zodToJsonSchema = (schema, options) => {
  const refs = getRefs(options);
  const name = typeof options === "string" ? options : options?.nameStrategy === "title" ? void 0 : options?.name;
  const main = parseDef(schema._def, name === void 0 ? refs : {
    ...refs,
    currentPath: [...refs.basePath, refs.definitionPath, name]
  }, false) ?? {};
  const title = typeof options === "object" && options.name !== void 0 && options.nameStrategy === "title" ? options.name : void 0;
  if (title !== void 0) {
    main.title = title;
  }
  const definitions = (() => {
    if (isEmptyObj(refs.definitions)) {
      return void 0;
    }
    const definitions2 = {};
    const processedDefinitions = /* @__PURE__ */ new Set();
    for (let i = 0; i < 500; i++) {
      const newDefinitions = Object.entries(refs.definitions).filter(([key]) => !processedDefinitions.has(key));
      if (newDefinitions.length === 0)
        break;
      for (const [key, schema2] of newDefinitions) {
        definitions2[key] = parseDef(zodDef(schema2), { ...refs, currentPath: [...refs.basePath, refs.definitionPath, key] }, true) ?? {};
        processedDefinitions.add(key);
      }
    }
    return definitions2;
  })();
  const combined = name === void 0 ? definitions ? {
    ...main,
    [refs.definitionPath]: definitions
  } : main : refs.nameStrategy === "duplicate-ref" ? {
    ...main,
    ...definitions || refs.seenRefs.size ? {
      [refs.definitionPath]: {
        ...definitions,
        // only actually duplicate the schema definition if it was ever referenced
        // otherwise the duplication is completely pointless
        ...refs.seenRefs.size ? { [name]: main } : void 0
      }
    } : void 0
  } : {
    $ref: [...refs.$refStrategy === "relative" ? [] : refs.basePath, refs.definitionPath, name].join("/"),
    [refs.definitionPath]: {
      ...definitions,
      [name]: main
    }
  };
  if (refs.target === "jsonSchema7") {
    combined.$schema = "http://json-schema.org/draft-07/schema#";
  } else if (refs.target === "jsonSchema2019-09") {
    combined.$schema = "https://json-schema.org/draft/2019-09/schema#";
  }
  return combined;
};

// node_modules/openai/lib/ResponsesParser.mjs
function makeParseableResponseTool(tool2, { parser, callback }) {
  const obj = { ...tool2 };
  Object.defineProperties(obj, {
    $brand: {
      value: "auto-parseable-tool",
      enumerable: false
    },
    $parseRaw: {
      value: parser,
      enumerable: false
    },
    $callback: {
      value: callback,
      enumerable: false
    }
  });
  return obj;
}

// node_modules/openai/helpers/zod.mjs
function zodToJsonSchema2(schema, options) {
  return zodToJsonSchema(schema, {
    openaiStrictMode: true,
    name: options.name,
    nameStrategy: "duplicate-ref",
    $refStrategy: "extract-to-root",
    nullableStrategy: "property"
  });
}
function zodTextFormat(zodObject, name, props) {
  return makeParseableTextFormat({
    type: "json_schema",
    ...props,
    name,
    strict: true,
    schema: zodToJsonSchema2(zodObject, { name })
  }, (content) => zodObject.parse(JSON.parse(content)));
}
function zodResponsesFunction(options) {
  return makeParseableResponseTool({
    type: "function",
    name: options.name,
    parameters: zodToJsonSchema2(options.parameters, { name: options.name }),
    strict: true,
    ...options.description ? { description: options.description } : void 0
  }, {
    callback: options.function,
    parser: (args) => options.parameters.parse(JSON.parse(args))
  });
}

// node_modules/@openai/agents-core/dist/errors.mjs
var AgentsError = class extends Error {
  state;
  constructor(message, state) {
    super(message);
    this.state = state;
  }
};
var SystemError = class extends AgentsError {
};
var MaxTurnsExceededError = class extends AgentsError {
};
var ModelBehaviorError = class extends AgentsError {
};
var UserError = class extends AgentsError {
};
var GuardrailExecutionError = class extends AgentsError {
  error;
  constructor(message, error, state) {
    super(message, state);
    this.error = error;
  }
};
var ToolCallError = class extends AgentsError {
  error;
  constructor(message, error, state) {
    super(message, state);
    this.error = error;
  }
};
var InputGuardrailTripwireTriggered = class extends AgentsError {
  result;
  constructor(message, result, state) {
    super(message, state);
    this.result = result;
  }
};
var OutputGuardrailTripwireTriggered = class extends AgentsError {
  result;
  constructor(message, result, state) {
    super(message, state);
    this.result = result;
  }
};

// node_modules/@openai/agents-core/dist/utils/typeGuards.mjs
function isZodObject(input) {
  return typeof input === "object" && input !== null && "_def" in input && typeof input._def === "object" && input._def !== null && "typeName" in input._def && input._def.typeName === "ZodObject";
}
function isAgentToolInput(input) {
  return typeof input === "object" && input !== null && "input" in input && typeof input.input === "string";
}

// node_modules/@openai/agents-core/dist/utils/tools.mjs
function toFunctionToolName(name) {
  name = name.replace(/\s/g, "_");
  name = name.replace(/[^a-zA-Z0-9]/g, "_");
  if (name.length === 0) {
    throw new Error("Tool name cannot be empty");
  }
  return name;
}
function getSchemaAndParserFromInputType(inputType, name) {
  const parser = (input) => JSON.parse(input);
  if (isZodObject(inputType)) {
    const formattedFunction = zodResponsesFunction({
      name,
      parameters: inputType,
      function: () => {
      },
      // empty function here to satisfy the OpenAI helper
      description: ""
    });
    return {
      schema: formattedFunction.parameters,
      parser: formattedFunction.$parseRaw
    };
  } else if (typeof inputType === "object" && inputType !== null) {
    return {
      schema: inputType,
      parser
    };
  }
  throw new UserError("Input type is not a ZodObject or a valid JSON schema");
}
function convertAgentOutputTypeToSerializable(outputType) {
  if (outputType === "text") {
    return "text";
  }
  if (isZodObject(outputType)) {
    const output = zodTextFormat(outputType, "output");
    return {
      type: output.type,
      name: output.name,
      strict: output.strict || false,
      schema: output.schema
    };
  }
  return outputType;
}

// node_modules/@openai/agents-core/dist/logger.mjs
var import_debug = __toESM(require_browser(), 1);

// node_modules/@openai/agents-core/dist/config.mjs
function loadEnv2() {
  return loadEnv();
}
function isEnabled(flagName) {
  const env = loadEnv2();
  return typeof env !== "undefined" && (env[flagName] === "true" || env[flagName] === "1");
}
var tracing = {
  get disabled() {
    if (isBrowserEnvironment()) {
      return true;
    } else if (loadEnv2().NODE_ENV === "test") {
      return true;
    }
    return isEnabled("OPENAI_AGENTS_DISABLE_TRACING");
  }
};
var logging = {
  get dontLogModelData() {
    return isEnabled("OPENAI_AGENTS_DONT_LOG_MODEL_DATA");
  },
  get dontLogToolData() {
    return isEnabled("OPENAI_AGENTS_DONT_LOG_TOOL_DATA");
  }
};

// node_modules/@openai/agents-core/dist/logger.mjs
var dontLogModelData = logging.dontLogModelData;
var dontLogToolData = logging.dontLogToolData;
function getLogger(namespace = "openai-agents") {
  return {
    namespace,
    debug: (0, import_debug.default)(namespace),
    error: console.error,
    warn: console.warn,
    dontLogModelData,
    dontLogToolData
  };
}
var logger = getLogger("openai-agents:core");
var logger_default = logger;

// node_modules/@openai/agents-core/dist/utils/smartString.mjs
function toSmartString(value) {
  if (value === null || value === void 0) {
    return String(value);
  } else if (typeof value === "string") {
    return value;
  } else if (typeof value === "object") {
    try {
      return JSON.stringify(value);
    } catch (_e) {
      return "[object with circular references]";
    }
  }
  return String(value);
}

// node_modules/@openai/agents-core/dist/tool.mjs
function defaultToolErrorFunction(context, error) {
  const details = error instanceof Error ? error.toString() : String(error);
  return `An error occurred while running the tool. Please try again. Error: ${details}`;
}
function tool(options) {
  const name = options.name ? toFunctionToolName(options.name) : toFunctionToolName(options.execute.name);
  const toolErrorFunction = typeof options.errorFunction === "undefined" ? defaultToolErrorFunction : options.errorFunction;
  if (!name) {
    throw new Error("Tool name cannot be empty. Either name your function or provide a name in the options.");
  }
  const strictMode = options.strict ?? true;
  if (!strictMode && isZodObject(options.parameters)) {
    throw new UserError("Strict mode is required for Zod parameters");
  }
  const { parser, schema: parameters } = getSchemaAndParserFromInputType(options.parameters, name);
  async function _invoke(runContext, input, details) {
    const [error, parsed] = await safeExecute(() => parser(input));
    if (error !== null) {
      if (logger_default.dontLogToolData) {
        logger_default.debug(`Invalid JSON input for tool ${name}`);
      } else {
        logger_default.debug(`Invalid JSON input for tool ${name}: ${input}`);
      }
      throw new ModelBehaviorError("Invalid JSON input for tool");
    }
    if (logger_default.dontLogToolData) {
      logger_default.debug(`Invoking tool ${name}`);
    } else {
      logger_default.debug(`Invoking tool ${name} with input ${input}`);
    }
    const result = await options.execute(parsed, runContext, details);
    const stringResult = toSmartString(result);
    if (logger_default.dontLogToolData) {
      logger_default.debug(`Tool ${name} completed`);
    } else {
      logger_default.debug(`Tool ${name} returned: ${stringResult}`);
    }
    return result;
  }
  async function invoke(runContext, input, details) {
    return _invoke(runContext, input, details).catch((error) => {
      if (toolErrorFunction) {
        const currentSpan = getCurrentSpan();
        currentSpan?.setError({
          message: "Error running tool (non-fatal)",
          data: {
            tool_name: name,
            error: error.toString()
          }
        });
        return toolErrorFunction(runContext, error);
      }
      throw error;
    });
  }
  const needsApproval = typeof options.needsApproval === "function" ? options.needsApproval : async () => typeof options.needsApproval === "boolean" ? options.needsApproval : false;
  const isEnabled2 = typeof options.isEnabled === "function" ? async (runContext, agent) => {
    const predicate = options.isEnabled;
    const result = await predicate({ runContext, agent });
    return Boolean(result);
  } : async () => typeof options.isEnabled === "boolean" ? options.isEnabled : true;
  return {
    type: "function",
    name,
    description: options.description,
    parameters,
    strict: strictMode,
    invoke,
    needsApproval,
    isEnabled: isEnabled2
  };
}

// node_modules/@openai/agents-core/dist/mcp.mjs
var import_debug2 = __toESM(require_browser(), 1);
var MCPTool = external_exports.object({
  name: external_exports.string(),
  description: external_exports.string().optional(),
  inputSchema: external_exports.object({
    type: external_exports.literal("object"),
    properties: external_exports.record(external_exports.string(), external_exports.any()),
    required: external_exports.array(external_exports.string()),
    additionalProperties: external_exports.boolean()
  })
});
var _cachedTools = {};
async function getFunctionToolsFromServer({ server, convertSchemasToStrict, runContext, agent }) {
  if (server.cacheToolsList && _cachedTools[server.name]) {
    return _cachedTools[server.name].map((t) => mcpToFunctionTool(t, server, convertSchemasToStrict));
  }
  return withMCPListToolsSpan(async (span) => {
    const fetchedMcpTools = await server.listTools();
    let mcpTools = fetchedMcpTools;
    if (runContext && agent) {
      const context = { runContext, agent, serverName: server.name };
      const filteredTools = [];
      for (const tool2 of fetchedMcpTools) {
        const filter = server.toolFilter;
        if (filter) {
          if (typeof filter === "function") {
            const filtered = await filter(context, tool2);
            if (!filtered) {
              logger.debug(`MCP Tool (server: ${server.name}, tool: ${tool2.name}) is blocked by the callable filter.`);
              continue;
            }
          } else {
            const allowedToolNames = filter.allowedToolNames ?? [];
            const blockedToolNames = filter.blockedToolNames ?? [];
            if (allowedToolNames.length > 0 || blockedToolNames.length > 0) {
              const allowed = allowedToolNames.length > 0 ? allowedToolNames.includes(tool2.name) : true;
              const blocked = blockedToolNames.length > 0 ? blockedToolNames.includes(tool2.name) : false;
              if (!allowed || blocked) {
                if (blocked) {
                  logger.debug(`MCP Tool (server: ${server.name}, tool: ${tool2.name}) is blocked by the static filter.`);
                } else if (!allowed) {
                  logger.debug(`MCP Tool (server: ${server.name}, tool: ${tool2.name}) is not allowed by the static filter.`);
                }
                continue;
              }
            }
          }
        }
        filteredTools.push(tool2);
      }
      mcpTools = filteredTools;
    }
    span.spanData.result = mcpTools.map((t) => t.name);
    const tools = mcpTools.map((t) => mcpToFunctionTool(t, server, convertSchemasToStrict));
    if (server.cacheToolsList) {
      _cachedTools[server.name] = mcpTools;
    }
    return tools;
  }, { data: { server: server.name } });
}
async function getAllMcpTools(mcpServersOrOpts, runContext, agent, convertSchemasToStrict = false) {
  const opts = Array.isArray(mcpServersOrOpts) ? {
    mcpServers: mcpServersOrOpts,
    runContext,
    agent,
    convertSchemasToStrict
  } : mcpServersOrOpts;
  const { mcpServers, convertSchemasToStrict: convertSchemasToStrictFromOpts = false, runContext: runContextFromOpts, agent: agentFromOpts } = opts;
  const allTools = [];
  const toolNames = /* @__PURE__ */ new Set();
  for (const server of mcpServers) {
    const serverTools = await getFunctionToolsFromServer({
      server,
      convertSchemasToStrict: convertSchemasToStrictFromOpts,
      runContext: runContextFromOpts,
      agent: agentFromOpts
    });
    const serverToolNames = new Set(serverTools.map((t) => t.name));
    const intersection = [...serverToolNames].filter((n) => toolNames.has(n));
    if (intersection.length > 0) {
      throw new UserError(`Duplicate tool names found across MCP servers: ${intersection.join(", ")}`);
    }
    for (const t of serverTools) {
      toolNames.add(t.name);
      allTools.push(t);
    }
  }
  return allTools;
}
function mcpToFunctionTool(mcpTool, server, convertSchemasToStrict) {
  async function invoke(input, _context) {
    let args = {};
    if (typeof input === "string" && input) {
      args = JSON.parse(input);
    } else if (typeof input === "object" && input != null) {
      args = input;
    }
    const currentSpan = getCurrentSpan();
    if (currentSpan) {
      currentSpan.spanData["mcp_data"] = { server: server.name };
    }
    const content = await server.callTool(mcpTool.name, args);
    return content.length === 1 ? content[0] : content;
  }
  const schema = {
    ...mcpTool.inputSchema,
    type: mcpTool.inputSchema?.type ?? "object",
    properties: mcpTool.inputSchema?.properties ?? {},
    required: mcpTool.inputSchema?.required ?? [],
    additionalProperties: mcpTool.inputSchema?.additionalProperties ?? false
  };
  if (convertSchemasToStrict || schema.additionalProperties === true) {
    try {
      const strictSchema = ensureStrictJsonSchema(schema);
      return tool({
        name: mcpTool.name,
        description: mcpTool.description || "",
        parameters: strictSchema,
        strict: true,
        execute: invoke
      });
    } catch (e) {
      logger.warn(`Error converting MCP schema to strict mode: ${e}`);
    }
  }
  const nonStrictSchema = {
    ...schema,
    additionalProperties: true
  };
  return tool({
    name: mcpTool.name,
    description: mcpTool.description || "",
    parameters: nonStrictSchema,
    strict: false,
    execute: invoke
  });
}
function ensureStrictJsonSchema(schema) {
  const out = {
    ...schema,
    additionalProperties: false
  };
  if (!out.required)
    out.required = [];
  return out;
}

// node_modules/@openai/agents-core/dist/shims/shims-browser.mjs
function loadEnv() {
  return {};
}
var BrowserEventEmitter = class {
  #target = new EventTarget();
  #listenerWrappers = /* @__PURE__ */ new Map();
  on(type, listener) {
    const eventType = type;
    let listenersForType = this.#listenerWrappers.get(eventType);
    if (!listenersForType) {
      listenersForType = /* @__PURE__ */ new Map();
      this.#listenerWrappers.set(eventType, listenersForType);
    }
    let wrappers = listenersForType.get(listener);
    if (!wrappers) {
      wrappers = /* @__PURE__ */ new Set();
      listenersForType.set(listener, wrappers);
    }
    const wrapper = ((event) => listener(...event.detail ?? []));
    wrappers.add(wrapper);
    this.#target.addEventListener(eventType, wrapper);
    return this;
  }
  off(type, listener) {
    const eventType = type;
    const listenersForType = this.#listenerWrappers.get(eventType);
    const wrappers = listenersForType?.get(listener);
    if (wrappers?.size) {
      for (const wrapper of wrappers) {
        this.#target.removeEventListener(eventType, wrapper);
      }
      listenersForType?.delete(listener);
      if (listenersForType?.size === 0) {
        this.#listenerWrappers.delete(eventType);
      }
    }
    return this;
  }
  emit(type, ...args) {
    const event = new CustomEvent(type, { detail: args });
    return this.#target.dispatchEvent(event);
  }
  once(type, listener) {
    const handler = (...args) => {
      this.off(type, handler);
      listener(...args);
    };
    this.on(type, handler);
    return this;
  }
};
var randomUUID = () => {
  if (typeof crypto !== "undefined" && crypto.randomUUID) {
    return crypto.randomUUID();
  }
  return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(c) {
    const r = Math.random() * 16 | 0;
    const v = c === "x" ? r : r & 3 | 8;
    return v.toString(16);
  });
};
var Readable = class Readable2 {
  constructor() {
  }
  pipeTo(_destination, _options) {
  }
  pipeThrough(_transform, _options) {
  }
};
var ReadableStream = globalThis.ReadableStream;
var ReadableStreamController = globalThis.ReadableStreamDefaultController;
var TransformStream = globalThis.TransformStream;
var AsyncLocalStorage = class {
  context = null;
  constructor() {
  }
  run(context, fn) {
    this.context = context;
    return fn();
  }
  getStore() {
    return this.context;
  }
  enterWith(context) {
    this.context = context;
  }
};
function isBrowserEnvironment() {
  return true;
}
function isTracingLoopRunningByDefault() {
  return false;
}
var BrowserTimer = class {
  constructor() {
  }
  setTimeout(callback, ms) {
    const timeout = setTimeout(callback, ms);
    timeout.ref = typeof timeout.ref === "function" ? timeout.ref : () => timeout;
    timeout.unref = typeof timeout.unref === "function" ? timeout.unref : () => timeout;
    timeout.hasRef = typeof timeout.hasRef === "function" ? timeout.hasRef : () => true;
    timeout.refresh = typeof timeout.refresh === "function" ? timeout.refresh : () => timeout;
    return timeout;
  }
  clearTimeout(timeoutId) {
    window.clearTimeout(timeoutId);
  }
};
var timer = new BrowserTimer();

// node_modules/@openai/agents-core/dist/lifecycle.mjs
var EventEmitterDelegate = class {
  on(type, listener) {
    this.eventEmitter.on(type, listener);
    return this.eventEmitter;
  }
  off(type, listener) {
    this.eventEmitter.off(type, listener);
    return this.eventEmitter;
  }
  emit(type, ...args) {
    return this.eventEmitter.emit(type, ...args);
  }
  once(type, listener) {
    this.eventEmitter.once(type, listener);
    return this.eventEmitter;
  }
};
var AgentHooks = class extends EventEmitterDelegate {
  eventEmitter = new BrowserEventEmitter();
};
var RunHooks = class extends EventEmitterDelegate {
  eventEmitter = new BrowserEventEmitter();
};

// node_modules/@openai/agents-core/dist/defaultModel.mjs
var OPENAI_DEFAULT_MODEL_ENV_VARIABLE_NAME = "OPENAI_DEFAULT_MODEL";
function gpt5ReasoningSettingsRequired(modelName) {
  if (modelName.startsWith("gpt-5-chat")) {
    return false;
  }
  return modelName.startsWith("gpt-5");
}
function isGpt5Default() {
  return gpt5ReasoningSettingsRequired(getDefaultModel());
}
function getDefaultModel() {
  const env = loadEnv2();
  return env[OPENAI_DEFAULT_MODEL_ENV_VARIABLE_NAME]?.toLowerCase() ?? "gpt-4.1";
}
function getDefaultModelSettings(model) {
  const _model = model ?? getDefaultModel();
  if (gpt5ReasoningSettingsRequired(_model)) {
    return {
      // We chose "low" instead of "minimal" because some of the built-in tools
      // (e.g., file search, image generation, etc.) do not support "minimal"
      // If you want to use "minimal" reasoning effort, you can pass your own model settings
      reasoning: { effort: "low" },
      text: { verbosity: "low" }
    };
  }
  return {};
}

// node_modules/@openai/agents-core/dist/handoff.mjs
function getTransferMessage(agent) {
  return JSON.stringify({ assistant: agent.name });
}
function defaultHandoffToolName(agent) {
  return `transfer_to_${toFunctionToolName(agent.name)}`;
}
function defaultHandoffToolDescription(agent) {
  return `Handoff to the ${agent.name} agent to handle the request. ${agent.handoffDescription ?? ""}`;
}
var Handoff = class {
  /**
   * The name of the tool that represents the handoff.
   */
  toolName;
  /**
   * The description of the tool that represents the handoff.
   */
  toolDescription;
  /**
   * The JSON schema for the handoff input. Can be empty if the handoff does not take an input
   */
  inputJsonSchema = {
    type: "object",
    properties: {},
    required: [],
    additionalProperties: false
  };
  /**
   * Whether the input JSON schema is in strict mode. We **strongly** recommend setting this to
   * true, as it increases the likelihood of correct JSON input.
   */
  strictJsonSchema = true;
  /**
   * The function that invokes the handoff. The parameters passed are:
   * 1. The handoff run context
   * 2. The arguments from the LLM, as a JSON string. Empty string if inputJsonSchema is empty.
   *
   * Must return an agent
   */
  onInvokeHandoff;
  /**
   * The name of the agent that is being handed off to.
   */
  agentName;
  /**
   * A function that filters the inputs that are passed to the next agent. By default, the new agent
   * sees the entire conversation history. In some cases, you may want to filter inputs e.g. to
   * remove older inputs, or remove tools from existing inputs.
   *
   * The function will receive the entire conversation hisstory so far, including the input item
   * that triggered the handoff and a tool call output item representing the handoff tool's output.
   *
   * You are free to modify the input history or new items as you see fit. The next agent that runs
   * will receive `handoffInputData.allItems
   */
  inputFilter;
  /**
   * The agent that is being handed off to.
   */
  agent;
  /**
   * Returns a function tool definition that can be used to invoke the handoff.
   */
  getHandoffAsFunctionTool() {
    return {
      type: "function",
      name: this.toolName,
      description: this.toolDescription,
      parameters: this.inputJsonSchema,
      strict: this.strictJsonSchema
    };
  }
  isEnabled = async () => true;
  constructor(agent, onInvokeHandoff) {
    this.agentName = agent.name;
    this.onInvokeHandoff = onInvokeHandoff;
    this.toolName = defaultHandoffToolName(agent);
    this.toolDescription = defaultHandoffToolDescription(agent);
    this.agent = agent;
  }
};
function handoff(agent, config = {}) {
  let parser = void 0;
  const hasOnHandoff = !!config.onHandoff;
  const hasInputType = !!config.inputType;
  const hasBothOrNeitherHandoffAndInputType = hasOnHandoff === hasInputType;
  if (!hasBothOrNeitherHandoffAndInputType) {
    throw new UserError("You must provide either both `onHandoff` and `inputType` or neither.");
  }
  async function onInvokeHandoff(context, inputJsonString) {
    if (parser) {
      if (!inputJsonString) {
        addErrorToCurrentSpan({
          message: `Handoff function expected non empty input but got: ${inputJsonString}`,
          data: {
            details: `input is empty`
          }
        });
        throw new ModelBehaviorError("Handoff function expected non empty input");
      }
      try {
        const parsed = await parser(inputJsonString);
        if (config.onHandoff) {
          await config.onHandoff(context, parsed);
        }
      } catch (error) {
        addErrorToCurrentSpan({
          message: `Invalid JSON provided`,
          data: {}
        });
        if (!logger_default.dontLogToolData) {
          logger_default.error(`Invalid JSON when parsing: ${inputJsonString}. Error: ${error}`);
        }
        throw new ModelBehaviorError("Invalid JSON provided");
      }
    } else {
      await config.onHandoff?.(context);
    }
    return agent;
  }
  const handoff2 = new Handoff(agent, onInvokeHandoff);
  if (typeof config.isEnabled === "function") {
    const predicate = config.isEnabled;
    handoff2.isEnabled = async ({ runContext, agent: agent2 }) => {
      const result = await predicate({ runContext, agent: agent2 });
      return Boolean(result);
    };
  } else if (typeof config.isEnabled === "boolean") {
    handoff2.isEnabled = async () => config.isEnabled;
  }
  if (config.inputType) {
    const result = getSchemaAndParserFromInputType(config.inputType, handoff2.toolName);
    handoff2.inputJsonSchema = result.schema;
    handoff2.strictJsonSchema = true;
    parser = result.parser;
  }
  if (config.toolNameOverride) {
    handoff2.toolName = config.toolNameOverride;
  }
  if (config.toolDescriptionOverride) {
    handoff2.toolDescription = config.toolDescriptionOverride;
  }
  if (config.inputFilter) {
    handoff2.inputFilter = config.inputFilter;
  }
  return handoff2;
}
function getHandoff(agent) {
  if (agent instanceof Handoff) {
    return agent;
  }
  return handoff(agent);
}

// node_modules/@openai/agents-core/dist/utils/messages.mjs
function getLastTextFromOutputMessage(outputMessage) {
  if (outputMessage.type !== "message") {
    return void 0;
  }
  if (outputMessage.role !== "assistant") {
    return void 0;
  }
  const lastItem = outputMessage.content[outputMessage.content.length - 1];
  if (lastItem.type !== "output_text") {
    return void 0;
  }
  return lastItem.text;
}
function getOutputText(output) {
  if (output.output.length === 0) {
    return "";
  }
  return getLastTextFromOutputMessage(output.output[output.output.length - 1]) || "";
}

// node_modules/@openai/agents-core/dist/agent.mjs
var agentToolRunResults = /* @__PURE__ */ new WeakMap();
function saveAgentToolRunResult(toolCall, runResult) {
  if (toolCall) {
    agentToolRunResults.set(toolCall, runResult);
  }
}
function consumeAgentToolRunResult(toolCall) {
  const runResult = agentToolRunResults.get(toolCall);
  if (runResult) {
    agentToolRunResults.delete(toolCall);
  }
  return runResult;
}
var AgentAsToolNeedApprovalSchame = external_exports.object({ input: external_exports.string() });
var Agent = class _Agent extends AgentHooks {
  /**
   * Create an Agent with handoffs and automatically infer the union type for TOutput from the handoff agents' output types.
   */
  static create(config) {
    return new _Agent({
      ...config,
      handoffs: config.handoffs,
      outputType: config.outputType,
      handoffOutputTypeWarningEnabled: false
    });
  }
  static DEFAULT_MODEL_PLACEHOLDER = "";
  name;
  instructions;
  prompt;
  handoffDescription;
  handoffs;
  model;
  modelSettings;
  tools;
  mcpServers;
  inputGuardrails;
  outputGuardrails;
  outputType = "text";
  toolUseBehavior;
  resetToolChoice;
  constructor(config) {
    super();
    if (typeof config.name !== "string" || config.name.trim() === "") {
      throw new UserError("Agent must have a name.");
    }
    this.name = config.name;
    this.instructions = config.instructions ?? _Agent.DEFAULT_MODEL_PLACEHOLDER;
    this.prompt = config.prompt;
    this.handoffDescription = config.handoffDescription ?? "";
    this.handoffs = config.handoffs ?? [];
    this.model = config.model ?? "";
    this.modelSettings = config.modelSettings ?? getDefaultModelSettings();
    this.tools = config.tools ?? [];
    this.mcpServers = config.mcpServers ?? [];
    this.inputGuardrails = config.inputGuardrails ?? [];
    this.outputGuardrails = config.outputGuardrails ?? [];
    if (config.outputType) {
      this.outputType = config.outputType;
    }
    this.toolUseBehavior = config.toolUseBehavior ?? "run_llm_again";
    this.resetToolChoice = config.resetToolChoice ?? true;
    if (
      // The user sets a non-default model
      config.model !== void 0 && // The default model is gpt-5
      isGpt5Default() && // However, the specified model is not a gpt-5 model
      (typeof config.model !== "string" || !gpt5ReasoningSettingsRequired(config.model)) && // The model settings are not customized for the specified model
      config.modelSettings === void 0
    ) {
      this.modelSettings = {};
    }
    if (config.handoffOutputTypeWarningEnabled === void 0 || config.handoffOutputTypeWarningEnabled) {
      if (this.handoffs && this.outputType) {
        const outputTypes = /* @__PURE__ */ new Set([JSON.stringify(this.outputType)]);
        for (const h of this.handoffs) {
          if ("outputType" in h && h.outputType) {
            outputTypes.add(JSON.stringify(h.outputType));
          } else if ("agent" in h && h.agent.outputType) {
            outputTypes.add(JSON.stringify(h.agent.outputType));
          }
        }
        if (outputTypes.size > 1) {
          logger_default.warn(`[Agent] Warning: Handoff agents have different output types: ${Array.from(outputTypes).join(", ")}. You can make it type-safe by using Agent.create({ ... }) method instead.`);
        }
      }
    }
  }
  /**
   * Output schema name.
   */
  get outputSchemaName() {
    if (this.outputType === "text") {
      return "text";
    } else if (isZodObject(this.outputType)) {
      return "ZodOutput";
    } else if (typeof this.outputType === "object") {
      return this.outputType.name;
    }
    throw new Error(`Unknown output type: ${this.outputType}`);
  }
  /**
   * Makes a copy of the agent, with the given arguments changed. For example, you could do:
   *
   * ```
   * const newAgent = agent.clone({ instructions: 'New instructions' })
   * ```
   *
   * @param config - A partial configuration to change.
   * @returns A new agent with the given changes.
   */
  clone(config) {
    return new _Agent({
      ...this,
      ...config
    });
  }
  /**
   * Transform this agent into a tool, callable by other agents.
   *
   * This is different from handoffs in two ways:
   * 1. In handoffs, the new agent receives the conversation history. In this tool, the new agent
   *    receives generated input.
   * 2. In handoffs, the new agent takes over the conversation. In this tool, the new agent is
   *    called as a tool, and the conversation is continued by the original agent.
   *
   * @param options - Options for the tool.
   * @returns A tool that runs the agent and returns the output text.
   */
  asTool(options) {
    const { toolName, toolDescription, customOutputExtractor, needsApproval, runConfig, runOptions, isEnabled: isEnabled2 } = options;
    return tool({
      name: toolName ?? toFunctionToolName(this.name),
      description: toolDescription ?? "",
      parameters: AgentAsToolNeedApprovalSchame,
      strict: true,
      needsApproval,
      isEnabled: isEnabled2,
      execute: async (data, context, details) => {
        if (!isAgentToolInput(data)) {
          throw new ModelBehaviorError("Agent tool called with invalid input");
        }
        const runner = new Runner(runConfig ?? {});
        const result = await runner.run(this, data.input, {
          context,
          ...runOptions ?? {}
        });
        const usesStopAtToolNames = typeof this.toolUseBehavior === "object" && this.toolUseBehavior !== null && "stopAtToolNames" in this.toolUseBehavior;
        if (typeof customOutputExtractor !== "function" && usesStopAtToolNames) {
          logger_default.debug(`You're passing the agent (name: ${this.name}) with toolUseBehavior.stopAtToolNames configured as a tool to a different agent; this may not work as you expect. You may want to have a wrapper function tool to consistently return the final output.`);
        }
        const outputText = typeof customOutputExtractor === "function" ? await customOutputExtractor(result) : getOutputText(result.rawResponses[result.rawResponses.length - 1]);
        if (details?.toolCall) {
          saveAgentToolRunResult(details.toolCall, result);
        }
        return outputText;
      }
    });
  }
  /**
   * Returns the system prompt for the agent.
   *
   * If the agent has a function as its instructions, this function will be called with the
   * runContext and the agent instance.
   */
  async getSystemPrompt(runContext) {
    if (typeof this.instructions === "function") {
      return await this.instructions(runContext, this);
    }
    return this.instructions;
  }
  /**
   * Returns the prompt template for the agent, if defined.
   *
   * If the agent has a function as its prompt, this function will be called with the
   * runContext and the agent instance.
   */
  async getPrompt(runContext) {
    if (typeof this.prompt === "function") {
      return await this.prompt(runContext, this);
    }
    return this.prompt;
  }
  /**
   * Fetches the available tools from the MCP servers.
   * @returns the MCP powered tools
   */
  async getMcpTools(runContext) {
    if (this.mcpServers.length > 0) {
      return getAllMcpTools({
        mcpServers: this.mcpServers,
        runContext,
        agent: this,
        convertSchemasToStrict: false
      });
    }
    return [];
  }
  /**
   * ALl agent tools, including the MCPl and function tools.
   *
   * @returns all configured tools
   */
  async getAllTools(runContext) {
    const mcpTools = await this.getMcpTools(runContext);
    const enabledTools = [];
    for (const candidate of this.tools) {
      if (candidate.type === "function") {
        const maybeIsEnabled = candidate.isEnabled;
        const enabled = typeof maybeIsEnabled === "function" ? await maybeIsEnabled(runContext, this) : typeof maybeIsEnabled === "boolean" ? maybeIsEnabled : true;
        if (!enabled) {
          continue;
        }
      }
      enabledTools.push(candidate);
    }
    return [...mcpTools, ...enabledTools];
  }
  /**
   * Returns the handoffs that should be exposed to the model for the current run.
   *
   * Handoffs that provide an `isEnabled` function returning `false` are omitted.
   */
  async getEnabledHandoffs(runContext) {
    const handoffs = this.handoffs?.map((h) => getHandoff(h)) ?? [];
    const enabled = [];
    for (const handoff2 of handoffs) {
      if (await handoff2.isEnabled({ runContext, agent: this })) {
        enabled.push(handoff2);
      }
    }
    return enabled;
  }
  /**
   * Processes the final output of the agent.
   *
   * @param output - The output of the agent.
   * @returns The parsed out.
   */
  processFinalOutput(output) {
    if (this.outputType === "text") {
      return output;
    }
    if (typeof this.outputType === "object") {
      const parsed = JSON.parse(output);
      if (isZodObject(this.outputType)) {
        return this.outputType.parse(parsed);
      }
      return parsed;
    }
    throw new Error(`Unknown output type: ${this.outputType}`);
  }
  /**
   * Returns a JSON representation of the agent, which is serializable.
   *
   * @returns A JSON object containing the agent's name.
   */
  toJSON() {
    return {
      name: this.name
    };
  }
};

// node_modules/@openai/agents-core/dist/guardrail.mjs
function defineInputGuardrail({ name, execute }) {
  return {
    type: "input",
    name,
    guardrailFunction: execute,
    async run(args) {
      return {
        guardrail: { type: "input", name },
        output: await execute(args)
      };
    }
  };
}
function defineOutputGuardrail({ name, execute }) {
  return {
    type: "output",
    name,
    guardrailFunction: execute,
    async run(args) {
      return {
        guardrail: { type: "output", name },
        agent: args.agent,
        agentOutput: args.agentOutput,
        output: await execute(args)
      };
    }
  };
}

// node_modules/@openai/agents-core/dist/providers.mjs
var DEFAULT_PROVIDER;
function getDefaultModelProvider() {
  if (typeof DEFAULT_PROVIDER === "undefined") {
    throw new Error("No default model provider set. Make sure to set a provider using setDefaultModelProvider before calling getDefaultModelProvider or pass an explicit provider.");
  }
  return DEFAULT_PROVIDER;
}

// node_modules/@openai/agents-core/dist/types/protocol.mjs
var SharedBase = external_exports.object({
  /**
   * Additional optional provider specific data. Used for custom functionality or model provider
   * specific fields.
   */
  providerData: external_exports.record(external_exports.string(), external_exports.any()).optional()
});
var ItemBase = SharedBase.extend({
  /**
   * An ID to identify the item. This is optional by default. If a model provider absolutely
   * requires this field, it will be validated on the model level.
   */
  id: external_exports.string().optional()
});
var Refusal = SharedBase.extend({
  type: external_exports.literal("refusal"),
  /**
   * The refusal explanation from the model.
   */
  refusal: external_exports.string()
});
var OutputText = SharedBase.extend({
  type: external_exports.literal("output_text"),
  /**
   * The text output from the model.
   */
  text: external_exports.string()
});
var InputText = SharedBase.extend({
  type: external_exports.literal("input_text"),
  /**
   * A text input for example a message from a user
   */
  text: external_exports.string()
});
var ReasoningText = SharedBase.extend({
  type: external_exports.literal("reasoning_text"),
  /**
   * A text input for example a message from a user
   */
  text: external_exports.string()
});
var InputImage = SharedBase.extend({
  type: external_exports.literal("input_image"),
  /**
   * The image input to the model. Could be a URL, base64 or an object with a file ID.
   */
  image: external_exports.string().or(external_exports.object({
    id: external_exports.string()
  })).describe("Could be a URL, base64 or an object with a file ID.")
});
var InputFile = SharedBase.extend({
  type: external_exports.literal("input_file"),
  /**
   * The file input to the model. Could be a URL, base64 or an object with a file ID.
   */
  file: external_exports.string().describe("Either base64 encoded file data or a publicly accessible file URL").or(external_exports.object({
    id: external_exports.string().describe("OpenAI file ID")
  })).or(external_exports.object({
    url: external_exports.string().describe("Publicly accessible PDF file URL")
  })).describe("Contents of the file or an object with a file ID.")
});
var AudioContent = SharedBase.extend({
  type: external_exports.literal("audio"),
  /**
   * The audio input to the model. Could be base64 encoded audio data or an object with a file ID.
   */
  audio: external_exports.string().or(external_exports.object({
    id: external_exports.string()
  })).describe("Base64 encoded audio data or file id"),
  /**
   * The format of the audio.
   */
  format: external_exports.string().nullable().optional(),
  /**
   * The transcript of the audio.
   */
  transcript: external_exports.string().nullable().optional()
});
var ImageContent = SharedBase.extend({
  type: external_exports.literal("image"),
  /**
   * The image input to the model. Could be base64 encoded image data or an object with a file ID.
   */
  image: external_exports.string().describe("Base64 encoded image data")
});
var ToolOutputText = SharedBase.extend({
  type: external_exports.literal("text"),
  /**
   * The text output from the model.
   */
  text: external_exports.string()
});
var ToolOutputImage = SharedBase.extend({
  type: external_exports.literal("image"),
  /**
   * The image data. Could be base64 encoded image data or an object with a file ID.
   */
  data: external_exports.string().describe("Base64 encoded image data"),
  /**
   * The media type of the image.
   */
  mediaType: external_exports.string().describe("IANA media type of the image")
});
var ComputerToolOutput = SharedBase.extend({
  type: external_exports.literal("computer_screenshot"),
  /**
   * A base64 encoded image data or a URL representing the screenshot.
   */
  data: external_exports.string().describe("Base64 encoded image data or URL")
});
var computerActions = external_exports.discriminatedUnion("type", [
  external_exports.object({ type: external_exports.literal("screenshot") }),
  external_exports.object({
    type: external_exports.literal("click"),
    x: external_exports.number(),
    y: external_exports.number(),
    button: external_exports.enum(["left", "right", "wheel", "back", "forward"])
  }),
  external_exports.object({
    type: external_exports.literal("double_click"),
    x: external_exports.number(),
    y: external_exports.number()
  }),
  external_exports.object({
    type: external_exports.literal("scroll"),
    x: external_exports.number(),
    y: external_exports.number(),
    scroll_x: external_exports.number(),
    scroll_y: external_exports.number()
  }),
  external_exports.object({
    type: external_exports.literal("type"),
    text: external_exports.string()
  }),
  external_exports.object({ type: external_exports.literal("wait") }),
  external_exports.object({
    type: external_exports.literal("move"),
    x: external_exports.number(),
    y: external_exports.number()
  }),
  external_exports.object({
    type: external_exports.literal("keypress"),
    keys: external_exports.array(external_exports.string())
  }),
  external_exports.object({
    type: external_exports.literal("drag"),
    path: external_exports.array(external_exports.object({ x: external_exports.number(), y: external_exports.number() }))
  })
]);
var AssistantContent = external_exports.discriminatedUnion("type", [
  OutputText,
  Refusal,
  AudioContent,
  ImageContent
]);
var MessageBase = ItemBase.extend({
  /**
   * Any item without a type is treated as a message
   */
  type: external_exports.literal("message").optional()
});
var AssistantMessageItem = MessageBase.extend({
  /**
   * Representing a message from the assistant (i.e. the model)
   */
  role: external_exports.literal("assistant"),
  /**
   * The status of the message.
   */
  status: external_exports.enum(["in_progress", "completed", "incomplete"]),
  /**
   * The content of the message.
   */
  content: external_exports.array(AssistantContent)
});
var UserContent = external_exports.discriminatedUnion("type", [
  InputText,
  InputImage,
  InputFile,
  AudioContent
]);
var UserMessageItem = MessageBase.extend({
  // type: z.literal('message'),
  /**
   * Representing a message from the user
   */
  role: external_exports.literal("user"),
  /**
   * The content of the message.
   */
  content: external_exports.array(UserContent).or(external_exports.string())
});
var SystemMessageItem = MessageBase.extend({
  // type: z.literal('message'),
  /**
   * Representing a system message to the user
   */
  role: external_exports.literal("system"),
  /**
   * The content of the message.
   */
  content: external_exports.string()
});
var MessageItem = external_exports.discriminatedUnion("role", [
  SystemMessageItem,
  AssistantMessageItem,
  UserMessageItem
]);
var HostedToolCallItem = ItemBase.extend({
  type: external_exports.literal("hosted_tool_call"),
  /**
   * The name of the hosted tool. For example `web_search_call` or `file_search_call`
   */
  name: external_exports.string().describe("The name of the hosted tool"),
  /**
   * The arguments of the hosted tool call.
   */
  arguments: external_exports.string().describe("The arguments of the hosted tool call").optional(),
  /**
   * The status of the tool call.
   */
  status: external_exports.string().optional(),
  /**
   * The primary output of the tool call. Additional output might be in the `providerData` field.
   */
  output: external_exports.string().optional()
});
var FunctionCallItem = ItemBase.extend({
  type: external_exports.literal("function_call"),
  /**
   * The ID of the tool call. Required to match up the respective tool call result.
   */
  callId: external_exports.string().describe("The ID of the tool call"),
  /**
   * The name of the function.
   */
  name: external_exports.string().describe("The name of the function"),
  /**
   * The status of the function call.
   */
  status: external_exports.enum(["in_progress", "completed", "incomplete"]).optional(),
  /**
   * The arguments of the function call.
   */
  arguments: external_exports.string()
});
var FunctionCallResultItem = ItemBase.extend({
  type: external_exports.literal("function_call_result"),
  /**
   * The name of the tool that was called
   */
  name: external_exports.string().describe("The name of the tool"),
  /**
   * The ID of the tool call. Required to match up the respective tool call result.
   */
  callId: external_exports.string().describe("The ID of the tool call"),
  /**
   * The status of the tool call.
   */
  status: external_exports.enum(["in_progress", "completed", "incomplete"]),
  /**
   * The output of the tool call.
   */
  output: external_exports.discriminatedUnion("type", [ToolOutputText, ToolOutputImage])
});
var ComputerUseCallItem = ItemBase.extend({
  type: external_exports.literal("computer_call"),
  /**
   * The ID of the computer call. Required to match up the respective computer call result.
   */
  callId: external_exports.string().describe("The ID of the computer call"),
  /**
   * The status of the computer call.
   */
  status: external_exports.enum(["in_progress", "completed", "incomplete"]),
  /**
   * The action to be performed by the computer.
   */
  action: computerActions
});
var ComputerCallResultItem = ItemBase.extend({
  type: external_exports.literal("computer_call_result"),
  /**
   * The ID of the computer call. Required to match up the respective computer call result.
   */
  callId: external_exports.string().describe("The ID of the computer call"),
  /**
   * The output of the computer call.
   */
  output: ComputerToolOutput
});
var ToolCallItem = external_exports.discriminatedUnion("type", [
  ComputerUseCallItem,
  FunctionCallItem,
  HostedToolCallItem
]);
var ReasoningItem = SharedBase.extend({
  id: external_exports.string().optional(),
  type: external_exports.literal("reasoning"),
  /**
   * The user facing representation of the reasoning. Additional information might be in the `providerData` field.
   */
  content: external_exports.array(InputText),
  /**
   * The raw reasoning text from the model.
   */
  rawContent: external_exports.array(ReasoningText).optional()
});
var UnknownItem = ItemBase.extend({
  type: external_exports.literal("unknown")
});
var OutputModelItem = external_exports.discriminatedUnion("type", [
  AssistantMessageItem,
  HostedToolCallItem,
  FunctionCallItem,
  ComputerUseCallItem,
  ReasoningItem,
  UnknownItem
]);
var ModelItem = external_exports.union([
  UserMessageItem,
  AssistantMessageItem,
  SystemMessageItem,
  HostedToolCallItem,
  FunctionCallItem,
  ComputerUseCallItem,
  FunctionCallResultItem,
  ComputerCallResultItem,
  ReasoningItem,
  UnknownItem
]);
var UsageData = external_exports.object({
  requests: external_exports.number().optional(),
  inputTokens: external_exports.number(),
  outputTokens: external_exports.number(),
  totalTokens: external_exports.number(),
  inputTokensDetails: external_exports.record(external_exports.string(), external_exports.number()).optional(),
  outputTokensDetails: external_exports.record(external_exports.string(), external_exports.number()).optional()
});
var StreamEventTextStream = SharedBase.extend({
  type: external_exports.literal("output_text_delta"),
  /**
   * The delta text that was streamed by the modelto the user.
   */
  delta: external_exports.string()
});
var StreamEventResponseStarted = SharedBase.extend({
  type: external_exports.literal("response_started")
});
var StreamEventResponseCompleted = SharedBase.extend({
  type: external_exports.literal("response_done"),
  /**
   * The response from the model.
   */
  response: SharedBase.extend({
    /**
     * The ID of the response.
     */
    id: external_exports.string(),
    /**
     * The usage data for the response.
     */
    usage: UsageData,
    /**
     * The output from the model.
     */
    output: external_exports.array(OutputModelItem)
  })
});
var StreamEventGenericItem = SharedBase.extend({
  type: external_exports.literal("model"),
  event: external_exports.any().describe("The event from the model")
});
var StreamEvent = external_exports.discriminatedUnion("type", [
  StreamEventTextStream,
  StreamEventResponseCompleted,
  StreamEventResponseStarted,
  StreamEventGenericItem
]);

// node_modules/@openai/agents-core/dist/usage.mjs
var Usage = class {
  /**
   * The number of requests made to the LLM API.
   */
  requests;
  /**
   * The number of input tokens used across all requests.
   */
  inputTokens;
  /**
   * The number of output tokens used across all requests.
   */
  outputTokens;
  /**
   * The total number of tokens sent and received, across all requests.
   */
  totalTokens;
  /**
   * Details about the input tokens used across all requests.
   */
  inputTokensDetails = [];
  /**
   * Details about the output tokens used across all requests.
   */
  outputTokensDetails = [];
  constructor(input) {
    if (typeof input === "undefined") {
      this.requests = 0;
      this.inputTokens = 0;
      this.outputTokens = 0;
      this.totalTokens = 0;
      this.inputTokensDetails = [];
      this.outputTokensDetails = [];
    } else {
      this.requests = input?.requests ?? 1;
      this.inputTokens = input?.inputTokens ?? input?.input_tokens ?? 0;
      this.outputTokens = input?.outputTokens ?? input?.output_tokens ?? 0;
      this.totalTokens = input?.totalTokens ?? input?.total_tokens ?? 0;
      const inputTokensDetails = input?.inputTokensDetails ?? input?.input_tokens_details;
      this.inputTokensDetails = inputTokensDetails ? [inputTokensDetails] : [];
      const outputTokensDetails = input?.outputTokensDetails ?? input?.output_tokens_details;
      this.outputTokensDetails = outputTokensDetails ? [outputTokensDetails] : [];
    }
  }
  add(newUsage) {
    this.requests += newUsage.requests;
    this.inputTokens += newUsage.inputTokens;
    this.outputTokens += newUsage.outputTokens;
    this.totalTokens += newUsage.totalTokens;
    if (newUsage.inputTokensDetails) {
      this.inputTokensDetails.push(...newUsage.inputTokensDetails);
    }
    if (newUsage.outputTokensDetails) {
      this.outputTokensDetails.push(...newUsage.outputTokensDetails);
    }
  }
};

// node_modules/@openai/agents-core/dist/runContext.mjs
var RunContext = class {
  /**
   * The context object you passed to the `Runner.run()` method.
   */
  context;
  /**
   * The usage of the agent run so far. For streamed responses, the usage will be stale until the
   * last chunk of the stream is processed.
   */
  usage;
  /**
   * A map of tool names to whether they have been approved.
   */
  #approvals;
  constructor(context = {}) {
    this.context = context;
    this.usage = new Usage();
    this.#approvals = /* @__PURE__ */ new Map();
  }
  /**
   * Rebuild the approvals map from a serialized state.
   * @internal
   *
   * @param approvals - The approvals map to rebuild.
   */
  _rebuildApprovals(approvals) {
    this.#approvals = new Map(Object.entries(approvals));
  }
  /**
   * Check if a tool call has been approved.
   *
   * @param approval - Details about the tool call being evaluated.
   * @returns `true` if the tool call has been approved, `false` if blocked and `undefined` if not yet approved or rejected.
   */
  isToolApproved(approval) {
    const { toolName, callId } = approval;
    const approvalEntry = this.#approvals.get(toolName);
    if (approvalEntry?.approved === true && approvalEntry.rejected === true) {
      logger_default.warn("Tool is permanently approved and rejected at the same time. Approval takes precedence");
      return true;
    }
    if (approvalEntry?.approved === true) {
      return true;
    }
    if (approvalEntry?.rejected === true) {
      return false;
    }
    const individualCallApproval = Array.isArray(approvalEntry?.approved) ? approvalEntry.approved.includes(callId) : false;
    const individualCallRejection = Array.isArray(approvalEntry?.rejected) ? approvalEntry.rejected.includes(callId) : false;
    if (individualCallApproval && individualCallRejection) {
      logger_default.warn(`Tool call ${callId} is both approved and rejected at the same time. Approval takes precedence`);
      return true;
    }
    if (individualCallApproval) {
      return true;
    }
    if (individualCallRejection) {
      return false;
    }
    return void 0;
  }
  /**
   * Approve a tool call.
   *
   * @param approvalItem - The tool approval item to approve.
   * @param options - Additional approval behavior options.
   */
  approveTool(approvalItem, { alwaysApprove = false } = {}) {
    const toolName = approvalItem.rawItem.name;
    if (alwaysApprove) {
      this.#approvals.set(toolName, {
        approved: true,
        rejected: []
      });
      return;
    }
    const approvalEntry = this.#approvals.get(toolName) ?? {
      approved: [],
      rejected: []
    };
    if (Array.isArray(approvalEntry.approved)) {
      const callId = "callId" in approvalItem.rawItem ? approvalItem.rawItem.callId : approvalItem.rawItem.id;
      approvalEntry.approved.push(callId);
    }
    this.#approvals.set(toolName, approvalEntry);
  }
  /**
   * Reject a tool call.
   *
   * @param approvalItem - The tool approval item to reject.
   */
  rejectTool(approvalItem, { alwaysReject = false } = {}) {
    const toolName = approvalItem.rawItem.name;
    if (alwaysReject) {
      this.#approvals.set(toolName, {
        approved: false,
        rejected: true
      });
      return;
    }
    const approvalEntry = this.#approvals.get(toolName) ?? {
      approved: [],
      rejected: []
    };
    if (Array.isArray(approvalEntry.rejected)) {
      const callId = "callId" in approvalItem.rawItem ? approvalItem.rawItem.callId : approvalItem.rawItem.id;
      approvalEntry.rejected.push(callId);
    }
    this.#approvals.set(toolName, approvalEntry);
  }
  toJSON() {
    return {
      context: this.context,
      usage: this.usage,
      approvals: Object.fromEntries(this.#approvals.entries())
    };
  }
};

// node_modules/@openai/agents-core/dist/utils/serialize.mjs
function serializeTool(tool2) {
  if (tool2.type === "function") {
    return {
      type: "function",
      name: tool2.name,
      description: tool2.description,
      parameters: tool2.parameters,
      strict: tool2.strict
    };
  }
  if (tool2.type === "computer") {
    return {
      type: "computer",
      name: tool2.name,
      environment: tool2.computer.environment,
      dimensions: tool2.computer.dimensions
    };
  }
  return {
    type: "hosted_tool",
    name: tool2.name,
    providerData: tool2.providerData
  };
}
function serializeHandoff(h) {
  return {
    toolName: h.toolName,
    toolDescription: h.toolDescription,
    inputJsonSchema: h.inputJsonSchema,
    strictJsonSchema: h.strictJsonSchema
  };
}

// node_modules/@openai/agents-core/dist/items.mjs
var RunItemBase = class {
  type = "base_item";
  rawItem;
  toJSON() {
    return {
      type: this.type,
      rawItem: this.rawItem
    };
  }
};
var RunMessageOutputItem = class extends RunItemBase {
  rawItem;
  agent;
  type = "message_output_item";
  constructor(rawItem, agent) {
    super();
    this.rawItem = rawItem;
    this.agent = agent;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      agent: this.agent.toJSON()
    };
  }
  get content() {
    let content = "";
    for (const part of this.rawItem.content) {
      if (part.type === "output_text") {
        content += part.text;
      }
    }
    return content;
  }
};
var RunToolCallItem = class extends RunItemBase {
  rawItem;
  agent;
  type = "tool_call_item";
  constructor(rawItem, agent) {
    super();
    this.rawItem = rawItem;
    this.agent = agent;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      agent: this.agent.toJSON()
    };
  }
};
var RunToolCallOutputItem = class extends RunItemBase {
  rawItem;
  agent;
  output;
  type = "tool_call_output_item";
  constructor(rawItem, agent, output) {
    super();
    this.rawItem = rawItem;
    this.agent = agent;
    this.output = output;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      agent: this.agent.toJSON(),
      output: toSmartString(this.output)
    };
  }
};
var RunReasoningItem = class extends RunItemBase {
  rawItem;
  agent;
  type = "reasoning_item";
  constructor(rawItem, agent) {
    super();
    this.rawItem = rawItem;
    this.agent = agent;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      agent: this.agent.toJSON()
    };
  }
};
var RunHandoffCallItem = class extends RunItemBase {
  rawItem;
  agent;
  type = "handoff_call_item";
  constructor(rawItem, agent) {
    super();
    this.rawItem = rawItem;
    this.agent = agent;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      agent: this.agent.toJSON()
    };
  }
};
var RunHandoffOutputItem = class extends RunItemBase {
  rawItem;
  sourceAgent;
  targetAgent;
  type = "handoff_output_item";
  constructor(rawItem, sourceAgent, targetAgent) {
    super();
    this.rawItem = rawItem;
    this.sourceAgent = sourceAgent;
    this.targetAgent = targetAgent;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      sourceAgent: this.sourceAgent.toJSON(),
      targetAgent: this.targetAgent.toJSON()
    };
  }
};
var RunToolApprovalItem = class extends RunItemBase {
  rawItem;
  agent;
  type = "tool_approval_item";
  constructor(rawItem, agent) {
    super();
    this.rawItem = rawItem;
    this.agent = agent;
  }
  toJSON() {
    return {
      ...super.toJSON(),
      agent: this.agent.toJSON()
    };
  }
};

// node_modules/@openai/agents-core/dist/tracing/createSpans.mjs
function _withSpanFactory(createSpan) {
  return async (fn, ...args) => {
    return withNewSpanContext(async () => {
      const span = createSpan(...args);
      setCurrentSpan(span);
      try {
        span.start();
        return await fn(span);
      } catch (error) {
        span.setError({
          message: error.message,
          data: error.data
        });
        throw error;
      } finally {
        span.end();
        resetCurrentSpan();
      }
    });
  };
}
function createResponseSpan(options, parent) {
  options = {};
  return getGlobalTraceProvider().createSpan({
    ...options,
    data: {
      type: "response",
      ...options.data
    }
  }, parent);
}
var withResponseSpan = _withSpanFactory(createResponseSpan);
function createAgentSpan(options, parent) {
  return getGlobalTraceProvider().createSpan({
    ...options,
    data: {
      type: "agent",
      name: options?.data?.name ?? "Agent",
      ...options?.data
    }
  }, parent);
}
var withAgentSpan = _withSpanFactory(createAgentSpan);
function createFunctionSpan(options, parent) {
  return getGlobalTraceProvider().createSpan({
    ...options,
    data: {
      type: "function",
      input: options?.data?.input ?? "",
      output: options?.data?.output ?? "",
      ...options?.data
    }
  }, parent);
}
var withFunctionSpan = _withSpanFactory(createFunctionSpan);
function createHandoffSpan(options, parent) {
  return getGlobalTraceProvider().createSpan({
    ...options,
    data: { type: "handoff", ...options?.data }
  }, parent);
}
var withHandoffSpan = _withSpanFactory(createHandoffSpan);
function createGenerationSpan(options, parent) {
  return getGlobalTraceProvider().createSpan({
    ...options,
    data: {
      type: "generation",
      ...options?.data
    }
  }, parent);
}
var withGenerationSpan = _withSpanFactory(createGenerationSpan);
function createCustomSpan(options, parent) {
  return getGlobalTraceProvider().createSpan({
    ...options,
    data: {
      type: "custom",
      data: {},
      ...options?.data
    }
  }, parent);
}
var withCustomSpan = _withSpanFactory(createCustomSpan);
function createGuardrailSpan(options, parent) {
  return getGlobalTraceProvider().createSpan({
    ...options,
    data: {
      type: "guardrail",
      triggered: false,
      ...options?.data
    }
  }, parent);
}
var withGuardrailSpan = _withSpanFactory(createGuardrailSpan);
function createTranscriptionSpan(options, parent) {
  return getGlobalTraceProvider().createSpan({
    ...options,
    data: {
      type: "transcription",
      ...options.data
    }
  }, parent);
}
var withTranscriptionSpan = _withSpanFactory(createTranscriptionSpan);
function createSpeechSpan(options, parent) {
  return getGlobalTraceProvider().createSpan({
    ...options,
    data: {
      type: "speech",
      ...options.data
    }
  }, parent);
}
var withSpeechSpan = _withSpanFactory(createSpeechSpan);
function createSpeechGroupSpan(options, parent) {
  return getGlobalTraceProvider().createSpan({
    ...options,
    data: {
      type: "speech_group",
      ...options?.data
    }
  }, parent);
}
var withSpeechGroupSpan = _withSpanFactory(createSpeechGroupSpan);
function createMCPListToolsSpan(options, parent) {
  return getGlobalTraceProvider().createSpan({
    ...options,
    data: {
      type: "mcp_tools",
      ...options?.data
    }
  }, parent);
}
var withMCPListToolsSpan = _withSpanFactory(createMCPListToolsSpan);

// node_modules/@openai/agents-core/dist/events.mjs
var RunRawModelStreamEvent = class {
  data;
  /**
   * The type of the event.
   */
  type = "raw_model_stream_event";
  /**
   * @param data The raw responses stream events from the LLM.
   */
  constructor(data) {
    this.data = data;
  }
};
var RunItemStreamEvent = class {
  name;
  item;
  type = "run_item_stream_event";
  /**
   * @param name The name of the event.
   * @param item The item that was created.
   */
  constructor(name, item) {
    this.name = name;
    this.item = item;
  }
};
var RunAgentUpdatedStreamEvent = class {
  agent;
  type = "agent_updated_stream_event";
  /**
   * @param agent The new agent
   */
  constructor(agent) {
    this.agent = agent;
  }
};

// node_modules/@openai/agents-core/dist/runImplementation.mjs
function processModelResponse(modelResponse, agent, tools, handoffs) {
  const items = [];
  const runHandoffs = [];
  const runFunctions = [];
  const runComputerActions = [];
  const runMCPApprovalRequests = [];
  const toolsUsed = [];
  const handoffMap = new Map(handoffs.map((h) => [h.toolName, h]));
  const functionMap = new Map(tools.filter((t) => t.type === "function").map((t) => [t.name, t]));
  const computerTool2 = tools.find((t) => t.type === "computer");
  const mcpToolMap = new Map(tools.filter((t) => t.type === "hosted_tool" && t.providerData?.type === "mcp").map((t) => t).map((t) => [t.providerData.server_label, t]));
  for (const output of modelResponse.output) {
    if (output.type === "message") {
      if (output.role === "assistant") {
        items.push(new RunMessageOutputItem(output, agent));
      }
    } else if (output.type === "hosted_tool_call") {
      items.push(new RunToolCallItem(output, agent));
      const toolName = output.name;
      toolsUsed.push(toolName);
      if (output.providerData?.type === "mcp_approval_request" || output.name === "mcp_approval_request") {
        const providerData = output.providerData;
        const mcpServerLabel = providerData.server_label;
        const mcpServerTool = mcpToolMap.get(mcpServerLabel);
        if (typeof mcpServerTool === "undefined") {
          const message = `MCP server (${mcpServerLabel}) not found in Agent (${agent.name})`;
          addErrorToCurrentSpan({
            message,
            data: { mcp_server_label: mcpServerLabel }
          });
          throw new ModelBehaviorError(message);
        }
        const approvalItem = new RunToolApprovalItem({
          type: "hosted_tool_call",
          // We must use this name to align with the name sent from the servers
          name: providerData.name,
          id: providerData.id,
          status: "in_progress",
          providerData
        }, agent);
        runMCPApprovalRequests.push({
          requestItem: approvalItem,
          mcpTool: mcpServerTool
        });
        if (!mcpServerTool.providerData.on_approval) {
          items.push(approvalItem);
        }
      }
    } else if (output.type === "reasoning") {
      items.push(new RunReasoningItem(output, agent));
    } else if (output.type === "computer_call") {
      items.push(new RunToolCallItem(output, agent));
      toolsUsed.push("computer_use");
      if (!computerTool2) {
        addErrorToCurrentSpan({
          message: "Model produced computer action without a computer tool.",
          data: {
            agent_name: agent.name
          }
        });
        throw new ModelBehaviorError("Model produced computer action without a computer tool.");
      }
      runComputerActions.push({
        toolCall: output,
        computer: computerTool2
      });
    }
    if (output.type !== "function_call") {
      continue;
    }
    toolsUsed.push(output.name);
    const handoff2 = handoffMap.get(output.name);
    if (handoff2) {
      items.push(new RunHandoffCallItem(output, agent));
      runHandoffs.push({
        toolCall: output,
        handoff: handoff2
      });
    } else {
      const functionTool = functionMap.get(output.name);
      if (!functionTool) {
        addErrorToCurrentSpan({
          message: `Tool ${output.name} not found in agent ${agent.name}.`,
          data: {
            tool_name: output.name,
            agent_name: agent.name
          }
        });
        throw new ModelBehaviorError(`Tool ${output.name} not found in agent ${agent.name}.`);
      }
      items.push(new RunToolCallItem(output, agent));
      runFunctions.push({
        toolCall: output,
        tool: functionTool
      });
    }
  }
  return {
    newItems: items,
    handoffs: runHandoffs,
    functions: runFunctions,
    computerActions: runComputerActions,
    mcpApprovalRequests: runMCPApprovalRequests,
    toolsUsed,
    hasToolsOrApprovalsToRun() {
      return runHandoffs.length > 0 || runFunctions.length > 0 || runMCPApprovalRequests.length > 0 || runComputerActions.length > 0;
    }
  };
}
var nextStepSchema = external_exports.discriminatedUnion("type", [
  external_exports.object({
    type: external_exports.literal("next_step_handoff"),
    newAgent: external_exports.any()
  }),
  external_exports.object({
    type: external_exports.literal("next_step_final_output"),
    output: external_exports.string()
  }),
  external_exports.object({
    type: external_exports.literal("next_step_run_again")
  }),
  external_exports.object({
    type: external_exports.literal("next_step_interruption"),
    data: external_exports.record(external_exports.string(), external_exports.any())
  })
]);
var SingleStepResult = class {
  originalInput;
  modelResponse;
  preStepItems;
  newStepItems;
  nextStep;
  constructor(originalInput, modelResponse, preStepItems, newStepItems, nextStep) {
    this.originalInput = originalInput;
    this.modelResponse = modelResponse;
    this.preStepItems = preStepItems;
    this.newStepItems = newStepItems;
    this.nextStep = nextStep;
  }
  /**
   * The items generated during the agent run (i.e. everything generated after originalInput)
   */
  get generatedItems() {
    return this.preStepItems.concat(this.newStepItems);
  }
};
function maybeResetToolChoice(agent, toolUseTracker, modelSettings) {
  if (agent.resetToolChoice && toolUseTracker.hasUsedTools(agent)) {
    return { ...modelSettings, toolChoice: void 0 };
  }
  return modelSettings;
}
async function executeInterruptedToolsAndSideEffects(agent, originalInput, originalPreStepItems, newResponse, processedResponse, runner, state) {
  const functionCallIds = originalPreStepItems.filter((item) => item instanceof RunToolApprovalItem && "callId" in item.rawItem && item.rawItem.type === "function_call").map((item) => item.rawItem.callId);
  const functionToolRuns = processedResponse.functions.filter((run2) => {
    return functionCallIds.includes(run2.toolCall.callId);
  });
  const functionResults = await executeFunctionToolCalls(agent, functionToolRuns, runner, state);
  const newItems = functionResults.map((r) => r.runItem);
  const mcpApprovalRuns = processedResponse.mcpApprovalRequests.filter((run2) => {
    return run2.requestItem.type === "tool_approval_item" && run2.requestItem.rawItem.type === "hosted_tool_call" && run2.requestItem.rawItem.providerData?.type === "mcp_approval_request";
  });
  for (const run2 of mcpApprovalRuns) {
    const approvalRequestId = run2.requestItem.rawItem.id;
    const approved = state._context.isToolApproved({
      // Since this item name must be the same with the one sent from Responses API server
      toolName: run2.requestItem.rawItem.name,
      callId: approvalRequestId
    });
    if (typeof approved !== "undefined") {
      const providerData = {
        approve: approved,
        approval_request_id: approvalRequestId,
        reason: void 0
      };
      newItems.push(new RunToolCallItem({
        type: "hosted_tool_call",
        name: "mcp_approval_response",
        providerData
      }, agent));
    }
  }
  const checkToolOutput = await checkForFinalOutputFromTools(agent, functionResults, state);
  const preStepItems = originalPreStepItems.filter((item) => {
    return !(item instanceof RunToolApprovalItem);
  });
  if (checkToolOutput.isFinalOutput) {
    runner.emit("agent_end", state._context, agent, checkToolOutput.finalOutput);
    agent.emit("agent_end", state._context, checkToolOutput.finalOutput);
    return new SingleStepResult(originalInput, newResponse, preStepItems, newItems, {
      type: "next_step_final_output",
      output: checkToolOutput.finalOutput
    });
  } else if (checkToolOutput.isInterrupted) {
    return new SingleStepResult(originalInput, newResponse, preStepItems, newItems, {
      type: "next_step_interruption",
      data: {
        interruptions: checkToolOutput.interruptions
      }
    });
  }
  return new SingleStepResult(originalInput, newResponse, preStepItems, newItems, { type: "next_step_run_again" });
}
async function executeToolsAndSideEffects(agent, originalInput, originalPreStepItems, newResponse, processedResponse, runner, state) {
  const preStepItems = originalPreStepItems;
  let newItems = processedResponse.newItems;
  const [functionResults, computerResults] = await Promise.all([
    executeFunctionToolCalls(agent, processedResponse.functions, runner, state),
    executeComputerActions(agent, processedResponse.computerActions, runner, state._context)
  ]);
  newItems = newItems.concat(functionResults.map((r) => r.runItem));
  newItems = newItems.concat(computerResults);
  if (processedResponse.mcpApprovalRequests.length > 0) {
    for (const approvalRequest of processedResponse.mcpApprovalRequests) {
      const toolData = approvalRequest.mcpTool.providerData;
      const requestData = approvalRequest.requestItem.rawItem.providerData;
      if (toolData.on_approval) {
        const approvalResult = await toolData.on_approval(state._context, approvalRequest.requestItem);
        const approvalResponseData = {
          approve: approvalResult.approve,
          approval_request_id: requestData.id,
          reason: approvalResult.reason
        };
        newItems.push(new RunToolCallItem({
          type: "hosted_tool_call",
          name: "mcp_approval_response",
          providerData: approvalResponseData
        }, agent));
      } else {
        newItems.push(approvalRequest.requestItem);
        const approvalItem = {
          type: "hosted_mcp_tool_approval",
          tool: approvalRequest.mcpTool,
          runItem: new RunToolApprovalItem({
            type: "hosted_tool_call",
            name: requestData.name,
            id: requestData.id,
            arguments: requestData.arguments,
            status: "in_progress",
            providerData: requestData
          }, agent)
        };
        functionResults.push(approvalItem);
      }
    }
  }
  if (processedResponse.handoffs.length > 0) {
    return await executeHandoffCalls(agent, originalInput, preStepItems, newItems, newResponse, processedResponse.handoffs, runner, state._context);
  }
  const checkToolOutput = await checkForFinalOutputFromTools(agent, functionResults, state);
  if (checkToolOutput.isFinalOutput) {
    runner.emit("agent_end", state._context, agent, checkToolOutput.finalOutput);
    agent.emit("agent_end", state._context, checkToolOutput.finalOutput);
    return new SingleStepResult(originalInput, newResponse, preStepItems, newItems, {
      type: "next_step_final_output",
      output: checkToolOutput.finalOutput
    });
  } else if (checkToolOutput.isInterrupted) {
    return new SingleStepResult(originalInput, newResponse, preStepItems, newItems, {
      type: "next_step_interruption",
      data: {
        interruptions: checkToolOutput.interruptions
      }
    });
  }
  const hadToolCallsOrActions = (processedResponse.functions?.length ?? 0) > 0 || (processedResponse.computerActions?.length ?? 0) > 0 || (processedResponse.mcpApprovalRequests?.length ?? 0) > 0 || (processedResponse.handoffs?.length ?? 0) > 0;
  if (hadToolCallsOrActions) {
    return new SingleStepResult(originalInput, newResponse, preStepItems, newItems, { type: "next_step_run_again" });
  }
  const messageItems = newItems.filter((item) => item instanceof RunMessageOutputItem);
  const potentialFinalOutput = messageItems.length > 0 ? getLastTextFromOutputMessage(messageItems[messageItems.length - 1].rawItem) : void 0;
  if (typeof potentialFinalOutput === "undefined") {
    return new SingleStepResult(originalInput, newResponse, preStepItems, newItems, { type: "next_step_run_again" });
  }
  const hasPendingToolsOrApprovals = functionResults.some((result) => result.runItem instanceof RunToolApprovalItem);
  if (!hasPendingToolsOrApprovals) {
    if (agent.outputType === "text") {
      return new SingleStepResult(originalInput, newResponse, preStepItems, newItems, {
        type: "next_step_final_output",
        output: potentialFinalOutput
      });
    }
    if (agent.outputType !== "text" && potentialFinalOutput) {
      const { parser } = getSchemaAndParserFromInputType(agent.outputType, "final_output");
      const [error] = await safeExecute(() => parser(potentialFinalOutput));
      if (error) {
        addErrorToCurrentSpan({
          message: "Invalid output type",
          data: {
            error: String(error)
          }
        });
        throw new ModelBehaviorError("Invalid output type");
      }
      return new SingleStepResult(originalInput, newResponse, preStepItems, newItems, { type: "next_step_final_output", output: potentialFinalOutput });
    }
  }
  return new SingleStepResult(originalInput, newResponse, preStepItems, newItems, { type: "next_step_run_again" });
}
function getToolCallOutputItem(toolCall, output) {
  return {
    type: "function_call_result",
    name: toolCall.name,
    callId: toolCall.callId,
    status: "completed",
    output: {
      type: "text",
      text: toSmartString(output)
    }
  };
}
async function executeFunctionToolCalls(agent, toolRuns, runner, state) {
  async function runSingleTool(toolRun) {
    let parsedArgs = toolRun.toolCall.arguments;
    if (toolRun.tool.parameters) {
      if (isZodObject(toolRun.tool.parameters)) {
        parsedArgs = toolRun.tool.parameters.parse(parsedArgs);
      } else {
        parsedArgs = JSON.parse(parsedArgs);
      }
    }
    const needsApproval = await toolRun.tool.needsApproval(state._context, parsedArgs, toolRun.toolCall.callId);
    if (needsApproval) {
      const approval = state._context.isToolApproved({
        toolName: toolRun.tool.name,
        callId: toolRun.toolCall.callId
      });
      if (approval === false) {
        return withFunctionSpan(async (span) => {
          const response = "Tool execution was not approved.";
          span.setError({
            message: response,
            data: {
              tool_name: toolRun.tool.name,
              error: `Tool execution for ${toolRun.toolCall.callId} was manually rejected by user.`
            }
          });
          span.spanData.output = response;
          return {
            type: "function_output",
            tool: toolRun.tool,
            output: response,
            runItem: new RunToolCallOutputItem(getToolCallOutputItem(toolRun.toolCall, response), agent, response)
          };
        }, {
          data: {
            name: toolRun.tool.name
          }
        });
      }
      if (approval !== true) {
        return {
          type: "function_approval",
          tool: toolRun.tool,
          runItem: new RunToolApprovalItem(toolRun.toolCall, agent)
        };
      }
    }
    return withFunctionSpan(async (span) => {
      if (runner.config.traceIncludeSensitiveData) {
        span.spanData.input = toolRun.toolCall.arguments;
      }
      try {
        runner.emit("agent_tool_start", state._context, agent, toolRun.tool, {
          toolCall: toolRun.toolCall
        });
        agent.emit("agent_tool_start", state._context, toolRun.tool, {
          toolCall: toolRun.toolCall
        });
        const toolOutput = await toolRun.tool.invoke(state._context, toolRun.toolCall.arguments, { toolCall: toolRun.toolCall });
        const stringResult = toSmartString(toolOutput);
        runner.emit("agent_tool_end", state._context, agent, toolRun.tool, stringResult, { toolCall: toolRun.toolCall });
        agent.emit("agent_tool_end", state._context, toolRun.tool, stringResult, { toolCall: toolRun.toolCall });
        if (runner.config.traceIncludeSensitiveData) {
          span.spanData.output = stringResult;
        }
        const functionResult = {
          type: "function_output",
          tool: toolRun.tool,
          output: toolOutput,
          runItem: new RunToolCallOutputItem(getToolCallOutputItem(toolRun.toolCall, toolOutput), agent, toolOutput)
        };
        const nestedRunResult = consumeAgentToolRunResult(toolRun.toolCall);
        if (nestedRunResult) {
          functionResult.agentRunResult = nestedRunResult;
          const nestedInterruptions = nestedRunResult.interruptions;
          if (nestedInterruptions.length > 0) {
            functionResult.interruptions = nestedInterruptions;
          }
        }
        return functionResult;
      } catch (error) {
        span.setError({
          message: "Error running tool",
          data: {
            tool_name: toolRun.tool.name,
            error: String(error)
          }
        });
        throw error;
      }
    }, {
      data: {
        name: toolRun.tool.name
      }
    });
  }
  try {
    const results = await Promise.all(toolRuns.map(runSingleTool));
    return results;
  } catch (e) {
    throw new ToolCallError(`Failed to run function tools: ${e}`, e, state);
  }
}
async function _runComputerActionAndScreenshot(computer, toolCall) {
  const action = toolCall.action;
  let screenshot;
  switch (action.type) {
    case "click":
      await computer.click(action.x, action.y, action.button);
      break;
    case "double_click":
      await computer.doubleClick(action.x, action.y);
      break;
    case "drag":
      await computer.drag(action.path.map((p) => [p.x, p.y]));
      break;
    case "keypress":
      await computer.keypress(action.keys);
      break;
    case "move":
      await computer.move(action.x, action.y);
      break;
    case "screenshot":
      screenshot = await computer.screenshot();
      break;
    case "scroll":
      await computer.scroll(action.x, action.y, action.scroll_x, action.scroll_y);
      break;
    case "type":
      await computer.type(action.text);
      break;
    case "wait":
      await computer.wait();
      break;
    default:
      action;
      break;
  }
  if (typeof screenshot !== "undefined") {
    return screenshot;
  }
  if (typeof computer.screenshot === "function") {
    screenshot = await computer.screenshot();
    if (typeof screenshot !== "undefined") {
      return screenshot;
    }
  }
  throw new Error("Computer does not implement screenshot()");
}
async function executeComputerActions(agent, actions, runner, runContext, customLogger = void 0) {
  const _logger = customLogger ?? logger_default;
  const results = [];
  for (const action of actions) {
    const computer = action.computer.computer;
    const toolCall = action.toolCall;
    runner.emit("agent_tool_start", runContext, agent, action.computer, {
      toolCall
    });
    if (typeof agent.emit === "function") {
      agent.emit("agent_tool_start", runContext, action.computer, { toolCall });
    }
    let output;
    try {
      output = await _runComputerActionAndScreenshot(computer, toolCall);
    } catch (err) {
      _logger.error("Failed to execute computer action:", err);
      output = "";
    }
    runner.emit("agent_tool_end", runContext, agent, action.computer, output, {
      toolCall
    });
    if (typeof agent.emit === "function") {
      agent.emit("agent_tool_end", runContext, action.computer, output, {
        toolCall
      });
    }
    const imageUrl = output ? `data:image/png;base64,${output}` : "";
    const rawItem = {
      type: "computer_call_result",
      callId: toolCall.callId,
      output: { type: "computer_screenshot", data: imageUrl }
    };
    results.push(new RunToolCallOutputItem(rawItem, agent, imageUrl));
  }
  return results;
}
async function executeHandoffCalls(agent, originalInput, preStepItems, newStepItems, newResponse, runHandoffs, runner, runContext) {
  newStepItems = [...newStepItems];
  if (runHandoffs.length === 0) {
    logger_default.warn("Incorrectly called executeHandoffCalls with no handoffs. This should not happen. Moving on.");
    return new SingleStepResult(originalInput, newResponse, preStepItems, newStepItems, { type: "next_step_run_again" });
  }
  if (runHandoffs.length > 1) {
    const outputMessage = "Multiple handoffs detected, ignoring this one.";
    for (let i = 1; i < runHandoffs.length; i++) {
      newStepItems.push(new RunToolCallOutputItem(getToolCallOutputItem(runHandoffs[i].toolCall, outputMessage), agent, outputMessage));
    }
  }
  const actualHandoff = runHandoffs[0];
  return withHandoffSpan(async (handoffSpan) => {
    const handoff2 = actualHandoff.handoff;
    const newAgent = await handoff2.onInvokeHandoff(runContext, actualHandoff.toolCall.arguments);
    handoffSpan.spanData.to_agent = newAgent.name;
    if (runHandoffs.length > 1) {
      const requestedAgents = runHandoffs.map((h) => h.handoff.agentName);
      handoffSpan.setError({
        message: "Multiple handoffs requested",
        data: {
          requested_agents: requestedAgents
        }
      });
    }
    newStepItems.push(new RunHandoffOutputItem(getToolCallOutputItem(actualHandoff.toolCall, getTransferMessage(newAgent)), agent, newAgent));
    runner.emit("agent_handoff", runContext, agent, newAgent);
    agent.emit("agent_handoff", runContext, newAgent);
    const inputFilter = handoff2.inputFilter ?? runner.config.handoffInputFilter;
    if (inputFilter) {
      logger_default.debug("Filtering inputs for handoff");
      if (typeof inputFilter !== "function") {
        handoffSpan.setError({
          message: "Invalid input filter",
          data: {
            details: "not callable"
          }
        });
      }
      const handoffInputData = {
        inputHistory: Array.isArray(originalInput) ? [...originalInput] : originalInput,
        preHandoffItems: [...preStepItems],
        newItems: [...newStepItems],
        runContext
      };
      const filtered = inputFilter(handoffInputData);
      originalInput = filtered.inputHistory;
      preStepItems = filtered.preHandoffItems;
      newStepItems = filtered.newItems;
    }
    return new SingleStepResult(originalInput, newResponse, preStepItems, newStepItems, { type: "next_step_handoff", newAgent });
  }, {
    data: {
      from_agent: agent.name
    }
  });
}
var NOT_FINAL_OUTPUT = {
  isFinalOutput: false,
  isInterrupted: void 0
};
async function checkForFinalOutputFromTools(agent, toolResults, state) {
  if (toolResults.length === 0) {
    return NOT_FINAL_OUTPUT;
  }
  const interruptions = [];
  for (const result of toolResults) {
    if (result.runItem instanceof RunToolApprovalItem) {
      interruptions.push(result.runItem);
    }
    if (result.type === "function_output") {
      if (Array.isArray(result.interruptions)) {
        interruptions.push(...result.interruptions);
      } else if (result.agentRunResult) {
        const nestedInterruptions = result.agentRunResult.interruptions;
        if (nestedInterruptions.length > 0) {
          interruptions.push(...nestedInterruptions);
        }
      }
    }
  }
  if (interruptions.length > 0) {
    return {
      isFinalOutput: false,
      isInterrupted: true,
      interruptions
    };
  }
  if (agent.toolUseBehavior === "run_llm_again") {
    return NOT_FINAL_OUTPUT;
  }
  const firstToolResult = toolResults[0];
  if (agent.toolUseBehavior === "stop_on_first_tool") {
    if (firstToolResult?.type === "function_output") {
      const stringOutput = toSmartString(firstToolResult.output);
      return {
        isFinalOutput: true,
        isInterrupted: void 0,
        finalOutput: stringOutput
      };
    }
    return NOT_FINAL_OUTPUT;
  }
  const toolUseBehavior = agent.toolUseBehavior;
  if (typeof toolUseBehavior === "object") {
    const stoppingTool = toolResults.find((r) => toolUseBehavior.stopAtToolNames.includes(r.tool.name));
    if (stoppingTool?.type === "function_output") {
      const stringOutput = toSmartString(stoppingTool.output);
      return {
        isFinalOutput: true,
        isInterrupted: void 0,
        finalOutput: stringOutput
      };
    }
    return NOT_FINAL_OUTPUT;
  }
  if (typeof toolUseBehavior === "function") {
    return toolUseBehavior(state._context, toolResults);
  }
  throw new UserError(`Invalid toolUseBehavior: ${toolUseBehavior}`, state);
}
function getRunItemStreamEventName(item) {
  if (item instanceof RunMessageOutputItem) {
    return "message_output_created";
  }
  if (item instanceof RunHandoffCallItem) {
    return "handoff_requested";
  }
  if (item instanceof RunHandoffOutputItem) {
    return "handoff_occurred";
  }
  if (item instanceof RunToolCallItem) {
    return "tool_called";
  }
  if (item instanceof RunToolCallOutputItem) {
    return "tool_output";
  }
  if (item instanceof RunReasoningItem) {
    return "reasoning_item_created";
  }
  if (item instanceof RunToolApprovalItem) {
    return "tool_approval_requested";
  }
  return void 0;
}
function enqueueRunItemStreamEvent(result, item) {
  const itemName = getRunItemStreamEventName(item);
  if (!itemName) {
    logger_default.warn("Unknown item type: ", item);
    return;
  }
  result._addItem(new RunItemStreamEvent(itemName, item));
}
function streamStepItemsToRunResult(result, items) {
  for (const item of items) {
    enqueueRunItemStreamEvent(result, item);
  }
}
function addStepToRunResult(result, step, options) {
  const skippedItems = options?.skipItems;
  for (const item of step.newStepItems) {
    if (skippedItems?.has(item)) {
      continue;
    }
    enqueueRunItemStreamEvent(result, item);
  }
}
var AgentToolUseTracker = class {
  #agentToTools = /* @__PURE__ */ new Map();
  addToolUse(agent, toolNames) {
    this.#agentToTools.set(agent, toolNames);
  }
  hasUsedTools(agent) {
    return this.#agentToTools.has(agent);
  }
  toJSON() {
    return Object.fromEntries(Array.from(this.#agentToTools.entries()).map(([agent, toolNames]) => {
      return [agent.name, toolNames];
    }));
  }
};

// node_modules/@openai/agents-core/dist/runState.mjs
var CURRENT_SCHEMA_VERSION = "1.0";
var $schemaVersion = external_exports.literal(CURRENT_SCHEMA_VERSION);
var serializedAgentSchema = external_exports.object({
  name: external_exports.string()
});
var serializedSpanBase = external_exports.object({
  object: external_exports.literal("trace.span"),
  id: external_exports.string(),
  trace_id: external_exports.string(),
  parent_id: external_exports.string().nullable(),
  started_at: external_exports.string().nullable(),
  ended_at: external_exports.string().nullable(),
  error: external_exports.object({
    message: external_exports.string(),
    data: external_exports.record(external_exports.string(), external_exports.any()).optional()
  }).nullable(),
  span_data: external_exports.record(external_exports.string(), external_exports.any())
});
var SerializedSpan = serializedSpanBase.extend({
  previous_span: external_exports.lazy(() => SerializedSpan).optional()
});
var usageSchema = external_exports.object({
  requests: external_exports.number(),
  inputTokens: external_exports.number(),
  outputTokens: external_exports.number(),
  totalTokens: external_exports.number()
});
var modelResponseSchema = external_exports.object({
  usage: usageSchema,
  output: external_exports.array(OutputModelItem),
  responseId: external_exports.string().optional(),
  providerData: external_exports.record(external_exports.string(), external_exports.any()).optional()
});
var itemSchema = external_exports.discriminatedUnion("type", [
  external_exports.object({
    type: external_exports.literal("message_output_item"),
    rawItem: AssistantMessageItem,
    agent: serializedAgentSchema
  }),
  external_exports.object({
    type: external_exports.literal("tool_call_item"),
    rawItem: ToolCallItem.or(HostedToolCallItem),
    agent: serializedAgentSchema
  }),
  external_exports.object({
    type: external_exports.literal("tool_call_output_item"),
    rawItem: FunctionCallResultItem,
    agent: serializedAgentSchema,
    output: external_exports.string()
  }),
  external_exports.object({
    type: external_exports.literal("reasoning_item"),
    rawItem: ReasoningItem,
    agent: serializedAgentSchema
  }),
  external_exports.object({
    type: external_exports.literal("handoff_call_item"),
    rawItem: FunctionCallItem,
    agent: serializedAgentSchema
  }),
  external_exports.object({
    type: external_exports.literal("handoff_output_item"),
    rawItem: FunctionCallResultItem,
    sourceAgent: serializedAgentSchema,
    targetAgent: serializedAgentSchema
  }),
  external_exports.object({
    type: external_exports.literal("tool_approval_item"),
    rawItem: FunctionCallItem.or(HostedToolCallItem),
    agent: serializedAgentSchema
  })
]);
var serializedTraceSchema = external_exports.object({
  object: external_exports.literal("trace"),
  id: external_exports.string(),
  workflow_name: external_exports.string(),
  group_id: external_exports.string().nullable(),
  metadata: external_exports.record(external_exports.string(), external_exports.any())
});
var serializedProcessedResponseSchema = external_exports.object({
  newItems: external_exports.array(itemSchema),
  toolsUsed: external_exports.array(external_exports.string()),
  handoffs: external_exports.array(external_exports.object({
    toolCall: external_exports.any(),
    handoff: external_exports.any()
  })),
  functions: external_exports.array(external_exports.object({
    toolCall: external_exports.any(),
    tool: external_exports.any()
  })),
  computerActions: external_exports.array(external_exports.object({
    toolCall: external_exports.any(),
    computer: external_exports.any()
  })),
  mcpApprovalRequests: external_exports.array(external_exports.object({
    requestItem: external_exports.object({
      // protocol.HostedToolCallItem
      rawItem: external_exports.object({
        type: external_exports.literal("hosted_tool_call"),
        name: external_exports.string(),
        arguments: external_exports.string().optional(),
        status: external_exports.string().optional(),
        output: external_exports.string().optional(),
        // this always exists but marked as optional for early version compatibility; when releasing 1.0, we can remove the nullable and optional
        providerData: external_exports.record(external_exports.string(), external_exports.any()).nullable().optional()
      })
    }),
    // HostedMCPTool
    mcpTool: external_exports.object({
      type: external_exports.literal("hosted_tool"),
      name: external_exports.literal("hosted_mcp"),
      providerData: external_exports.record(external_exports.string(), external_exports.any())
    })
  })).optional()
});
var guardrailFunctionOutputSchema = external_exports.object({
  tripwireTriggered: external_exports.boolean(),
  outputInfo: external_exports.any()
});
var inputGuardrailResultSchema = external_exports.object({
  guardrail: external_exports.object({
    type: external_exports.literal("input"),
    name: external_exports.string()
  }),
  output: guardrailFunctionOutputSchema
});
var outputGuardrailResultSchema = external_exports.object({
  guardrail: external_exports.object({
    type: external_exports.literal("output"),
    name: external_exports.string()
  }),
  agentOutput: external_exports.any(),
  agent: serializedAgentSchema,
  output: guardrailFunctionOutputSchema
});
var SerializedRunState = external_exports.object({
  $schemaVersion,
  currentTurn: external_exports.number(),
  currentAgent: serializedAgentSchema,
  originalInput: external_exports.string().or(external_exports.array(ModelItem)),
  modelResponses: external_exports.array(modelResponseSchema),
  context: external_exports.object({
    usage: usageSchema,
    approvals: external_exports.record(external_exports.string(), external_exports.object({
      approved: external_exports.array(external_exports.string()).or(external_exports.boolean()),
      rejected: external_exports.array(external_exports.string()).or(external_exports.boolean())
    })),
    context: external_exports.record(external_exports.string(), external_exports.any())
  }),
  toolUseTracker: external_exports.record(external_exports.string(), external_exports.array(external_exports.string())),
  maxTurns: external_exports.number(),
  currentAgentSpan: SerializedSpan.nullable().optional(),
  noActiveAgentRun: external_exports.boolean(),
  inputGuardrailResults: external_exports.array(inputGuardrailResultSchema),
  outputGuardrailResults: external_exports.array(outputGuardrailResultSchema),
  currentStep: nextStepSchema.optional(),
  lastModelResponse: modelResponseSchema.optional(),
  generatedItems: external_exports.array(itemSchema),
  lastProcessedResponse: serializedProcessedResponseSchema.optional(),
  trace: serializedTraceSchema.nullable()
});
var RunState = class _RunState {
  /**
   * Current turn number in the conversation.
   */
  _currentTurn = 0;
  /**
   * The agent currently handling the conversation.
   */
  _currentAgent;
  /**
   * Original user input prior to any processing.
   */
  _originalInput;
  /**
   * Responses from the model so far.
   */
  _modelResponses;
  /**
   * Active tracing span for the current agent if tracing is enabled.
   */
  _currentAgentSpan;
  /**
   * Run context tracking approvals, usage, and other metadata.
   */
  _context;
  /**
   * Tracks what tools each agent has used.
   */
  _toolUseTracker;
  /**
   * Items generated by the agent during the run.
   */
  _generatedItems;
  /**
   * Maximum allowed turns before forcing termination.
   */
  _maxTurns;
  /**
   * Whether the run has an active agent step in progress.
   */
  _noActiveAgentRun = true;
  /**
   * Last model response for the previous turn.
   */
  _lastTurnResponse;
  /**
   * Results from input guardrails applied to the run.
   */
  _inputGuardrailResults;
  /**
   * Results from output guardrails applied to the run.
   */
  _outputGuardrailResults;
  /**
   * Next step computed for the agent to take.
   */
  _currentStep = void 0;
  /**
   * Parsed model response after applying guardrails and tools.
   */
  _lastProcessedResponse = void 0;
  /**
   * Trace associated with this run if tracing is enabled.
   */
  _trace = null;
  constructor(context, originalInput, startingAgent, maxTurns) {
    this._context = context;
    this._originalInput = structuredClone(originalInput);
    this._modelResponses = [];
    this._currentAgentSpan = void 0;
    this._currentAgent = startingAgent;
    this._toolUseTracker = new AgentToolUseTracker();
    this._generatedItems = [];
    this._maxTurns = maxTurns;
    this._inputGuardrailResults = [];
    this._outputGuardrailResults = [];
    this._trace = getCurrentTrace();
  }
  /**
   * The history of the agent run. This includes the input items and the new items generated during the run.
   *
   * This can be used as inputs for the next agent run.
   */
  get history() {
    return getTurnInput(this._originalInput, this._generatedItems);
  }
  /**
   * Returns all interruptions if the current step is an interruption otherwise returns an empty array.
   */
  getInterruptions() {
    if (this._currentStep?.type !== "next_step_interruption") {
      return [];
    }
    return this._currentStep.data.interruptions;
  }
  /**
   * Approves a tool call requested by the agent through an interruption and approval item request.
   *
   * To approve the request use this method and then run the agent again with the same state object
   * to continue the execution.
   *
   * By default it will only approve the current tool call. To allow the tool to be used multiple
   * times throughout the run, set the `alwaysApprove` option to `true`.
   *
   * @param approvalItem - The tool call approval item to approve.
   * @param options - Options for the approval.
   */
  approve(approvalItem, options = { alwaysApprove: false }) {
    this._context.approveTool(approvalItem, options);
  }
  /**
   * Rejects a tool call requested by the agent through an interruption and approval item request.
   *
   * To reject the request use this method and then run the agent again with the same state object
   * to continue the execution.
   *
   * By default it will only reject the current tool call. To allow the tool to be used multiple
   * times throughout the run, set the `alwaysReject` option to `true`.
   *
   * @param approvalItem - The tool call approval item to reject.
   * @param options - Options for the rejection.
   */
  reject(approvalItem, options = { alwaysReject: false }) {
    this._context.rejectTool(approvalItem, options);
  }
  /**
   * Serializes the run state to a JSON object.
   *
   * This method is used to serialize the run state to a JSON object that can be used to
   * resume the run later.
   *
   * @returns The serialized run state.
   */
  toJSON() {
    const output = {
      $schemaVersion: CURRENT_SCHEMA_VERSION,
      currentTurn: this._currentTurn,
      currentAgent: {
        name: this._currentAgent.name
      },
      originalInput: this._originalInput,
      modelResponses: this._modelResponses.map((response) => {
        return {
          usage: {
            requests: response.usage.requests,
            inputTokens: response.usage.inputTokens,
            outputTokens: response.usage.outputTokens,
            totalTokens: response.usage.totalTokens
          },
          output: response.output,
          responseId: response.responseId,
          providerData: response.providerData
        };
      }),
      context: this._context.toJSON(),
      toolUseTracker: this._toolUseTracker.toJSON(),
      maxTurns: this._maxTurns,
      currentAgentSpan: this._currentAgentSpan?.toJSON(),
      noActiveAgentRun: this._noActiveAgentRun,
      inputGuardrailResults: this._inputGuardrailResults,
      outputGuardrailResults: this._outputGuardrailResults.map((r) => ({
        ...r,
        agent: r.agent.toJSON()
      })),
      currentStep: this._currentStep,
      lastModelResponse: this._lastTurnResponse,
      generatedItems: this._generatedItems.map((item) => item.toJSON()),
      lastProcessedResponse: this._lastProcessedResponse,
      trace: this._trace ? this._trace.toJSON() : null
    };
    const parsed = SerializedRunState.safeParse(output);
    if (!parsed.success) {
      throw new SystemError(`Failed to serialize run state. ${parsed.error.message}`);
    }
    return parsed.data;
  }
  /**
   * Serializes the run state to a string.
   *
   * This method is used to serialize the run state to a string that can be used to
   * resume the run later.
   *
   * @returns The serialized run state.
   */
  toString() {
    return JSON.stringify(this.toJSON());
  }
  /**
   * Deserializes a run state from a string.
   *
   * This method is used to deserialize a run state from a string that was serialized using the
   * `toString` method.
   */
  static async fromString(initialAgent, str) {
    const [parsingError, jsonResult] = await safeExecute(() => JSON.parse(str));
    if (parsingError) {
      throw new UserError(`Failed to parse run state. ${parsingError instanceof Error ? parsingError.message : String(parsingError)}`);
    }
    const currentSchemaVersion = jsonResult.$schemaVersion;
    if (!currentSchemaVersion) {
      throw new UserError("Run state is missing schema version");
    }
    if (currentSchemaVersion !== CURRENT_SCHEMA_VERSION) {
      throw new UserError(`Run state schema version ${currentSchemaVersion} is not supported. Please use version ${CURRENT_SCHEMA_VERSION}`);
    }
    const stateJson = SerializedRunState.parse(JSON.parse(str));
    const agentMap = buildAgentMap(initialAgent);
    const context = new RunContext(stateJson.context.context);
    context._rebuildApprovals(stateJson.context.approvals);
    const currentAgent = agentMap.get(stateJson.currentAgent.name);
    if (!currentAgent) {
      throw new UserError(`Agent ${stateJson.currentAgent.name} not found`);
    }
    const state = new _RunState(context, "", currentAgent, stateJson.maxTurns);
    state._currentTurn = stateJson.currentTurn;
    state._toolUseTracker = new AgentToolUseTracker();
    for (const [agentName, toolNames] of Object.entries(stateJson.toolUseTracker)) {
      state._toolUseTracker.addToolUse(agentMap.get(agentName), toolNames);
    }
    if (stateJson.currentAgentSpan) {
      if (!stateJson.trace) {
        logger_default.warn("Trace is not set, skipping tracing setup");
      }
      const trace = getGlobalTraceProvider().createTrace({
        traceId: stateJson.trace?.id,
        name: stateJson.trace?.workflow_name,
        groupId: stateJson.trace?.group_id ?? void 0,
        metadata: stateJson.trace?.metadata
      });
      state._currentAgentSpan = deserializeSpan(trace, stateJson.currentAgentSpan);
      state._trace = trace;
    }
    state._noActiveAgentRun = stateJson.noActiveAgentRun;
    state._inputGuardrailResults = stateJson.inputGuardrailResults;
    state._outputGuardrailResults = stateJson.outputGuardrailResults.map((r) => ({
      ...r,
      agent: agentMap.get(r.agent.name)
    }));
    state._currentStep = stateJson.currentStep;
    state._originalInput = stateJson.originalInput;
    state._modelResponses = stateJson.modelResponses.map(deserializeModelResponse);
    state._lastTurnResponse = stateJson.lastModelResponse ? deserializeModelResponse(stateJson.lastModelResponse) : void 0;
    state._generatedItems = stateJson.generatedItems.map((item) => deserializeItem(item, agentMap));
    state._lastProcessedResponse = stateJson.lastProcessedResponse ? await deserializeProcessedResponse(agentMap, state._currentAgent, state._context, stateJson.lastProcessedResponse) : void 0;
    if (stateJson.currentStep?.type === "next_step_handoff") {
      state._currentStep = {
        type: "next_step_handoff",
        newAgent: agentMap.get(stateJson.currentStep.newAgent.name)
      };
    }
    return state;
  }
};
function buildAgentMap(initialAgent) {
  const map = /* @__PURE__ */ new Map();
  const queue = [initialAgent];
  while (queue.length > 0) {
    const currentAgent = queue.shift();
    if (map.has(currentAgent.name)) {
      continue;
    }
    map.set(currentAgent.name, currentAgent);
    for (const handoff2 of currentAgent.handoffs) {
      if (handoff2 instanceof Agent) {
        if (!map.has(handoff2.name)) {
          queue.push(handoff2);
        }
      } else if (handoff2.agent) {
        if (!map.has(handoff2.agent.name)) {
          queue.push(handoff2.agent);
        }
      }
    }
  }
  return map;
}
function deserializeSpan(trace, serializedSpan) {
  const spanData = serializedSpan.span_data;
  const previousSpan = serializedSpan.previous_span ? deserializeSpan(trace, serializedSpan.previous_span) : void 0;
  const span = getGlobalTraceProvider().createSpan({
    spanId: serializedSpan.id,
    traceId: serializedSpan.trace_id,
    parentId: serializedSpan.parent_id ?? void 0,
    startedAt: serializedSpan.started_at ?? void 0,
    endedAt: serializedSpan.ended_at ?? void 0,
    data: spanData
  }, trace);
  span.previousSpan = previousSpan;
  return span;
}
function deserializeModelResponse(serializedModelResponse) {
  const usage = new Usage();
  usage.requests = serializedModelResponse.usage.requests;
  usage.inputTokens = serializedModelResponse.usage.inputTokens;
  usage.outputTokens = serializedModelResponse.usage.outputTokens;
  usage.totalTokens = serializedModelResponse.usage.totalTokens;
  return {
    usage,
    output: serializedModelResponse.output.map((item) => OutputModelItem.parse(item)),
    responseId: serializedModelResponse.responseId,
    providerData: serializedModelResponse.providerData
  };
}
function deserializeItem(serializedItem, agentMap) {
  switch (serializedItem.type) {
    case "message_output_item":
      return new RunMessageOutputItem(serializedItem.rawItem, agentMap.get(serializedItem.agent.name));
    case "tool_call_item":
      return new RunToolCallItem(serializedItem.rawItem, agentMap.get(serializedItem.agent.name));
    case "tool_call_output_item":
      return new RunToolCallOutputItem(serializedItem.rawItem, agentMap.get(serializedItem.agent.name), serializedItem.output);
    case "reasoning_item":
      return new RunReasoningItem(serializedItem.rawItem, agentMap.get(serializedItem.agent.name));
    case "handoff_call_item":
      return new RunHandoffCallItem(serializedItem.rawItem, agentMap.get(serializedItem.agent.name));
    case "handoff_output_item":
      return new RunHandoffOutputItem(serializedItem.rawItem, agentMap.get(serializedItem.sourceAgent.name), agentMap.get(serializedItem.targetAgent.name));
    case "tool_approval_item":
      return new RunToolApprovalItem(serializedItem.rawItem, agentMap.get(serializedItem.agent.name));
  }
}
async function deserializeProcessedResponse(agentMap, currentAgent, context, serializedProcessedResponse) {
  const allTools = await currentAgent.getAllTools(context);
  const tools = new Map(allTools.filter((tool2) => tool2.type === "function").map((tool2) => [tool2.name, tool2]));
  const computerTools = new Map(allTools.filter((tool2) => tool2.type === "computer").map((tool2) => [tool2.name, tool2]));
  const handoffs = new Map(currentAgent.handoffs.map((entry) => {
    if (entry instanceof Agent) {
      return [entry.name, handoff(entry)];
    }
    return [entry.toolName, entry];
  }));
  const result = {
    newItems: serializedProcessedResponse.newItems.map((item) => deserializeItem(item, agentMap)),
    toolsUsed: serializedProcessedResponse.toolsUsed,
    handoffs: serializedProcessedResponse.handoffs.map((handoff2) => {
      if (!handoffs.has(handoff2.handoff.toolName)) {
        throw new UserError(`Handoff ${handoff2.handoff.toolName} not found`);
      }
      return {
        toolCall: handoff2.toolCall,
        handoff: handoffs.get(handoff2.handoff.toolName)
      };
    }),
    functions: await Promise.all(serializedProcessedResponse.functions.map(async (functionCall) => {
      if (!tools.has(functionCall.tool.name)) {
        throw new UserError(`Tool ${functionCall.tool.name} not found`);
      }
      return {
        toolCall: functionCall.toolCall,
        tool: tools.get(functionCall.tool.name)
      };
    })),
    computerActions: serializedProcessedResponse.computerActions.map((computerAction) => {
      const toolName = computerAction.computer.name;
      if (!computerTools.has(toolName)) {
        throw new UserError(`Computer tool ${toolName} not found`);
      }
      return {
        toolCall: computerAction.toolCall,
        computer: computerTools.get(toolName)
      };
    }),
    mcpApprovalRequests: (serializedProcessedResponse.mcpApprovalRequests ?? []).map((approvalRequest) => ({
      requestItem: new RunToolApprovalItem(approvalRequest.requestItem.rawItem, currentAgent),
      mcpTool: approvalRequest.mcpTool
    }))
  };
  return {
    ...result,
    hasToolsOrApprovalsToRun() {
      return result.handoffs.length > 0 || result.functions.length > 0 || result.mcpApprovalRequests.length > 0 || result.computerActions.length > 0;
    }
  };
}

// node_modules/@openai/agents-core/dist/run.mjs
var DEFAULT_MAX_TURNS = 10;
function getTracing(tracingDisabled, traceIncludeSensitiveData) {
  if (tracingDisabled) {
    return false;
  }
  if (traceIncludeSensitiveData) {
    return true;
  }
  return "enabled_without_data";
}
function toAgentInputList(originalInput) {
  if (typeof originalInput === "string") {
    return [{ type: "message", role: "user", content: originalInput }];
  }
  return [...originalInput];
}
var ServerConversationTracker = class {
  // Conversation ID:
  // - https://platform.openai.com/docs/guides/conversation-state?api-mode=responses#using-the-conversations-api
  // - https://platform.openai.com/docs/api-reference/conversations/create
  conversationId;
  // Previous Response ID:
  // https://platform.openai.com/docs/guides/conversation-state?api-mode=responses#passing-context-from-the-previous-response
  previousResponseId;
  // Using this flag because WeakSet does not provide a way to check its size
  sentInitialInput = false;
  // The items already sent to the model; using WeakSet for memory efficiency
  sentItems = /* @__PURE__ */ new WeakSet();
  // The items received from the server; using WeakSet for memory efficiency
  serverItems = /* @__PURE__ */ new WeakSet();
  constructor({ conversationId, previousResponseId }) {
    this.conversationId = conversationId ?? void 0;
    this.previousResponseId = previousResponseId ?? void 0;
  }
  /**
   * Pre-populates tracker caches from an existing RunState when resuming server-managed runs.
   */
  primeFromState({ originalInput, generatedItems, modelResponses }) {
    if (this.sentInitialInput) {
      return;
    }
    for (const item of toAgentInputList(originalInput)) {
      if (item && typeof item === "object") {
        this.sentItems.add(item);
      }
    }
    this.sentInitialInput = true;
    const latestResponse = modelResponses[modelResponses.length - 1];
    for (const response of modelResponses) {
      for (const item of response.output) {
        if (item && typeof item === "object") {
          this.serverItems.add(item);
        }
      }
    }
    if (!this.conversationId && latestResponse?.responseId) {
      this.previousResponseId = latestResponse.responseId;
    }
    for (const item of generatedItems) {
      const rawItem = item.rawItem;
      if (!rawItem || typeof rawItem !== "object") {
        continue;
      }
      if (this.serverItems.has(rawItem)) {
        this.sentItems.add(rawItem);
      }
    }
  }
  trackServerItems(modelResponse) {
    if (!modelResponse) {
      return;
    }
    for (const item of modelResponse.output) {
      if (item && typeof item === "object") {
        this.serverItems.add(item);
      }
    }
    if (!this.conversationId && this.previousResponseId !== void 0 && modelResponse.responseId) {
      this.previousResponseId = modelResponse.responseId;
    }
  }
  prepareInput(originalInput, generatedItems) {
    const inputItems = [];
    if (!this.sentInitialInput) {
      const initialItems = toAgentInputList(originalInput);
      for (const item of initialItems) {
        inputItems.push(item);
        if (item && typeof item === "object") {
          this.sentItems.add(item);
        }
      }
      this.sentInitialInput = true;
    }
    for (const item of generatedItems) {
      if (item.type === "tool_approval_item") {
        continue;
      }
      const rawItem = item.rawItem;
      if (!rawItem || typeof rawItem !== "object") {
        continue;
      }
      if (this.sentItems.has(rawItem) || this.serverItems.has(rawItem)) {
        continue;
      }
      inputItems.push(rawItem);
      this.sentItems.add(rawItem);
    }
    return inputItems;
  }
};
function getTurnInput(originalInput, generatedItems) {
  const rawItems = generatedItems.filter((item) => item.type !== "tool_approval_item").map((item) => item.rawItem);
  return [...toAgentInputList(originalInput), ...rawItems];
}
var Runner = class extends RunHooks {
  config;
  inputGuardrailDefs;
  outputGuardrailDefs;
  constructor(config = {}) {
    super();
    this.config = {
      modelProvider: config.modelProvider ?? getDefaultModelProvider(),
      model: config.model,
      modelSettings: config.modelSettings,
      handoffInputFilter: config.handoffInputFilter,
      inputGuardrails: config.inputGuardrails,
      outputGuardrails: config.outputGuardrails,
      tracingDisabled: config.tracingDisabled ?? false,
      traceIncludeSensitiveData: config.traceIncludeSensitiveData ?? true,
      workflowName: config.workflowName ?? "Agent workflow",
      traceId: config.traceId,
      groupId: config.groupId,
      traceMetadata: config.traceMetadata
    };
    this.inputGuardrailDefs = (config.inputGuardrails ?? []).map(defineInputGuardrail);
    this.outputGuardrailDefs = (config.outputGuardrails ?? []).map(defineOutputGuardrail);
  }
  /**
   * @internal
   */
  async #runIndividualNonStream(startingAgent, input, options) {
    return withNewSpanContext(async () => {
      const isResumedState = input instanceof RunState;
      const state = isResumedState ? input : new RunState(options.context instanceof RunContext ? options.context : new RunContext(options.context), input, startingAgent, options.maxTurns ?? DEFAULT_MAX_TURNS);
      const serverConversationTracker = options.conversationId || options.previousResponseId ? new ServerConversationTracker({
        conversationId: options.conversationId,
        previousResponseId: options.previousResponseId
      }) : void 0;
      if (serverConversationTracker && isResumedState) {
        serverConversationTracker.primeFromState({
          originalInput: state._originalInput,
          generatedItems: state._generatedItems,
          modelResponses: state._modelResponses
        });
      }
      try {
        while (true) {
          const explictlyModelSet = state._currentAgent.model !== void 0 && state._currentAgent.model !== "" || this.config.model !== void 0 && this.config.model !== "";
          let model = selectModel(state._currentAgent.model, this.config.model);
          if (typeof model === "string") {
            model = await this.config.modelProvider.getModel(model);
          }
          state._currentStep = state._currentStep ?? {
            type: "next_step_run_again"
          };
          if (state._currentStep.type === "next_step_interruption") {
            logger_default.debug("Continuing from interruption");
            if (!state._lastTurnResponse || !state._lastProcessedResponse) {
              throw new UserError("No model response found in previous state", state);
            }
            const turnResult = await executeInterruptedToolsAndSideEffects(state._currentAgent, state._originalInput, state._generatedItems, state._lastTurnResponse, state._lastProcessedResponse, this, state);
            state._toolUseTracker.addToolUse(state._currentAgent, state._lastProcessedResponse.toolsUsed);
            state._originalInput = turnResult.originalInput;
            state._generatedItems = turnResult.generatedItems;
            state._currentStep = turnResult.nextStep;
            if (turnResult.nextStep.type === "next_step_interruption") {
              return new RunResult(state);
            }
            continue;
          }
          if (state._currentStep.type === "next_step_run_again") {
            const handoffs = await state._currentAgent.getEnabledHandoffs(state._context);
            if (!state._currentAgentSpan) {
              const handoffNames = handoffs.map((h) => h.agentName);
              state._currentAgentSpan = createAgentSpan({
                data: {
                  name: state._currentAgent.name,
                  handoffs: handoffNames,
                  output_type: state._currentAgent.outputSchemaName
                }
              });
              state._currentAgentSpan.start();
              setCurrentSpan(state._currentAgentSpan);
            }
            const tools = await state._currentAgent.getAllTools(state._context);
            const serializedTools = tools.map((t) => serializeTool(t));
            const serializedHandoffs = handoffs.map((h) => serializeHandoff(h));
            if (state._currentAgentSpan) {
              state._currentAgentSpan.spanData.tools = tools.map((t) => t.name);
            }
            state._currentTurn++;
            if (state._currentTurn > state._maxTurns) {
              state._currentAgentSpan?.setError({
                message: "Max turns exceeded",
                data: { max_turns: state._maxTurns }
              });
              throw new MaxTurnsExceededError(`Max turns (${state._maxTurns}) exceeded`, state);
            }
            logger_default.debug(`Running agent ${state._currentAgent.name} (turn ${state._currentTurn})`);
            if (state._currentTurn === 1) {
              await this.#runInputGuardrails(state);
            }
            const turnInput = serverConversationTracker ? serverConversationTracker.prepareInput(state._originalInput, state._generatedItems) : getTurnInput(state._originalInput, state._generatedItems);
            if (state._noActiveAgentRun) {
              state._currentAgent.emit("agent_start", state._context, state._currentAgent);
              this.emit("agent_start", state._context, state._currentAgent);
            }
            let modelSettings = {
              ...this.config.modelSettings,
              ...state._currentAgent.modelSettings
            };
            const agentModelSettings = state._currentAgent.modelSettings;
            modelSettings = adjustModelSettingsForNonGPT5RunnerModel(explictlyModelSet, agentModelSettings, model, modelSettings);
            modelSettings = maybeResetToolChoice(state._currentAgent, state._toolUseTracker, modelSettings);
            const previousResponseId = serverConversationTracker?.previousResponseId ?? options.previousResponseId;
            const conversationId = serverConversationTracker?.conversationId ?? options.conversationId;
            state._lastTurnResponse = await model.getResponse({
              systemInstructions: await state._currentAgent.getSystemPrompt(state._context),
              prompt: await state._currentAgent.getPrompt(state._context),
              // Explicit agent/run config models should take precedence over prompt defaults.
              ...explictlyModelSet ? { overridePromptModel: true } : {},
              input: turnInput,
              previousResponseId,
              conversationId,
              modelSettings,
              tools: serializedTools,
              outputType: convertAgentOutputTypeToSerializable(state._currentAgent.outputType),
              handoffs: serializedHandoffs,
              tracing: getTracing(this.config.tracingDisabled, this.config.traceIncludeSensitiveData),
              signal: options.signal
            });
            state._modelResponses.push(state._lastTurnResponse);
            state._context.usage.add(state._lastTurnResponse.usage);
            state._noActiveAgentRun = false;
            serverConversationTracker?.trackServerItems(state._lastTurnResponse);
            const processedResponse = processModelResponse(state._lastTurnResponse, state._currentAgent, tools, handoffs);
            state._lastProcessedResponse = processedResponse;
            const turnResult = await executeToolsAndSideEffects(state._currentAgent, state._originalInput, state._generatedItems, state._lastTurnResponse, state._lastProcessedResponse, this, state);
            state._toolUseTracker.addToolUse(state._currentAgent, state._lastProcessedResponse.toolsUsed);
            state._originalInput = turnResult.originalInput;
            state._generatedItems = turnResult.generatedItems;
            state._currentStep = turnResult.nextStep;
          }
          if (state._currentStep && state._currentStep.type === "next_step_final_output") {
            await this.#runOutputGuardrails(state, state._currentStep.output);
            this.emit("agent_end", state._context, state._currentAgent, state._currentStep.output);
            state._currentAgent.emit("agent_end", state._context, state._currentStep.output);
            return new RunResult(state);
          } else if (state._currentStep && state._currentStep.type === "next_step_handoff") {
            state._currentAgent = state._currentStep.newAgent;
            if (state._currentAgentSpan) {
              state._currentAgentSpan.end();
              resetCurrentSpan();
              state._currentAgentSpan = void 0;
            }
            state._noActiveAgentRun = true;
            state._currentStep = { type: "next_step_run_again" };
          } else if (state._currentStep && state._currentStep.type === "next_step_interruption") {
            return new RunResult(state);
          } else {
            logger_default.debug("Running next loop");
          }
        }
      } catch (err) {
        if (state._currentAgentSpan) {
          state._currentAgentSpan.setError({
            message: "Error in agent run",
            data: { error: String(err) }
          });
        }
        throw err;
      } finally {
        if (state._currentAgentSpan) {
          if (state._currentStep?.type !== "next_step_interruption") {
            state._currentAgentSpan.end();
          }
          resetCurrentSpan();
        }
      }
    });
  }
  async #runInputGuardrails(state) {
    const guardrails = this.inputGuardrailDefs.concat(state._currentAgent.inputGuardrails.map(defineInputGuardrail));
    if (guardrails.length > 0) {
      const guardrailArgs = {
        agent: state._currentAgent,
        input: state._originalInput,
        context: state._context
      };
      try {
        const results = await Promise.all(guardrails.map(async (guardrail) => {
          return withGuardrailSpan(async (span) => {
            const result = await guardrail.run(guardrailArgs);
            span.spanData.triggered = result.output.tripwireTriggered;
            return result;
          }, { data: { name: guardrail.name } }, state._currentAgentSpan);
        }));
        for (const result of results) {
          if (result.output.tripwireTriggered) {
            if (state._currentAgentSpan) {
              state._currentAgentSpan.setError({
                message: "Guardrail tripwire triggered",
                data: { guardrail: result.guardrail.name }
              });
            }
            throw new InputGuardrailTripwireTriggered(`Input guardrail triggered: ${JSON.stringify(result.output.outputInfo)}`, result, state);
          }
        }
      } catch (e) {
        if (e instanceof InputGuardrailTripwireTriggered) {
          throw e;
        }
        state._currentTurn--;
        throw new GuardrailExecutionError(`Input guardrail failed to complete: ${e}`, e, state);
      }
    }
  }
  async #runOutputGuardrails(state, output) {
    const guardrails = this.outputGuardrailDefs.concat(state._currentAgent.outputGuardrails.map(defineOutputGuardrail));
    if (guardrails.length > 0) {
      const agentOutput = state._currentAgent.processFinalOutput(output);
      const guardrailArgs = {
        agent: state._currentAgent,
        agentOutput,
        context: state._context,
        details: { modelResponse: state._lastTurnResponse }
      };
      try {
        const results = await Promise.all(guardrails.map(async (guardrail) => {
          return withGuardrailSpan(async (span) => {
            const result = await guardrail.run(guardrailArgs);
            span.spanData.triggered = result.output.tripwireTriggered;
            return result;
          }, { data: { name: guardrail.name } }, state._currentAgentSpan);
        }));
        for (const result of results) {
          if (result.output.tripwireTriggered) {
            if (state._currentAgentSpan) {
              state._currentAgentSpan.setError({
                message: "Guardrail tripwire triggered",
                data: { guardrail: result.guardrail.name }
              });
            }
            throw new OutputGuardrailTripwireTriggered(`Output guardrail triggered: ${JSON.stringify(result.output.outputInfo)}`, result, state);
          }
        }
      } catch (e) {
        if (e instanceof OutputGuardrailTripwireTriggered) {
          throw e;
        }
        throw new GuardrailExecutionError(`Output guardrail failed to complete: ${e}`, e, state);
      }
    }
  }
  /**
   * @internal
   */
  async #runStreamLoop(result, options, isResumedState) {
    const serverConversationTracker = options.conversationId || options.previousResponseId ? new ServerConversationTracker({
      conversationId: options.conversationId,
      previousResponseId: options.previousResponseId
    }) : void 0;
    if (serverConversationTracker && isResumedState) {
      serverConversationTracker.primeFromState({
        originalInput: result.state._originalInput,
        generatedItems: result.state._generatedItems,
        modelResponses: result.state._modelResponses
      });
    }
    try {
      while (true) {
        const currentAgent = result.state._currentAgent;
        const handoffs = await currentAgent.getEnabledHandoffs(result.state._context);
        const tools = await currentAgent.getAllTools(result.state._context);
        const serializedTools = tools.map((t) => serializeTool(t));
        const serializedHandoffs = handoffs.map((h) => serializeHandoff(h));
        result.state._currentStep = result.state._currentStep ?? {
          type: "next_step_run_again"
        };
        if (result.state._currentStep.type === "next_step_interruption") {
          logger_default.debug("Continuing from interruption");
          if (!result.state._lastTurnResponse || !result.state._lastProcessedResponse) {
            throw new UserError("No model response found in previous state", result.state);
          }
          const turnResult = await executeInterruptedToolsAndSideEffects(result.state._currentAgent, result.state._originalInput, result.state._generatedItems, result.state._lastTurnResponse, result.state._lastProcessedResponse, this, result.state);
          addStepToRunResult(result, turnResult);
          result.state._toolUseTracker.addToolUse(result.state._currentAgent, result.state._lastProcessedResponse.toolsUsed);
          result.state._originalInput = turnResult.originalInput;
          result.state._generatedItems = turnResult.generatedItems;
          result.state._currentStep = turnResult.nextStep;
          if (turnResult.nextStep.type === "next_step_interruption") {
            return;
          }
          continue;
        }
        if (result.state._currentStep.type === "next_step_run_again") {
          if (!result.state._currentAgentSpan) {
            const handoffNames = handoffs.map((h) => h.agentName);
            result.state._currentAgentSpan = createAgentSpan({
              data: {
                name: currentAgent.name,
                handoffs: handoffNames,
                tools: tools.map((t) => t.name),
                output_type: currentAgent.outputSchemaName
              }
            });
            result.state._currentAgentSpan.start();
            setCurrentSpan(result.state._currentAgentSpan);
          }
          result.state._currentTurn++;
          if (result.state._currentTurn > result.state._maxTurns) {
            result.state._currentAgentSpan?.setError({
              message: "Max turns exceeded",
              data: { max_turns: result.state._maxTurns }
            });
            throw new MaxTurnsExceededError(`Max turns (${result.state._maxTurns}) exceeded`, result.state);
          }
          logger_default.debug(`Running agent ${currentAgent.name} (turn ${result.state._currentTurn})`);
          const explictlyModelSet = currentAgent.model !== void 0 && currentAgent.model !== "" || this.config.model !== void 0 && this.config.model !== "";
          let model = selectModel(currentAgent.model, this.config.model);
          if (typeof model === "string") {
            model = await this.config.modelProvider.getModel(model);
          }
          if (result.state._currentTurn === 1) {
            await this.#runInputGuardrails(result.state);
          }
          let modelSettings = {
            ...this.config.modelSettings,
            ...currentAgent.modelSettings
          };
          const agentModelSettings = currentAgent.modelSettings;
          modelSettings = adjustModelSettingsForNonGPT5RunnerModel(explictlyModelSet, agentModelSettings, model, modelSettings);
          modelSettings = maybeResetToolChoice(currentAgent, result.state._toolUseTracker, modelSettings);
          const turnInput = serverConversationTracker ? serverConversationTracker.prepareInput(result.input, result.newItems) : getTurnInput(result.input, result.newItems);
          if (result.state._noActiveAgentRun) {
            currentAgent.emit("agent_start", result.state._context, currentAgent);
            this.emit("agent_start", result.state._context, currentAgent);
          }
          let finalResponse = void 0;
          const previousResponseId = serverConversationTracker?.previousResponseId ?? options.previousResponseId;
          const conversationId = serverConversationTracker?.conversationId ?? options.conversationId;
          for await (const event of model.getStreamedResponse({
            systemInstructions: await currentAgent.getSystemPrompt(result.state._context),
            prompt: await currentAgent.getPrompt(result.state._context),
            // Streaming requests should also honor explicitly chosen models.
            ...explictlyModelSet ? { overridePromptModel: true } : {},
            input: turnInput,
            previousResponseId,
            conversationId,
            modelSettings,
            tools: serializedTools,
            handoffs: serializedHandoffs,
            outputType: convertAgentOutputTypeToSerializable(currentAgent.outputType),
            tracing: getTracing(this.config.tracingDisabled, this.config.traceIncludeSensitiveData),
            signal: options.signal
          })) {
            if (event.type === "response_done") {
              const parsed = StreamEventResponseCompleted.parse(event);
              finalResponse = {
                usage: new Usage(parsed.response.usage),
                output: parsed.response.output,
                responseId: parsed.response.id
              };
            }
            if (result.cancelled) {
              return;
            }
            result._addItem(new RunRawModelStreamEvent(event));
          }
          result.state._noActiveAgentRun = false;
          if (!finalResponse) {
            throw new ModelBehaviorError("Model did not produce a final response!", result.state);
          }
          result.state._lastTurnResponse = finalResponse;
          serverConversationTracker?.trackServerItems(finalResponse);
          result.state._modelResponses.push(result.state._lastTurnResponse);
          const processedResponse = processModelResponse(result.state._lastTurnResponse, currentAgent, tools, handoffs);
          result.state._lastProcessedResponse = processedResponse;
          const preToolItems = new Set(processedResponse.newItems);
          if (preToolItems.size > 0) {
            streamStepItemsToRunResult(result, processedResponse.newItems);
          }
          const turnResult = await executeToolsAndSideEffects(currentAgent, result.state._originalInput, result.state._generatedItems, result.state._lastTurnResponse, result.state._lastProcessedResponse, this, result.state);
          addStepToRunResult(result, turnResult, {
            skipItems: preToolItems
          });
          result.state._toolUseTracker.addToolUse(currentAgent, processedResponse.toolsUsed);
          result.state._originalInput = turnResult.originalInput;
          result.state._generatedItems = turnResult.generatedItems;
          result.state._currentStep = turnResult.nextStep;
        }
        if (result.state._currentStep.type === "next_step_final_output") {
          await this.#runOutputGuardrails(result.state, result.state._currentStep.output);
          this.emit("agent_end", result.state._context, currentAgent, result.state._currentStep.output);
          currentAgent.emit("agent_end", result.state._context, result.state._currentStep.output);
          return;
        } else if (result.state._currentStep.type === "next_step_interruption") {
          return;
        } else if (result.state._currentStep.type === "next_step_handoff") {
          result.state._currentAgent = result.state._currentStep?.newAgent;
          if (result.state._currentAgentSpan) {
            result.state._currentAgentSpan.end();
            resetCurrentSpan();
          }
          result.state._currentAgentSpan = void 0;
          result._addItem(new RunAgentUpdatedStreamEvent(result.state._currentAgent));
          result.state._noActiveAgentRun = true;
          result.state._currentStep = {
            type: "next_step_run_again"
          };
        } else {
          logger_default.debug("Running next loop");
        }
      }
    } catch (error) {
      if (result.state._currentAgentSpan) {
        result.state._currentAgentSpan.setError({
          message: "Error in agent run",
          data: { error: String(error) }
        });
      }
      throw error;
    } finally {
      if (result.state._currentAgentSpan) {
        if (result.state._currentStep?.type !== "next_step_interruption") {
          result.state._currentAgentSpan.end();
        }
        resetCurrentSpan();
      }
    }
  }
  /**
   * @internal
   */
  async #runIndividualStream(agent, input, options) {
    options = options ?? {};
    return withNewSpanContext(async () => {
      const isResumedState = input instanceof RunState;
      const state = isResumedState ? input : new RunState(options.context instanceof RunContext ? options.context : new RunContext(options.context), input, agent, options.maxTurns ?? DEFAULT_MAX_TURNS);
      const result = new StreamedRunResult({
        signal: options.signal,
        state
      });
      result.maxTurns = options.maxTurns ?? state._maxTurns;
      const streamLoopPromise = this.#runStreamLoop(result, options, isResumedState).then(() => {
        result._done();
      }, (err) => {
        result._raiseError(err);
      });
      result._setStreamLoopPromise(streamLoopPromise);
      return result;
    });
  }
  run(agent, input, options = {
    stream: false,
    context: void 0
  }) {
    if (input instanceof RunState && input._trace) {
      return withTrace(input._trace, async () => {
        if (input._currentAgentSpan) {
          setCurrentSpan(input._currentAgentSpan);
        }
        if (options?.stream) {
          return this.#runIndividualStream(agent, input, options);
        } else {
          return this.#runIndividualNonStream(agent, input, options);
        }
      });
    }
    return getOrCreateTrace(async () => {
      if (options?.stream) {
        return this.#runIndividualStream(agent, input, options);
      } else {
        return this.#runIndividualNonStream(agent, input, options);
      }
    }, {
      traceId: this.config.traceId,
      name: this.config.workflowName,
      groupId: this.config.groupId,
      metadata: this.config.traceMetadata
    });
  }
};
function selectModel(agentModel, runConfigModel) {
  if (typeof agentModel === "string" && agentModel !== Agent.DEFAULT_MODEL_PLACEHOLDER || agentModel) {
    return agentModel;
  }
  return runConfigModel ?? agentModel ?? Agent.DEFAULT_MODEL_PLACEHOLDER;
}
function adjustModelSettingsForNonGPT5RunnerModel(explictlyModelSet, agentModelSettings, runnerModel, modelSettings) {
  if (
    // gpt-5 is enabled for the default model for agents
    isGpt5Default() && // explicitly set model for the agent
    explictlyModelSet && // this runner uses a non-gpt-5 model
    (typeof runnerModel !== "string" || !gpt5ReasoningSettingsRequired(runnerModel)) && (agentModelSettings.providerData?.reasoning || agentModelSettings.providerData?.text?.verbosity || agentModelSettings.providerData?.reasoning_effort)
  ) {
    const copiedModelSettings = { ...modelSettings };
    delete copiedModelSettings.providerData?.reasoning;
    delete copiedModelSettings.providerData?.text?.verbosity;
    delete copiedModelSettings.providerData?.reasoning_effort;
    if (copiedModelSettings.reasoning) {
      delete copiedModelSettings.reasoning.effort;
      delete copiedModelSettings.reasoning.summary;
    }
    if (copiedModelSettings.text) {
      delete copiedModelSettings.text.verbosity;
    }
    return copiedModelSettings;
  }
  return modelSettings;
}

// node_modules/@openai/agents-core/dist/result.mjs
var RunResultBase = class {
  state;
  constructor(state) {
    this.state = state;
  }
  /**
   * The history of the agent run. This includes the input items and the new items generated during
   * the agent run.
   *
   * This can be used as inputs for the next agent run.
   */
  get history() {
    return getTurnInput(this.input, this.newItems);
  }
  /**
   * The new items generated during the agent run. These include things like new messages, tool
   * calls and their outputs, etc.
   *
   * It does not include information about the agents and instead represents the model data.
   *
   * For the output including the agents, use the `newItems` property.
   */
  get output() {
    return getTurnInput([], this.newItems);
  }
  /**
   * A copy of the original input items.
   */
  get input() {
    return this.state._originalInput;
  }
  /**
   * The run items generated during the agent run. This associates the model data with the agents.
   *
   * For the model data that can be used as inputs for the next agent run, use the `output` property.
   */
  get newItems() {
    return this.state._generatedItems;
  }
  /**
   * The raw LLM responses generated by the model during the agent run.
   */
  get rawResponses() {
    return this.state._modelResponses;
  }
  /**
   * The last response ID generated by the model during the agent run.
   */
  get lastResponseId() {
    const responses = this.rawResponses;
    return responses && responses.length > 0 ? responses[responses.length - 1].responseId : void 0;
  }
  /**
   * The last agent that was run
   */
  get lastAgent() {
    return this.state._currentAgent;
  }
  /**
   * Guardrail results for the input messages.
   */
  get inputGuardrailResults() {
    return this.state._inputGuardrailResults;
  }
  /**
   * Guardrail results for the final output of the agent.
   */
  get outputGuardrailResults() {
    return this.state._outputGuardrailResults;
  }
  /**
   * Any interruptions that occurred during the agent run for example for tool approvals.
   */
  get interruptions() {
    if (this.state._currentStep?.type === "next_step_interruption") {
      return this.state._currentStep.data.interruptions;
    }
    return [];
  }
  /**
   * The final output of the agent. If the output type was set to anything other than `text`,
   * this will be parsed either as JSON or using the Zod schema you provided.
   */
  get finalOutput() {
    if (this.state._currentStep?.type === "next_step_final_output") {
      return this.state._currentAgent.processFinalOutput(this.state._currentStep.output);
    }
    logger_default.warn("Accessed finalOutput before agent run is completed.");
    return void 0;
  }
};
var RunResult = class extends RunResultBase {
  constructor(state) {
    super(state);
  }
};
var StreamedRunResult = class extends RunResultBase {
  /**
   * The current agent that is running
   */
  get currentAgent() {
    return this.lastAgent;
  }
  /**
   * The current turn number
   */
  currentTurn = 0;
  /**
   * The maximum number of turns that can be run
   */
  maxTurns;
  #error = null;
  #signal;
  #readableController;
  #readableStream;
  #completedPromise;
  #completedPromiseResolve;
  #completedPromiseReject;
  #cancelled = false;
  #streamLoopPromise;
  constructor(result = {}) {
    super(result.state);
    this.#signal = result.signal;
    this.#readableStream = new ReadableStream({
      start: (controller) => {
        this.#readableController = controller;
      },
      cancel: () => {
        this.#cancelled = true;
      }
    });
    this.#completedPromise = new Promise((resolve, reject) => {
      this.#completedPromiseResolve = resolve;
      this.#completedPromiseReject = reject;
    });
    if (this.#signal) {
      const handleAbort = () => {
        if (this.#cancelled) {
          return;
        }
        this.#cancelled = true;
        const controller = this.#readableController;
        this.#readableController = void 0;
        if (this.#readableStream.locked) {
          if (controller) {
            try {
              controller.close();
            } catch (err) {
              logger_default.debug(`Failed to close readable stream on abort: ${err}`);
            }
          }
        } else {
          void this.#readableStream.cancel(this.#signal?.reason).catch((err) => {
            logger_default.debug(`Failed to cancel readable stream on abort: ${err}`);
          });
        }
        this.#completedPromiseResolve?.();
      };
      if (this.#signal.aborted) {
        handleAbort();
      } else {
        this.#signal.addEventListener("abort", handleAbort, { once: true });
      }
    }
  }
  /**
   * @internal
   * Adds an item to the stream of output items
   */
  _addItem(item) {
    if (!this.cancelled) {
      this.#readableController?.enqueue(item);
    }
  }
  /**
   * @internal
   * Indicates that the stream has been completed
   */
  _done() {
    if (!this.cancelled && this.#readableController) {
      this.#readableController.close();
      this.#readableController = void 0;
      this.#completedPromiseResolve?.();
    }
  }
  /**
   * @internal
   * Handles an error in the stream loop.
   */
  _raiseError(err) {
    if (!this.cancelled && this.#readableController) {
      this.#readableController.error(err);
      this.#readableController = void 0;
    }
    this.#error = err;
    this.#completedPromiseReject?.(err);
    this.#completedPromise.catch((e) => {
      logger_default.debug(`Resulted in an error: ${e}`);
    });
  }
  /**
   * Returns true if the stream has been cancelled.
   */
  get cancelled() {
    return this.#cancelled;
  }
  /**
   * Returns the underlying readable stream.
   * @returns A readable stream of the agent run.
   */
  toStream() {
    return this.#readableStream;
  }
  /**
   * Await this promise to ensure that the stream has been completed if you are not consuming the
   * stream directly.
   */
  get completed() {
    return this.#completedPromise;
  }
  /**
   * Error thrown during the run, if any.
   */
  get error() {
    return this.#error;
  }
  toTextStream(options = {}) {
    const stream = this.#readableStream.pipeThrough(new TransformStream({
      transform(event, controller) {
        if (event.type === "raw_model_stream_event" && event.data.type === "output_text_delta") {
          const item = StreamEventTextStream.parse(event.data);
          controller.enqueue(item.delta);
        }
      }
    }));
    if (options.compatibleWithNodeStreams) {
      return Readable.fromWeb(stream);
    }
    return stream;
  }
  [Symbol.asyncIterator]() {
    return this.#readableStream[Symbol.asyncIterator]();
  }
  /**
   * @internal
   * Sets the stream loop promise that completes when the internal stream loop finishes.
   * This is used to defer trace end until all agent work is complete.
   */
  _setStreamLoopPromise(promise) {
    this.#streamLoopPromise = promise;
  }
  /**
   * @internal
   * Returns a promise that resolves when the stream loop completes.
   * This is used by the tracing system to wait for all agent work before ending the trace.
   */
  _getStreamLoopPromise() {
    return this.#streamLoopPromise;
  }
};

// node_modules/@openai/agents-core/dist/tracing/context.mjs
var _contextAsyncLocalStorage;
function getContextAsyncLocalStorage() {
  _contextAsyncLocalStorage ??= new AsyncLocalStorage();
  return _contextAsyncLocalStorage;
}
function getCurrentTrace() {
  const currentTrace = getContextAsyncLocalStorage().getStore();
  if (currentTrace?.trace) {
    return currentTrace.trace;
  }
  return null;
}
function getCurrentSpan() {
  const currentSpan = getContextAsyncLocalStorage().getStore();
  if (currentSpan?.span) {
    return currentSpan.span;
  }
  return null;
}
function _wrapFunctionWithTraceLifecycle(fn) {
  return async () => {
    const trace = getCurrentTrace();
    if (!trace) {
      throw new Error("No trace found");
    }
    await trace.start();
    const result = await fn(trace);
    if (result instanceof StreamedRunResult) {
      const streamLoopPromise = result._getStreamLoopPromise();
      if (streamLoopPromise) {
        streamLoopPromise.finally(() => trace.end());
        return result;
      }
    }
    await trace.end();
    return result;
  };
}
async function withTrace(trace, fn, options = {}) {
  const newTrace = typeof trace === "string" ? getGlobalTraceProvider().createTrace({
    ...options,
    name: trace
  }) : trace;
  return getContextAsyncLocalStorage().run({ trace: newTrace }, _wrapFunctionWithTraceLifecycle(fn));
}
async function getOrCreateTrace(fn, options = {}) {
  const currentTrace = getCurrentTrace();
  if (currentTrace) {
    return await fn();
  }
  const newTrace = getGlobalTraceProvider().createTrace(options);
  return getContextAsyncLocalStorage().run({ trace: newTrace }, _wrapFunctionWithTraceLifecycle(fn));
}
function setCurrentSpan(span) {
  const context = getContextAsyncLocalStorage().getStore();
  if (!context) {
    throw new Error("No existing trace found");
  }
  if (context.span) {
    context.span.previousSpan = context.previousSpan;
    context.previousSpan = context.span;
  }
  context.span = span;
  getContextAsyncLocalStorage().enterWith(context);
}
function resetCurrentSpan() {
  const context = getContextAsyncLocalStorage().getStore();
  if (context) {
    context.span = context.previousSpan;
    context.previousSpan = context.previousSpan?.previousSpan;
    getContextAsyncLocalStorage().enterWith(context);
  }
}
function addErrorToCurrentSpan(spanError) {
  const currentSpan = getCurrentSpan();
  if (currentSpan) {
    currentSpan.setError(spanError);
  }
}
function cloneCurrentContext(context) {
  return {
    trace: context.trace?.clone(),
    span: context.span?.clone(),
    previousSpan: context.previousSpan?.clone()
  };
}
function withNewSpanContext(fn) {
  const currentContext = getContextAsyncLocalStorage().getStore();
  if (!currentContext) {
    throw new Error("No existing trace found");
  }
  const copyOfContext = cloneCurrentContext(currentContext);
  return getContextAsyncLocalStorage().run(copyOfContext, fn);
}

// node_modules/@openai/agents-core/dist/tracing/processor.mjs
var ConsoleSpanExporter = class {
  async export(items) {
    if (tracing.disabled) {
      logger_default.debug("Tracing is disabled. Skipping export");
      return;
    }
    for (const item of items) {
      if (item.type === "trace") {
        console.log(`[Exporter] Export trace traceId=${item.traceId} name=${item.name}${item.groupId ? ` groupId=${item.groupId}` : ""}`);
      } else {
        console.log(`[Exporter] Export span: ${JSON.stringify(item)}`);
      }
    }
  }
};
var BatchTraceProcessor = class {
  #maxQueueSize;
  #maxBatchSize;
  #scheduleDelay;
  #exportTriggerSize;
  #exporter;
  #buffer = [];
  #timer;
  #timeout = null;
  #exportInProgress = false;
  #timeoutAbortController = null;
  constructor(exporter, {
    maxQueueSize = 1e3,
    maxBatchSize = 100,
    scheduleDelay = 5e3,
    // 5 seconds
    exportTriggerRatio = 0.8
  } = {}) {
    this.#maxQueueSize = maxQueueSize;
    this.#maxBatchSize = maxBatchSize;
    this.#scheduleDelay = scheduleDelay;
    this.#exportTriggerSize = maxQueueSize * exportTriggerRatio;
    this.#exporter = exporter;
    this.#timer = timer;
    if (isTracingLoopRunningByDefault()) {
      this.start();
    } else {
      logger_default.debug("Automatic trace export loop is not supported in this environment. You need to manually call `getGlobalTraceProvider().forceFlush()` to export traces.");
    }
  }
  start() {
    this.#timeoutAbortController = new AbortController();
    this.#runExportLoop();
  }
  async #safeAddItem(item) {
    if (this.#buffer.length + 1 > this.#maxQueueSize) {
      logger_default.error("Dropping trace because buffer is full");
      return;
    }
    this.#buffer.push(item);
    if (this.#buffer.length > this.#exportTriggerSize) {
      await this.#exportBatches();
    }
  }
  #runExportLoop() {
    this.#timeout = this.#timer.setTimeout(async () => {
      await this.#exportBatches();
      this.#runExportLoop();
    }, this.#scheduleDelay);
    if (typeof this.#timeout.unref === "function") {
      this.#timeout.unref();
    }
  }
  async #exportBatches(force = false) {
    if (this.#buffer.length === 0) {
      return;
    }
    logger_default.debug(`Exporting batches. Force: ${force}. Buffer size: ${this.#buffer.length}`);
    if (force || this.#buffer.length < this.#maxBatchSize) {
      const toExport = [...this.#buffer];
      this.#buffer = [];
      this.#exportInProgress = true;
      await this.#exporter.export(toExport);
      this.#exportInProgress = false;
    } else if (this.#buffer.length > 0) {
      const batch = this.#buffer.splice(0, this.#maxBatchSize);
      this.#exportInProgress = true;
      await this.#exporter.export(batch);
      this.#exportInProgress = false;
    }
  }
  async onTraceStart(trace) {
    await this.#safeAddItem(trace);
  }
  async onTraceEnd(_trace) {
  }
  async onSpanStart(_span) {
  }
  async onSpanEnd(span) {
    await this.#safeAddItem(span);
  }
  async shutdown(timeout) {
    if (timeout) {
      this.#timer.setTimeout(() => {
        this.#timeoutAbortController?.abort();
      }, timeout);
    }
    logger_default.debug("Shutting down gracefully");
    while (this.#buffer.length > 0) {
      logger_default.debug(`Waiting for buffer to empty. Items left: ${this.#buffer.length}`);
      if (!this.#exportInProgress) {
        await this.#exportBatches(true);
      }
      if (this.#timeoutAbortController?.signal.aborted) {
        logger_default.debug("Timeout reached, force flushing");
        await this.#exportBatches(true);
        break;
      }
      await new Promise((resolve) => this.#timer.setTimeout(resolve, 500));
    }
    logger_default.debug("Buffer empty. Exiting");
    if (this.#timer && this.#timeout) {
      this.#timer.clearTimeout(this.#timeout);
    }
  }
  async forceFlush() {
    if (this.#buffer.length > 0) {
      await this.#exportBatches(true);
    }
  }
};
var MultiTracingProcessor = class {
  #processors = [];
  start() {
    for (const processor of this.#processors) {
      if (processor.start) {
        processor.start();
      }
    }
  }
  addTraceProcessor(processor) {
    this.#processors.push(processor);
  }
  setProcessors(processors) {
    logger_default.debug("Shutting down old processors");
    for (const processor of this.#processors) {
      processor.shutdown();
    }
    this.#processors = processors;
  }
  async onTraceStart(trace) {
    for (const processor of this.#processors) {
      await processor.onTraceStart(trace);
    }
  }
  async onTraceEnd(trace) {
    for (const processor of this.#processors) {
      await processor.onTraceEnd(trace);
    }
  }
  async onSpanStart(span) {
    for (const processor of this.#processors) {
      await processor.onSpanStart(span);
    }
  }
  async onSpanEnd(span) {
    for (const processor of this.#processors) {
      await processor.onSpanEnd(span);
    }
  }
  async shutdown(timeout) {
    for (const processor of this.#processors) {
      await processor.shutdown(timeout);
    }
  }
  async forceFlush() {
    for (const processor of this.#processors) {
      await processor.forceFlush();
    }
  }
};
var _defaultExporter = null;
var _defaultProcessor = null;
function defaultExporter() {
  if (!_defaultExporter) {
    _defaultExporter = new ConsoleSpanExporter();
  }
  return _defaultExporter;
}
function defaultProcessor() {
  if (!_defaultProcessor) {
    _defaultProcessor = new BatchTraceProcessor(defaultExporter());
  }
  return _defaultProcessor;
}

// node_modules/@openai/agents-core/dist/tracing/utils.mjs
function timeIso() {
  return (/* @__PURE__ */ new Date()).toISOString();
}
function generateTraceId() {
  return `trace_${randomUUID().replace(/-/g, "")}`;
}
function generateSpanId() {
  return `span_${randomUUID().replace(/-/g, "").slice(0, 24)}`;
}
function removePrivateFields(obj) {
  return Object.fromEntries(Object.entries(obj).filter(([key]) => !key.startsWith("_")));
}

// node_modules/@openai/agents-core/dist/tracing/spans.mjs
var Span = class _Span {
  type = "trace.span";
  #data;
  #traceId;
  #spanId;
  #parentId;
  #processor;
  #startedAt;
  #endedAt;
  #error;
  #previousSpan;
  constructor(options, processor) {
    this.#traceId = options.traceId;
    this.#spanId = options.spanId ?? generateSpanId();
    this.#data = options.data;
    this.#processor = processor;
    this.#parentId = options.parentId ?? null;
    this.#error = options.error ?? null;
    this.#startedAt = options.startedAt ?? null;
    this.#endedAt = options.endedAt ?? null;
  }
  get traceId() {
    return this.#traceId;
  }
  get spanData() {
    return this.#data;
  }
  get spanId() {
    return this.#spanId;
  }
  get parentId() {
    return this.#parentId;
  }
  get previousSpan() {
    return this.#previousSpan;
  }
  set previousSpan(span) {
    this.#previousSpan = span;
  }
  start() {
    if (this.#startedAt) {
      logger_default.warn("Span already started");
      return;
    }
    this.#startedAt = timeIso();
    this.#processor.onSpanStart(this);
  }
  end() {
    if (this.#endedAt) {
      logger_default.debug("Span already finished", this.spanData);
      return;
    }
    this.#endedAt = timeIso();
    this.#processor.onSpanEnd(this);
  }
  setError(error) {
    this.#error = error;
  }
  get error() {
    return this.#error;
  }
  get startedAt() {
    return this.#startedAt;
  }
  get endedAt() {
    return this.#endedAt;
  }
  clone() {
    const span = new _Span({
      traceId: this.traceId,
      spanId: this.spanId,
      parentId: this.parentId ?? void 0,
      data: this.spanData,
      startedAt: this.#startedAt ?? void 0,
      endedAt: this.#endedAt ?? void 0,
      error: this.#error ?? void 0
    }, this.#processor);
    span.previousSpan = this.previousSpan?.clone();
    return span;
  }
  toJSON() {
    return {
      object: this.type,
      id: this.spanId,
      trace_id: this.traceId,
      parent_id: this.parentId,
      started_at: this.startedAt,
      ended_at: this.endedAt,
      span_data: removePrivateFields(this.spanData),
      error: this.error
    };
  }
};
var NoopSpan = class extends Span {
  constructor(data, processor) {
    super({ traceId: "no-op", spanId: "no-op", data }, processor);
  }
  start() {
    return;
  }
  end() {
    return;
  }
  setError() {
    return;
  }
  toJSON() {
    return null;
  }
};

// node_modules/@openai/agents-core/dist/tracing/traces.mjs
var Trace = class _Trace {
  type = "trace";
  traceId;
  name;
  groupId = null;
  metadata;
  #processor;
  #started;
  constructor(options, processor) {
    this.traceId = options.traceId ?? generateTraceId();
    this.name = options.name ?? "Agent workflow";
    this.groupId = options.groupId ?? null;
    this.metadata = options.metadata ?? {};
    this.#processor = processor ?? defaultProcessor();
    this.#started = options.started ?? false;
  }
  async start() {
    if (this.#started) {
      return;
    }
    this.#started = true;
    await this.#processor.onTraceStart(this);
  }
  async end() {
    if (!this.#started) {
      return;
    }
    this.#started = false;
    await this.#processor.onTraceEnd(this);
  }
  clone() {
    return new _Trace({
      traceId: this.traceId,
      name: this.name,
      groupId: this.groupId ?? void 0,
      metadata: this.metadata,
      started: this.#started
    });
  }
  toJSON() {
    return {
      object: this.type,
      id: this.traceId,
      workflow_name: this.name,
      group_id: this.groupId,
      metadata: this.metadata
    };
  }
};
var NoopTrace = class extends Trace {
  constructor() {
    super({});
  }
  async start() {
    return;
  }
  async end() {
    return;
  }
  toJSON() {
    return null;
  }
};

// node_modules/@openai/agents-core/dist/tracing/provider.mjs
var TraceProvider = class {
  #multiProcessor;
  #disabled;
  constructor() {
    this.#multiProcessor = new MultiTracingProcessor();
    this.#disabled = tracing.disabled;
    this.#addCleanupListeners();
  }
  /**
   * Add a processor to the list of processors. Each processor will receive all traces/spans.
   *
   * @param processor - The processor to add.
   */
  registerProcessor(processor) {
    this.#multiProcessor.addTraceProcessor(processor);
  }
  /**
   * Set the list of processors. This will replace any existing processors.
   *
   * @param processors - The list of processors to set.
   */
  setProcessors(processors) {
    this.#multiProcessor.setProcessors(processors);
  }
  /**
   * Get the current trace.
   *
   * @returns The current trace.
   */
  getCurrentTrace() {
    return getCurrentTrace();
  }
  getCurrentSpan() {
    return getCurrentSpan();
  }
  setDisabled(disabled) {
    this.#disabled = disabled;
  }
  startExportLoop() {
    this.#multiProcessor.start();
  }
  createTrace(traceOptions) {
    if (this.#disabled) {
      logger_default.debug("Tracing is disabled, Not creating trace %o", traceOptions);
      return new NoopTrace();
    }
    const traceId = traceOptions.traceId ?? generateTraceId();
    const name = traceOptions.name ?? "Agent workflow";
    logger_default.debug("Creating trace %s with name %s", traceId, name);
    return new Trace({ ...traceOptions, name, traceId }, this.#multiProcessor);
  }
  createSpan(spanOptions, parent) {
    if (this.#disabled || spanOptions.disabled) {
      logger_default.debug("Tracing is disabled, Not creating span %o", spanOptions);
      return new NoopSpan(spanOptions.data, this.#multiProcessor);
    }
    let parentId;
    let traceId;
    if (!parent) {
      const currentTrace = getCurrentTrace();
      const currentSpan = getCurrentSpan();
      if (!currentTrace) {
        logger_default.error("No active trace. Make sure to start a trace with `withTrace()` first. Returning NoopSpan.");
        return new NoopSpan(spanOptions.data, this.#multiProcessor);
      }
      if (currentSpan instanceof NoopSpan || currentTrace instanceof NoopTrace) {
        logger_default.debug(`Parent ${currentSpan} or ${currentTrace} is no-op, returning NoopSpan`);
        return new NoopSpan(spanOptions.data, this.#multiProcessor);
      }
      traceId = currentTrace.traceId;
      if (currentSpan) {
        logger_default.debug("Using parent span %s", currentSpan.spanId);
        parentId = currentSpan.spanId;
      } else {
        logger_default.debug("No parent span, using current trace %s", currentTrace.traceId);
      }
    } else if (parent instanceof Trace) {
      if (parent instanceof NoopTrace) {
        logger_default.debug("Parent trace is no-op, returning NoopSpan");
        return new NoopSpan(spanOptions.data, this.#multiProcessor);
      }
      traceId = parent.traceId;
    } else if (parent instanceof Span) {
      if (parent instanceof NoopSpan) {
        logger_default.debug("Parent span is no-op, returning NoopSpan");
        return new NoopSpan(spanOptions.data, this.#multiProcessor);
      }
      parentId = parent.spanId;
      traceId = parent.traceId;
    }
    if (!traceId) {
      logger_default.error("No traceId found. Make sure to start a trace with `withTrace()` first. Returning NoopSpan.");
      return new NoopSpan(spanOptions.data, this.#multiProcessor);
    }
    logger_default.debug(`Creating span ${JSON.stringify(spanOptions.data)} with id ${spanOptions.spanId ?? traceId}`);
    return new Span({
      ...spanOptions,
      traceId,
      parentId
    }, this.#multiProcessor);
  }
  async shutdown(timeout) {
    try {
      logger_default.debug("Shutting down tracing provider");
      await this.#multiProcessor.shutdown(timeout);
    } catch (error) {
      logger_default.error("Error shutting down tracing provider %o", error);
    }
  }
  /** Adds listeners to `process` to ensure `shutdown` occurs before exit. */
  #addCleanupListeners() {
    if (typeof process !== "undefined" && typeof process.on === "function") {
      const cleanup = async () => {
        const timeout = setTimeout(() => {
          console.warn("Cleanup timeout, forcing exit");
          process.exit(1);
        }, 5e3);
        try {
          await this.shutdown();
        } finally {
          clearTimeout(timeout);
        }
      };
      process.on("beforeExit", cleanup);
      process.on("SIGINT", async () => {
        await cleanup();
        if (!hasOtherListenersForSignals("SIGINT")) {
          process.exit(130);
        }
      });
      process.on("SIGTERM", async () => {
        await cleanup();
        if (!hasOtherListenersForSignals("SIGTERM")) {
          process.exit(0);
        }
      });
      process.on("unhandledRejection", async (reason, promise) => {
        logger_default.error("Unhandled rejection", reason, promise);
        await cleanup();
        if (!hasOtherListenersForEvents("unhandledRejection")) {
          process.exit(1);
        }
      });
    }
  }
  async forceFlush() {
    await this.#multiProcessor.forceFlush();
  }
};
function hasOtherListenersForSignals(event) {
  return process.listeners(event).length > 1;
}
function hasOtherListenersForEvents(event) {
  return process.listeners(event).length > 1;
}
var GLOBAL_TRACE_PROVIDER = void 0;
function getGlobalTraceProvider() {
  if (!GLOBAL_TRACE_PROVIDER) {
    GLOBAL_TRACE_PROVIDER = new TraceProvider();
  }
  return GLOBAL_TRACE_PROVIDER;
}

// node_modules/@openai/agents-core/dist/tracing/index.mjs
function addTraceProcessor(processor) {
  getGlobalTraceProvider().registerProcessor(processor);
}

// node_modules/@openai/agents-core/dist/index.mjs
addTraceProcessor(defaultProcessor());

// node_modules/@openai/agents-realtime/dist/utils.mjs
function base64ToArrayBuffer(base64) {
  const binaryString = atob(base64);
  const len = binaryString.length;
  const bytes = new Uint8Array(len);
  for (let i = 0; i < len; i++) {
    bytes[i] = binaryString.charCodeAt(i);
  }
  return bytes.buffer;
}
function arrayBufferToBase64(arrayBuffer) {
  const binaryString = String.fromCharCode(...new Uint8Array(arrayBuffer));
  return btoa(binaryString);
}
function getLastTextFromAudioOutputMessage(item) {
  if (typeof item === "undefined" || item === null || typeof item !== "object" || !("type" in item) || typeof item.type !== "string" || !item.type) {
    return void 0;
  }
  if (item.type !== "message") {
    return void 0;
  }
  if (!("content" in item) || !Array.isArray(item.content) || item.content.length < 1) {
    return void 0;
  }
  const lastContentItem = item.content[item.content.length - 1];
  if (!("type" in lastContentItem) || typeof lastContentItem.type !== "string") {
    return void 0;
  }
  if (lastContentItem.type === "output_text") {
    return typeof lastContentItem.text === "string" ? lastContentItem.text : void 0;
  }
  if (lastContentItem.type === "output_audio") {
    return typeof lastContentItem.transcript === "string" ? lastContentItem.transcript : void 0;
  }
  return void 0;
}
function diffRealtimeHistory(oldHistory, newHistory) {
  const removals = oldHistory.filter((item) => !newHistory.some((newItem) => newItem.itemId === item.itemId));
  const additions = newHistory.filter((item) => !oldHistory.some((oldItem) => oldItem.itemId === item.itemId));
  const updates = newHistory.filter((item) => oldHistory.some((oldItem) => oldItem.itemId === item.itemId && JSON.stringify(oldItem) !== JSON.stringify(item)));
  return {
    removals,
    additions,
    updates
  };
}
function hasWebRTCSupport() {
  if (typeof window === "undefined") {
    return false;
  }
  return typeof window["RTCPeerConnection"] !== "undefined";
}
function removeAudioFromContent(item) {
  if (item.role === "system") {
    return item;
  }
  if (item.role === "assistant") {
    return {
      ...item,
      content: item.content.map((entry) => {
        if (entry.type === "output_audio") {
          return {
            ...entry,
            audio: null
          };
        }
        return entry;
      })
    };
  }
  if (item.role === "user") {
    return {
      ...item,
      content: item.content.map((entry) => {
        if (entry.type === "input_audio") {
          return {
            ...entry,
            audio: null
          };
        }
        return entry;
      })
    };
  }
  return item;
}
function updateRealtimeHistory(history, event, shouldIncludeAudioData) {
  if (event.type === "conversation.item.input_audio_transcription.completed") {
    return history.map((item) => {
      if (item.itemId === event.item_id && item.type === "message" && "role" in item && item.role === "user") {
        const updatedContent = item.content.map((entry) => {
          if (entry.type === "input_audio") {
            return {
              ...entry,
              transcript: event.transcript
            };
          }
          return entry;
        });
        return {
          ...item,
          content: updatedContent,
          status: "completed"
        };
      }
      return item;
    });
  }
  const newEvent = !shouldIncludeAudioData && event.type === "message" ? removeAudioFromContent(event) : event;
  const existingIndex = history.findIndex((item) => item.itemId === event.itemId);
  if (existingIndex !== -1) {
    return history.map((item, idx) => {
      if (idx === existingIndex) {
        return newEvent;
      }
      if (!shouldIncludeAudioData && item.type === "message") {
        return removeAudioFromContent(item);
      }
      return item;
    });
  } else if (event.previousItemId) {
    const prevIndex = history.findIndex((item) => item.itemId === event.previousItemId);
    if (prevIndex !== -1) {
      return [
        ...history.slice(0, prevIndex + 1),
        newEvent,
        ...history.slice(prevIndex + 1)
      ];
    } else {
      return [...history, newEvent];
    }
  } else {
    return [...history, newEvent];
  }
}
var HEADERS = {
  "User-Agent": `Agents/JavaScript ${metadata_default.version}`,
  "X-OpenAI-Agents-SDK": `openai-agents-sdk.${metadata_default.version}`
};
var WEBSOCKET_META = `openai-agents-sdk.${metadata_default.version}`;
function realtimeApprovalItemToApprovalItem(agent, item) {
  const { name, arguments: args, ...rest } = item;
  return new RunToolApprovalItem({
    type: "hosted_tool_call",
    name,
    arguments: JSON.stringify(args),
    status: "in_progress",
    providerData: {
      ...rest
    }
  }, agent);
}
function approvalItemToRealtimeApprovalItem(item) {
  const { name, arguments: args, providerData } = item.rawItem;
  const { itemId, serverLabel, ...rest } = providerData ?? {};
  if (!itemId || !serverLabel) {
    throw new Error("Invalid approval item for Realtime MCP approval request");
  }
  return {
    type: "mcp_approval_request",
    itemId,
    serverLabel,
    ...rest,
    name,
    arguments: args ? JSON.parse(args) : {},
    approved: null
  };
}

// node_modules/@openai/agents-realtime/dist/realtimeAgent.mjs
var RealtimeAgent = class extends Agent {
  /**
   * The voice intended to be used by the agent. If another agent already spoke during the
   * RealtimeSession, changing the voice during a handoff will fail.
   */
  voice;
  constructor(config) {
    super(config);
    this.voice = config.voice;
  }
};

// node_modules/@openai/agents-realtime/dist/guardrail.mjs
function getRealtimeGuardrailSettings(settings) {
  return {
    debounceTextLength: settings.debounceTextLength ?? 100
  };
}
function defineRealtimeOutputGuardrail({ policyHint: policyHintInput, ...options }) {
  const baseGuardrail = defineOutputGuardrail(options);
  const policyHint = policyHintInput ?? baseGuardrail.name;
  return {
    ...baseGuardrail,
    policyHint,
    run: async (args) => {
      const result = await baseGuardrail.run(args);
      return {
        ...result,
        guardrail: { ...result.guardrail, policyHint }
      };
    }
  };
}
function getRealtimeGuardrailFeedbackMessage(result) {
  return `
⚠️ Your last answer was blocked. 
Failed Guardrail Reason: ${result.guardrail.policyHint}. 
Failure Details: ${JSON.stringify(result.output.outputInfo ?? {})}. 
Please respond again following policy. Apologize for not being able to answer the question (while avoiding the specific reason) and divert discussion back to an approved topic immediately and not invite more discussion.
`.trim();
}

// node_modules/@openai/agents-realtime/dist/clientMessages.mjs
function isDefined(key, object) {
  return key in object && typeof object[key] !== "undefined";
}
function isDeprecatedConfig(config) {
  return isDefined("modalities", config) || isDefined("inputAudioFormat", config) || isDefined("outputAudioFormat", config) || isDefined("inputAudioTranscription", config) || isDefined("turnDetection", config) || isDefined("inputAudioNoiseReduction", config) || isDefined("speed", config);
}
function toNewSessionConfig(config) {
  if (!isDeprecatedConfig(config)) {
    const inputConfig = config.audio?.input ? {
      format: normalizeAudioFormat(config.audio.input.format),
      noiseReduction: config.audio.input.noiseReduction ?? null,
      transcription: config.audio.input.transcription,
      turnDetection: config.audio.input.turnDetection
    } : void 0;
    const requestedOutputVoice = config.audio?.output?.voice ?? config.voice;
    const outputConfig = config.audio?.output || typeof requestedOutputVoice !== "undefined" ? {
      format: normalizeAudioFormat(config.audio?.output?.format),
      voice: requestedOutputVoice,
      speed: config.audio?.output?.speed
    } : void 0;
    return {
      model: config.model,
      instructions: config.instructions,
      toolChoice: config.toolChoice,
      tools: config.tools,
      tracing: config.tracing,
      providerData: config.providerData,
      prompt: config.prompt,
      outputModalities: config.outputModalities,
      audio: inputConfig || outputConfig ? {
        input: inputConfig,
        output: outputConfig
      } : void 0
    };
  }
  return {
    model: config.model,
    instructions: config.instructions,
    toolChoice: config.toolChoice,
    tools: config.tools,
    tracing: config.tracing,
    providerData: config.providerData,
    prompt: config.prompt,
    outputModalities: config.modalities,
    audio: {
      input: {
        format: normalizeAudioFormat(config.inputAudioFormat),
        noiseReduction: config.inputAudioNoiseReduction ?? null,
        transcription: config.inputAudioTranscription,
        turnDetection: config.turnDetection
      },
      output: {
        format: normalizeAudioFormat(config.outputAudioFormat),
        voice: config.voice,
        speed: config.speed
      }
    }
  };
}
function normalizeAudioFormat(format) {
  if (!format)
    return void 0;
  if (typeof format === "object")
    return format;
  const f = String(format);
  if (f === "pcm16")
    return { type: "audio/pcm", rate: 24e3 };
  if (f === "g711_ulaw")
    return { type: "audio/pcmu" };
  if (f === "g711_alaw")
    return { type: "audio/pcma" };
  return { type: "audio/pcm", rate: 24e3 };
}

// node_modules/@openai/agents-realtime/dist/items.mjs
var baseItemSchema = external_exports.object({
  itemId: external_exports.string()
});
var realtimeMessageItemSchema = external_exports.discriminatedUnion("role", [
  external_exports.object({
    itemId: external_exports.string(),
    previousItemId: external_exports.string().nullable().optional(),
    type: external_exports.literal("message"),
    role: external_exports.literal("system"),
    content: external_exports.array(external_exports.object({ type: external_exports.literal("input_text"), text: external_exports.string() }))
  }),
  external_exports.object({
    itemId: external_exports.string(),
    previousItemId: external_exports.string().nullable().optional(),
    type: external_exports.literal("message"),
    role: external_exports.literal("user"),
    status: external_exports.enum(["in_progress", "completed"]),
    content: external_exports.array(external_exports.object({ type: external_exports.literal("input_text"), text: external_exports.string() }).or(external_exports.object({
      type: external_exports.literal("input_audio"),
      audio: external_exports.string().nullable().optional(),
      transcript: external_exports.string().nullable()
    })))
  }),
  external_exports.object({
    itemId: external_exports.string(),
    previousItemId: external_exports.string().nullable().optional(),
    type: external_exports.literal("message"),
    role: external_exports.literal("assistant"),
    status: external_exports.enum(["in_progress", "completed", "incomplete"]),
    content: external_exports.array(external_exports.object({ type: external_exports.literal("output_text"), text: external_exports.string() }).or(external_exports.object({
      type: external_exports.literal("output_audio"),
      audio: external_exports.string().nullable().optional(),
      transcript: external_exports.string().nullable().optional()
    })))
  })
]);
var realtimeToolCallItem = external_exports.object({
  itemId: external_exports.string(),
  previousItemId: external_exports.string().nullable().optional(),
  type: external_exports.literal("function_call"),
  status: external_exports.enum(["in_progress", "completed", "incomplete"]),
  arguments: external_exports.string(),
  name: external_exports.string(),
  output: external_exports.string().nullable()
});
var realtimeMcpCallItem = external_exports.object({
  itemId: external_exports.string(),
  previousItemId: external_exports.string().nullable().optional(),
  type: external_exports.enum(["mcp_call", "mcp_tool_call"]),
  status: external_exports.enum(["in_progress", "completed", "incomplete"]),
  arguments: external_exports.string(),
  name: external_exports.string(),
  output: external_exports.string().nullable()
});
var realtimeMcpCallApprovalRequestItem = external_exports.object({
  itemId: external_exports.string(),
  type: external_exports.literal("mcp_approval_request"),
  serverLabel: external_exports.string(),
  name: external_exports.string(),
  arguments: external_exports.record(external_exports.string(), external_exports.any()),
  approved: external_exports.boolean().optional().nullable()
});

// node_modules/@openai/agents-realtime/dist/logger.mjs
var logger2 = getLogger("openai-agents:realtime");
var logger_default2 = logger2;

// node_modules/@openai/agents-realtime/dist/openaiRealtimeEvents.mjs
var realtimeResponse = external_exports.object({
  id: external_exports.string().optional().nullable(),
  conversation_id: external_exports.string().optional().nullable(),
  max_output_tokens: external_exports.number().or(external_exports.literal("inf")).optional().nullable(),
  metadata: external_exports.record(external_exports.string(), external_exports.any()).optional().nullable(),
  // GA rename: modalities -> output_modalities
  output_modalities: external_exports.array(external_exports.string()).optional().nullable(),
  object: external_exports.literal("realtime.response").optional().nullable(),
  output: external_exports.array(external_exports.any()).optional().nullable(),
  // GA grouping: audio.output.{format,voice}
  audio: external_exports.object({
    output: external_exports.object({
      format: external_exports.any().optional().nullable(),
      voice: external_exports.string().optional().nullable()
    }).optional().nullable()
  }).optional().nullable(),
  status: external_exports.enum(["completed", "incomplete", "failed", "cancelled", "in_progress"]).optional().nullable(),
  status_details: external_exports.record(external_exports.string(), external_exports.any()).optional().nullable(),
  usage: external_exports.object({
    input_tokens: external_exports.number().optional(),
    input_token_details: external_exports.record(external_exports.string(), external_exports.any()).optional().nullable(),
    output_tokens: external_exports.number().optional(),
    output_token_details: external_exports.record(external_exports.string(), external_exports.any()).optional().nullable()
  }).optional().nullable()
});
var conversationItemContentSchema = external_exports.object({
  id: external_exports.string().optional(),
  audio: external_exports.string().nullable().optional(),
  text: external_exports.string().nullable().optional(),
  transcript: external_exports.string().nullable().optional(),
  type: external_exports.union([
    external_exports.literal("input_text"),
    external_exports.literal("input_audio"),
    external_exports.literal("item_reference"),
    external_exports.literal("output_text"),
    external_exports.literal("output_audio")
  ])
});
var conversationItemSchema = external_exports.object({
  id: external_exports.string().optional(),
  arguments: external_exports.string().optional(),
  call_id: external_exports.string().optional(),
  content: external_exports.array(conversationItemContentSchema).optional(),
  name: external_exports.string().optional(),
  output: external_exports.string().nullable().optional(),
  role: external_exports.enum(["user", "assistant", "system"]).optional(),
  status: external_exports.enum(["completed", "incomplete", "in_progress"]).optional(),
  type: external_exports.enum([
    "message",
    "function_call",
    "function_call_output",
    "mcp_list_tools",
    "mcp_tool_call",
    "mcp_call",
    "mcp_approval_request",
    "mcp_approval_response"
  ]).optional(),
  approval_request_id: external_exports.string().nullable().optional(),
  approve: external_exports.boolean().nullable().optional(),
  reason: external_exports.string().nullable().optional(),
  server_label: external_exports.string().optional(),
  error: external_exports.any().nullable().optional(),
  tools: external_exports.array(external_exports.object({
    name: external_exports.string(),
    description: external_exports.string(),
    input_schema: external_exports.record(external_exports.any()).optional()
  }).passthrough()).optional()
}).passthrough();
var conversationCreatedEventSchema = external_exports.object({
  type: external_exports.literal("conversation.created"),
  event_id: external_exports.string(),
  conversation: external_exports.object({
    id: external_exports.string().optional(),
    object: external_exports.literal("realtime.conversation").optional()
  })
});
var conversationItemAddedEventSchema = external_exports.object({
  type: external_exports.literal("conversation.item.added"),
  event_id: external_exports.string(),
  item: conversationItemSchema,
  previous_item_id: external_exports.string().nullable().optional()
});
var conversationItemDoneEventSchema = external_exports.object({
  type: external_exports.literal("conversation.item.done"),
  event_id: external_exports.string(),
  item: conversationItemSchema,
  previous_item_id: external_exports.string().nullable().optional()
});
var conversationItemDeletedEventSchema = external_exports.object({
  type: external_exports.literal("conversation.item.deleted"),
  event_id: external_exports.string(),
  item_id: external_exports.string()
});
var conversationItemInputAudioTranscriptionCompletedEventSchema = external_exports.object({
  type: external_exports.literal("conversation.item.input_audio_transcription.completed"),
  event_id: external_exports.string(),
  item_id: external_exports.string(),
  content_index: external_exports.number(),
  transcript: external_exports.string(),
  logprobs: external_exports.array(external_exports.any()).nullable().optional()
});
var conversationItemInputAudioTranscriptionDeltaEventSchema = external_exports.object({
  type: external_exports.literal("conversation.item.input_audio_transcription.delta"),
  event_id: external_exports.string(),
  item_id: external_exports.string(),
  content_index: external_exports.number().optional(),
  delta: external_exports.string().optional(),
  logprobs: external_exports.array(external_exports.any()).nullable().optional()
});
var conversationItemInputAudioTranscriptionFailedEventSchema = external_exports.object({
  type: external_exports.literal("conversation.item.input_audio_transcription.failed"),
  event_id: external_exports.string(),
  item_id: external_exports.string(),
  content_index: external_exports.number(),
  error: external_exports.object({
    code: external_exports.string().optional(),
    message: external_exports.string().optional(),
    param: external_exports.string().optional(),
    type: external_exports.string().optional()
  })
});
var conversationItemRetrievedEventSchema = external_exports.object({
  type: external_exports.literal("conversation.item.retrieved"),
  event_id: external_exports.string(),
  item: conversationItemSchema
});
var conversationItemTruncatedEventSchema = external_exports.object({
  type: external_exports.literal("conversation.item.truncated"),
  event_id: external_exports.string(),
  item_id: external_exports.string(),
  audio_end_ms: external_exports.number(),
  content_index: external_exports.number()
});
var conversationItemCreateEventSchema = external_exports.object({
  type: external_exports.literal("conversation.item.create"),
  item: conversationItemSchema,
  event_id: external_exports.string().optional(),
  previous_item_id: external_exports.string().nullable().optional()
});
var conversationItemDeleteEventSchema = external_exports.object({
  type: external_exports.literal("conversation.item.delete"),
  item_id: external_exports.string(),
  event_id: external_exports.string().optional()
});
var conversationItemRetrieveEventSchema = external_exports.object({
  type: external_exports.literal("conversation.item.retrieve"),
  item_id: external_exports.string(),
  event_id: external_exports.string().optional()
});
var conversationItemTruncateEventSchema = external_exports.object({
  type: external_exports.literal("conversation.item.truncate"),
  item_id: external_exports.string(),
  audio_end_ms: external_exports.number(),
  content_index: external_exports.number(),
  event_id: external_exports.string().optional()
});
var errorEventSchema = external_exports.object({
  type: external_exports.literal("error"),
  event_id: external_exports.string().optional(),
  error: external_exports.any().optional()
});
var inputAudioBufferClearedEventSchema = external_exports.object({
  type: external_exports.literal("input_audio_buffer.cleared"),
  event_id: external_exports.string()
});
var inputAudioBufferAppendEventSchema = external_exports.object({
  type: external_exports.literal("input_audio_buffer.append"),
  audio: external_exports.string(),
  event_id: external_exports.string().optional()
});
var inputAudioBufferClearEventSchema = external_exports.object({
  type: external_exports.literal("input_audio_buffer.clear"),
  event_id: external_exports.string().optional()
});
var inputAudioBufferCommitEventSchema = external_exports.object({
  type: external_exports.literal("input_audio_buffer.commit"),
  event_id: external_exports.string().optional()
});
var inputAudioBufferCommittedEventSchema = external_exports.object({
  type: external_exports.literal("input_audio_buffer.committed"),
  event_id: external_exports.string(),
  item_id: external_exports.string(),
  previous_item_id: external_exports.string().nullable().optional()
});
var inputAudioBufferSpeechStartedEventSchema = external_exports.object({
  type: external_exports.literal("input_audio_buffer.speech_started"),
  event_id: external_exports.string(),
  item_id: external_exports.string(),
  audio_start_ms: external_exports.number()
});
var inputAudioBufferSpeechStoppedEventSchema = external_exports.object({
  type: external_exports.literal("input_audio_buffer.speech_stopped"),
  event_id: external_exports.string(),
  item_id: external_exports.string(),
  audio_end_ms: external_exports.number()
});
var outputAudioBufferStartedEventSchema = external_exports.object({
  type: external_exports.literal("output_audio_buffer.started"),
  event_id: external_exports.string()
}).passthrough();
var outputAudioBufferStoppedEventSchema = external_exports.object({
  type: external_exports.literal("output_audio_buffer.stopped"),
  event_id: external_exports.string()
}).passthrough();
var outputAudioBufferClearedEventSchema = external_exports.object({
  type: external_exports.literal("output_audio_buffer.cleared"),
  event_id: external_exports.string()
});
var rateLimitsUpdatedEventSchema = external_exports.object({
  type: external_exports.literal("rate_limits.updated"),
  event_id: external_exports.string(),
  rate_limits: external_exports.array(external_exports.object({
    limit: external_exports.number().optional(),
    name: external_exports.enum(["requests", "tokens"]).optional(),
    remaining: external_exports.number().optional(),
    reset_seconds: external_exports.number().optional()
  }))
});
var responseAudioDeltaEventSchema = external_exports.object({
  type: external_exports.literal("response.output_audio.delta"),
  event_id: external_exports.string(),
  item_id: external_exports.string(),
  content_index: external_exports.number(),
  delta: external_exports.string(),
  output_index: external_exports.number(),
  response_id: external_exports.string()
});
var responseAudioDoneEventSchema = external_exports.object({
  type: external_exports.literal("response.output_audio.done"),
  event_id: external_exports.string(),
  item_id: external_exports.string(),
  content_index: external_exports.number(),
  output_index: external_exports.number(),
  response_id: external_exports.string()
});
var responseAudioTranscriptDeltaEventSchema = external_exports.object({
  type: external_exports.literal("response.output_audio_transcript.delta"),
  event_id: external_exports.string(),
  item_id: external_exports.string(),
  content_index: external_exports.number(),
  delta: external_exports.string(),
  output_index: external_exports.number(),
  response_id: external_exports.string()
});
var responseAudioTranscriptDoneEventSchema = external_exports.object({
  //  GA may introduce response.output_audio_transcript.done
  type: external_exports.literal("response.output_audio_transcript.done"),
  event_id: external_exports.string(),
  item_id: external_exports.string(),
  content_index: external_exports.number(),
  transcript: external_exports.string(),
  output_index: external_exports.number(),
  response_id: external_exports.string()
});
var responseContentPartAddedEventSchema = external_exports.object({
  type: external_exports.literal("response.content_part.added"),
  event_id: external_exports.string(),
  item_id: external_exports.string(),
  content_index: external_exports.number(),
  output_index: external_exports.number(),
  response_id: external_exports.string(),
  part: external_exports.object({
    audio: external_exports.string().optional(),
    text: external_exports.string().optional(),
    transcript: external_exports.string().optional(),
    type: external_exports.enum(["text", "audio"]).optional()
  })
});
var responseContentPartDoneEventSchema = external_exports.object({
  type: external_exports.literal("response.content_part.done"),
  event_id: external_exports.string(),
  item_id: external_exports.string(),
  content_index: external_exports.number(),
  output_index: external_exports.number(),
  response_id: external_exports.string(),
  part: external_exports.object({
    audio: external_exports.string().optional(),
    text: external_exports.string().optional(),
    transcript: external_exports.string().optional(),
    type: external_exports.enum(["text", "audio"]).optional()
  })
});
var responseCreatedEventSchema = external_exports.object({
  type: external_exports.literal("response.created"),
  event_id: external_exports.string(),
  response: realtimeResponse
});
var responseDoneEventSchema = external_exports.object({
  type: external_exports.literal("response.done"),
  event_id: external_exports.string(),
  response: realtimeResponse
});
var responseFunctionCallArgumentsDeltaEventSchema = external_exports.object({
  type: external_exports.literal("response.function_call_arguments.delta"),
  event_id: external_exports.string(),
  item_id: external_exports.string(),
  call_id: external_exports.string(),
  delta: external_exports.string(),
  output_index: external_exports.number(),
  response_id: external_exports.string()
});
var responseFunctionCallArgumentsDoneEventSchema = external_exports.object({
  type: external_exports.literal("response.function_call_arguments.done"),
  event_id: external_exports.string(),
  item_id: external_exports.string(),
  call_id: external_exports.string(),
  arguments: external_exports.string(),
  output_index: external_exports.number(),
  response_id: external_exports.string()
});
var responseOutputItemAddedEventSchema = external_exports.object({
  type: external_exports.literal("response.output_item.added"),
  event_id: external_exports.string(),
  item: conversationItemSchema,
  output_index: external_exports.number(),
  response_id: external_exports.string()
});
var responseOutputItemDoneEventSchema = external_exports.object({
  type: external_exports.literal("response.output_item.done"),
  event_id: external_exports.string(),
  item: conversationItemSchema,
  output_index: external_exports.number(),
  response_id: external_exports.string()
});
var responseTextDeltaEventSchema = external_exports.object({
  type: external_exports.literal("response.output_text.delta"),
  event_id: external_exports.string(),
  item_id: external_exports.string(),
  content_index: external_exports.number(),
  delta: external_exports.string(),
  output_index: external_exports.number(),
  response_id: external_exports.string()
});
var responseTextDoneEventSchema = external_exports.object({
  // No rename specified for done; keep response.text.done
  type: external_exports.literal("response.output_text.done"),
  event_id: external_exports.string(),
  item_id: external_exports.string(),
  content_index: external_exports.number(),
  text: external_exports.string(),
  output_index: external_exports.number(),
  response_id: external_exports.string()
});
var sessionCreatedEventSchema = external_exports.object({
  type: external_exports.literal("session.created"),
  event_id: external_exports.string(),
  session: external_exports.any()
});
var sessionUpdatedEventSchema = external_exports.object({
  type: external_exports.literal("session.updated"),
  event_id: external_exports.string(),
  session: external_exports.any()
});
var responseCancelEventSchema = external_exports.object({
  type: external_exports.literal("response.cancel"),
  event_id: external_exports.string().optional(),
  response_id: external_exports.string().optional()
});
var responseCreateEventSchema = external_exports.object({
  type: external_exports.literal("response.create"),
  event_id: external_exports.string().optional(),
  response: external_exports.any().optional()
});
var sessionUpdateEventSchema = external_exports.object({
  type: external_exports.literal("session.update"),
  event_id: external_exports.string().optional(),
  session: external_exports.any()
});
var mcpListToolsInProgressEventSchema = external_exports.object({
  type: external_exports.literal("mcp_list_tools.in_progress"),
  event_id: external_exports.string().optional(),
  item_id: external_exports.string().optional()
});
var mcpListToolsCompletedEventSchema = external_exports.object({
  type: external_exports.literal("mcp_list_tools.completed"),
  event_id: external_exports.string().optional(),
  item_id: external_exports.string().optional()
});
var responseMcpCallArgumentsDeltaEventSchema = external_exports.object({
  type: external_exports.literal("response.mcp_call_arguments.delta"),
  event_id: external_exports.string(),
  response_id: external_exports.string(),
  item_id: external_exports.string(),
  output_index: external_exports.number(),
  delta: external_exports.string(),
  obfuscation: external_exports.string()
});
var responseMcpCallArgumentsDoneEventSchema = external_exports.object({
  type: external_exports.literal("response.mcp_call_arguments.done"),
  event_id: external_exports.string(),
  response_id: external_exports.string(),
  item_id: external_exports.string(),
  output_index: external_exports.number(),
  arguments: external_exports.string()
});
var responseMcpCallInProgressEventSchema = external_exports.object({
  type: external_exports.literal("response.mcp_call.in_progress"),
  event_id: external_exports.string(),
  output_index: external_exports.number(),
  item_id: external_exports.string()
});
var responseMcpCallCompletedEventSchema = external_exports.object({
  type: external_exports.literal("response.mcp_call.completed"),
  event_id: external_exports.string(),
  output_index: external_exports.number(),
  item_id: external_exports.string()
});
var mcpListToolsFailedEventSchema = external_exports.object({
  type: external_exports.literal("mcp_list_tools.failed"),
  event_id: external_exports.string().optional(),
  item_id: external_exports.string().optional()
});
var genericEventSchema = external_exports.object({
  type: external_exports.string(),
  event_id: external_exports.string().optional().nullable()
}).passthrough();
var realtimeServerEventSchema = external_exports.discriminatedUnion("type", [
  conversationCreatedEventSchema,
  conversationItemAddedEventSchema,
  conversationItemDoneEventSchema,
  conversationItemDeletedEventSchema,
  conversationItemInputAudioTranscriptionCompletedEventSchema,
  conversationItemInputAudioTranscriptionDeltaEventSchema,
  conversationItemInputAudioTranscriptionFailedEventSchema,
  conversationItemRetrievedEventSchema,
  conversationItemTruncatedEventSchema,
  errorEventSchema,
  inputAudioBufferClearedEventSchema,
  inputAudioBufferCommittedEventSchema,
  inputAudioBufferSpeechStartedEventSchema,
  inputAudioBufferSpeechStoppedEventSchema,
  outputAudioBufferStartedEventSchema,
  outputAudioBufferStoppedEventSchema,
  outputAudioBufferClearedEventSchema,
  rateLimitsUpdatedEventSchema,
  responseAudioDeltaEventSchema,
  responseAudioDoneEventSchema,
  responseAudioTranscriptDeltaEventSchema,
  responseAudioTranscriptDoneEventSchema,
  responseContentPartAddedEventSchema,
  responseContentPartDoneEventSchema,
  responseCreatedEventSchema,
  responseDoneEventSchema,
  responseFunctionCallArgumentsDeltaEventSchema,
  responseFunctionCallArgumentsDoneEventSchema,
  responseOutputItemAddedEventSchema,
  responseOutputItemDoneEventSchema,
  responseTextDeltaEventSchema,
  responseTextDoneEventSchema,
  sessionCreatedEventSchema,
  sessionUpdatedEventSchema,
  mcpListToolsInProgressEventSchema,
  mcpListToolsCompletedEventSchema,
  mcpListToolsFailedEventSchema,
  responseMcpCallArgumentsDeltaEventSchema,
  responseMcpCallArgumentsDoneEventSchema,
  responseMcpCallInProgressEventSchema,
  responseMcpCallCompletedEventSchema
]);
var realtimeClientEventSchema = external_exports.discriminatedUnion("type", [
  conversationItemCreateEventSchema,
  conversationItemDeleteEventSchema,
  conversationItemRetrieveEventSchema,
  conversationItemTruncateEventSchema,
  inputAudioBufferAppendEventSchema,
  inputAudioBufferClearEventSchema,
  inputAudioBufferCommitEventSchema,
  responseCancelEventSchema,
  responseCreateEventSchema,
  sessionUpdateEventSchema
]);
function parseRealtimeEvent(event) {
  const raw = JSON.parse(event.data.toString());
  const parsed = realtimeServerEventSchema.safeParse(raw);
  if (!parsed.success) {
    const genericParsed = genericEventSchema.safeParse(raw);
    if (genericParsed.success) {
      return { data: genericParsed.data, isGeneric: true };
    }
    return { data: null, isGeneric: true };
  }
  return { data: parsed.data, isGeneric: false };
}

// node_modules/@openai/agents-realtime/dist/openaiRealtimeBase.mjs
var DEFAULT_OPENAI_REALTIME_MODEL = "gpt-realtime";
var DEFAULT_OPENAI_REALTIME_SESSION_CONFIG = {
  outputModalities: ["audio"],
  audio: {
    input: {
      format: { type: "audio/pcm", rate: 24e3 },
      transcription: { model: "gpt-4o-mini-transcribe" },
      turnDetection: { type: "semantic_vad" },
      noiseReduction: null
    },
    output: {
      format: { type: "audio/pcm", rate: 24e3 },
      speed: 1
    }
  }
};
var OpenAIRealtimeBase = class _OpenAIRealtimeBase extends EventEmitterDelegate {
  #model;
  #apiKey;
  #tracingConfig = null;
  #rawSessionConfig = null;
  eventEmitter = new BrowserEventEmitter();
  constructor(options = {}) {
    super();
    this.#model = options.model ?? DEFAULT_OPENAI_REALTIME_MODEL;
    this.#apiKey = options.apiKey;
  }
  /**
   * The current model that is being used by the transport layer.
   */
  get currentModel() {
    return this.#model;
  }
  /**
   * The current model that is being used by the transport layer.
   * **Note**: The model cannot be changed mid conversation.
   */
  set currentModel(model) {
    this.#model = model;
  }
  get _rawSessionConfig() {
    return this.#rawSessionConfig ?? null;
  }
  async _getApiKey(options) {
    const apiKey = options.apiKey ?? this.#apiKey;
    if (typeof apiKey === "function") {
      return await apiKey();
    }
    return apiKey;
  }
  _onMessage(event) {
    const { data: parsed, isGeneric } = parseRealtimeEvent(event);
    if (parsed === null) {
      return;
    }
    this.emit("*", parsed);
    if (isGeneric) {
      return;
    }
    if (parsed.type === "error") {
      this.emit("error", { type: "error", error: parsed });
    } else {
      this.emit(parsed.type, parsed);
    }
    if (parsed.type === "response.created") {
      this.emit("turn_started", {
        type: "response_started",
        providerData: {
          ...parsed
        }
      });
      return;
    }
    if (parsed.type === "session.updated") {
      this.#rawSessionConfig = parsed.session;
    }
    if (parsed.type === "response.done") {
      const response = responseDoneEventSchema.safeParse(parsed);
      if (!response.success) {
        logger_default2.error("Error parsing response done event", response.error);
        return;
      }
      const inputTokens = response.data.response.usage?.input_tokens ?? 0;
      const outputTokens = response.data.response.usage?.output_tokens ?? 0;
      const totalTokens = inputTokens + outputTokens;
      const usage = new Usage({
        inputTokens,
        inputTokensDetails: response.data.response.usage?.input_token_details ?? {},
        outputTokens,
        outputTokensDetails: response.data.response.usage?.output_token_details ?? {},
        totalTokens
      });
      this.emit("usage_update", usage);
      this.emit("turn_done", {
        type: "response_done",
        response: {
          id: response.data.response.id ?? "",
          output: response.data.response.output ?? [],
          usage: {
            inputTokens,
            inputTokensDetails: response.data.response.usage?.input_token_details ?? {},
            outputTokens,
            outputTokensDetails: response.data.response.usage?.output_token_details ?? {},
            totalTokens
          }
        }
      });
      return;
    }
    if (parsed.type === "response.output_audio.done") {
      this.emit("audio_done");
      return;
    }
    if (parsed.type === "conversation.item.deleted") {
      this.emit("item_deleted", {
        itemId: parsed.item_id
      });
      return;
    }
    if (parsed.type === "conversation.item.input_audio_transcription.completed" || parsed.type === "conversation.item.truncated") {
      this.sendEvent({
        type: "conversation.item.retrieve",
        item_id: parsed.item_id
      });
      return;
    }
    if (parsed.type === "conversation.item.input_audio_transcription.delta" || parsed.type === "response.output_text.delta" || parsed.type === "response.output_audio_transcript.delta" || parsed.type === "response.function_call_arguments.delta") {
      if (parsed.type === "response.output_audio_transcript.delta") {
        this.emit("audio_transcript_delta", {
          type: "transcript_delta",
          delta: parsed.delta,
          itemId: parsed.item_id,
          responseId: parsed.response_id
        });
      }
      return;
    }
    if (parsed.type === "conversation.item.added" || parsed.type === "conversation.item.done" || parsed.type === "conversation.item.retrieved") {
      if (parsed.item.type === "mcp_list_tools" && parsed.type === "conversation.item.done") {
        const serverLabel = parsed.item.server_label ?? "";
        const tools = parsed.item.tools ?? [];
        try {
          this.emit("mcp_tools_listed", {
            serverLabel,
            tools
          });
        } catch (err) {
          logger_default2.error("Error emitting mcp_tools_listed", err, parsed.item);
        }
        return;
      }
      if (parsed.item.type === "message") {
        const previousItemId = parsed.type === "conversation.item.added" || parsed.type === "conversation.item.done" ? parsed.previous_item_id : null;
        const item = realtimeMessageItemSchema.parse({
          itemId: parsed.item.id,
          previousItemId,
          type: parsed.item.type,
          role: parsed.item.role,
          content: parsed.item.content,
          status: parsed.item.status
        });
        this.emit("item_update", item);
        return;
      }
      if (parsed.item.type === "mcp_approval_request" && parsed.type === "conversation.item.done") {
        const item = parsed.item;
        const mcpApprovalRequest = realtimeMcpCallApprovalRequestItem.parse({
          itemId: item.id,
          type: item.type,
          serverLabel: item.server_label,
          name: item.name,
          arguments: JSON.parse(item.arguments || "{}"),
          approved: item.approved
        });
        this.emit("item_update", mcpApprovalRequest);
        this.emit("mcp_approval_request", mcpApprovalRequest);
        return;
      }
      if (parsed.item.type === "mcp_tool_call" || parsed.item.type === "mcp_call") {
        const status = parsed.type === "conversation.item.done" ? "completed" : "in_progress";
        const mcpCall = realtimeMcpCallItem.parse({
          itemId: parsed.item.id,
          type: parsed.item.type,
          status,
          arguments: parsed.item.arguments,
          name: parsed.item.name,
          output: parsed.item.output
        });
        this.emit("item_update", mcpCall);
        if (parsed.type === "conversation.item.done") {
          this.emit("mcp_tool_call_completed", mcpCall);
        }
        return;
      }
    }
    if (parsed.type === "response.mcp_call.in_progress") {
      const item = parsed;
      this.sendEvent({
        type: "conversation.item.retrieve",
        item_id: item.item_id
      });
      return;
    }
    if (parsed.type === "mcp_list_tools.in_progress") {
      const item = parsed;
      if (item.item_id) {
        this.sendEvent({
          type: "conversation.item.retrieve",
          item_id: item.item_id
        });
      }
      return;
    }
    if (parsed.type === "response.output_item.done" || parsed.type === "response.output_item.added") {
      const item = parsed.item;
      if (item.type === "function_call" && item.status === "completed") {
        const toolCall = realtimeToolCallItem.parse({
          itemId: item.id,
          type: item.type,
          status: "in_progress",
          // we set it to in_progress for the UI as it will only be completed with the output
          arguments: item.arguments,
          name: item.name,
          output: null
        });
        this.emit("item_update", toolCall);
        this.emit("function_call", {
          id: item.id,
          type: "function_call",
          callId: item.call_id ?? "",
          arguments: item.arguments ?? "",
          name: item.name ?? ""
        });
        return;
      }
      if (item.type === "mcp_tool_call" || item.type === "mcp_call") {
        const mcpCall = realtimeMcpCallItem.parse({
          itemId: item.id,
          type: item.type,
          status: parsed.type === "response.output_item.done" ? "completed" : "in_progress",
          // we set it to in_progress for the UI as it will only be completed with the output
          arguments: item.arguments,
          name: item.name,
          output: item.output
        });
        this.emit("item_update", mcpCall);
        return;
      }
      if (item.type === "message") {
        const realtimeItem = realtimeMessageItemSchema.parse({
          itemId: parsed.item.id,
          type: parsed.item.type,
          role: parsed.item.role,
          content: parsed.item.content,
          status: parsed.type === "response.output_item.done" ? item.status ?? "completed" : item.status ?? "in_progress"
        });
        this.emit("item_update", realtimeItem);
        return;
      }
    }
  }
  _onError(error) {
    this.emit("error", {
      type: "error",
      error
    });
  }
  _onOpen() {
    this.emit("connected");
  }
  _onClose() {
    this.emit("disconnected");
  }
  /**
   * Send a message to the Realtime API. This will create a new item in the conversation and
   * trigger a response.
   *
   * @param message - The message to send.
   * @param otherEventData - Additional event data to send.
   */
  sendMessage(message, otherEventData, { triggerResponse = true } = {}) {
    const content = typeof message === "string" ? [
      {
        type: "input_text",
        text: message
      }
    ] : message.content.map((content2) => {
      if (content2.type === "input_image") {
        return {
          type: "input_image",
          image_url: content2.image,
          ...content2.providerData ?? {}
        };
      }
      return content2;
    });
    this.sendEvent({
      type: "conversation.item.create",
      item: {
        type: "message",
        role: "user",
        content
      },
      ...otherEventData
    });
    if (triggerResponse) {
      this.sendEvent({
        type: "response.create"
      });
    }
  }
  addImage(image, { triggerResponse = true } = {}) {
    this.sendMessage({
      type: "message",
      role: "user",
      content: [{ type: "input_image", image }]
    }, {}, { triggerResponse });
  }
  _getMergedSessionConfig(config) {
    const newConfig = toNewSessionConfig(config);
    const sessionData = {
      type: "realtime",
      instructions: newConfig.instructions,
      model: newConfig.model ?? this.#model,
      output_modalities: newConfig.outputModalities ?? DEFAULT_OPENAI_REALTIME_SESSION_CONFIG.outputModalities,
      audio: {
        input: {
          format: newConfig.audio?.input?.format ?? DEFAULT_OPENAI_REALTIME_SESSION_CONFIG.audio?.input?.format,
          noise_reduction: newConfig.audio?.input?.noiseReduction ?? DEFAULT_OPENAI_REALTIME_SESSION_CONFIG.audio?.input?.noiseReduction,
          transcription: newConfig.audio?.input?.transcription ?? DEFAULT_OPENAI_REALTIME_SESSION_CONFIG.audio?.input?.transcription,
          turn_detection: _OpenAIRealtimeBase.buildTurnDetectionConfig(newConfig.audio?.input?.turnDetection) ?? DEFAULT_OPENAI_REALTIME_SESSION_CONFIG.audio?.input?.turnDetection
        },
        output: {
          format: newConfig.audio?.output?.format ?? DEFAULT_OPENAI_REALTIME_SESSION_CONFIG.audio?.output?.format,
          voice: newConfig.audio?.output?.voice ?? DEFAULT_OPENAI_REALTIME_SESSION_CONFIG.audio?.output?.voice,
          speed: newConfig.audio?.output?.speed ?? DEFAULT_OPENAI_REALTIME_SESSION_CONFIG.audio?.output?.speed
        }
      },
      tool_choice: newConfig.toolChoice ?? DEFAULT_OPENAI_REALTIME_SESSION_CONFIG.toolChoice,
      // We don't set tracing here to make sure that we don't try to override it on every
      // session.update as it might lead to errors
      ...newConfig.providerData ?? {}
    };
    if (newConfig.prompt) {
      sessionData.prompt = {
        id: newConfig.prompt.promptId,
        version: newConfig.prompt.version,
        variables: newConfig.prompt.variables
      };
    }
    if (newConfig.tools && newConfig.tools.length > 0) {
      sessionData.tools = newConfig.tools.map((tool2) => ({
        ...tool2,
        strict: void 0
      }));
    }
    return sessionData;
  }
  static buildTurnDetectionConfig(c) {
    if (typeof c === "undefined") {
      return void 0;
    }
    const { type, createResponse, create_response, eagerness, interruptResponse, interrupt_response, prefixPaddingMs, prefix_padding_ms, silenceDurationMs, silence_duration_ms, threshold, idleTimeoutMs, idle_timeout_ms, ...rest } = c;
    const config = {
      type,
      create_response: createResponse ? createResponse : create_response,
      eagerness,
      interrupt_response: interruptResponse ? interruptResponse : interrupt_response,
      prefix_padding_ms: prefixPaddingMs ? prefixPaddingMs : prefix_padding_ms,
      silence_duration_ms: silenceDurationMs ? silenceDurationMs : silence_duration_ms,
      idle_timeout_ms: idleTimeoutMs ? idleTimeoutMs : idle_timeout_ms,
      threshold,
      ...rest
    };
    Object.keys(config).forEach((key) => {
      if (config[key] === void 0)
        delete config[key];
    });
    return Object.keys(config).length > 0 ? config : void 0;
  }
  /**
   * Sets the internal tracing config. This is used to track the tracing config that has been set
   * during the session.create event.
   */
  set _tracingConfig(tracingConfig) {
    this.#tracingConfig = tracingConfig;
  }
  /**
   * Sets the tracing config for the session. This will send the tracing config to the Realtime API.
   *
   * @param tracingConfig - The tracing config to set. We don't support 'auto' here as the SDK will always configure a Workflow Name unless it exists
   */
  _updateTracingConfig(tracingConfig) {
    if (typeof this.#tracingConfig === "undefined") {
      this.#tracingConfig = null;
    }
    if (tracingConfig === "auto") {
      this.sendEvent({
        type: "session.update",
        session: {
          type: "realtime",
          tracing: "auto"
        }
      });
      return;
    }
    if (this.#tracingConfig !== null && typeof this.#tracingConfig !== "string" && typeof tracingConfig !== "string") {
      logger_default2.warn("Tracing config is already set, skipping setting it again. This likely happens when you already set a tracing config on session creation.");
      return;
    }
    if (tracingConfig === null) {
      logger_default2.debug("Disabling tracing for this session. It cannot be turned on for this session from this point on.");
      this.sendEvent({
        type: "session.update",
        session: {
          type: "realtime",
          tracing: null
        }
      });
      return;
    }
    if (this.#tracingConfig === null || typeof this.#tracingConfig === "string") {
      this.sendEvent({
        type: "session.update",
        session: {
          type: "realtime",
          tracing: tracingConfig
        }
      });
      return;
    }
    if (tracingConfig?.group_id !== this.#tracingConfig?.group_id || tracingConfig?.metadata !== this.#tracingConfig?.metadata || tracingConfig?.workflow_name !== this.#tracingConfig?.workflow_name) {
      logger_default2.warn("Mismatch in tracing config. Ignoring the new tracing config. This likely happens when you already set a tracing config on session creation. Current tracing config: %s, new tracing config: %s", JSON.stringify(this.#tracingConfig), JSON.stringify(tracingConfig));
      return;
    }
    this.sendEvent({
      type: "session.update",
      session: {
        type: "realtime",
        tracing: tracingConfig
      }
    });
  }
  /**
   * Updates the session config. This will merge it with the current session config with the default
   * values and send it to the Realtime API.
   *
   * @param config - The session config to update.
   */
  updateSessionConfig(config) {
    const sessionData = this._getMergedSessionConfig(config);
    this.sendEvent({
      type: "session.update",
      session: sessionData
    });
  }
  /**
   * Send the output of a function call to the Realtime API.
   *
   * @param toolCall - The tool call to send the output for.
   * @param output - The output of the function call.
   * @param startResponse - Whether to start a new response after sending the output.
   */
  sendFunctionCallOutput(toolCall, output, startResponse = true) {
    this.sendEvent({
      type: "conversation.item.create",
      item: {
        type: "function_call_output",
        output,
        call_id: toolCall.callId
      }
    });
    try {
      const item = realtimeToolCallItem.parse({
        itemId: toolCall.id,
        previousItemId: toolCall.previousItemId,
        type: "function_call",
        status: "completed",
        arguments: toolCall.arguments,
        name: toolCall.name,
        output
      });
      this.emit("item_update", item);
    } catch (error) {
      logger_default2.error("Error parsing tool call item", error, toolCall);
    }
    if (startResponse) {
      this.sendEvent({
        type: "response.create"
      });
    }
  }
  /**
   * Send an audio buffer to the Realtime API. If `{ commit: true }` is passed, the audio buffer
   * will be committed and the model will start processing it. This is necessary if you have
   * disabled turn detection / voice activity detection (VAD).
   *
   * @param audio - The audio buffer to send.
   * @param options - The options for the audio buffer.
   */
  sendAudio(audio, { commit = false } = {}) {
    this.sendEvent({
      type: "input_audio_buffer.append",
      audio: arrayBufferToBase64(audio)
    });
    if (commit) {
      this.sendEvent({
        type: "input_audio_buffer.commit"
      });
    }
  }
  /**
   * Reset the history of the conversation. This will create a diff between the old and new history
   * and send the necessary events to the Realtime API to update the history.
   *
   * @param oldHistory - The old history of the conversation.
   * @param newHistory - The new history of the conversation.
   */
  resetHistory(oldHistory, newHistory) {
    const { removals, additions, updates } = diffRealtimeHistory(oldHistory, newHistory);
    const removalIds = new Set(removals.map((item) => item.itemId));
    for (const update of updates) {
      removalIds.add(update.itemId);
    }
    if (removalIds.size > 0) {
      for (const itemId of removalIds) {
        this.sendEvent({
          type: "conversation.item.delete",
          item_id: itemId
        });
      }
    }
    const additionsAndUpdates = [...additions, ...updates];
    for (const addition of additionsAndUpdates) {
      if (addition.type === "message") {
        const itemEntry = {
          type: "message",
          role: addition.role,
          content: addition.content,
          id: addition.itemId
        };
        if (addition.role !== "system" && addition.status) {
          itemEntry.status = addition.status;
        }
        this.sendEvent({
          type: "conversation.item.create",
          item: itemEntry
        });
      } else if (addition.type === "function_call") {
        logger_default2.warn("Function calls cannot be manually added or updated at the moment. Ignoring.");
      }
    }
  }
  sendMcpResponse(approvalRequest, approved) {
    this.sendEvent({
      type: "conversation.item.create",
      previous_item_id: approvalRequest.itemId,
      item: {
        type: "mcp_approval_response",
        approval_request_id: approvalRequest.itemId,
        approve: approved
      }
    });
  }
};

// node_modules/@openai/agents-realtime/dist/openaiRealtimeWebRtc.mjs
var OpenAIRealtimeWebRTC = class extends OpenAIRealtimeBase {
  options;
  #url;
  #state = {
    status: "disconnected",
    peerConnection: void 0,
    dataChannel: void 0,
    callId: void 0
  };
  #useInsecureApiKey;
  #ongoingResponse = false;
  #muted = false;
  constructor(options = {}) {
    if (typeof RTCPeerConnection === "undefined") {
      throw new Error("WebRTC is not supported in this environment");
    }
    super(options);
    this.options = options;
    this.#url = options.baseUrl ?? `https://api.openai.com/v1/realtime/calls`;
    this.#useInsecureApiKey = options.useInsecureApiKey ?? false;
  }
  /**
   * The current call ID of the WebRTC connection.
   */
  get callId() {
    return this.#state.callId;
  }
  /**
   * The current status of the WebRTC connection.
   */
  get status() {
    return this.#state.status;
  }
  /**
   * The current connection state of the WebRTC connection including the peer connection and data
   * channel.
   */
  get connectionState() {
    return this.#state;
  }
  /**
   * Whether the session is muted.
   */
  get muted() {
    return this.#muted;
  }
  /**
   * Connect to the Realtime API. This will establish the connection to the OpenAI Realtime API
   * via WebRTC.
   *
   * If you are using a browser, the transport layer will also automatically configure the
   * microphone and audio output to be used by the session.
   *
   * @param options - The options for the connection.
   */
  async connect(options) {
    if (this.#state.status === "connected") {
      return;
    }
    if (this.#state.status === "connecting") {
      logger_default2.warn("Realtime connection already in progress. Please await original promise");
    }
    const model = options.model ?? this.currentModel;
    this.currentModel = model;
    const baseUrl = options.url ?? this.#url;
    const apiKey = await this._getApiKey(options);
    const isClientKey = typeof apiKey === "string" && apiKey.startsWith("ek_");
    if (isBrowserEnvironment() && !this.#useInsecureApiKey && !isClientKey) {
      throw new UserError("Using the WebRTC connection in a browser environment requires an ephemeral client key. If you need to use a regular API key, use the WebSocket transport or set the `useInsecureApiKey` option to true.");
    }
    return new Promise(async (resolve, reject) => {
      try {
        const userSessionConfig = {
          ...options.initialSessionConfig || {},
          model: this.currentModel
        };
        const connectionUrl = new URL(baseUrl);
        let peerConnection = new RTCPeerConnection();
        const dataChannel = peerConnection.createDataChannel("oai-events");
        let callId = void 0;
        this.#state = {
          status: "connecting",
          peerConnection,
          dataChannel,
          callId
        };
        this.emit("connection_change", this.#state.status);
        dataChannel.addEventListener("open", () => {
          this.#state = {
            status: "connected",
            peerConnection,
            dataChannel,
            callId
          };
          this.updateSessionConfig(userSessionConfig);
          this.emit("connection_change", this.#state.status);
          this._onOpen();
          resolve();
        });
        dataChannel.addEventListener("error", (event) => {
          this.close();
          this._onError(event);
          reject(event);
        });
        dataChannel.addEventListener("message", (event) => {
          this._onMessage(event);
          const { data: parsed, isGeneric } = parseRealtimeEvent(event);
          if (!parsed || isGeneric) {
            return;
          }
          if (parsed.type === "response.created") {
            this.#ongoingResponse = true;
          } else if (parsed.type === "response.done") {
            this.#ongoingResponse = false;
          }
          if (parsed.type === "session.created") {
            this._tracingConfig = parsed.session.tracing;
            this._updateTracingConfig(userSessionConfig.tracing ?? "auto");
          }
        });
        const audioElement = this.options.audioElement ?? document.createElement("audio");
        audioElement.autoplay = true;
        peerConnection.ontrack = (event) => {
          audioElement.srcObject = event.streams[0];
        };
        const stream = this.options.mediaStream ?? await navigator.mediaDevices.getUserMedia({
          audio: true
        });
        peerConnection.addTrack(stream.getAudioTracks()[0]);
        if (this.options.changePeerConnection) {
          peerConnection = await this.options.changePeerConnection(peerConnection);
          this.#state = { ...this.#state, peerConnection };
        }
        const offer = await peerConnection.createOffer();
        await peerConnection.setLocalDescription(offer);
        if (!offer.sdp) {
          throw new Error("Failed to create offer");
        }
        const sdpResponse = await fetch(connectionUrl, {
          method: "POST",
          body: offer.sdp,
          headers: {
            "Content-Type": "application/sdp",
            Authorization: `Bearer ${apiKey}`,
            "X-OpenAI-Agents-SDK": HEADERS["X-OpenAI-Agents-SDK"]
          }
        });
        callId = sdpResponse.headers?.get("Location")?.split("/").pop();
        this.#state = { ...this.#state, callId };
        const answer = {
          type: "answer",
          sdp: await sdpResponse.text()
        };
        await peerConnection.setRemoteDescription(answer);
      } catch (error) {
        this.close();
        this._onError(error);
        reject(error);
      }
    });
  }
  /**
   * Send an event to the Realtime API. This will stringify the event and send it directly to the
   * API. This can be used if you want to take control over the connection and send events manually.
   *
   * @param event - The event to send.
   */
  sendEvent(event) {
    if (!this.#state.dataChannel || this.#state.dataChannel.readyState !== "open") {
      throw new Error("WebRTC data channel is not connected. Make sure you call `connect()` before sending events.");
    }
    this.#state.dataChannel.send(JSON.stringify(event));
  }
  /**
   * Mute or unmute the session.
   * @param muted - Whether to mute the session.
   */
  mute(muted) {
    this.#muted = muted;
    if (this.#state.peerConnection) {
      const peerConnection = this.#state.peerConnection;
      peerConnection.getSenders().forEach((sender) => {
        if (sender.track) {
          sender.track.enabled = !muted;
        }
      });
    }
  }
  /**
   * Close the connection to the Realtime API and disconnects the underlying WebRTC connection.
   */
  close() {
    if (this.#state.dataChannel) {
      this.#state.dataChannel.close();
    }
    if (this.#state.peerConnection) {
      const peerConnection = this.#state.peerConnection;
      peerConnection.getSenders().forEach((sender) => {
        sender.track?.stop();
      });
      peerConnection.close();
    }
    if (this.#state.status !== "disconnected") {
      this.#state = {
        status: "disconnected",
        peerConnection: void 0,
        dataChannel: void 0,
        callId: void 0
      };
      this.emit("connection_change", this.#state.status);
      this._onClose();
    }
  }
  /**
   * Interrupt the current response if one is ongoing and clear the audio buffer so that the agent
   * stops talking.
   */
  interrupt() {
    if (this.#ongoingResponse) {
      this.sendEvent({
        type: "response.cancel"
      });
      this.#ongoingResponse = false;
    }
    this.sendEvent({
      type: "output_audio_buffer.clear"
    });
  }
};

// node_modules/@openai/agents-realtime/dist/shims/shims-browser.mjs
var WebSocket = globalThis.WebSocket;
function isBrowserEnvironment2() {
  return true;
}
var useWebSocketProtocols = true;

// node_modules/@openai/agents-realtime/dist/openaiRealtimeWebsocket.mjs
var OpenAIRealtimeWebSocket = class extends OpenAIRealtimeBase {
  #apiKey;
  #url;
  #state = {
    status: "disconnected",
    websocket: void 0
  };
  #useInsecureApiKey;
  #currentItemId;
  #currentAudioContentIndex;
  /**
   * Timestamp maintained by the transport layer to aid with the calculation of the elapsed time
   * since the response started to compute the right interruption time.
   *
   * Mostly internal but might be used by extended transport layers for their interruption
   * calculation.
   */
  _firstAudioTimestamp;
  _audioLengthMs = 0;
  #ongoingResponse = false;
  #createWebSocket;
  #skipOpenEventListeners;
  constructor(options = {}) {
    super(options);
    this.#url = options.url;
    this.#useInsecureApiKey = options.useInsecureApiKey ?? false;
    this.#createWebSocket = options.createWebSocket;
    this.#skipOpenEventListeners = options.skipOpenEventListeners ?? false;
  }
  getCommonRequestHeaders() {
    return HEADERS;
  }
  /**
   * The current status of the WebSocket connection.
   */
  get status() {
    return this.#state.status;
  }
  /**
   * The current connection state of the WebSocket connection.
   */
  get connectionState() {
    return this.#state;
  }
  /**
   * Always returns `null` as the WebSocket transport layer does not handle muting. Instead,
   * this should be handled by the client by not triggering the `sendAudio` method.
   */
  get muted() {
    return null;
  }
  /**
   * The current item ID of the ongoing response.
   */
  get currentItemId() {
    return this.#currentItemId;
  }
  /**
   * Triggers the `audio` event that a client might listen to to receive the audio buffer.
   * Protected for you to be able to override and disable emitting this event in case your extended
   * transport layer handles audio internally.
   *
   * @param audioEvent - The audio event to emit.
   */
  _onAudio(audioEvent) {
    this.emit("audio", audioEvent);
  }
  async #setupWebSocket(resolve, reject, sessionConfig) {
    if (this.#state.websocket) {
      resolve();
      return;
    }
    if (!this.#apiKey) {
      throw new UserError("API key is not set. Please call `connect()` with an API key first.");
    }
    if (isBrowserEnvironment2() && !this.#apiKey.startsWith("ek_") && !this.#useInsecureApiKey) {
      throw new UserError("Using the WebSocket connection in a browser environment requires an ephemeral client key. If you have to use a regular API key, set the `useInsecureApiKey` option to true.");
    }
    let ws = null;
    if (this.#createWebSocket) {
      ws = await this.#createWebSocket({
        url: this.#url,
        apiKey: this.#apiKey
      });
    } else {
      const websocketArguments = useWebSocketProtocols ? [
        "realtime",
        // Auth
        "openai-insecure-api-key." + this.#apiKey,
        // Version header
        WEBSOCKET_META
      ] : {
        headers: {
          Authorization: `Bearer ${this.#apiKey}`,
          ...this.getCommonRequestHeaders()
        }
      };
      ws = new WebSocket(this.#url, websocketArguments);
    }
    this.#state = {
      status: "connecting",
      websocket: ws
    };
    this.emit("connection_change", this.#state.status);
    const onSocketOpenReady = () => {
      this.#state = {
        status: "connected",
        websocket: ws
      };
      this.emit("connection_change", this.#state.status);
      this._onOpen();
      resolve();
    };
    if (this.#skipOpenEventListeners === true) {
      onSocketOpenReady();
    } else {
      ws.addEventListener("open", onSocketOpenReady);
    }
    ws.addEventListener("error", (error) => {
      this._onError(error);
      this.#state = {
        status: "disconnected",
        websocket: void 0
      };
      this.emit("connection_change", this.#state.status);
      reject(error);
    });
    ws.addEventListener("message", (message) => {
      this._onMessage(message);
      const { data: parsed, isGeneric } = parseRealtimeEvent(message);
      if (!parsed || isGeneric) {
        return;
      }
      if (parsed.type === "response.output_audio.delta") {
        this.#currentAudioContentIndex = parsed.content_index;
        this.#currentItemId = parsed.item_id;
        if (this._firstAudioTimestamp === void 0) {
          this._firstAudioTimestamp = Date.now();
          this._audioLengthMs = 0;
        }
        const buff = base64ToArrayBuffer(parsed.delta);
        const fmt = this._rawSessionConfig?.audio?.output?.format;
        if (fmt && typeof fmt === "object") {
          const t = fmt.type;
          if (t === "audio/pcmu" || t === "audio/pcma") {
            this._audioLengthMs += buff.byteLength / 8;
          } else if (t === "audio/pcm") {
            const rate = fmt.rate ?? 24e3;
            this._audioLengthMs += buff.byteLength / 2 / rate * 1e3;
          } else {
            this._audioLengthMs += buff.byteLength / 24 / 2;
          }
        } else if (typeof fmt === "string") {
          if (fmt.startsWith("g711_")) {
            this._audioLengthMs += buff.byteLength / 8;
          } else {
            this._audioLengthMs += buff.byteLength / 24 / 2;
          }
        } else {
          this._audioLengthMs += buff.byteLength / 24 / 2;
        }
        const audioEvent = {
          type: "audio",
          data: buff,
          responseId: parsed.response_id
        };
        this._onAudio(audioEvent);
      } else if (parsed.type === "input_audio_buffer.speech_started") {
        const automaticResponseCancellationEnabled = this._rawSessionConfig?.audio?.input?.turn_detection?.interrupt_response ?? false;
        this.interrupt(!automaticResponseCancellationEnabled);
      } else if (parsed.type === "response.created") {
        this.#ongoingResponse = true;
      } else if (parsed.type === "response.done") {
        this.#ongoingResponse = false;
      } else if (parsed.type === "session.created") {
        this._tracingConfig = parsed.session.tracing;
        this._updateTracingConfig(sessionConfig.tracing ?? "auto");
      }
    });
    ws.addEventListener("close", () => {
      this.#state = {
        status: "disconnected",
        websocket: void 0
      };
      this.emit("connection_change", this.#state.status);
      this._onClose();
    });
  }
  async connect(options) {
    const model = options.model ?? this.currentModel;
    this.currentModel = model;
    this.#apiKey = await this._getApiKey(options);
    const url = options.url ?? this.#url ?? `wss://api.openai.com/v1/realtime?model=${this.currentModel}`;
    this.#url = url;
    const sessionConfig = {
      ...options.initialSessionConfig || {},
      model: this.currentModel
    };
    await new Promise((resolve, reject) => {
      this.#setupWebSocket(resolve, reject, sessionConfig).catch(reject);
    });
    await this.updateSessionConfig(sessionConfig);
  }
  /**
   * Send an event to the Realtime API. This will stringify the event and send it directly to the
   * API. This can be used if you want to take control over the connection and send events manually.
   *
   * @param event - The event to send.
   */
  sendEvent(event) {
    if (!this.#state.websocket) {
      throw new Error("WebSocket is not connected. Make sure you call `connect()` before sending events.");
    }
    this.#state.websocket.send(JSON.stringify(event));
  }
  /**
   * Close the WebSocket connection.
   *
   * This will also reset any internal connection tracking used for interruption handling.
   */
  close() {
    this.#state.websocket?.close();
    this.#currentItemId = void 0;
    this._firstAudioTimestamp = void 0;
    this._audioLengthMs = 0;
    this.#currentAudioContentIndex = void 0;
  }
  /**
   * Will throw an error as the WebSocket transport layer does not support muting.
   */
  mute(_muted) {
    throw new Error("Mute is not supported for the WebSocket transport. You have to mute the audio input yourself.");
  }
  /**
   * Send an audio buffer to the Realtime API. This is used for your client to send audio to the
   * model to respond.
   *
   * @param audio - The audio buffer to send.
   * @param options - The options for the audio buffer.
   */
  sendAudio(audio, options = {}) {
    if (this.#state.status === "connected") {
      super.sendAudio(audio, options);
    }
  }
  /**
   * Send a cancel response event to the Realtime API. This is used to cancel an ongoing
   *  response that the model is currently generating.
   */
  _cancelResponse() {
    if (this.#ongoingResponse) {
      this.sendEvent({
        type: "response.cancel"
      });
      this.#ongoingResponse = false;
    }
  }
  /**
   * Do NOT call this method directly. Call `interrupt()` instead for proper interruption handling.
   *
   * This method is used to send the right events to the API to inform the model that the user has
   * interrupted the response. It might be overridden/extended by an extended transport layer. See
   * the `TwilioRealtimeTransportLayer` for an example.
   *
   * @param elapsedTime - The elapsed time since the response started.
   */
  _interrupt(elapsedTime, cancelOngoingResponse = true) {
    if (elapsedTime < 0) {
      return;
    }
    if (cancelOngoingResponse) {
      this._cancelResponse();
    }
    const length = this._audioLengthMs ?? Number.POSITIVE_INFINITY;
    const audio_end_ms = Math.max(0, Math.floor(Math.min(elapsedTime, length)));
    this.emit("audio_interrupted");
    this.sendEvent({
      type: "conversation.item.truncate",
      item_id: this.#currentItemId,
      content_index: this.#currentAudioContentIndex,
      audio_end_ms
    });
  }
  /**
   * Interrupt the ongoing response. This method is triggered automatically by the client when
   * voice activity detection (VAD) is enabled (default) as well as when an output guardrail got
   * triggered.
   *
   * You can also call this method directly if you want to interrupt the conversation for example
   * based on an event in the client.
   */
  interrupt(cancelOngoingResponse = true) {
    if (!this.#currentItemId || typeof this._firstAudioTimestamp !== "number") {
      return;
    }
    const elapsedTime = Date.now() - this._firstAudioTimestamp;
    if (elapsedTime >= 0) {
      this._interrupt(elapsedTime, cancelOngoingResponse);
    }
    this.#currentItemId = void 0;
    this._firstAudioTimestamp = void 0;
    this._audioLengthMs = 0;
    this.#currentAudioContentIndex = void 0;
  }
};

// node_modules/@openai/agents-realtime/dist/tool.mjs
var BACKGROUND_RESULT_SYMBOL = Symbol("backgroundResult");
function backgroundResult(content) {
  return {
    [BACKGROUND_RESULT_SYMBOL]: true,
    content
  };
}
function isBackgroundResult(result) {
  return typeof result === "object" && result !== null && BACKGROUND_RESULT_SYMBOL in result;
}
function isValidRealtimeTool(tool2) {
  return tool2.type === "function" || tool2.type === "hosted_tool" && tool2.name === "hosted_mcp";
}
function toRealtimeToolDefinition(tool2) {
  if (tool2.type === "function") {
    return tool2;
  }
  if (tool2.type === "hosted_tool" && tool2.name === "hosted_mcp") {
    const serverUrl = tool2.providerData.server_url && tool2.providerData.server_url.length > 0 ? tool2.providerData.server_url : void 0;
    return {
      type: "mcp",
      server_label: tool2.providerData.server_label,
      server_url: serverUrl,
      headers: tool2.providerData.headers,
      allowed_tools: tool2.providerData.allowed_tools,
      require_approval: tool2.providerData.require_approval
    };
  }
  throw new UserError(`Invalid tool type: ${tool2}`);
}

// node_modules/@openai/agents-realtime/dist/realtimeSession.mjs
function cloneDefaultSessionConfig() {
  return JSON.parse(JSON.stringify(DEFAULT_OPENAI_REALTIME_SESSION_CONFIG));
}
var RealtimeSession = class extends BrowserEventEmitter {
  initialAgent;
  options;
  #transport;
  #currentAgent;
  #currentTools;
  #context;
  #outputGuardrails = [];
  #outputGuardrailSettings;
  #transcribedTextDeltas = {};
  #history = [];
  #shouldIncludeAudioData;
  #interruptedByGuardrail = {};
  #audioStarted = false;
  // Tracks all MCP tools fetched per server label (from mcp_list_tools results).
  #allMcpToolsByServer = /* @__PURE__ */ new Map();
  // Tracks currently available MCP tools based on the active agent's configured server_labels.
  #availableMcpTools = [];
  // Keeps track of the last full session config we sent (camelCase keys) so that
  // subsequent updates (e.g. during agent handoffs) preserve properties that are
  // not explicitly recalculated here (such as inputAudioFormat, outputAudioFormat,
  // modalities, speed, toolChoice, turnDetection, etc.). Without this, updating
  // the agent would drop audio format overrides (e.g. g711_ulaw) and revert to
  // transport defaults causing issues for integrations like Twilio.
  #lastSessionConfig = cloneDefaultSessionConfig();
  #automaticallyTriggerResponseForMcpToolCalls = true;
  constructor(initialAgent, options = {}) {
    super();
    this.initialAgent = initialAgent;
    this.options = options;
    if (typeof options.transport === "undefined" && hasWebRTCSupport() || options.transport === "webrtc") {
      this.#transport = new OpenAIRealtimeWebRTC();
    } else if (options.transport === "websocket" || typeof options.transport === "undefined") {
      this.#transport = new OpenAIRealtimeWebSocket();
    } else {
      this.#transport = options.transport;
    }
    this.#currentAgent = initialAgent;
    this.#context = new RunContext({
      ...options.context ?? {},
      history: this.#history
    });
    this.#outputGuardrails = (options.outputGuardrails ?? []).map(defineRealtimeOutputGuardrail);
    this.#outputGuardrailSettings = getRealtimeGuardrailSettings(options.outputGuardrailSettings ?? {});
    this.#shouldIncludeAudioData = options.historyStoreAudio ?? false;
    this.#automaticallyTriggerResponseForMcpToolCalls = options.automaticallyTriggerResponseForMcpToolCalls ?? true;
  }
  /**
   * The transport layer used by the session.
   */
  get transport() {
    return this.#transport;
  }
  /**
   * The current agent in the session.
   */
  get currentAgent() {
    return this.#currentAgent;
  }
  /**
   * The current usage of the session.
   */
  get usage() {
    return this.#context.usage;
  }
  /**
   * The current context of the session.
   */
  get context() {
    return this.#context;
  }
  /**
   * Whether the session is muted. Might be `null` if the underlying transport layer does not
   * support muting.
   */
  get muted() {
    return this.#transport.muted;
  }
  /**
   * The history of the session.
   */
  get history() {
    return this.#history;
  }
  get availableMcpTools() {
    return this.#availableMcpTools;
  }
  async #setCurrentAgent(agent) {
    this.#currentAgent = agent;
    const handoffs = await this.#currentAgent.getEnabledHandoffs(this.#context);
    const handoffTools = handoffs.map((handoff2) => handoff2.getHandoffAsFunctionTool());
    const allTools = (await this.#currentAgent.getAllTools(this.#context)).filter(isValidRealtimeTool).map(toRealtimeToolDefinition);
    const hasToolsDefined = typeof this.#currentAgent.tools !== "undefined" || typeof this.#currentAgent.mcpServers !== "undefined";
    const hasHandoffsDefined = handoffs.length > 0;
    this.#currentTools = hasToolsDefined || hasHandoffsDefined ? [...allTools, ...handoffTools] : void 0;
    this.#updateAvailableMcpTools();
  }
  async #getSessionConfig(additionalConfig = {}) {
    const instructions = await this.#currentAgent.getSystemPrompt(this.#context);
    const tracingConfig = this.options.tracingDisabled ? null : this.options.workflowName ? {
      workflow_name: this.options.workflowName
    } : "auto";
    if (tracingConfig !== null && tracingConfig !== "auto") {
      if (this.options.groupId) {
        tracingConfig.group_id = this.options.groupId;
      }
      if (this.options.traceMetadata) {
        tracingConfig.metadata = this.options.traceMetadata;
      }
    } else if (this.options.groupId || this.options.traceMetadata) {
      logger_default2.warn("In order to set traceMetadata or a groupId you need to specify a workflowName.");
    }
    const base = {
      ...this.#lastSessionConfig ?? {},
      ...this.options.config ?? {},
      ...additionalConfig ?? {}
    };
    const fullConfig = {
      ...base,
      instructions,
      voice: this.#currentAgent.voice,
      model: this.options.model,
      tools: this.#currentTools,
      tracing: tracingConfig,
      prompt: typeof this.#currentAgent.prompt === "function" ? await this.#currentAgent.prompt(this.#context, this.#currentAgent) : this.#currentAgent.prompt
    };
    this.#lastSessionConfig = fullConfig;
    return fullConfig;
  }
  async updateAgent(newAgent) {
    this.#currentAgent.emit("agent_handoff", this.#context, newAgent);
    this.emit("agent_handoff", this.#context, this.#currentAgent, newAgent);
    await this.#setCurrentAgent(newAgent);
    await this.#transport.updateSessionConfig(await this.#getSessionConfig());
    return newAgent;
  }
  async #handleHandoff(toolCall, handoff2) {
    const newAgent = await handoff2.onInvokeHandoff(this.#context, toolCall.arguments);
    this.#currentAgent.emit("agent_handoff", this.#context, newAgent);
    this.emit("agent_handoff", this.#context, this.#currentAgent, newAgent);
    await this.#setCurrentAgent(newAgent);
    await this.#transport.updateSessionConfig(await this.#getSessionConfig());
    const output = getTransferMessage(newAgent);
    this.#transport.sendFunctionCallOutput(toolCall, output, true);
    return newAgent;
  }
  async #handleFunctionToolCall(toolCall, tool2) {
    this.#context.context.history = JSON.parse(JSON.stringify(this.#history));
    let parsedArgs = toolCall.arguments;
    if (tool2.parameters) {
      if (isZodObject(tool2.parameters)) {
        parsedArgs = tool2.parameters.parse(parsedArgs);
      } else {
        parsedArgs = JSON.parse(parsedArgs);
      }
    }
    const needsApproval = await tool2.needsApproval(this.#context, parsedArgs, toolCall.callId);
    if (needsApproval) {
      const approval = this.context.isToolApproved({
        toolName: tool2.name,
        callId: toolCall.callId
      });
      if (approval === false) {
        this.emit("agent_tool_start", this.#context, this.#currentAgent, tool2, {
          toolCall
        });
        this.#currentAgent.emit("agent_tool_start", this.#context, tool2, {
          toolCall
        });
        const result2 = "Tool execution was not approved.";
        this.#transport.sendFunctionCallOutput(toolCall, result2, true);
        this.emit("agent_tool_end", this.#context, this.#currentAgent, tool2, result2, { toolCall });
        this.#currentAgent.emit("agent_tool_end", this.#context, tool2, result2, {
          toolCall
        });
        return;
      } else if (typeof approval === "undefined") {
        this.emit("tool_approval_requested", this.#context, this.#currentAgent, {
          type: "function_approval",
          tool: tool2,
          approvalItem: new RunToolApprovalItem(toolCall, this.#currentAgent)
        });
        return;
      }
    }
    this.emit("agent_tool_start", this.#context, this.#currentAgent, tool2, {
      toolCall
    });
    this.#currentAgent.emit("agent_tool_start", this.#context, tool2, {
      toolCall
    });
    this.#context.context.history = JSON.parse(JSON.stringify(this.#history));
    const result = await tool2.invoke(this.#context, toolCall.arguments, {
      toolCall
    });
    let stringResult;
    if (isBackgroundResult(result)) {
      stringResult = toSmartString(result.content);
      this.#transport.sendFunctionCallOutput(toolCall, stringResult, false);
    } else {
      stringResult = toSmartString(result);
      this.#transport.sendFunctionCallOutput(toolCall, stringResult, true);
    }
    this.emit("agent_tool_end", this.#context, this.#currentAgent, tool2, stringResult, { toolCall });
    this.#currentAgent.emit("agent_tool_end", this.#context, tool2, stringResult, { toolCall });
  }
  async #handleFunctionCall(toolCall) {
    const enabledHandoffs = await this.#currentAgent.getEnabledHandoffs(this.#context);
    const handoffMap = new Map(enabledHandoffs.map((handoff2) => [handoff2.toolName, handoff2]));
    const allTools = await this.#currentAgent.getAllTools(this.#context);
    const functionToolMap = new Map(allTools.map((tool2) => [tool2.name, tool2]));
    const possibleHandoff = handoffMap.get(toolCall.name);
    if (possibleHandoff) {
      await this.#handleHandoff(toolCall, possibleHandoff);
    } else {
      const functionTool = functionToolMap.get(toolCall.name);
      if (functionTool && functionTool.type === "function") {
        await this.#handleFunctionToolCall(toolCall, functionTool);
      } else {
        throw new ModelBehaviorError(`Tool ${toolCall.name} not found`);
      }
    }
  }
  async #runOutputGuardrails(output, responseId, itemId) {
    if (this.#outputGuardrails.length === 0) {
      return;
    }
    const guardrailArgs = {
      agent: this.#currentAgent,
      agentOutput: output,
      context: this.#context
    };
    const results = await Promise.all(this.#outputGuardrails.map((guardrail) => guardrail.run(guardrailArgs)));
    const firstTripwireTriggered = results.find((result) => result.output.tripwireTriggered);
    if (firstTripwireTriggered) {
      if (this.#interruptedByGuardrail[responseId]) {
        return;
      }
      this.#interruptedByGuardrail[responseId] = true;
      const error = new OutputGuardrailTripwireTriggered(`Output guardrail triggered: ${JSON.stringify(firstTripwireTriggered.output.outputInfo)}`, firstTripwireTriggered);
      this.emit("guardrail_tripped", this.#context, this.#currentAgent, error, {
        itemId
      });
      this.interrupt();
      const feedbackText = getRealtimeGuardrailFeedbackMessage(firstTripwireTriggered);
      this.sendMessage(feedbackText);
      return;
    }
  }
  #setEventListeners() {
    this.#transport.on("*", (event) => {
      this.emit("transport_event", event);
      if (event.type === "conversation.item.input_audio_transcription.completed") {
        try {
          const completedEvent = event;
          this.#history = updateRealtimeHistory(this.#history, completedEvent, this.#shouldIncludeAudioData);
          this.#context.context.history = this.#history;
          this.emit("history_updated", this.#history);
        } catch (err) {
          this.emit("error", {
            type: "error",
            error: err
          });
        }
      }
    });
    this.#transport.on("mcp_tools_listed", ({ serverLabel, tools }) => {
      try {
        this.#allMcpToolsByServer.set(serverLabel, tools ?? []);
        this.#updateAvailableMcpTools();
      } catch (err) {
        this.emit("error", { type: "error", error: err });
      }
    });
    this.#transport.on("audio", (event) => {
      if (!this.#audioStarted) {
        this.#audioStarted = true;
        this.emit("audio_start", this.#context, this.#currentAgent);
      }
      this.emit("audio", event);
    });
    this.#transport.on("turn_started", () => {
      this.#audioStarted = false;
      this.emit("agent_start", this.#context, this.#currentAgent);
      this.#currentAgent.emit("agent_start", this.#context, this.#currentAgent);
    });
    this.#transport.on("turn_done", (event) => {
      const item = event.response.output[event.response.output.length - 1];
      const textOutput = getLastTextFromAudioOutputMessage(item) ?? "";
      const itemId = item?.id ?? "";
      this.emit("agent_end", this.#context, this.#currentAgent, textOutput);
      this.#currentAgent.emit("agent_end", this.#context, textOutput);
      this.#runOutputGuardrails(textOutput, event.response.id, itemId);
    });
    this.#transport.on("audio_done", () => {
      if (this.#audioStarted) {
        this.#audioStarted = false;
      }
      this.emit("audio_stopped", this.#context, this.#currentAgent);
    });
    let lastRunIndex = 0;
    let lastItemId;
    this.#transport.on("audio_transcript_delta", (event) => {
      try {
        const delta = event.delta;
        const itemId = event.itemId;
        const responseId = event.responseId;
        if (lastItemId !== itemId) {
          lastItemId = itemId;
          lastRunIndex = 0;
        }
        const currentText = this.#transcribedTextDeltas[itemId] ?? "";
        const newText = currentText + delta;
        this.#transcribedTextDeltas[itemId] = newText;
        if (this.#outputGuardrailSettings.debounceTextLength < 0) {
          return;
        }
        const newRunIndex = Math.floor(newText.length / this.#outputGuardrailSettings.debounceTextLength);
        if (newRunIndex > lastRunIndex) {
          lastRunIndex = newRunIndex;
          this.#runOutputGuardrails(newText, responseId, itemId);
        }
      } catch (err) {
        this.emit("error", {
          type: "error",
          error: err
        });
      }
    });
    this.#transport.on("item_update", (event) => {
      try {
        const isNew = !this.#history.some((item) => item.itemId === event.itemId);
        this.#history = updateRealtimeHistory(this.#history, event, this.#shouldIncludeAudioData);
        this.#context.context.history = this.#history;
        if (isNew) {
          const addedItem = this.#history.find((item) => item.itemId === event.itemId);
          if (addedItem) {
            this.emit("history_added", addedItem);
          }
        }
        this.emit("history_updated", this.#history);
      } catch (err) {
        this.emit("error", {
          type: "error",
          error: err
        });
      }
    });
    this.#transport.on("item_deleted", (event) => {
      try {
        this.#history = this.#history.filter((item) => item.itemId !== event.itemId);
        this.#context.context.history = this.#history;
        this.emit("history_updated", this.#history);
      } catch (err) {
        this.emit("error", {
          type: "error",
          error: err
        });
      }
    });
    this.#transport.on("function_call", async (event) => {
      try {
        await this.#handleFunctionCall(event);
      } catch (error) {
        logger_default2.error("Error handling function call", error);
        this.emit("error", {
          type: "error",
          error
        });
      }
    });
    this.#transport.on("usage_update", (usage) => {
      this.#context.usage.add(usage);
    });
    this.#transport.on("audio_interrupted", () => {
      if (this.#audioStarted) {
        this.#audioStarted = false;
      }
      this.emit("audio_interrupted", this.#context, this.#currentAgent);
    });
    this.#transport.on("error", (error) => {
      this.emit("error", error);
    });
    this.#transport.on("mcp_tool_call_completed", (toolCall) => {
      this.emit("mcp_tool_call_completed", this.#context, this.#currentAgent, toolCall);
      if (this.#automaticallyTriggerResponseForMcpToolCalls) {
        this.#transport.sendEvent({
          type: "response.create"
        });
      }
    });
    this.#transport.on("mcp_approval_request", (approvalRequest) => {
      this.emit("tool_approval_requested", this.#context, this.#currentAgent, {
        type: "mcp_approval_request",
        approvalItem: realtimeApprovalItemToApprovalItem(this.#currentAgent, approvalRequest)
      });
    });
  }
  /**
   * Recomputes the currently available MCP tools based on the current agent's active
   * MCP server configurations and the cached per-server tool listings. Emits
   * `mcp_tools_changed` if the set changed.
   */
  #updateAvailableMcpTools() {
    const activeMcpConfigs = this.#currentTools?.filter((t) => t.type === "mcp");
    const allowedFromConfig = (cfg) => {
      const allowed = cfg.allowed_tools;
      if (!allowed)
        return void 0;
      if (Array.isArray(allowed))
        return allowed;
      if (allowed && Array.isArray(allowed.tool_names))
        return allowed.tool_names;
      return void 0;
    };
    const dedupByName = /* @__PURE__ */ new Map();
    for (const cfg of activeMcpConfigs) {
      const tools = this.#allMcpToolsByServer.get(cfg.server_label) ?? [];
      const allowed = allowedFromConfig(cfg);
      for (const tool2 of tools) {
        if (allowed && !allowed.includes(tool2.name))
          continue;
        if (!dedupByName.has(tool2.name)) {
          dedupByName.set(tool2.name, tool2);
        }
      }
    }
    const next = Array.from(dedupByName.values());
    const prev = this.#availableMcpTools;
    const changed = prev.length !== next.length || JSON.stringify(prev.map((t) => t.name).sort()) !== JSON.stringify(next.map((t) => t.name).sort());
    if (changed) {
      this.#availableMcpTools = next;
      this.emit("mcp_tools_changed", this.#availableMcpTools);
    }
  }
  /**
   * Connect to the session. This will establish the connection to the underlying transport layer
   * and start the session.
   *
   * After connecting, the session will also emit a `history_updated` event with an empty history.
   *
   * @param options - The options for the connection.
   */
  async connect(options) {
    await this.#setCurrentAgent(this.initialAgent);
    this.#setEventListeners();
    await this.#transport.connect({
      apiKey: options.apiKey ?? this.options.apiKey,
      model: this.options.model,
      url: options.url,
      initialSessionConfig: await this.#getSessionConfig(this.options.config)
    });
    this.#history = [];
    this.emit("history_updated", this.#history);
  }
  /**
   * Update the history of the session.
   * @param newHistory - The new history to set.
   */
  updateHistory(newHistory) {
    let updatedHistory;
    if (typeof newHistory === "function") {
      updatedHistory = newHistory(this.#history);
    } else {
      updatedHistory = newHistory;
    }
    this.#transport.resetHistory(this.#history, updatedHistory);
  }
  /**
   * Send a message to the session.
   * @param message - The message to send.
   * @param otherEventData - Additional event data to send.
   */
  sendMessage(message, otherEventData = {}) {
    this.#transport.sendMessage(message, otherEventData);
  }
  /**
   * Add image to the session
   * @param image - The image to add.
   */
  addImage(image, { triggerResponse = true } = {}) {
    this.#transport.addImage(image, { triggerResponse });
  }
  /**
   * Mute the session.
   * @param muted - Whether to mute the session.
   */
  mute(muted) {
    this.#transport.mute(muted);
  }
  /**
   * Disconnect from the session.
   */
  close() {
    this.#interruptedByGuardrail = {};
    this.#transport.close();
  }
  /**
   * Send audio to the session.
   * @param audio - The audio to send.
   * @param options - Additional options.
   * @param options.commit - Whether to finish the turn with this audio.
   */
  sendAudio(audio, options = {}) {
    this.#transport.sendAudio(audio, options);
  }
  /**
   * Interrupt the session artificially for example if you want to build a "stop talking"
   * button.
   */
  interrupt() {
    this.#transport.interrupt();
  }
  /**
   * Approve a tool call. This will also trigger the tool call to the agent.
   * @param approvalItem - The approval item to approve.
   * @param options - Additional options.
   * @param options.alwaysApprove - Whether to always approve the tool call.
   */
  async approve(approvalItem, options = { alwaysApprove: false }) {
    this.#context.approveTool(approvalItem, options);
    const tool2 = this.#currentAgent.tools.find((tool3) => tool3.name === approvalItem.rawItem.name);
    if (tool2 && tool2.type === "function" && approvalItem.rawItem.type === "function_call") {
      await this.#handleFunctionToolCall(approvalItem.rawItem, tool2);
    } else if (approvalItem.rawItem.type === "hosted_tool_call") {
      if (options.alwaysApprove) {
        logger_default2.warn("Always approving MCP tools is not supported. Use the allowed tools configuration instead.");
      }
      const mcpApprovalRequest = approvalItemToRealtimeApprovalItem(approvalItem);
      this.#transport.sendMcpResponse(mcpApprovalRequest, true);
    } else {
      throw new ModelBehaviorError(`Tool ${approvalItem.rawItem.name} not found`);
    }
  }
  /**
   * Reject a tool call. This will also trigger the tool call to the agent.
   * @param approvalItem - The approval item to reject.
   * @param options - Additional options.
   * @param options.alwaysReject - Whether to always reject the tool call.
   */
  async reject(approvalItem, options = { alwaysReject: false }) {
    this.#context.rejectTool(approvalItem, options);
    const tool2 = this.#currentAgent.tools.find((tool3) => tool3.name === approvalItem.rawItem.name);
    if (tool2 && tool2.type === "function" && approvalItem.rawItem.type === "function_call") {
      await this.#handleFunctionToolCall(approvalItem.rawItem, tool2);
    } else if (approvalItem.rawItem.type === "hosted_tool_call") {
      if (options.alwaysReject) {
        logger_default2.warn("Always rejecting MCP tools is not supported. Use the allowed tools configuration instead.");
      }
      const mcpApprovalRequest = approvalItemToRealtimeApprovalItem(approvalItem);
      this.#transport.sendMcpResponse(mcpApprovalRequest, false);
    } else {
      throw new ModelBehaviorError(`Tool ${approvalItem.rawItem.name} not found`);
    }
  }
};

// node_modules/@openai/agents-realtime/dist/index.mjs
var utils = {
  base64ToArrayBuffer,
  arrayBufferToBase64,
  getLastTextFromAudioOutputMessage
};
export {
  DEFAULT_OPENAI_REALTIME_MODEL,
  DEFAULT_OPENAI_REALTIME_SESSION_CONFIG,
  ModelBehaviorError,
  OpenAIRealtimeBase,
  OpenAIRealtimeWebRTC,
  OpenAIRealtimeWebSocket,
  OutputGuardrailTripwireTriggered,
  RealtimeAgent,
  RealtimeSession,
  UserError,
  backgroundResult,
  isBackgroundResult,
  tool,
  utils
};
//# sourceMappingURL=@openai_agents_realtime.js.map
